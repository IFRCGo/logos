%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: IFRC_logo_Italian_P485.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: SŽbastien
%%CreationDate: 2/27/13
%%BoundingBox: 0 0 774 71
%%HiResBoundingBox: 0 0 773.1988 70.4996
%%CropBox: 0 0 773.1988 70.4996
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 12 8%%BeginData: 3970 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FFC9CAC9CACACAC9CAC9CAC9FD08CAFFFFA87DA8FD10FFA8FD0BFF%A8FD13FFA8FD09FFA8FD07FFA8FFFFFFA8A8FD05FFA87DA8FD06FFA8FD06%FFA8FD09FFA1C9CACAA7CAC9CAA8FD04CACFC9CAA1CACAC3CAFF52A8A8A8%7DFFA87D7DFF7DFFA8A87DA8A87E7DA8A8A87DFF7E84A8A87DFFFF7D7DA8%7DA852FF7DA8A8A87DA8A8FF7DA8A87D7DA8A87DA8FF7DA8A87DA87DA8A8%A8FFFFA87D7DA87EA87D52FF7DA8FFFF2E7E53FF7DA8FFA87DA8A8A87EA8%52FF52A8FD08FFCACAFFFFFF93B0C3FD05FFA0B693C2C3FFC9FFA8527DA8%5227527D7D7D522752527E7D27A87D52FD047D527D7D7D27277DFFFD047D%527D7D2752FD067D5252FF52FD057D527D53A8287D7D7D2752FFFF52A87D%52277D7D7D532727FFFFA87DA87D7E7D7D7DA87D7D2752527D7D7D52FD08%FFA1CAFFFFFFB58CC3FD04FF9AB093CFFFFFCAC9CAA852FFA85252527DA8%FD0552FF5252527DA8A8527E7D527DA85252527DFF7D52A8A87D537D5253%52A853AF5259527D7D7DA85252FF5252A87D5253527D525252FFA87DA87D%527D527DFD0452A8FF7DFF52527DA8277E7D7D5252527D7D7D5252A8FD07%FFCACACFC3C993B0BCC9C3FFCAB08DFD05FFC9FFA8A8FFFF7D7DA8A87DA8%A87D7EA8FFFD047DA87DFF7D7DFD04A87D7DA8FFA8A8A8FFA884A87D7DFD%05A8FD057DA8A8A87DA8A8FFA87E7DA87DA87DA8FFFF7D7DA8A87DFD05A8%7DFFFFA87DA8A87D7DFF7D7DA8A97D7EA8847D847DFD08FFC9FF9AB08DB0%8DB08DB0A8C98DBCFD05FFC9CAFD6BFFCACFC38DB08DB08DB08DCFC3B0BC%FD05FFC3FD6CFFA1CACACAA1B58DBCA7CAFFCF8DB0A7FD04FFC9A8FFFFA8%7DFFFFFF7D7DA8FD04FF7D527DA8FD05FFA8FD06FF7D5252A8FFA8FD07FF%A8FD09FF7DA8FFFF7D7D7DFD04FF7D52FF7D7DFD06FFA8FD04FF7DA8FD09%FFA87D5252A8FFA8FD07FFA8FFCACAFFFFFF93B0C2FD04FFCA8DB0C3CFC9%FFC3FFFF7D527D7D527D7D7DA8527DFFFF52FFA8A852847D7DA87D52A852%7DFFFF52A87DA87D7DA87D52A8527DA87D7DFFFF7D52A8FFA8FD057D7E59%A87D52A8FF7D52FF7D52A852A8A87D7DA859A852847DA8A8A87D7D52FF52%7DFFFF52A852A87D7DA87D7DA852A8A8527DA1CFFFFFFFC293C9FD05FFCA%9ABC9ACAFFC9CAA87DFFFD0452537D597D52FFA87DFFFF7D7D53A8A8277D%FF525252A8FF52527D7D7DA85352527D52527D5252FFA827527DFF52FF7D%52527D527D7D7D527DFFA8527D527D525252A852FF59A87D52527D53FFFD%047D527D52FFFF527D7D53A8A852527D7D52527D5252CAC3CAC9CAC9CAC9%CAC9CAC9CACACAC9CACACAC3FFA8FD097D5259A8FF527D527D7EA8527D7D%7D527D537DA8FF7DFFA8FD057D287DFD0552FFAF7D52A8FFFD057D527D7D%7D527D7DFF7DA852A87D7D527D527E7D528453527D7D7D527D7DA9A85252%53A8FF52FFA87D597D7D7D277D5252527D52CACAA7CACACAA8CACACAA7CA%CACAA7CACACAA7CFFFFFA8A8A8FF7DFFA8FFA8A8A8FFFFFF7DA8A8FFFFA8%7DFFA8A8FFA8A8FD05FFA8A87DFFA8A8FFA8A8FFA8A8A8FFA8A8A8FFAFA8%A8FFA8A8A8FFA8A8A8FFFFFFA8FFFFFFFD0BA8AFA8A8A8FFA8FFA8A8A8FD%05FFA8A87DFFFD05A8FFA8A9%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Magenta Yellow Black
%%DocumentCustomColors: (PANTONE 485 CVC)
%%CMYKCustomColor: 0 1 0.9100 0 (PANTONE 485 CVC)
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                    
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="ï»¿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS6 (Macintosh)</xmp:CreatorTool>
         <xmp:CreateDate>2013-02-27T17:18:02+01:00</xmp:CreateDate>
         <xmp:ModifyDate>2013-02-27T17:18:02+01:00</xmp:ModifyDate>
         <xmp:MetadataDate>2013-02-27T17:18:02+01:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>24</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAGAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9FWFg1+15NNeXast3PGq&#xA;xzuihUcqoCqadMxoQ4rJJ5nq7DLl8PhAjH6R0YHr/wCYEWkfmJa+Tvq19P8AWZ7SD69+kZE4/Wyg&#xA;5el6bV4c+nPf2yNeqrl83f6Tsg5tFLU3AcIkeHwx/DfW+tdz0f8Aw/F/y3X3/STJ/XLfB85fN5r8&#xA;2f5sP9KHm99+YlvP5lfy95Us9T8xXsLFbiZL9oIEKmjH1CJBxU7cjQeFcovehxH4vS4uxzHB42ol&#xA;jwxPL0Wflt8mU+jrKaHd3l7Fe6ZfWyhkQ331qJunRl4k078kGMoyESfUK83VcWI5YxiYTif6HCfx&#xA;7igfzEudbPm7y3p2nR3tzDc2mpy3FlY3v1BnaFrQRu0nJK8PVbavfM10qRXP5qeZtH8yx6HDoUsu&#xA;k6dPYWWpz3EktxdLLewrM9Lgn0mMXqqoDE86GhpTCqlffmj5ptLHSPMtzbW01rf6Pd6nZaVZzOHY&#xA;u9qsEdxyqGK+uKuvQ8hTxVRGg/ml571PV7XRJ9Is7G/M8y3txci4iiW3hhjm5rE370OOTIVb2atM&#xA;VU9J/N/zJfQ3008em2dsth+k7C8aO9aJohc+hwCusMk5cMPTaNQGbYA4qjz5486WU1lHqtna22va&#xA;pBYRR2rSSraW8l5dXCqZV5P8axxDkFO7fDypviqw/mX5zl1G/wBHtLLTW1LSoNTku53eb6vI2nG1&#xA;ZTFxqwDreBWUn4WB3NKFVCWP5z+Zb7zNYW0Ggj9BT3VhYXNz+89RZr63jmLiQhYgIzMvwH4mX4hi&#xA;qe+ZPM+vaZ57urWw4XCPZaLHBZ3DssCyXuo3VvLL8IJDcFXen7IwKkGo/mL57sNYhuL1LIWumWeu&#xA;SanYWwlYXL6W0Dco2b4krHKvCvSr8q7UKrNI/Nv8wL64ttLm0S0tNVvL20t7eSf144PSurO5uGZl&#xA;b97WNrXYj4XHSnXFUePzT8z21rHqWoWmnR6ZOdaiik9SdWWTSHmVHloslI5PQIYKGYdRWvEKoeD8&#xA;0PPEukXsrWunR6rbXFtBZ2Ziuw9215AJYooYZGilV61qXoOA5EAVxVGWXnLzj/ia58uiOyXW57uO&#xA;OWSZ55LOH0tJtrqdYY+Qc1kmooBG1WO+Koa3/NzzRd6fe6hb6bZJb6Rb2dzqUckkpZ/Wu7i0mW3Z&#xA;RxI/0RnjduxGxrUKpV5o/NvzLPZ+Ybe0WCKw+p6v+i9Us/rSSpLpoA5CWVI45Dv8Xp7KduRxVPtC&#xA;/NfzFqXntNJfRRF5euL6+062viJFlD2PJTIWYCNw0kTAovxLsTgVX80+cvMbyaumn/VrXTtI1fTd&#xA;LmLSOl473ElrI8iEHhw43IUIRVhy37YqxsfnB5s1UXMMmktpmn3iyvpd7H6qyoLa5SP43YBH9RK7&#xA;x/ZOxwoUJfzg85aRapaWGlnWpLY6jfahdXBlP7hdZu7SGFXQER8Y7c0Z/hFAMCWbfmA2saheaDa6&#xA;XcSlJ47i5utGtr59MvLmNVj4vDcJT+4Z/jTmteQ3oMVSHSPzE8wLpVxZ6Wy3cugadcX+pza4eNzI&#xA;Yby5gNryt3aPnF9VZGmqwb4TTc4VRw/MjzBf281/BHp1ro0k1zYx21xcNDqJkhtfV5xVIR25/wC6&#xA;1HLjvXwVSu1/NzzhNrdvpljoqNpzTW2lrqFx67H63PbK/qvIPgKJI68krzZanbFUmi/NDzfBonlb&#xA;UJJYdQ1C20yHU9VRGu19WG7k9AC4SJDbJ8PxBmNeYooC1qq97wK7FXmP5gwedJvKki+UDcDUhrcx&#xA;m+qPwf0KTcqmq/Dz45ib8J5/UeT1HZEtKNQPzPDweEK4t9/T+i3gGrweeU8428WqG5Pmoy24tzI4&#xA;a49Ulfq9Gqd68eO+Vj4/pfQ9PPSHTE4+H8vUr22r+J7X+W9l+a62XmNfMxvWeSwZdMFzJz/flX+w&#xA;Azb9MnESo8+R73h+2cnZ5li8Dg+v1UK225pd/wA4xvp6Qa7bsFXVRJEXVhST0QCNq70D9foyWA+o&#xA;+5yfbYTJxn/J0fdf9j1/zT/yj99/xj/iMs1H0F43Rf30fejZLCykvYL2SFGvLZJI7ecgF0SYqZFU&#xA;9g/prX5DLnFSe10jyX5gmsPNcNjaX1xJHHNYao0KmTgATE6syhhx5nj3GKoDy/pv5Y6lLdDRdPsJ&#xA;ZJYPUvBHbKvO3vmkU8wyLVJWgeq+x8cVR6aD5J8tWT362NlpVpZCWeS5CJEsfqqFldm2+0qKDXrQ&#xA;DFUg0DRfyc13nZ6Vo9iZLVRI1s9i1rKscjgh1jmjicxl4gQwHGoFMVZGvknyiLOWy/Q9obSdVSaB&#xA;olZGVHMiggg/Zc8h4HfFVay8qeWbGNY7PS7a3RIprdViiVQIrlleZNh0kdAzeJGKoDVNC8h6Px8y&#xA;ahptnbvpUSBNQMAZ4Y4l9OPiVVm+BTxWm4GKqeka35C8zatO1i8F3q1tHA04kheK4WOGRpLduMyo&#xA;5VJWYqRsCcVTS48r+XLm4iubjTbeW4glkuIZXjVmSWdQsrqSOrqAG8cVUdM8k+UNL4fo7R7S0Mcy&#xA;3KGGFEImSNoUcEDqscjKPAE+OKq0vlby3NaraTaZbSWqG4KwPGrIDeFjcfCRT976jc/GpxVLj+Wn&#xA;5fExkeXrBTEAqFYEUgKCB9kDejEVxVrU/LXkCCK1sNQ0yzEeo3UcdrDJCG9S6jt2EdNjRlt4CAf5&#xA;RTFVfUNN8l6VaCG7s7W2tb8QacIhEOEiwB3ghKqPsoOZUdBviqja+Svy+vrYX9volhLDqKtceuLd&#xA;AZVuo2DsSVDUkSVuQ71xVdHY+Q7XzrSO0s4fNt1bveeoIlW4eEssUkgfjuSQA29foxVZa2X5feY9&#xA;Xvr6CzstQ1XTbgWd/dGFTLHcWxDKjOy1LR9iDt0xVGR+SfKEV3c3cejWaXV4CLqdYUDyBnEjciB+&#xA;045HxO+KrbvyN5NvFhW70WyuFt3kkgEsEbhWml9eSlQfty/Gw7tvirtX03yl5ku5dH1S2g1C601Y&#xA;rl4ZUJeEXHNY3R6Arz9Jx8J7b4q6fyL5Lnhs4JtDsZIbBSllG1vGViVm5sqilArMKkdziqpJ5O8q&#xA;S6q+ryaRaPqjqyPemFDKQ6ek3x0r8Ufwn22xVjer6z+UGh+Y2n1KOztdb0xYud0bR2aBWj4xFplj&#xA;ZV/dmgJbptiqcR/l5+XssMTJoGnSQei0UJFvEyejKS5VdiOLFydvHFWRqqooVRRVACgdgMVbxVIL&#xA;G8urBryGTTrqXndTSpJEqMjJI5ZSCXHbMaEjGxR5lz8uOOThInEekDe+nwYVrn5fWurefLbzfJHq&#xA;cVxbT2s62qwQlCbUqQCxlr8XDIG+K6Py/a7zS9ryw6Q6YHGRISF2f4r8vN6B+nJf+rVff8BH/wBV&#xA;Mu8X+jJ578sP58Pmf1PPtc/LjS7vX/8AEGjQ6voGqsxaWWySHg7N1PAvsT3oaHwyiUb5CQ+H7Xot&#xA;L2zkhh8HKcWXH/Sv76ZDHb6rHol1YyjVdTvbpFQ3N4sCqOJ24pEVVB47VPcnGVmJFSJLrZTxnKJj&#xA;w4Rj0jxfp3Kj560nULrzJpVzLp13q+ix2t1D9UsZlhaK+kaIwzvykh24K6q4P7s796jNdK8x0v8A&#xA;L38w7a88vGeG/jubO30mKwaBk9CzS3RReJK/1lFWrh+Y9J+akBdxhVEyeRvO8NhFbto001tOujw3&#xA;yxyVYJbS6i0o9KO4tvVCm4iJVpAu4JrQ4qzG28seZ5fyhs9Ie0kfWdMuop/0feSqxuI7HURcLC0n&#xA;qSKVlijAUl6dKmmBXeaYvMfnD0orby/daXYrPp8V1e3BjttRaI38T3KRPDKzLDHArM2+7U49MKpO&#xA;3k/zPb6nJaaVp13a63DqMz2PmEz1sl0j03S2t/70sRHHwi9Ix/aHP3xVLpvJ/mS50OW10zQdV0hF&#xA;XTl15pbwTPftExN0Irf1h6m9C8nrIZF+EDFWR6d5U8z/APKl9Q0KWO6a/nM36Ptrhk+sxwNOGjQk&#xA;yTqOK1KqztxFATtiql5m8mea7bULj6vJqHmOzuLa0N5dzS20N4be2vVe5sIXhW1Wk8UhenEcuBUv&#xA;uMVYp5s8mecrqyEul6NqcelJeXc2i6M0qusKPbW6KtzEtxDLGsk8crxNHN+6qdvixVVm8tfmVB5s&#xA;1DULbRb64ubq1uxK015SNDJp/pxLb3cdwhcGb4VjkiJQ/EHB3xVl/wCUHl/zFoy6zBdWdzYRXlvZ&#xA;T2X1j+7Wf0njmCo1xeOpDKpbm1T1PXFUv/Jzyn5w0fzBPcaut9GHsPT1ZrtlMVxqDTBzLGfrFwZS&#xA;Bz/eAIOJA416KoHUPJ/nG4mgW00u8h8zW+qajcXPmGS4U2kgmtrxLKVE9XlRPWiVR6Y9MAr33VQH&#xA;ljyJ5ziliP1K/js47qxkuIL1kXlcRQTrPOim5uiTV1V5OShzuF2riqtaeUvPEfmvSb+XR7uNdKfR&#xA;ESaGUOrW0dukN0CWulRVVy3ONIN6cix2xVlX5geXfNTecofNfl+xN1f6PYRCyTmqLOzzyx3FsSxH&#xA;WGbmK7clXFWG6p+V/muxt7myjhu7rSfr0dxfLacXkvJTpNvEbgxie0JH1xZSfjFGIahAxVNdJ8te&#xA;YI7/AEs6/oOqXg0uyiWS4hnjaS+umhCD6y/1lAEt46IaD45KsagCqqXz+UvM02jW8LeXdQWbUdSj&#xA;udbg9XlBBAsUiwQW8S3sPqpGSObSOAWPMgiiqqjPLGg+e9E+qajdaTfXUlkukW91CssT3EqWb6nB&#xA;MVJlpIEFxE4q26kU9lURf+SfNmsaXrbX9neRXbafqk+kwLdlTHqLareXNkFMUvDksckXEnYKaeOK&#xA;rNC8v+eF/NC31++0q7hiXVLuO7uEkDRSWUtm8cDsWuW5L6vA8EhUR07nFU38weQfMWqa754u4L28&#xA;sbe/tbaOxtYTb/V75o7RkaOYOjy8eXwHg6Gh2PfAqWr5c80SavHMmiXlrrb6jaXVtqcdwqWdvpSR&#xA;xerZCkh4cUV4fTERq55+4KsRsPIvn9NC1SwfStUS0eazlmmaWNrySSOSQyCSA3LQ3aKCvJk9JpKi&#xA;u64qiZPKX5kXMGlSXOg3cF1pljbtZfV7mSUo0F68kiBpr4CJ2gC7ESs1ePIAYq//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:09801174072068118083A94F05CE3472</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:09801174072068118083A94F05CE3472</xmpMM:InstanceID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:02801174072068118083A94F05CE3472</stRef:instanceID>
            <stRef:documentID>xmp.did:02801174072068118083A94F05CE3472</stRef:documentID>
            <stRef:originalDocumentID>uuid:BB80A041AD67DE1184C9D3A080E453F7</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:02801174072068118083A94F05CE3472</stEvt:instanceID>
                  <stEvt:when>2013-02-27T17:10:16+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:09801174072068118083A94F05CE3472</stEvt:instanceID>
                  <stEvt:when>2013-02-27T17:18:02+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:OriginalDocumentID>uuid:BB80A041AD67DE1184C9D3A080E453F7</xmpMM:OriginalDocumentID>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>29.699996</stDim:w>
            <stDim:h>20.999993</stDim:h>
            <stDim:unit>Centimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
               <rdf:li>PANTONE 485 CVC</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>[Registration]</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>100.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>100.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=45 Y=60 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>45.000000</xmpG:magenta>
                           <xmpG:yellow>60.000004</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=50 Y=5 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>5.000001</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=90 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>90.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=20 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>19.999998</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=40 Y=15 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>39.999996</xmpG:magenta>
                           <xmpG:yellow>14.999998</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=20 M=0 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>19.999998</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=25 M=100 Y=25 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>25.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>25.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=40 M=40 Y=40 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>39.999996</xmpG:cyan>
                           <xmpG:magenta>39.999996</xmpG:magenta>
                           <xmpG:yellow>39.999996</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=40 M=70 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>39.999996</xmpG:cyan>
                           <xmpG:magenta>70.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=75 M=90 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>75.000000</xmpG:cyan>
                           <xmpG:magenta>90.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Aqua</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>55.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Blue</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Blue Gray</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>40.000000</xmpG:magenta>
                           <xmpG:yellow>30.000002</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Blue Sky</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>80.000000</xmpG:cyan>
                           <xmpG:magenta>5.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Brown</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>85.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Dark Blue</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>90.000000</xmpG:magenta>
                           <xmpG:yellow>10.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Forest Green</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>55.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Gold</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>5.000000</xmpG:cyan>
                           <xmpG:magenta>20.000000</xmpG:magenta>
                           <xmpG:yellow>95.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Grass Green</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>75.000000</xmpG:cyan>
                           <xmpG:magenta>5.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Orange</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>45.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Red</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>14.999999</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Violet</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>45.000000</xmpG:cyan>
                           <xmpG:magenta>90.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 485 CVC</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>91.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -70.4995 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 70.4995 li
773.199 70.4995 li
773.199 0 li
cp
clp
123 70.4995 mo
0 70.4995 li
0 0 li
123 0 li
123 70.4995 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
31.1812 42.4038 mo
15.1797 42.4038 li
15.1797 28.6885 li
31.1812 28.6885 li
31.1797 28.6797 li
31.1797 12.6782 li
44.8955 12.6782 li
44.8955 28.6797 li
44.895 28.686 li
60.896 28.686 li
60.896 42.4014 li
44.895 42.4014 li
44.8955 42.3989 li
44.8955 58.3999 li
31.1797 58.3999 li
31.1797 42.3989 li
31.1812 42.4038 li
cp
0 1 .91 0 cmyk
f
1 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
31.1812 42.4038 mo
15.1797 42.4038 li
15.1797 28.6885 li
31.1812 28.6885 li
31.1797 28.6797 li
31.1797 12.6782 li
44.8955 12.6782 li
44.8955 28.6797 li
44.895 28.686 li
60.896 28.686 li
60.896 42.4014 li
44.895 42.4014 li
44.8955 42.3989 li
44.8955 58.3999 li
31.1797 58.3999 li
31.1797 42.3989 li
31.1812 42.4038 li
cp
/0 
<<
/Name (PANTONE 485 CVC)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 1 .91 0 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
@
82.1157 35.2949 mo
82.1157 24.6382 90.7549 15.999 101.412 15.999 cv
103.784 15.999 106.056 16.4282 108.155 17.2114 cv
104.208 14.0884 99.2212 12.2231 93.7979 12.2231 cv
81.0103 12.2231 70.6431 22.5898 70.6431 35.3779 cv
70.6431 48.166 81.0103 58.5327 93.7979 58.5327 cv
99.4028 58.5327 104.542 56.541 108.548 53.2271 cv
106.341 54.1064 103.933 54.5908 101.412 54.5908 cv
90.7549 54.5908 82.1157 45.9512 82.1157 35.2949 cv
cp
0 1 .91 0 cmyk
f
82.1157 35.2949 mo
82.1157 24.6382 90.7549 15.999 101.412 15.999 cv
103.784 15.999 106.056 16.4282 108.155 17.2114 cv
104.208 14.0884 99.2212 12.2231 93.7979 12.2231 cv
81.0103 12.2231 70.6431 22.5898 70.6431 35.3779 cv
70.6431 48.166 81.0103 58.5327 93.7979 58.5327 cv
99.4028 58.5327 104.542 56.541 108.548 53.2271 cv
106.341 54.1064 103.933 54.5908 101.412 54.5908 cv
90.7549 54.5908 82.1157 45.9512 82.1157 35.2949 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
2 lw
118.043 65.7437 mo
118.043 5.31982 li
5.37451 5.31982 li
5.37451 65.7437 li
118.043 65.7437 li
cp
@
133.438 3.96533 mo
148.915 3.96533 li
148.915 6.60547 li
136.573 6.60547 li
136.573 14.0962 li
147.397 14.0962 li
147.397 16.7363 li
136.573 16.7363 li
136.573 27.5273 li
133.438 27.5273 li
133.438 3.96533 li
cp
0 0 0 1 cmyk
f
163.765 17.3633 mo
163.632 14.6904 161.62 12.5454 158.848 12.5454 cv
155.911 12.5454 154.162 14.7563 153.963 17.3633 cv
163.765 17.3633 li
cp
166.47 22.1152 mo
165.711 25.8774 163.005 27.9233 159.177 27.9233 cv
153.732 27.9233 151.158 24.1611 150.994 18.9473 cv
150.994 13.8325 154.359 10.0703 159.012 10.0703 cv
165.051 10.0703 166.899 15.7134 166.734 19.8384 cv
153.963 19.8384 li
153.864 22.8081 155.547 25.4482 159.276 25.4482 cv
161.586 25.4482 163.204 24.3262 163.698 22.1152 cv
166.47 22.1152 li
cp
f
176.964 25.4482 mo
180.726 25.4482 182.178 22.2144 182.178 19.0132 cv
182.178 15.6475 180.66 12.5454 176.799 12.5454 cv
172.971 12.5454 171.684 15.8125 171.684 19.1455 cv
171.684 22.3462 173.334 25.4482 176.964 25.4482 cv
cp
184.884 27.5273 mo
182.079 27.5273 li
182.079 25.2173 li
182.013 25.2173 li
181.089 27.0981 178.911 27.9233 176.568 27.9233 cv
171.321 27.9233 168.714 23.7651 168.714 18.9473 cv
168.714 14.1294 171.288 10.0703 176.502 10.0703 cv
178.251 10.0703 180.759 10.7305 182.013 12.7432 cv
182.079 12.7432 li
182.079 3.96533 li
184.884 3.96533 li
184.884 27.5273 li
cp
f
201.054 17.3633 mo
200.921 14.6904 198.909 12.5454 196.137 12.5454 cv
193.2 12.5454 191.451 14.7563 191.252 17.3633 cv
201.054 17.3633 li
cp
203.76 22.1152 mo
203 25.8774 200.294 27.9233 196.467 27.9233 cv
191.021 27.9233 188.448 24.1611 188.283 18.9473 cv
188.283 13.8325 191.648 10.0703 196.302 10.0703 cv
202.34 10.0703 204.188 15.7134 204.023 19.8384 cv
191.252 19.8384 li
191.154 22.8081 192.836 25.4482 196.565 25.4482 cv
198.875 25.4482 200.493 24.3262 200.988 22.1152 cv
203.76 22.1152 li
cp
f
206.828 10.4663 mo
209.468 10.4663 li
209.468 14.0635 li
209.534 14.0635 li
210.887 11.3242 212.768 9.97119 215.804 10.0703 cv
215.804 13.0405 li
211.283 13.0405 209.633 15.6143 209.633 19.9375 cv
209.633 27.5273 li
206.828 27.5273 li
206.828 10.4663 li
cp
f
228.476 18.7163 mo
227.387 19.5083 225.275 19.5415 223.394 19.8716 cv
221.546 20.2012 219.962 20.8613 219.962 22.9404 cv
219.962 24.7886 221.546 25.4482 223.262 25.4482 cv
226.958 25.4482 228.476 23.1382 228.476 21.5874 cv
228.476 18.7163 li
cp
233.03 27.4614 mo
232.535 27.7583 231.908 27.9233 231.017 27.9233 cv
229.565 27.9233 228.641 27.1313 228.641 25.2832 cv
227.09 27.0981 225.011 27.9233 222.635 27.9233 cv
219.533 27.9233 216.992 26.5371 216.992 23.1382 cv
216.992 19.2773 219.863 18.4521 222.767 17.8911 cv
225.869 17.2974 228.509 17.4951 228.509 15.3833 cv
228.509 12.9414 226.496 12.5454 224.714 12.5454 cv
222.338 12.5454 220.589 13.2715 220.457 15.7793 cv
217.652 15.7793 li
217.817 11.5552 221.084 10.0703 224.879 10.0703 cv
227.948 10.0703 231.281 10.7632 231.281 14.7563 cv
231.281 23.5342 li
231.281 24.8545 231.281 25.4482 232.172 25.4482 cv
232.403 25.4482 232.667 25.4155 233.03 25.2832 cv
233.03 27.4614 li
cp
f
234.25 25.3823 mo
244.546 12.9414 li
234.911 12.9414 li
234.911 10.4663 li
248.176 10.4663 li
248.176 12.3804 li
237.749 25.0522 li
248.639 25.0522 li
248.639 27.5273 li
234.25 27.5273 li
234.25 25.3823 li
cp
f
251.641 10.4663 mo
254.446 10.4663 li
254.446 27.5273 li
251.641 27.5273 li
251.641 10.4663 li
cp
254.446 7.39746 mo
251.641 7.39746 li
251.641 3.96533 li
254.446 3.96533 li
254.446 7.39746 li
cp
f
266.161 25.4482 mo
269.098 25.4482 271.474 23.1382 271.474 19.0132 cv
271.474 14.8555 269.098 12.5454 266.161 12.5454 cv
263.224 12.5454 260.848 14.8555 260.848 19.0132 cv
260.848 23.1382 263.224 25.4482 266.161 25.4482 cv
cp
266.161 10.0703 mo
271.573 10.0703 274.444 13.9976 274.444 19.0132 cv
274.444 23.9966 271.573 27.9233 266.161 27.9233 cv
260.749 27.9233 257.878 23.9966 257.878 19.0132 cv
257.878 13.9976 260.749 10.0703 266.161 10.0703 cv
cp
f
277.744 10.4663 mo
280.383 10.4663 li
280.383 13.1724 li
280.45 13.1724 li
281.638 11.0605 283.552 10.0703 285.994 10.0703 cv
290.481 10.0703 291.868 12.6445 291.868 16.3071 cv
291.868 27.5273 li
289.063 27.5273 li
289.063 15.9775 li
289.063 13.8984 287.743 12.5454 285.598 12.5454 cv
282.199 12.5454 280.548 14.8223 280.548 17.8911 cv
280.548 27.5273 li
277.744 27.5273 li
277.744 10.4663 li
cp
f
307.938 17.3633 mo
307.807 14.6904 305.793 12.5454 303.021 12.5454 cv
300.084 12.5454 298.335 14.7563 298.138 17.3633 cv
307.938 17.3633 li
cp
310.645 22.1152 mo
309.886 25.8774 307.18 27.9233 303.352 27.9233 cv
297.907 27.9233 295.333 24.1611 295.167 18.9473 cv
295.167 13.8325 298.534 10.0703 303.187 10.0703 cv
309.226 10.0703 311.074 15.7134 310.909 19.8384 cv
298.138 19.8384 li
298.039 22.8081 299.722 25.4482 303.451 25.4482 cv
305.761 25.4482 307.377 24.3262 307.873 22.1152 cv
310.645 22.1152 li
cp
f
323.58 3.96533 mo
326.715 3.96533 li
326.715 27.5273 li
323.58 27.5273 li
323.58 3.96533 li
cp
f
331.533 10.4663 mo
334.173 10.4663 li
334.173 13.1724 li
334.239 13.1724 li
335.427 11.0605 337.341 10.0703 339.783 10.0703 cv
344.271 10.0703 345.657 12.6445 345.657 16.3071 cv
345.657 27.5273 li
342.852 27.5273 li
342.852 15.9775 li
342.852 13.8984 341.532 12.5454 339.387 12.5454 cv
335.988 12.5454 334.338 14.8223 334.338 17.8911 cv
334.338 27.5273 li
331.533 27.5273 li
331.533 10.4663 li
cp
f
353.775 10.4663 mo
357.174 10.4663 li
357.174 12.9414 li
353.775 12.9414 li
353.775 23.5342 li
353.775 24.8213 354.138 25.0522 355.887 25.0522 cv
357.174 25.0522 li
357.174 27.5273 li
355.029 27.5273 li
352.125 27.5273 350.97 26.9331 350.97 23.7983 cv
350.97 12.9414 li
348.066 12.9414 li
348.066 10.4663 li
350.97 10.4663 li
350.97 5.35156 li
353.775 5.35156 li
353.775 10.4663 li
cp
f
372.122 17.3633 mo
371.99 14.6904 369.977 12.5454 367.205 12.5454 cv
364.268 12.5454 362.519 14.7563 362.321 17.3633 cv
372.122 17.3633 li
cp
374.829 22.1152 mo
374.069 25.8774 371.363 27.9233 367.535 27.9233 cv
362.09 27.9233 359.516 24.1611 359.351 18.9473 cv
359.351 13.8325 362.717 10.0703 367.37 10.0703 cv
373.409 10.0703 375.257 15.7134 375.092 19.8384 cv
362.321 19.8384 li
362.222 22.8081 363.905 25.4482 367.634 25.4482 cv
369.944 25.4482 371.561 24.3262 372.056 22.1152 cv
374.829 22.1152 li
cp
f
377.897 10.4663 mo
380.537 10.4663 li
380.537 14.0635 li
380.603 14.0635 li
381.956 11.3242 383.836 9.97119 386.873 10.0703 cv
386.873 13.0405 li
382.352 13.0405 380.702 15.6143 380.702 19.9375 cv
380.702 27.5273 li
377.897 27.5273 li
377.897 10.4663 li
cp
f
389.579 10.4663 mo
392.218 10.4663 li
392.218 13.1724 li
392.285 13.1724 li
393.472 11.0605 395.386 10.0703 397.829 10.0703 cv
402.316 10.0703 403.703 12.6445 403.703 16.3071 cv
403.703 27.5273 li
400.897 27.5273 li
400.897 15.9775 li
400.897 13.8984 399.578 12.5454 397.432 12.5454 cv
394.034 12.5454 392.383 14.8223 392.383 17.8911 cv
392.383 27.5273 li
389.579 27.5273 li
389.579 10.4663 li
cp
f
418.486 18.7163 mo
417.397 19.5083 415.286 19.5415 413.404 19.8716 cv
411.556 20.2012 409.972 20.8613 409.972 22.9404 cv
409.972 24.7886 411.556 25.4482 413.272 25.4482 cv
416.968 25.4482 418.486 23.1382 418.486 21.5874 cv
418.486 18.7163 li
cp
423.041 27.4614 mo
422.545 27.7583 421.918 27.9233 421.027 27.9233 cv
419.576 27.9233 418.651 27.1313 418.651 25.2832 cv
417.1 27.0981 415.021 27.9233 412.645 27.9233 cv
409.543 27.9233 407.002 26.5371 407.002 23.1382 cv
407.002 19.2773 409.874 18.4521 412.777 17.8911 cv
415.879 17.2974 418.519 17.4951 418.519 15.3833 cv
418.519 12.9414 416.506 12.5454 414.724 12.5454 cv
412.348 12.5454 410.599 13.2715 410.467 15.7793 cv
407.663 15.7793 li
407.828 11.5552 411.094 10.0703 414.889 10.0703 cv
417.958 10.0703 421.292 10.7632 421.292 14.7563 cv
421.292 23.5342 li
421.292 24.8545 421.292 25.4482 422.182 25.4482 cv
422.414 25.4482 422.677 25.4155 423.041 25.2832 cv
423.041 27.4614 li
cp
f
424.261 25.3823 mo
434.557 12.9414 li
424.92 12.9414 li
424.92 10.4663 li
438.187 10.4663 li
438.187 12.3804 li
427.759 25.0522 li
438.649 25.0522 li
438.649 27.5273 li
424.261 27.5273 li
424.261 25.3823 li
cp
f
441.652 10.4663 mo
444.457 10.4663 li
444.457 27.5273 li
441.652 27.5273 li
441.652 10.4663 li
cp
444.457 7.39746 mo
441.652 7.39746 li
441.652 3.96533 li
444.457 3.96533 li
444.457 7.39746 li
cp
f
456.171 25.4482 mo
459.108 25.4482 461.484 23.1382 461.484 19.0132 cv
461.484 14.8555 459.108 12.5454 456.171 12.5454 cv
453.234 12.5454 450.858 14.8555 450.858 19.0132 cv
450.858 23.1382 453.234 25.4482 456.171 25.4482 cv
cp
456.171 10.0703 mo
461.583 10.0703 464.455 13.9976 464.455 19.0132 cv
464.455 23.9966 461.583 27.9233 456.171 27.9233 cv
450.759 27.9233 447.888 23.9966 447.888 19.0132 cv
447.888 13.9976 450.759 10.0703 456.171 10.0703 cv
cp
f
467.753 10.4663 mo
470.394 10.4663 li
470.394 13.1724 li
470.459 13.1724 li
471.648 11.0605 473.562 10.0703 476.003 10.0703 cv
480.492 10.0703 481.877 12.6445 481.877 16.3071 cv
481.877 27.5273 li
479.073 27.5273 li
479.073 15.9775 li
479.073 13.8984 477.752 12.5454 475.608 12.5454 cv
472.208 12.5454 470.559 14.8223 470.559 17.8911 cv
470.559 27.5273 li
467.753 27.5273 li
467.753 10.4663 li
cp
f
496.662 18.7163 mo
495.573 19.5083 493.46 19.5415 491.58 19.8716 cv
489.732 20.2012 488.148 20.8613 488.148 22.9404 cv
488.148 24.7886 489.732 25.4482 491.448 25.4482 cv
495.144 25.4482 496.662 23.1382 496.662 21.5874 cv
496.662 18.7163 li
cp
501.215 27.4614 mo
500.721 27.7583 500.094 27.9233 499.203 27.9233 cv
497.75 27.9233 496.827 27.1313 496.827 25.2832 cv
495.276 27.0981 493.197 27.9233 490.821 27.9233 cv
487.719 27.9233 485.178 26.5371 485.178 23.1382 cv
485.178 19.2773 488.049 18.4521 490.953 17.8911 cv
494.055 17.2974 496.695 17.4951 496.695 15.3833 cv
496.695 12.9414 494.682 12.5454 492.9 12.5454 cv
490.524 12.5454 488.775 13.2715 488.643 15.7793 cv
485.837 15.7793 li
486.002 11.5552 489.27 10.0703 493.065 10.0703 cv
496.134 10.0703 499.467 10.7632 499.467 14.7563 cv
499.467 23.5342 li
499.467 24.8545 499.467 25.4482 500.358 25.4482 cv
500.588 25.4482 500.853 25.4155 501.215 25.2832 cv
501.215 27.4614 li
cp
f
503.988 3.96533 mo
506.792 3.96533 li
506.792 27.5273 li
503.988 27.5273 li
503.988 3.96533 li
cp
f
522.995 17.3633 mo
522.863 14.6904 520.85 12.5454 518.078 12.5454 cv
515.141 12.5454 513.392 14.7563 513.194 17.3633 cv
522.995 17.3633 li
cp
525.701 22.1152 mo
524.942 25.8774 522.236 27.9233 518.408 27.9233 cv
512.963 27.9233 510.389 24.1611 510.224 18.9473 cv
510.224 13.8325 513.59 10.0703 518.243 10.0703 cv
524.282 10.0703 526.13 15.7134 525.965 19.8384 cv
513.194 19.8384 li
513.095 22.8081 514.778 25.4482 518.507 25.4482 cv
520.817 25.4482 522.434 24.3262 522.929 22.1152 cv
525.701 22.1152 li
cp
f
545.369 25.4482 mo
549.13 25.4482 550.583 22.2144 550.583 19.0132 cv
550.583 15.6475 549.065 12.5454 545.204 12.5454 cv
541.375 12.5454 540.088 15.8125 540.088 19.1455 cv
540.088 22.3462 541.739 25.4482 545.369 25.4482 cv
cp
553.289 27.5273 mo
550.484 27.5273 li
550.484 25.2173 li
550.417 25.2173 li
549.494 27.0981 547.316 27.9233 544.972 27.9233 cv
539.725 27.9233 537.119 23.7651 537.119 18.9473 cv
537.119 14.1294 539.693 10.0703 544.907 10.0703 cv
546.656 10.0703 549.164 10.7305 550.417 12.7432 cv
550.484 12.7432 li
550.484 3.96533 li
553.289 3.96533 li
553.289 27.5273 li
cp
f
569.458 17.3633 mo
569.326 14.6904 567.313 12.5454 564.542 12.5454 cv
561.604 12.5454 559.855 14.7563 559.657 17.3633 cv
569.458 17.3633 li
cp
572.165 22.1152 mo
571.405 25.8774 568.699 27.9233 564.871 27.9233 cv
559.426 27.9233 556.852 24.1611 556.687 18.9473 cv
556.687 13.8325 560.053 10.0703 564.706 10.0703 cv
570.745 10.0703 572.593 15.7134 572.428 19.8384 cv
559.657 19.8384 li
559.558 22.8081 561.241 25.4482 564.97 25.4482 cv
567.28 25.4482 568.897 24.3262 569.392 22.1152 cv
572.165 22.1152 li
cp
f
575.497 3.96533 mo
578.301 3.96533 li
578.301 27.5273 li
575.497 27.5273 li
575.497 3.96533 li
cp
f
582.822 3.96533 mo
585.627 3.96533 li
585.627 27.5273 li
582.822 27.5273 li
582.822 3.96533 li
cp
f
601.83 17.3633 mo
601.698 14.6904 599.685 12.5454 596.913 12.5454 cv
593.976 12.5454 592.227 14.7563 592.029 17.3633 cv
601.83 17.3633 li
cp
604.536 22.1152 mo
603.777 25.8774 601.071 27.9233 597.243 27.9233 cv
591.797 27.9233 589.223 24.1611 589.059 18.9473 cv
589.059 13.8325 592.424 10.0703 597.078 10.0703 cv
603.117 10.0703 604.964 15.7134 604.799 19.8384 cv
592.029 19.8384 li
591.929 22.8081 593.613 25.4482 597.341 25.4482 cv
599.652 25.4482 601.269 24.3262 601.763 22.1152 cv
604.536 22.1152 li
cp
f
630.968 10.8623 mo
630.605 7.49658 628.361 6.04443 625.127 6.04443 cv
622.487 6.04443 619.847 7.00146 619.847 10.0703 cv
619.847 12.9741 623.609 13.4033 627.404 14.2612 cv
631.167 15.1191 634.928 16.4395 634.928 21.0596 cv
634.928 26.0752 630.011 28.0884 625.721 28.0884 cv
620.441 28.0884 615.986 25.5142 615.986 19.7725 cv
618.957 19.7725 li
618.957 23.7324 622.256 25.4482 625.82 25.4482 cv
628.659 25.4482 631.793 24.5571 631.793 21.1582 cv
631.793 17.9243 628.031 17.3633 624.269 16.5386 cv
620.507 15.7134 616.712 14.6245 616.712 10.3013 cv
616.712 5.51611 620.969 3.4043 625.259 3.4043 cv
630.078 3.4043 633.74 5.68115 633.938 10.8623 cv
630.968 10.8623 li
cp
f
645.62 25.4482 mo
648.557 25.4482 650.933 23.1382 650.933 19.0132 cv
650.933 14.8555 648.557 12.5454 645.62 12.5454 cv
642.683 12.5454 640.307 14.8555 640.307 19.0132 cv
640.307 23.1382 642.683 25.4482 645.62 25.4482 cv
cp
645.62 10.0703 mo
651.032 10.0703 653.903 13.9976 653.903 19.0132 cv
653.903 23.9966 651.032 27.9233 645.62 27.9233 cv
640.208 27.9233 637.337 23.9966 637.337 19.0132 cv
637.337 13.9976 640.208 10.0703 645.62 10.0703 cv
cp
f
668.786 15.9443 mo
668.357 13.7993 666.872 12.5454 664.562 12.5454 cv
660.502 12.5454 659.249 15.7466 659.249 19.2114 cv
659.249 22.3462 660.667 25.4482 664.232 25.4482 cv
666.938 25.4482 668.555 23.8643 668.917 21.2905 cv
671.789 21.2905 li
671.162 25.4482 668.555 27.9233 664.265 27.9233 cv
659.05 27.9233 656.279 24.2935 656.279 19.2114 cv
656.279 14.0962 658.918 10.0703 664.331 10.0703 cv
668.192 10.0703 671.293 11.8853 671.69 15.9443 cv
668.786 15.9443 li
cp
f
675.088 10.4663 mo
677.893 10.4663 li
677.893 27.5273 li
675.088 27.5273 li
675.088 10.4663 li
cp
677.893 7.39746 mo
675.088 7.39746 li
675.088 3.96533 li
677.893 3.96533 li
677.893 7.39746 li
cp
f
694.096 17.3633 mo
693.963 14.6904 691.951 12.5454 689.179 12.5454 cv
686.242 12.5454 684.493 14.7563 684.294 17.3633 cv
694.096 17.3633 li
cp
696.801 22.1152 mo
696.042 25.8774 693.336 27.9233 689.508 27.9233 cv
684.064 27.9233 681.49 24.1611 681.325 18.9473 cv
681.325 13.8325 684.691 10.0703 689.344 10.0703 cv
695.382 10.0703 697.231 15.7134 697.066 19.8384 cv
684.294 19.8384 li
684.196 22.8081 685.878 25.4482 689.608 25.4482 cv
691.917 25.4482 693.535 24.3262 694.03 22.1152 cv
696.801 22.1152 li
cp
f
703.864 10.4663 mo
707.262 10.4663 li
707.262 12.9414 li
703.864 12.9414 li
703.864 23.5342 li
703.864 24.8213 704.226 25.0522 705.975 25.0522 cv
707.262 25.0522 li
707.262 27.5273 li
705.118 27.5273 li
702.213 27.5273 701.058 26.9331 701.058 23.7983 cv
701.058 12.9414 li
698.155 12.9414 li
698.155 10.4663 li
701.058 10.4663 li
701.058 5.35156 li
703.864 5.35156 li
703.864 10.4663 li
cp
f
712.707 3.4043 mo
716.304 3.4043 li
719.142 8.12354 li
717.03 8.12354 li
712.707 3.4043 li
cp
720.924 18.7163 mo
719.834 19.5083 717.723 19.5415 715.842 19.8716 cv
713.994 20.2012 712.41 20.8613 712.41 22.9404 cv
712.41 24.7886 713.994 25.4482 715.709 25.4482 cv
719.406 25.4482 720.924 23.1382 720.924 21.5874 cv
720.924 18.7163 li
cp
725.478 27.4614 mo
724.983 27.7583 724.356 27.9233 723.465 27.9233 cv
722.013 27.9233 721.089 27.1313 721.089 25.2832 cv
719.538 27.0981 717.458 27.9233 715.083 27.9233 cv
711.981 27.9233 709.44 26.5371 709.44 23.1382 cv
709.44 19.2773 712.311 18.4521 715.215 17.8911 cv
718.317 17.2974 720.957 17.4951 720.957 15.3833 cv
720.957 12.9414 718.944 12.5454 717.162 12.5454 cv
714.786 12.5454 713.037 13.2715 712.905 15.7793 cv
710.1 15.7793 li
710.265 11.5552 713.532 10.0703 717.327 10.0703 cv
720.396 10.0703 723.729 10.7632 723.729 14.7563 cv
723.729 23.5342 li
723.729 24.8545 723.729 25.4482 724.62 25.4482 cv
724.851 25.4482 725.115 25.4155 725.478 25.2832 cv
725.478 27.4614 li
cp
f
140.302 64.9487 mo
144.064 64.9487 145.516 61.7144 145.516 58.5132 cv
145.516 55.1475 143.998 52.0454 140.137 52.0454 cv
136.309 52.0454 135.022 55.3125 135.022 58.645 cv
135.022 61.8462 136.672 64.9487 140.302 64.9487 cv
cp
148.222 67.0269 mo
145.417 67.0269 li
145.417 64.7173 li
145.351 64.7173 li
144.427 66.5981 142.249 67.4233 139.906 67.4233 cv
134.659 67.4233 132.052 63.2651 132.052 58.4478 cv
132.052 53.6294 134.626 49.5703 139.84 49.5703 cv
141.589 49.5703 144.097 50.2305 145.351 52.2432 cv
145.417 52.2432 li
145.417 43.4653 li
148.222 43.4653 li
148.222 67.0269 li
cp
f
164.391 56.8633 mo
164.259 54.1904 162.247 52.0454 159.474 52.0454 cv
156.537 52.0454 154.789 54.2563 154.59 56.8633 cv
164.391 56.8633 li
cp
167.097 61.6157 mo
166.338 65.3774 163.632 67.4233 159.804 67.4233 cv
154.359 67.4233 151.785 63.6616 151.62 58.4478 cv
151.62 53.3325 154.986 49.5703 159.639 49.5703 cv
165.678 49.5703 167.526 55.2134 167.361 59.3384 cv
154.59 59.3384 li
154.491 62.3081 156.174 64.9487 159.903 64.9487 cv
162.213 64.9487 163.831 63.8267 164.325 61.6157 cv
167.097 61.6157 li
cp
f
170.43 43.4653 mo
173.235 43.4653 li
173.235 67.0269 li
170.43 67.0269 li
170.43 43.4653 li
cp
f
177.755 43.4653 mo
180.561 43.4653 li
180.561 67.0269 li
177.755 67.0269 li
177.755 43.4653 li
cp
f
195.476 58.2163 mo
194.387 59.0083 192.275 59.0415 190.394 59.3716 cv
188.546 59.7017 186.962 60.3618 186.962 62.4399 cv
186.962 64.2886 188.546 64.9487 190.262 64.9487 cv
193.958 64.9487 195.476 62.6382 195.476 61.0874 cv
195.476 58.2163 li
cp
200.03 66.9614 mo
199.535 67.2583 198.908 67.4233 198.017 67.4233 cv
196.565 67.4233 195.641 66.6313 195.641 64.7837 cv
194.09 66.5981 192.011 67.4233 189.635 67.4233 cv
186.533 67.4233 183.992 66.0376 183.992 62.6382 cv
183.992 58.7769 186.863 57.9526 189.767 57.3911 cv
192.869 56.7974 195.509 56.9951 195.509 54.8833 cv
195.509 52.4414 193.496 52.0454 191.714 52.0454 cv
189.338 52.0454 187.589 52.7715 187.457 55.2793 cv
184.652 55.2793 li
184.817 51.0552 188.084 49.5703 191.879 49.5703 cv
194.948 49.5703 198.281 50.2632 198.281 54.2563 cv
198.281 63.0347 li
198.281 64.354 198.281 64.9487 199.172 64.9487 cv
199.403 64.9487 199.667 64.9155 200.03 64.7837 cv
200.03 66.9614 li
cp
f
228.838 50.5605 mo
228.179 47.2275 225.505 45.5444 222.238 45.5444 cv
216.628 45.5444 214.252 50.1646 214.252 55.0815 cv
214.252 60.4604 216.628 64.9487 222.271 64.9487 cv
226.396 64.9487 228.772 62.0444 229.069 58.1499 cv
232.205 58.1499 li
231.61 64.0239 227.947 67.5884 222.007 67.5884 cv
214.682 67.5884 211.118 62.1763 211.118 55.3125 cv
211.118 48.4814 215.012 42.9043 222.271 42.9043 cv
227.188 42.9043 231.248 45.5444 231.974 50.5605 cv
228.838 50.5605 li
cp
f
235.537 49.9663 mo
238.177 49.9663 li
238.177 53.5635 li
238.243 53.5635 li
239.596 50.8242 241.477 49.4712 244.513 49.5703 cv
244.513 52.5405 li
239.992 52.5405 238.342 55.1143 238.342 59.437 cv
238.342 67.0269 li
235.537 67.0269 li
235.537 49.9663 li
cp
f
253.39 64.9487 mo
256.327 64.9487 258.703 62.6382 258.703 58.5132 cv
258.703 54.3555 256.327 52.0454 253.39 52.0454 cv
250.453 52.0454 248.077 54.3555 248.077 58.5132 cv
248.077 62.6382 250.453 64.9487 253.39 64.9487 cv
cp
253.39 49.5703 mo
258.802 49.5703 261.673 53.4976 261.673 58.5132 cv
261.673 63.4966 258.802 67.4233 253.39 67.4233 cv
247.978 67.4233 245.107 63.4966 245.107 58.5132 cv
245.107 53.4976 247.978 49.5703 253.39 49.5703 cv
cp
f
276.556 55.4443 mo
276.127 53.2993 274.642 52.0454 272.332 52.0454 cv
268.273 52.0454 267.019 55.2466 267.019 58.7114 cv
267.019 61.8462 268.438 64.9487 272.002 64.9487 cv
274.708 64.9487 276.325 63.3647 276.688 60.7905 cv
279.559 60.7905 li
278.932 64.9487 276.325 67.4233 272.035 67.4233 cv
266.821 67.4233 264.049 63.7935 264.049 58.7114 cv
264.049 53.5962 266.689 49.5703 272.101 49.5703 cv
275.962 49.5703 279.064 51.3853 279.46 55.4443 cv
276.556 55.4443 li
cp
f
294.541 56.8633 mo
294.408 54.1904 292.396 52.0454 289.624 52.0454 cv
286.687 52.0454 284.938 54.2563 284.739 56.8633 cv
294.541 56.8633 li
cp
297.246 61.6157 mo
296.487 65.3774 293.781 67.4233 289.953 67.4233 cv
284.508 67.4233 281.934 63.6616 281.77 58.4478 cv
281.77 53.3325 285.135 49.5703 289.788 49.5703 cv
295.827 49.5703 297.675 55.2134 297.51 59.3384 cv
284.739 59.3384 li
284.64 62.3081 286.323 64.9487 290.052 64.9487 cv
292.362 64.9487 293.979 63.8267 294.474 61.6157 cv
297.246 61.6157 li
cp
f
319.719 54.3223 mo
322.656 54.3223 325.164 53.5635 325.164 50.1313 cv
325.164 47.8213 323.91 46.1055 320.973 46.1055 cv
313.185 46.1055 li
313.185 54.3223 li
319.719 54.3223 li
cp
310.05 43.4653 mo
321.138 43.4653 li
325.56 43.4653 328.299 45.8745 328.299 49.6362 cv
328.299 52.4741 327.045 54.8174 324.207 55.6094 cv
324.207 55.6753 li
326.946 56.2031 327.507 58.2163 327.738 60.5259 cv
327.936 62.8364 327.804 65.4106 329.124 67.0269 cv
325.626 67.0269 li
324.735 66.0708 325.23 63.5298 324.768 61.2192 cv
324.438 58.9097 323.877 56.9624 320.841 56.9624 cv
313.185 56.9624 li
313.185 67.0269 li
310.05 67.0269 li
310.05 43.4653 li
cp
f
339.552 64.9487 mo
342.489 64.9487 344.865 62.6382 344.865 58.5132 cv
344.865 54.3555 342.489 52.0454 339.552 52.0454 cv
336.615 52.0454 334.239 54.3555 334.239 58.5132 cv
334.239 62.6382 336.615 64.9487 339.552 64.9487 cv
cp
339.552 49.5703 mo
344.964 49.5703 347.835 53.4976 347.835 58.5132 cv
347.835 63.4966 344.964 67.4233 339.552 67.4233 cv
334.14 67.4233 331.269 63.4966 331.269 58.5132 cv
331.269 53.4976 334.14 49.5703 339.552 49.5703 cv
cp
f
352.851 61.6479 mo
352.95 64.1567 355.127 64.9487 357.438 64.9487 cv
359.187 64.9487 361.563 64.5522 361.563 62.4077 cv
361.563 60.229 358.791 59.8667 355.985 59.2397 cv
353.213 58.6128 350.409 57.688 350.409 54.4214 cv
350.409 50.9893 353.808 49.5703 356.777 49.5703 cv
360.54 49.5703 363.542 50.7583 363.773 54.9165 cv
360.968 54.9165 li
360.771 52.7383 358.856 52.0454 357.008 52.0454 cv
355.326 52.0454 353.378 52.5073 353.378 54.2231 cv
353.378 56.2363 356.349 56.5664 358.956 57.1934 cv
361.76 57.8208 364.533 58.7446 364.533 62.0444 cv
364.533 66.103 360.737 67.4233 357.272 67.4233 cv
353.444 67.4233 350.21 65.8726 350.045 61.6479 cv
352.851 61.6479 li
cp
f
369.351 61.6479 mo
369.45 64.1567 371.627 64.9487 373.938 64.9487 cv
375.686 64.9487 378.062 64.5522 378.062 62.4077 cv
378.062 60.229 375.291 59.8667 372.485 59.2397 cv
369.713 58.6128 366.909 57.688 366.909 54.4214 cv
366.909 50.9893 370.308 49.5703 373.277 49.5703 cv
377.04 49.5703 380.042 50.7583 380.274 54.9165 cv
377.468 54.9165 li
377.27 52.7383 375.357 52.0454 373.508 52.0454 cv
371.826 52.0454 369.878 52.5073 369.878 54.2231 cv
369.878 56.2363 372.849 56.5664 375.456 57.1934 cv
378.26 57.8208 381.033 58.7446 381.033 62.0444 cv
381.033 66.103 377.238 67.4233 373.772 67.4233 cv
369.944 67.4233 366.71 65.8726 366.545 61.6479 cv
369.351 61.6479 li
cp
f
394.695 58.2163 mo
393.606 59.0083 391.494 59.0415 389.613 59.3716 cv
387.764 59.7017 386.18 60.3618 386.18 62.4399 cv
386.18 64.2886 387.764 64.9487 389.481 64.9487 cv
393.176 64.9487 394.695 62.6382 394.695 61.0874 cv
394.695 58.2163 li
cp
399.249 66.9614 mo
398.753 67.2583 398.126 67.4233 397.236 67.4233 cv
395.784 67.4233 394.86 66.6313 394.86 64.7837 cv
393.308 66.5981 391.229 67.4233 388.853 67.4233 cv
385.751 67.4233 383.21 66.0376 383.21 62.6382 cv
383.21 58.7769 386.082 57.9526 388.986 57.3911 cv
392.087 56.7974 394.727 56.9951 394.727 54.8833 cv
394.727 52.4414 392.714 52.0454 390.932 52.0454 cv
388.556 52.0454 386.807 52.7715 386.675 55.2793 cv
383.871 55.2793 li
384.036 51.0552 387.302 49.5703 391.097 49.5703 cv
394.167 49.5703 397.5 50.2632 397.5 54.2563 cv
397.5 63.0347 li
397.5 64.354 397.5 64.9487 398.39 64.9487 cv
398.622 64.9487 398.885 64.9155 399.249 64.7837 cv
399.249 66.9614 li
cp
f
422.876 56.8633 mo
422.744 54.1904 420.731 52.0454 417.959 52.0454 cv
415.022 52.0454 413.273 54.2563 413.075 56.8633 cv
422.876 56.8633 li
cp
425.583 61.6157 mo
424.823 65.3774 422.117 67.4233 418.29 67.4233 cv
412.844 67.4233 410.27 63.6616 410.105 58.4478 cv
410.105 53.3325 413.471 49.5703 418.124 49.5703 cv
424.163 49.5703 426.011 55.2134 425.846 59.3384 cv
413.075 59.3384 li
412.976 62.3081 414.659 64.9487 418.388 64.9487 cv
420.698 64.9487 422.315 63.8267 422.81 61.6157 cv
425.583 61.6157 li
cp
f
445.25 64.9487 mo
449.011 64.9487 450.463 61.7144 450.463 58.5132 cv
450.463 55.1475 448.946 52.0454 445.084 52.0454 cv
441.256 52.0454 439.969 55.3125 439.969 58.645 cv
439.969 61.8462 441.62 64.9487 445.25 64.9487 cv
cp
453.169 67.0269 mo
450.365 67.0269 li
450.365 64.7173 li
450.298 64.7173 li
449.375 66.5981 447.197 67.4233 444.854 67.4233 cv
439.607 67.4233 437 63.2651 437 58.4478 cv
437 53.6294 439.574 49.5703 444.788 49.5703 cv
446.537 49.5703 449.044 50.2305 450.298 52.2432 cv
450.365 52.2432 li
450.365 43.4653 li
453.169 43.4653 li
453.169 67.0269 li
cp
f
469.339 56.8633 mo
469.208 54.1904 467.194 52.0454 464.422 52.0454 cv
461.485 52.0454 459.736 54.2563 459.539 56.8633 cv
469.339 56.8633 li
cp
472.045 61.6157 mo
471.287 65.3774 468.581 67.4233 464.752 67.4233 cv
459.307 67.4233 456.733 63.6616 456.568 58.4478 cv
456.568 53.3325 459.934 49.5703 464.587 49.5703 cv
470.626 49.5703 472.474 55.2134 472.309 59.3384 cv
459.539 59.3384 li
459.439 62.3081 461.123 64.9487 464.851 64.9487 cv
467.162 64.9487 468.778 63.8267 469.273 61.6157 cv
472.045 61.6157 li
cp
f
475.377 43.4653 mo
478.183 43.4653 li
478.183 67.0269 li
475.377 67.0269 li
475.377 43.4653 li
cp
f
482.704 43.4653 mo
485.508 43.4653 li
485.508 67.0269 li
482.704 67.0269 li
482.704 43.4653 li
cp
f
500.423 58.2163 mo
499.334 59.0083 497.223 59.0415 495.342 59.3716 cv
493.494 59.7017 491.91 60.3618 491.91 62.4399 cv
491.91 64.2886 493.494 64.9487 495.209 64.9487 cv
498.906 64.9487 500.423 62.6382 500.423 61.0874 cv
500.423 58.2163 li
cp
504.978 66.9614 mo
504.483 67.2583 503.856 67.4233 502.964 67.4233 cv
501.513 67.4233 500.588 66.6313 500.588 64.7837 cv
499.038 66.5981 496.958 67.4233 494.583 67.4233 cv
491.481 67.4233 488.94 66.0376 488.94 62.6382 cv
488.94 58.7769 491.811 57.9526 494.714 57.3911 cv
497.817 56.7974 500.457 56.9951 500.457 54.8833 cv
500.457 52.4414 498.444 52.0454 496.662 52.0454 cv
494.286 52.0454 492.537 52.7715 492.405 55.2793 cv
489.6 55.2793 li
489.765 51.0552 493.032 49.5703 496.827 49.5703 cv
499.896 49.5703 503.229 50.2632 503.229 54.2563 cv
503.229 63.0347 li
503.229 64.354 503.229 64.9487 504.12 64.9487 cv
504.351 64.9487 504.615 64.9155 504.978 64.7837 cv
504.978 66.9614 li
cp
f
517.287 43.4653 mo
521.577 43.4653 li
529.001 63.2651 li
536.459 43.4653 li
540.75 43.4653 li
540.75 67.0269 li
537.78 67.0269 li
537.78 47.4253 li
537.713 47.4253 li
530.354 67.0269 li
527.681 67.0269 li
520.323 47.4253 li
520.256 47.4253 li
520.256 67.0269 li
517.287 67.0269 li
517.287 43.4653 li
cp
f
557.348 56.8633 mo
557.216 54.1904 555.203 52.0454 552.431 52.0454 cv
549.494 52.0454 547.745 54.2563 547.547 56.8633 cv
557.348 56.8633 li
cp
560.054 61.6157 mo
559.295 65.3774 556.589 67.4233 552.761 67.4233 cv
547.316 67.4233 544.742 63.6616 544.577 58.4478 cv
544.577 53.3325 547.943 49.5703 552.596 49.5703 cv
558.635 49.5703 560.483 55.2134 560.318 59.3384 cv
547.547 59.3384 li
547.448 62.3081 549.131 64.9487 552.86 64.9487 cv
555.17 64.9487 556.787 63.8267 557.282 61.6157 cv
560.054 61.6157 li
cp
f
561.835 64.8823 mo
572.131 52.4414 li
562.496 52.4414 li
562.496 49.9663 li
575.761 49.9663 li
575.761 51.8804 li
565.333 64.5522 li
576.223 64.5522 li
576.223 67.0269 li
561.835 67.0269 li
561.835 64.8823 li
cp
f
577.675 64.8823 mo
587.971 52.4414 li
578.335 52.4414 li
578.335 49.9663 li
591.601 49.9663 li
591.601 51.8804 li
581.173 64.5522 li
592.063 64.5522 li
592.063 67.0269 li
577.675 67.0269 li
577.675 64.8823 li
cp
f
605.461 58.2163 mo
604.373 59.0083 602.26 59.0415 600.379 59.3716 cv
598.531 59.7017 596.947 60.3618 596.947 62.4399 cv
596.947 64.2886 598.531 64.9487 600.248 64.9487 cv
603.943 64.9487 605.461 62.6382 605.461 61.0874 cv
605.461 58.2163 li
cp
610.015 66.9614 mo
609.52 67.2583 608.893 67.4233 608.002 67.4233 cv
606.55 67.4233 605.626 66.6313 605.626 64.7837 cv
604.075 66.5981 601.997 67.4233 599.621 67.4233 cv
596.518 67.4233 593.977 66.0376 593.977 62.6382 cv
593.977 58.7769 596.848 57.9526 599.752 57.3911 cv
602.854 56.7974 605.495 56.9951 605.495 54.8833 cv
605.495 52.4414 603.481 52.0454 601.699 52.0454 cv
599.323 52.0454 597.574 52.7715 597.442 55.2793 cv
594.637 55.2793 li
594.802 51.0552 598.069 49.5703 601.864 49.5703 cv
604.933 49.5703 608.266 50.2632 608.266 54.2563 cv
608.266 63.0347 li
608.266 64.354 608.266 64.9487 609.157 64.9487 cv
609.388 64.9487 609.652 64.9155 610.015 64.7837 cv
610.015 66.9614 li
cp
f
612.787 43.4653 mo
615.591 43.4653 li
615.591 67.0269 li
612.787 67.0269 li
612.787 43.4653 li
cp
f
634.071 67.0269 mo
631.431 67.0269 li
631.431 64.3218 li
631.366 64.3218 li
630.177 66.4331 628.263 67.4233 625.821 67.4233 cv
621.333 67.4233 619.948 64.8491 619.948 61.186 cv
619.948 49.9663 li
622.752 49.9663 li
622.752 61.5161 li
622.752 63.5952 624.073 64.9487 626.217 64.9487 cv
629.617 64.9487 631.266 62.6714 631.266 59.6021 cv
631.266 49.9663 li
634.071 49.9663 li
634.071 67.0269 li
cp
f
638.295 49.9663 mo
640.935 49.9663 li
640.935 52.6724 li
641.001 52.6724 li
642.189 50.5605 644.103 49.5703 646.545 49.5703 cv
651.034 49.5703 652.419 52.1445 652.419 55.8071 cv
652.419 67.0269 li
649.614 67.0269 li
649.614 55.4775 li
649.614 53.3984 648.294 52.0454 646.149 52.0454 cv
642.75 52.0454 641.1 54.3223 641.1 57.3911 cv
641.1 67.0269 li
638.295 67.0269 li
638.295 49.9663 li
cp
f
667.204 58.2163 mo
666.114 59.0083 664.002 59.0415 662.122 59.3716 cv
660.273 59.7017 658.689 60.3618 658.689 62.4399 cv
658.689 64.2886 660.273 64.9487 661.989 64.9487 cv
665.685 64.9487 667.204 62.6382 667.204 61.0874 cv
667.204 58.2163 li
cp
671.757 66.9614 mo
671.262 67.2583 670.635 67.4233 669.745 67.4233 cv
668.292 67.4233 667.369 66.6313 667.369 64.7837 cv
665.817 66.5981 663.738 67.4233 661.362 67.4233 cv
658.26 67.4233 655.719 66.0376 655.719 62.6382 cv
655.719 58.7769 658.59 57.9526 661.495 57.3911 cv
664.596 56.7974 667.236 56.9951 667.236 54.8833 cv
667.236 52.4414 665.223 52.0454 663.441 52.0454 cv
661.065 52.0454 659.316 52.7715 659.184 55.2793 cv
656.379 55.2793 li
656.544 51.0552 659.811 49.5703 663.606 49.5703 cv
666.675 49.5703 670.008 50.2632 670.008 54.2563 cv
670.008 63.0347 li
670.008 64.354 670.008 64.9487 670.899 64.9487 cv
671.13 64.9487 671.394 64.9155 671.757 64.7837 cv
671.757 66.9614 li
cp
f
693.668 54.3223 mo
696.606 54.3223 699.114 53.5635 699.114 50.1313 cv
699.114 47.8213 697.86 46.1055 694.922 46.1055 cv
687.135 46.1055 li
687.135 54.3223 li
693.668 54.3223 li
cp
684 43.4653 mo
695.087 43.4653 li
699.51 43.4653 702.249 45.8745 702.249 49.6362 cv
702.249 52.4741 700.995 54.8174 698.157 55.6094 cv
698.157 55.6753 li
700.896 56.2031 701.457 58.2163 701.688 60.5259 cv
701.886 62.8364 701.753 65.4106 703.074 67.0269 cv
699.576 67.0269 li
698.685 66.0708 699.18 63.5298 698.718 61.2192 cv
698.388 58.9097 697.827 56.9624 694.791 56.9624 cv
687.135 56.9624 li
687.135 67.0269 li
684 67.0269 li
684 43.4653 li
cp
f
713.501 64.9487 mo
716.439 64.9487 718.815 62.6382 718.815 58.5132 cv
718.815 54.3555 716.439 52.0454 713.501 52.0454 cv
710.565 52.0454 708.189 54.3555 708.189 58.5132 cv
708.189 62.6382 710.565 64.9487 713.501 64.9487 cv
cp
713.501 49.5703 mo
718.914 49.5703 721.785 53.4976 721.785 58.5132 cv
721.785 63.4966 718.914 67.4233 713.501 67.4233 cv
708.089 67.4233 705.219 63.4966 705.219 58.5132 cv
705.219 53.4976 708.089 49.5703 713.501 49.5703 cv
cp
f
726.8 61.6479 mo
726.899 64.1567 729.078 64.9487 731.387 64.9487 cv
733.136 64.9487 735.512 64.5522 735.512 62.4077 cv
735.512 60.229 732.741 59.8667 729.935 59.2397 cv
727.164 58.6128 724.358 57.688 724.358 54.4214 cv
724.358 50.9893 727.757 49.5703 730.727 49.5703 cv
734.49 49.5703 737.493 50.7583 737.723 54.9165 cv
734.918 54.9165 li
734.72 52.7383 732.806 52.0454 730.958 52.0454 cv
729.276 52.0454 727.329 52.5073 727.329 54.2231 cv
727.329 56.2363 730.298 56.5664 732.906 57.1934 cv
735.71 57.8208 738.483 58.7446 738.483 62.0444 cv
738.483 66.103 734.687 67.4233 731.222 67.4233 cv
727.394 67.4233 724.161 65.8726 723.996 61.6479 cv
726.8 61.6479 li
cp
f
743.3 61.6479 mo
743.399 64.1567 745.578 64.9487 747.887 64.9487 cv
749.636 64.9487 752.012 64.5522 752.012 62.4077 cv
752.012 60.229 749.241 59.8667 746.435 59.2397 cv
743.664 58.6128 740.858 57.688 740.858 54.4214 cv
740.858 50.9893 744.257 49.5703 747.227 49.5703 cv
750.99 49.5703 753.993 50.7583 754.223 54.9165 cv
751.418 54.9165 li
751.22 52.7383 749.306 52.0454 747.458 52.0454 cv
745.776 52.0454 743.829 52.5073 743.829 54.2231 cv
743.829 56.2363 746.798 56.5664 749.406 57.1934 cv
752.21 57.8208 754.983 58.7446 754.983 62.0444 cv
754.983 66.103 751.187 67.4233 747.722 67.4233 cv
743.894 67.4233 740.661 65.8726 740.496 61.6479 cv
743.3 61.6479 li
cp
f
768.644 58.2163 mo
767.555 59.0083 765.444 59.0415 763.562 59.3716 cv
761.714 59.7017 760.13 60.3618 760.13 62.4399 cv
760.13 64.2886 761.714 64.9487 763.43 64.9487 cv
767.126 64.9487 768.644 62.6382 768.644 61.0874 cv
768.644 58.2163 li
cp
773.199 66.9614 mo
772.704 67.2583 772.077 67.4233 771.185 67.4233 cv
769.733 67.4233 768.809 66.6313 768.809 64.7837 cv
767.258 66.5981 765.179 67.4233 762.803 67.4233 cv
759.702 67.4233 757.161 66.0376 757.161 62.6382 cv
757.161 58.7769 760.032 57.9526 762.935 57.3911 cv
766.038 56.7974 768.677 56.9951 768.677 54.8833 cv
768.677 52.4414 766.665 52.0454 764.882 52.0454 cv
762.506 52.0454 760.757 52.7715 760.625 55.2793 cv
757.821 55.2793 li
757.986 51.0552 761.252 49.5703 765.047 49.5703 cv
768.117 49.5703 771.45 50.2632 771.45 54.2563 cv
771.45 63.0347 li
771.45 64.354 771.45 64.9487 772.34 64.9487 cv
772.572 64.9487 772.835 64.9155 773.199 64.7837 cv
773.199 66.9614 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 16.0.0%%For: (S\616bastien) ()%%Title: (IFRC_logo_Italian_P485.eps)%%CreationDate: 2/27/13 5:18 PM%%Canvassize: 16383%AI9_DataStream%Gb"-6%=9>/EB*st!rF"jVfd#oD0iGp@!A0;[7EoM'A:+V3DS$[ooCKjm[0b?Q'2'n:]I%g]I]B`FhThQ/+%C*/Trfb$jM>%?i[k6%hIL]:^0IgJ9fCmW2#>"sUUmQs:$G1!e\un(rFYkAERTPS`gs.n!fj=]C&ltI/*dUSWQ#Am6,)%7ipLQd^4!TK>V'c1VOQ+JHh5YK%ZhZ+BS<*ZZ=KOL=N[Ch&`LGl#P>C#dB?SibCpUgDhi<X5Q^DHdY:"P;e`Gt<="b?DO%-jc0Y.1OYl4P*E.'R;^G3:pqU6rcH+pf%%"]D%q1*L.RGB:C,;C\8#4o,$!00VT@g").[?VQ"NOOMPTpq$[oUQHFZUN5]@r-EDS?[$PoqBnrW@hL%^<d+pHUnk8LJ$j_BIBoDn%Y?tN/=!kIIcej,Bjod.BIG8YR?,ptHpdaSTq=`&](2'!eq?/?RgtY51MoAjs@Su.m&J4K)CfZo!WH%j,ncFY,2d'1_Km`f-4(#bN%qCt!p5/93ICbQe/4BmKeXQ*JlnlO#ZC2p;E:;u3;b)+H.5<W5`>2J%PkI8XZqTlp<f%t;IYCH`%E$#qWJ7DjiJnP%\WVj8D4$W;,%*BT#TEcH68Rbo_g<bmfW)SXC5JH/8O8N(-CY%hT8ilnq+<BY)U*S6RY:tEY;<gL'[BjQ1n>^ZFrkVnFqj^QDrHa:>5^AMm\7:U1;%o)JXLg"gDJrV_%f$`"H5N^`]Kc/iF-dAREJcW5+M=F*[=T)lZrDdP)6Tc\/QGK?/47]hsV?/p>3r;q\aiW?j(?ECosHpq"`@%fVu%?+Z5SSk4DK?luVU"#=.D1+i#:=D@%]'Q<Vn/d!gP4tW^ITFme_=8QI=I'm4/"Dk//VQ.->I^36c`]iVafQU=SC6QEBA$sFn:B,;K%J/bu,$`Kp7/MR,Sl.+njZfbTCQ`i\0XQN5aV5XH52/7]J$&HrS2SYeMo63n8:%d=Uo)7t8VKf:tT=W&B]uU/b%f`.r279UWG?s7\%]#Lprc!SfB0K81c*hg6e2t%@$H\CthlqDDB*Pun=_K>:"\[r?F\dkG'0DlocVGi/::,1pRMI35ZKK2-3Y@hM)A+$ZZr-ih/H'i'<%Qg*HAq((UWmkncur#_W::A@%?@@ad&r!dFps!%s'#lhqk.jm;0ed;As2lmVjO-l;1N#?Das'rb42l:&TYY=1+Q]FsF0Dlo#cH\+<%gBT0?*]"V#9DCa7jI.mt9KU_CV'G*U7LHsr#_hrhrt,pR+P3'sEJrdoKYmS"$StjD0@g[6a#C(?[m0l<P[b("O&/qCr1@2UV1eZe%j^X,s"%]uFO1#qTa';+_k*tpqCX1ESj\-JWbF#]N(d`]`#&C-"M7(7V>\j=rou$eAMWGfCa#r=npclW'm>CX;ZF0-TkI:Y\DO"Xq%'pU\QS0`l#62QAE.J'+0A$0m`bVu>&>=@esZm1g$cIb-AJ*.oNS9lSU1UfC9L,#4G&'JnXm@:)!:O?mD=j!Wjq^gPQpJLoDGEa9<%l*6M=bHW(L,3:*4NndH7Q!Q&/nT%B79)?B]X;-`m<#'n>^\J,T2#N3Fq58J`3DPFGq57s%4oXT9[cR7leZrET3B?%OnMgJA-N"p7%o2"o5CrRpo2ufD>npC;Z5@sUuI?&0"s)YgC]>!fRW*a,6ecFC6km@;MOl,g"Cf\!n'8/J^S(UA[2DZZY%I"PM9e!KGFRm&;he/I;%;I%FQH@bY>Xs'FrZ;2AkRF3\b9m"3QUoHmV>_P.5?mKQ#N"pj6hcpB`J',Or*PS)Q<rYW[r._aX>$'[p65$Ekc;6k!=o=chU3`GG%ku]#+V:b91FkW@s>2M1Z6R'je*lqXFr!@E]jL:_FdouNH:4-,=X!qcjiiK2JEX+c7rf%Hg%<#)'WY$_2F824JWhsO0k*1b63L/Mb%_D*oM.d(jF8R&Tk)o"/9S/\_1aYdOfOo]9pr.V[*F:"47;eg6GFe-$c8p.O<mup<LFes1sIk2E9B.R/'Ul]<@1ucV+;]T;/lRX>Q%-.T4haoS5#_;(U0`H`:Fo?Pn)JVqpaB$<-L%J3QAOi/[h^lq^"B3Jq^iJ.!V$-@4IML8;s5`npU6G;+k[l:cN92@$c-u6n.qEf$I%;E\N)<!G?As)'.U$n*bLpV=M5CG4(bH+B;0qcK(im;)@F0i]f%K`=H+4)W;d2?E3#s5UkXG1se$WR_bo@-/iT(#Xp8nNT]5%WQgt%%*46sZK.+%0H`B+$T/*84X9k6bL*]GI]8P^[JX;V75Y]nUX3%-Ha-mE]p*Plq9AD[s/O>F^d9[)CV*\EG5HS3FIuqm5WYPB,V:m?%ag..'/(]Yi'AnrDgk$g/Q.DGd3TqjdW[Wfg;!5&7?,s7Jo$+T'S5CZF:<QX_@`Z2u/jE7L(l/5<"8CKUJj/'`/"_>tFu"UQUfJcN%TNV_M-'Zes3N4&i9gua6L0WcqLU>*.LjblPir=ge2(3O/qmZ9<jg]'\W"2uX@Jp9dCa\RZ<oLRfOZ'$]QHnMm*+?Z944tKuBsc@:%On*X"0;7p#Bg^$CBBr)'>I9QB9Jm=I*VFg(c+Q0HRZp1.[C*(LUElFQ>VG#=buBP4G<0>(9h=s=;&t.qo"2a3cFu-a?nWeu#k-R.%qKEqX'h3O,91P/:BLV`FVW2n#$Y't2"T&C$':8bi3]35BRZcO$/`/Wq?_VJaIn_k'33.(p?Mi4=B!lp'hnn:C"oSD4CS$QZpTHg=%!;(;kP6/_doVMN_l08aBIBq\a?%9G7\LF,?>]*k!7UI`"DE$>3IkNEE?bH.A]_l72KVf)H?Z,$CJ,nF.b]pk7rl%0FB<1iO1#e7U%P@!qVrOHR!Q^dABbg*2clYdQ>c#nUrUs.GWUHcu3fCu%h\sfhcgC^7ebid/fi6**"'lh:$,EOOd2qPhbb!I5a!Y,2UT8k=5If"FJ%=Y83k2ZYkPk(Ig0rV2ski$?`o1tgaA]H2L3frP8/r):B`acq\P5E.Fi;MOi\CM(q28HR6ll"#/<P:Hg0pQkk%J'-EAo@7UOC-01Z%]t>13@,QA[M8)2AYeIkuYurYsY+e$).8T-]gZ?Chnbi9RgVq^jNB927>_8-ndu=mT4TBSRHh$r[q-lGC/f+b>+#^pXjn]U#s7tLA%FqGV!\[oe'Us\ecoBQQ[j7`-`5s>ebh:J=r;s""p#7%WMWCE(oo)4d>r,N)Gb"&tc1;A)*roalrOb=p.*L.kjGZjsDpf.=seEPWp%m,SJ3I,.qPesuOlG@o1dZg,c)Q)A8mVl-lMl07:$jKq!c_/K"EmaRiZVq%b,/]!#uS]tcqfjo7]lXju7"2(8:R@Vm7C1_'(fW;""%flT9GOR:IkS#N$kWL]dPC8U+RCiVQ;H[RZ;S4pLc4)$$ji[/hH:TB6P0*):1dut[%!0`T[1bDIk'7]":lq)V'SX:(p_Rn97ekNbJ%GLCV>gGPPj>\C[[X#e^\f?p1uZZb%t?psG:[V2/]\$!,U%;r7]_=T)CCt_ROPGW-LVJ1G<)V`d"^mYI$G^o"pa7'ali]H&o`d@0e%osM!9nR^\)go6dRWLLC2E#r683:E@^_oN]#(;)f<1HVuXHX]&E[^#MV=_heW=_#YOX?Nb!2>B'%8_qp6;)bnd?#Ao=Y%gn%eQI#u%c)PJ8WD9Ir!pd5a?p<8DY,]WDV)^?0AnIoP@STU0>14=,S?\qLPqf-e8nc9Yg7e^WW!&EN:ob37.fjjNP@4DqPb[ueSnp\>GR_TP%*;h98om-)af=f\U9jqL'JBH:?Ahj`\Xg0r<Y1)"WbnUScquPJ6MeED`$LI?%1.Q0@T3@hD*[=J&&$Y\bfZMO!SuFi9!]W=dDP%K\%q.\r)kje4'H+5^0WTZ)-PXSm;"7:2"D8jgpSgcf9Gu!Gbk\9-mkje5RU1+LuCF@*cA0`ul4s`G?q#$Z11QuHDcU=@g![QfZUn].@%iMVgYe)TLdAod:71moI<q'jWdVTq`8:._nhRE@=Zk<tn:SsGs;*`%i\`tmBNbY#".(.^dgW3798Q0>8U'g^p0B@_F,]k=YBSEQ/\%Onc:F:XaZ<mu`W0KH:m*<8P+D;sc^G+/jBlb4nO-9:s\i1[@3Qr_l?XNR(2bl#rZ,pGD,5KRTIUY4pT*;suj&rMuZj#82I#59L;f%LFs.-ERb'@5rSGYrnE<ZYtt'80)@$5^FFIK8fk)lo0Bj]>[q(iX-re;.,%o>DGb7YD0Qg$&X1!u=n7`2j\Y&;jjk4nd44D7"1VuW%fAVac>thjOG=WUB6A(_YMUNXfg3B93o&r'SUS<d24C[UNWT36MT]&lU>9/**-k6<TrJXCu+!/mRK\$gN.EDKcF$RtP2ARY1YU)#f%8*p_j3eCTe1TQ+BVZr(YYW5(J%I#Y]KSg]);+%hBYS1cl;ee6Ym=_V%WA-GCrfie0/2kFD9,qaT@Mpq98piWD5#bL"XDL=i4/'f)%(!_WrMC:m()A)oY]"nN\_[O,q=TME6BFVmHTCL9P>3J=$d$LWVVbZ%caJXT$X._umqHX4%YCh9`J[&kmA'u79Xap\Y@B=K'Ai0`#%?6'G`',\r4H0>Z)g-A<_0\AB&oU<4B&b#om_C:G"VsP@X\cE\I@C1,1C,RblFteeK?o4FjW-VK0+#"fW2%6r(L><&Hh/EZ8L>s-[%b@f0^$j]Q:j0aMZ]7KLaK5l8?j7s,'oeYeg#1q@4]QZ't2[(#u38ln!K4"n<_&;kl"(G;`_;N+JBP&hu&LUs\9QAm2Fp@ohJG@Z&%EB(0b)R)IfYXBgGOj(Tr3@h<9U1Akt!Xo2&"_n4<$ks._c0<oLMF&1;6IZ3:&*+XZH@G)QZ-.pJ?6h[>Hb&cel.iOJa"AAoF6L^#%Ks;<3mMe6*hIU20V/@4JB\khI<u049A!a!o(j]ZJ"(UfCHQDc;mVG>UC"g`KH<QKsN[,QT)l7mR&rn^W;N;8BRQ4?0^k9]Ee6a4f%50A=AnrGr,UL&KL!.2SIH3<jGI*SZlP[YM0e2qDgB*uR%0f]\c(@3XoFW'O&P;lGWFjD*<i(!l/(r/Q!PfT@+WViuB\+DNJm!#*9%pUO-#q1/3%)/u.%*,"Om7F,nT1;A+Lb<4i>e)4RAqTEcl=WVOILE,EMk8<8$5\f]L[XE&3-O+qF1XCj3j!!T1YA7D8XQ1P6)!"+C%`LkS(RB@HqR"<2t%F4O;YtT_nVP8$2qWbY&`b-A]0>C5rQ:(Ip&Gb[Tm09Mr>p%2t5oG4lf-,<]B1?Y1gI#SM-p7EUM*B8BdV2Yf%-TiPNA4#Da)C.*o9#*!oLDlZDX!.qJ-7]8e'M#S==t:%b/@\T6\2a>CSgbO21GWFTN5::FLrHeHPGT\5"q;MA`XS@q%@K1`j:k#7%$/%?QZ?O[TR??#%Fq6b^SD5&5Z@QbrK.IOI0F31l6r/_1;1Wkc`EC&H;1p`O:=2hRLLd"R=[b5I9m.1R:6)D'5N<L;(9ONe(j86c%e:\71WJ7aQ@>,57-LSS_)-Jg7>*aqI)!B9(C<5T?Z`?@J,J-^MN_%_MiM'Ga1ORgs@`sLb19r1H1o$2&%((bJ1bdAcDFh(aLgai#%&RgJGg2:Z7=g?QsZ.)Oe7MG)]>d,[pA87!E@Y.<W7@aXp9+<L2[FE8qoBK<!.O/hk>#K*&OnD\0]rr3dgAG^YX50tF5M?$F&W&(R%N$'m*$Ln/8$OD33H33@>W&LCKJ9h@`'8T^$r;uX#e2L4m5lCfX&Ca2]0-U)sl7'50S-=$Oe6t>5IVFD[TO*9I%I,sPn"AN)?&/TV%/qc7ti^QVe*[`H[D7*no,o`Fi(K*:<-0m,Z53%_dp9H>`GF0?Ip5i^C[l_8fOo\=%/+#n5jE4Qj/6S<3N%o*M)?`IsdZ?o/\0JuJ%MNT:q+KCo90379?8Uj/l!$=+l=OAmIro)7Z`sNk,H,sjeiIM/f(gk@/6`NgL+Z;0&CgtSHZoO=%iu%gckbb%Tpp:3aJ34TnH?b*R%CRiF>Z!h3+A[@GQ%H\!2cIaKJ%EU`^ZN\b)_rE[i9GuC6eE=*.c""0^fV51H$(5'qYF\V;Sl5$K:_,da?J\OTDlL3)eDi^bH:L-U%;X^e\"&u'"i$hJ?OL7\j+?-0b35cNZGJQL]FD)6#=N?.U3geh3WtQICLbM:44Dg;k'Bqd@3M%;!$I9kiW't;D>]I-,irtAYW1Fn7%[dT"Q3bY>,##?r'j@)*"a*$H6`srtM$8LkHA,o2VO>r%ieTM=D>9t&S91G)Q8?B1tfOnhP0;Wi[Q.[T>elX:u<,.)Wb!Zt=<>Atg%=g>Mh]d9PARTZOt?l>BI;T$Z#/64:Pe>/2JX;MsS@R='MVZiC'j3[N[oVL"NjZEIpLTnN]FS&MEIFc.C_Q*VM]1G6Rq9]b.'pptK%q7+lCIq>I/])MfS6#6do1h"R\J&nVTBP?QXnP86"4'U(QbYsQb/',&>4H2h%H7O.cRt<K::YDIOZ\Pg/[_%9RJqj1p:Nh?Ma]"VZ%j;CIZ%+KP`Seb^$Q>K@)#K^@(fW8QI)o4/]s(J:%(Ct%oQD[H&6;uK=GnQ5$+)q-0BV:a??nnJY@mYeP5Kk5sTCML`\`c0G.ncAC%Y%e<L^j)$)k;q6*B1nZ;=g9s>//7M.GF3ctcTep!_Sa+"p[Jc>$CQB(rb2m-`D0>*T]`-N'Y?ri1O7=L<_[QlID@YNs!a+tdg&'h%56];R,sEo*T6*>QViqQ^1[*L5"sX)UUE`1lglG0APkP7#KX@qjJ,p1+htMnNa\S8h2t+rK/`IG)^e#S@:4;2qmXQ[KHc<T7mb$C^%L\i%urAjMKjY.5f2"WoO<dBK][a,H&b/Q%*1/j8u-Tb,5o<e<lKUIPdnN2fdH0igD1D.S_`4^msM5iKtOZkim@]YsF%M):hO"B$!%?ZtKdfo8?\o^lYC#+f:BptG5d%r0jEMP4^m4jS!Ggd"EciGN[PB1_06?T5O!45B/@$k*'k#q2D6e%$isGLAK!SSure-Cnd)7BdBS%5+DhXYRB#)gOWD<n;>IS1&5G@NO(k+'l;]_;.mj$YLnXEhg?atgPK$INVM`&V,qJkZ):oaZ```-3p]W.X,9V$n_2N3=3k0#GP0h/%IkS`k<u4%]n`n+a7m=NT1%6lCoA\(4ZBd\<eT5lu;n"r5lr2M"Fmd5^`usj"beXfBING>]*bu[lPX[+@#c26?rQ<^+B]L\L-*T!i%+`RY5=Vq@D&9QtZfVjufUM2J)_MB%]MDUj%Pq\q(D[id?#01h1$m$RqIhg'JR1>GZJ[.L>mLGQB*>YsAeL#@)6iQ%Q%l*SdMpt>R%j!-b/9.Y*B0m\\)'@>1-"YX0jgOFPn`-a'c4qB/moJSSa#/?A\812,/l)I==Y)Nj>IZWN4\%Q*"hB+mb>cOKQG2GQ"2#GG9C!cm4%e"E[?3"+&HGg;K)LbagKcmX`#M3ZG4$!W(U#n<Eo8bds6l*iFQhh=UYP9c_d@k-[kB(8BWlk1[#DBXft.mf&X7YSsQSV1>a8IU>L%+u(nm6Pg<F&<q0tKP"nB`\[m6'G@<`)P]1,E^Q85D.r9*N8Mu!%\#k,^f)NM$G2K*6QU^=QM8%/TVY2-jP2qRlL4,WDps>s6XBJ(%H>ml&$boCH/e3$_\*:`JTe?7$4h*K$Ko]EY8;)=kaSWj2%Z#O/r/8C?YhL8*IZZe,T-EYO"$L8*kOa*tQ1q+!ku)5ng?DiIB(rUq%\RNl)h%:<;a3Bq;c@6k%eEUtafU\SdSY$dgTulG1$42L^_(qQPk^.fNAp:+aGHSqo:["uXYWZap(o(N=]f0^?k&$!H#ctO6OW("Z%@X>ajd5+7M,j$SZ=R<+l$lGd%b8+oW(-S./GO;-[0h_6YVJ%sCI)[ktf0&hr9N'?K2q.!AToV<o)%QTcMUNI@q@HTtfmL>Z60>*E%'fScM)P$j%%*h#RPt@afED,@'T68F,SVnT(baL&eieK1nk,PKWiQJ=5_CC$012FVH>5[l$epK\b0t<pY0+#\s]X)R4G8<kkga^+t%PL#4PA.<"o;e.t2J*6uD?5th<I/)CJM1+l=%+BMB/d<MaJ'*\7O3osPl9=9lN/6Q!Jk'\JW%EU@R<VhGZu8%Di&BAqf1U%G*>#iT%A<UA'2*KR5B,`3&^P?ZZ8[@`S=I"BqjbQ%0lCETnIhH[>ceaW:0+[UIT&2.9X3kIl"ck>9SaF4;m$<^g1-*8>E<q%6_K?.a!N5cO%6c]$\M0dq`Y^8G87u(!&IYOo%UM#ZL?\,'n843X8lI)]SD%lMSW]]Rb4j,aEU@9Q<\W7\idjZBZb/^bB4*Kpe'HT^%T-#YCa5Q+,%Z?R(;8'Bn33-hk^*_#&8Z?R?a*\E:?;0]H!*f#rOeo:1.$BLqNBN[G--]aS4UF86.(6?ATULisD$@b4^i_L)FEna;/Q_f%:*`J&8%fBgfehjm65Pl2,(jjFF"SaV1K.m*1)')USB+JG'Qg/\"Vh34sY%bD6*&!Mhl%b5K97b\rdT,VYR=!"O%So"Ctp@J0M_;E^jHS[SS%ZsPWE&C!B*[jPC,:]%QsR\@EmrUsjiYl,'QFh+CpQ2A1oj>f89MiYIerG9D"KZD094Wg>e.\;PqlLe1=\fBRM4$:M.UJ*DH9C:AO%AoOOp%dd47*,4gYCPp#VeIIQrC:Ee1^6^k9l(%0o::EfmS#F4/l[k)qpnZZOe*YoSk3fbL45CZ)42q[)'t9F*pJRk6a.IH$Hed^(%G/+pQm.bgSI!UZtHBrq@:S+/K/\n?e=!No8EjP@/:8;f(G3\MM2EVE;<dfc7Or<INq1mUX*j)b=lRWn<qjMcu%c7/d9^Q'n2"^dE%hPVHZeh29n]r/[Wm-!cDH#^d==Sj"cn78UESCTpSq"pP1hsT>mYu_)%$,M'FTO#:NJ0=3969&gX:YKkFF&L1U%XQ'"HGEi7ZRG?g%]isPr9X4&.4ZXmdOn4a<S<Ic"G3-NuH:9f!YEnd?90)*YQ6!0\a^N1qN\KV5MrOhbVfGQ&U^1W"[;m[84CsR#@q7X_<,Tm;#OS?X%m9-t+ce,Obq3b0lo55a2h6h:iN0d3)C:VKiPj+W8\[ZN$f@@8aD;u#7R]_tBkXrC=:=%geaGk8Cgb\-!;tu;V-$LgdCejK,b]jn1%,PT,Z3U>)bB6WD>N#%JhD6gu-5?ht9?tcH=G$3)Zm]Hd)J9n?Aq]idk7W)Elp_h5^O+ZEO@+a(]H7QC0'O<)1mFgR?4f@J@b:P]5%gkjM&%68f6i^o9f_D_c+q<HXJC7a]&7IcUG]jG*LZ.,7!D'>8@kQ1!54ABj)?Rs`cl)fC(k.XE-_D!"q<lcS9i?CK(RGr@<-9:Tt%cN;ZbK(\nH4]o51QIB(;=ufZ^$^^h2$i_R4i8].p\LVhu\B@XV9C;q)4%J$7*c"hfkLq?caanV])#aEV)@ng*XcS6rLG*N23NK8A%Yde]FnjZa;J5Nh$hu^s4-ajaO9,nILjN()5.umfq3-q9NO/SVk[Al_:DBO=dB+"NAUF4\VVfI($,[;7mA+^PL1PJWd.YrMN$LaQ:%gp;Bc`:W:55=VekM!#.Ap0']6.Dt\GiF)g:4`*0M2r(lmjOE-TY4pJ!LPLk^M;6c'cQA/V>OdukEY\&EfOG24\S/G^fB_jl6?:.k%/'Z?KDi:2A,cVt^>ZAgM763djI"gCl"a7kY)sm9'?[)#1\mjRaFii`f&%]?T(q@2\4o40LJSXS/E,V<&>5-U7f#`d-7=Jn*"0S`[%F(&@:h,sE]K_9iB0'$VoMb>37INI%#K^^!%_=\Si]0po5f!`'eaUi'nMp8bQ;tnRuR-/@YT/"[J?.TbL?-D38jW_6S\KSFgkKr5)%T&Ib9;$SsQ&a0h!nbVA.!bPS]8ESO`29bS7k'.X4KXA*+s!]aAL*eqGK#[`\l:ns>F0bQ2c$e2^P'5dt6Gj\7Uh7bg!@KCeGZs>!%'qD(FdRuQXoG5a5#gn(PE5j?>r$'EU0B/4;m^]t([/,i)ZJbo22D!]gZgV$O.c-/&O&qY`mn13mEo3Gfr.-48(5[Ki]1B@.JSN0Y%7B5_c<%HfX;JgoV>4HcuCAS+`MRSLCgE3@p]Nq>er]mk8$!R8-NZIc`',iL\$K4e8L:R>@LNLP0S1dNRRpPH6Mpp")?h[n3kL5NL%4TKlWqOX2AlA4@09Y?RbUb]4`:D+B=5n6V`6c.HIDq7^nbOt7CrT]"GP.C8X6h0t0I]<.de+rCu@_;VQo]0Pph0a"XeTc.Zqr)So%Mde&f.&jg5oYO@Q'@T_?s*sn]Ibc<J]0Xm>o_Meeo.Q4#mDt;O)u]$IjlhkK4Hn<I/,HBHcf)!-9U9;Sc,f?2TmB1uCReWT1Tot'%RGSV3D_Z/nmO58k('<a1&q#s]7TDGQ=UR[jPNm,q@k\+:TaIR%k6tO:>l[<H!9-7@C!m?P8u<JU2dJ;hGN6`GWSH^,"NJr$@pL$^%Wj.1#8)Hsr^Fr?mje/TLh%$pTc15n;[NiK+<jY(`,MJie[qS1fC;OmTQE^7s2ROQ=l#sP4gRXXJFrL3Z[SO?TM`3T1Du!mR`h*/e%[J]b/padhsjDRAEKSD8ARunMNr6:c2JiJ_sVKMIekfl3)r\CjU)1<]?I&jbJ*F8n[oVtW?!59A(_&ac\rB(+#d%i+H]Vcm\"d*IC%LqI@CckS;IISW7E4"e]'K#i9G;F(O_60(040ccA=,Da!F+;L!)K(++fBqR)0i)^(i2C?)5^Q<S<lk%78'StWM8228(;BUGW!F[9Q%+F`b[@3&5gId[=-B;!1#<C/]&<t4/V;k?6oJjAFn-W$>[K48!t-r/tl0sM$!-hO'b=>Mj@P>I<L@X>s?5b,VT3UI+a-fdNZBa!FK%*(U?p5b*o<0qF]F9%f5f=ngU@5]MB@jeO8#SBumt;A1HRkWpr*#o"cZTS1sTg*0G`W6.-j$'5E)!Tg[95U&Q5OAHjH7"d<<+Z'7W%"D'h@r8=JEi`/ZK`CV>+Lh/9'OM]r&QGH*Y$3ND3)2oi:0`3YWn6ZI+asiV\84eR$fqqPf!iIJ-S.Zb!1aRoU@O%D?jD[G*"HrtC%lICL`5Z.n#ZsG%&QmD=>KTZTf#sBu>,XV%5!;.`R]onI(*OnUC!iIJ-S8^98e!(hI85A)"-&6!)'/3!3=^Mi27COYP^cn*b$Doh7%;eaS:K]WD4,sI(tRM.ZGqAbNP:;B9e?)I%CAf+jFCV-qlW*bu63Cs6/.0gQe;a=("!JTkS:m5ob-9R!G'F%e'"\7O8KV!u@CXPsb%0A*(c5M106:hB,ij`g5ISHhGTep(LpQ8[efOAUp"1P_Tb4Y-;I>6O#mA%)66"un1&kK,e8E@jcR%&I[PQO-*<j(]+dqL'bdJ"I80%drMh^[%'CVr6FR_OI"nmj,<%]ZV7C$^T['68QoB?4-Z&lI@7H=[ED#"E_7@d+'VFR<g5PB$GL:+C3onC,rNqs9T,^KXSIV!NbOW?%^8mL4]E&3_ZsU;/4[*nib;aaNhYf?W3?W<U%nlMK^,qR&Ns$uh$GWVnb`8dshc&`tm]=a'N39mLf[1Om+G]ZQ<8ppQ/$qju(,SU=%/pJZ\90oa:"MH/N2/8"t8D*M\21t]7$$`CN->GOKq@"9?Q%M,ohtd*M4J[&lk`V0bZq2"aO8oasC;2A=m>6r!4%#Wq6Z`ee/T%gf%OlWNN\")=P^>U9toqAs/.UYfF&%'6t!SC@HZ5O-#]HIGB;"d(!1Sd-fL<lRPDkE11)Mj+^G[I0:gL/o(e>FU0QV<qZ%3u%'*NC'E%F0pM-=he4shCd3odm$_!Tk&,2_7]F8GCprY;uC#j00su^YDeqV:CBf.lL8]_f4aoHdAqJP50dc+q.sZ"Z]bCUAaTf0To\0-A(6L_%W""tf3BdOY>(H)SUnPYRP64ZOk@7A4%"8So0?,86*DR!2Ls!d4";>=QQ86IJ:Y2MdO(oJ(o/u\Kk9PUrWZt2sLr$dG.)O,p.KtEM%QoZGu.M"P!NEl$/=&L$":r^)snNA"pLeDT`S&^4=BHm4_j)ePN?sUQJUG#:3bbgA-(7G5.#\`,Db@EjsDQFiZH&[fT<WhQE*J'jH%_i/\=[3IVJW\2`NN4[(3Pcnl"Xe?LMG@^hdO>?%:8f81s'nCVaU]M$r^XAi9P`Ckd,;i9MiK0jMAB%=gNZq:,1g!;)o/k=kFbeFF%[?4WNisKN-oQH'Qf`2g<kS(HA6Td`^\V"_,:++hUG:4kV`?VPgD.Hg6^`_'4Q/GSN#HOrM"9Ra:RY?X?5TWOfB)l8]lkOEPDkSt0%hBh!YWH$UbA(k/VJSW>*<=o@;\"sGCL7&54O(V.nOH;"U!"%jVf05G]Z!6@=)-\ZcGNs'_-Lcb#$]@tHe5<7f<!e6Z;aOn-F\7hu%!?6S6'83on2YMD8f@5!W-u54<[&[ZJUbIfaq(=2COZ[q+Tc>AGN!5fQ"$Jn@pV`:;<K0R,@02]qY`e)i"eta_ii>Vh7SREXb-ZU4%X%X1_Weg:Rdm.C.;I!3LF\,.`aE8<LUJ]:jCLu!t;:@j`kB4ckQRE]NH]h4eUnasUEYa1O9L1oRT[,Mn%M5hg3T)Do^/@(d2h5Yt%6Y'<"/(#)k=1-A*I%nWa\9L]O\_+/.\#F<b>ft>g2-JaMPX;]$j+oh?!1Gnk+fHgMJFdbCYIKQI(fmP3#-:N3&kiM_U;^7bcK5RK%BdA<\RTSFl=C[0i<FTJ]#:e=Q*9G,8P[d$t!MIM8onZ^p`I0;M#<>(V6Hb.ml^4J+Dr3J*"O_DZNfeiJjWg8e3b2inlN.ju6rZjH%,U@feW+H]:aHA/#b)s&#_P,Y!CWQQjg(_]\%A"YOXB2o4QL5Ak%W[QPES*Ke(j2B+F/I+\&'?9re1t_IK2$2K)KB9t@$%F+Y^P6N%.i8a'3;,1#WCTEGICTf`>0@@X-0&@WN>+3_ac09_r+JHA&u3==ggl-J[:C'cTbV;4en11NB3(5bpL`<eOVV?/%ou]5(SO:%'DT?o%&2n8JQZ9'HgdWW0$P`rMQ'E5r=;ODSKut<<dK=8j.Yb&ueK[TuGE#;7fH?'/NAZ&_jk?Yq."U$Ofp_49PgEC*3j/7K3a%q)Fg3Jt%.8-oJeJ[D,Q,,$\&SU7"*+l("`u51-)`p?'5L[]>)!_AT6,?9\$t/!.oJRV#?"\0Rh^6nl&e65uoP,bN.ZD/V`*'OR&ghj.)X`3^%=)4(J,:+*uO\&$qcE3A:SHLRNSHc)T=1CG<DQ3`p`qEZ,C<3a'H"D3u)P;@-G1U0m\LV+n4;"([(hQk:Mm3f\=3oT=RNZ_oi,X/d%^f#el9Q\(tZdHVF8W@gH^VOLKg#%<50u1c4#-cmg#,p%YAtp4M:T\4W1,YQC7SQm<QiWTc#iZ#[6$00IX5%,BX0T!'\lpH^75.%f%YeP0/Ca1H$&(XTW/@Ki[A7>P!*+C;Qmtt*S^&,/M1Q9FAC]\VCPfW41l?p-K@(b98]jBXqW]Ncj6WZ-A,Q@WoK"KGR3^h(g>'Vi*%g:h\`N'RVm"V';0`%pMSBG=9GOsK<%&c`(NT_Cf&i&d2]QNhKZ\TT>,A*FhU$FMgl8h*`8?nXlf9*8d-Fm>DUln4`MStr3i=:Fh<%G*=BqDF'4e;K+^fQB^m#ag=H02KuWYal+M0*2ZEaPCB!F,!ClE&L!@fb7>nq>Y8?5M3?/:"a6Sm844drN\M^E4@pdi12TV-X`>B;%:dBEZ'E^oUl;UeT(1_u_)DEG-Vb-g+IT6;5;UX^H&#D^jD^cY=QJ52,P`#K\P_pPV4'noIP$gf6_lo4[CbF>]C(<jd)+r>Ik6'B-%L:/>oiFsaB#^hAI+A$UF%q'a'HS4J_S+S'37ta+;"_$n84jE;7f"@K4/M/A!RJsjd/8]<M"NIs:+Zps'k5oiWm[mNR+A+Z*4O/5d%K1hV9depc:dR$c"g!u\aQ!oBO7)c3@k5h`OZmnZ=)&sCojq:k-.8!886;g?HC,:OVN'ZI=SoHB\Oj\'8_(o8\U$UqOX8p^F%LDED%U<n-dl'jsL[`aOGC@%8nX%Xcq5bi=+faM-h:\fba/iH2o$q_L6d56?'%cp@/m"<F'9YdV/Xpa-2WpR-=6@HZ1aZ0A+VeniIqWRc\%;:qpXD@E3QYdEIT[N=b_63^OMPZtrO6@-]sIhh0^LTpqa9SP@bG`!hXDmS3K1D0BUMg_c7/\9!FX*rY+HIku3+4:JuXn?_$^K5c&%&*]Yd[4n79"r]0dK['0o?AG44mq\bkmWuq[op`pEo2cmdaJFC&kTX4c%%(8_Pd^5q+.mB=\uah#lI/YZ'FdI=6b?7#A99h72s**&%%cOpqlsqge=1ImY]&+e@(u/d0[N;sX3/<*>a]*[[;q#'M^MlK=$7UcM**Z?W^@MU3-3eA`3Y,>U"DE,ED42n(#SV*?VM=6ZD;1g7%m*rl"+sW2<8opNCmg8-IU557!bnQ(4;B2.q[a-"bUTAjc+5;eb)L2oV\GR2NRab>F&q1+X,fNuVl:>sWAbG9PYt/8TA9*5e=HK78%Xm[mm];6*.=g"QbXMnA5rN`iW>Kl$Z<84j\(eI=6,KZ=/&P6sd,:6+s3D+>R7J4a=3C)>s8sl2HPr&SA`VIdal"3da&qm-L-SMCL%E'6r.9:M/Ee210/J-]+PBk]b?N/LEZUa[Ka8Zo_-*aLe,">jQ;Xpb\@Z/,PFi86+`W1ls4L$<U#VL=CM#AM13l&OQhqeF4G23mA0%)<qN"P+^9aNU)ptpR/&a>%:X=Ug8JB1?^6IXJ=T"=[&+0kC'34Wck1V5X&-:fdBV.65T1K`.=f+WWr3^G#nEb'q75BZnui2^LXEC%6qPgJ/[akb!k/55^_g4:b1:"k95:VCOsK%.^Gm""V"a<+?TT_id_e'(qa9L[cf]N,`@B*ZB!:9O="U@5giCZSMg+B@.r#^#]U18;%coqWraOYqAR/,`$/`CE0WHPl?X;uN)g5pKLVHNBhl4>)ZH&'h2]J"=5C>LIl+ZH!)@QIjb&#OrM@[_:P>LF1-e^R]O`Kc/HNlMlb%$%.;L,gD=^Za:mV_t#>E-U\lm;W52=<.(_-g00\rArf\\'CnCioM$,Ub%k%VVBKB($o$0Gd>\MgrOP^]LKW%L><8aQ^!_RONRO6L%kk0b$jrG;i!HSf5`1%$74d[Rac;P-AM][gO7r.<pf:50rG3[f9SMu*a+2G-gjPV'1dgS<U="HMK_`:6u&m(:L)UjfW3"+R\DN644%n;;(D_2,5$+g#M!Fk^"bd;]_`jgebQeQCt^,]URcY$(mN'e?k/\?I4^bNf>`*Q[Xm#ghGTiX&FfNI&!Z9:;!Siq*]7Zth/BE8VSf%GGsI7o2U2&l*[n6/56760cV]`'b!YJI,XQSNNe+'hF*/SCd^u+Kc`o[EXbWG2(f=tKG`t#[(=s!UO%^]5aFJ$\2?.g!eJA/B[.)`%klBCO/<%I_1kq9mV!ntWK,M[Z3RYgQ/SPs9PORW/2KT@)EKJaD>,*)CUr(;iH]:qP!_me1#DS^uoK\6Sjj;sk%$o[68Mr/OZoHG6%Q7^+B@_c`<0rA+0V?mc@J-U1YpBir6bKcng^hn_fo.UgrFEb=3"$hEXSalc:Y.Y3*E+I`L/-+d9oiZeP3TEAYh8TU.Zl%mG)1\Ed%`an`a\"sJ_#KedD2m:YOT)`9G:M$i#@j#UL[-A?^!]iX4%c+ib;_+tt7I7:Qp<Xl3q*qEGb/IiF:f;^:ZYB*;gX+S%e]7/d8+EQX%I6:-A<HVJnSD/)jan:G*Xm&Y.0a%!8*GU"V9KReZ6$n0'6+]Ej6dcJH)l+\]2FpV7p^ha<_M?JO![FKg-mQ)H-n!H7&6L)]6$]/P%Ti]2<le]VYS&NVW0BXjuFXMS^_\0jGTG?2k#_&[%FGu>6osBZ7AcLJECa@K[SK,Pt4q.1Mb"EMs$usr+f1QQVB;Nho5lsM'<TC)*%0rS9'_<A2.$4bNB)"LFm"3aX27idT(29+s-lrsZF6u4,>_=m06SL(2="$(,['FUiWp_FRK6@agioG#,Kf4,fRZ(.,g5%DOB"&j^m%i>mP[.:`V"B0[Oq0O1t%1hZ>8',\ko3oMRn;DhsS)oa;KN[QJ.VMIV\ccWL"CE-Kq,p([s5t4F7)@U3YUD^uE3^J[Y$&6BA*DLKq%L*/QRZb<4Z,6K1Z&D6!5)l+0B6^%n\U\LYq?$i*9k+SZO'QrXgJtjnD&;m6P*7_I"aW0P]TXgo/e.P";auT^=;cF_c0^P#r1\XIF%G50na.-PWE)h)q:e6nfrci_H^=gmP/U,$-r%D"b\:/eKAeqOAp[3^gJ_91i1e/26;OVJBX+BUa!K?%.X7gbNNBB,R-/o.o[EH5<[%VrO.q(,]b1MNpN5/Y9`-JnZ@aG,)VS;\7[3.,&&D62>b/Zu1Fb(tm]Q$>l/n%PcGb?jRX_$.f81:"n0Enqj3ZcoFEt@tR3F@gm%q%)A,tS8!n8M"GVk>2CCqITa!n]geC\??F5`'LKXfLK.RFQ(=lp\?:b58$3O>[nZj(%FF7m/IVW%B+F=3bKq,!,R#6'8fTLuBf\9Dg%dMXFf[^K5S*RE$JY1V)0PD:X'>A6V7TXEA!)N!_B1WEm#i!&csCH0D:j<AQM7EYlrX[R)'j7-n-A'bu3'*X@Jou%t0;Z*=#HqF5)%>+>R=@DR,fR=-'a!FJKX7ZD+#Uqkmq$Zmeh&qC",`7#Xf7OZ1cA)^mlJR28R#a;_+g5N(q(A(cKXU1,`kulr::EfNS>CcDLdAZ>,%+%&DX*7rIAT],B$'PpEZJHK.GHY"ZFS7RM#TJ!3NK#3(B)sW&5E2$oXL)4hm>2$UlBK@nd$p,e\Y+94#%7bl!oX+8qjUik>`sp(A%!RZKTl9HK,,&m`lTe*Hd.P#4@%]L$TJPFirTWc8EPsbjplem'&g9oWJV^u1EGZ%Co0]L?$A1;"E;><$Oj"qEY2@V)?d`\4#er\!E%IY!@l`^I6TMbi.L[5>0-X,5SsaRClU#BW^:.B(ZlLtOJ]pp<5R,mEb@idQrg[\OV=23QlHBXorf#os*Rj$d0$,q/`eh-4baMS-<<%X:<F(5^Ar(9qNlRZFNoA'[MMg&S`c_!`doBZLN"Rr3A2J;5PODZZW5l.2#q<g/$c=LK?uhIF?BJo4'/f2$,J6Fi"lgi[L:=`Ho^s%@p:hk:uPX4+^e_$_Qh+Cp;Rq7SE.+8K"FX.+*A6X\2YU=P8G9;.N2Dc8_)H>FPO_%IN5gKO#nI2PXS)Y*33<Z7_a[E^THNng<fAQ%XeA-&U+qhbKgE?@'Vsn1RZ$VcNK\KVLYu,h"o;1=Zc/[=6mEp[2n7*6F<UR^><;_eCO"rB<#-K6k:mSb2*2#\K&'mO)X?5i<?LXW%B`o@K0\!J1#J,l%'GuC*.pCZDicr^MX<!3#_A0o^*RIs-K=[cY3oZ1m>XaS@_SkFLK@Vcm)=n_llY<Gt03Ka^Y"4WWXI2J>F$0u2%!f-*j`$=ad==rKR26j3Ul0&o9J>(6#!(AIcg'6`n;%C*MEUQ1dhcjcAb?P"VnV,tW%nCDS=h^R]Rb6%FLKlb8@YJ``!h:`sA/m[.%<^Gn/e4.+#/%Q._4UF">1Lu"`O_n:UFbQ5ofN6X(A<f'o/ka(c)C1&imqX[i^h!j)L^Q7u1ab2gQm\`Z]JPJn.Q"\7ctXg9'qHq4%4sB@d_Qh*XgpK\9@2jjaLb[8T#B0m,jI?F'[;M['94P^?,Sn]N-(6AB.o%9t:qrA9^iOTBOXsbH7QnPf&1-dAdf-F26*(4IS*`o7%'NcEX`%/&KXd?U&fIii#`@o"i(Jnme$lg=dl;Pa==W/R)1Vc.&VA8"(Tt=F'c2m@N.:)EQ3c5(@%raa%*R.IJ8M)"[W=FNt'dBh&%!XX**U!Z;J's6&DO+:1KX")/`oi.haJtq_=iZhj-:oN&?^pQWLR7%;=:+8@_(&\9jNS-/R-TE+;Wmjg`\@nb<563]a<_!#jfAaT9%\-\6n)5h?R]TL.=Rm<H1"4b%])ARt9$,5K'aGp>h:QE^0>$e^?V,9b!j.sHd$/X&B@,`PY[d1k-5iC@pT7CisjsYIjMae]j.(\q<%*!M*qe#&]<dYT1aHO<:Y3[F&@i)V#MUn30.;kd/c_:&OOH4%/pWq<9gi6_n;l6u]k'Jf1m4Dqt@d"X!CJ1O_>\F<OFobE;U_$`P9%JXWH7B>NOf7BOj%_JO9.Yhiq=mXdg4W)InkhH]=u3&Gl>\dQ#p]_(JA3(oEtp^83R-l(_pi'D(Z\dS:)HiS.&*"E3[r<4)almPp=%4c]V>#1*M_p)'5&M\(XEpU*8I:-8_CY+[];0mIA[nWs]%5K7[cnJH5kO`TM:i2.4Yi5+N1`p_Ck7ZRQ_%*!"Cb5a3*&ATn#]]a_X%]*o.o2RVO"G[<aMQQ`&Q>m<t&).JrKUU*dRbMX?)K@+9"Su`3@)/s@KoEB7I&kIHV(>o`i5(g'':]pD/n<>uc,sHs;3;X,o=06)$%!OlGa%Kl.L6O&[n!#T^;A*Y1CABp?$#1"6Tfjb#MY)ihJ1#QYRd4aiALfC\'!)huo1)I2B.Zo,`LJ`Yo3Xr5<LL-JTg/;Q^VZ@<K%@*\qG#,hoQ2/sP1;^P6A150@Rd:klB;1@/3^^>1#i\`uQCTVmlpgu#K)X+,U@&p'Si!kO'GR_a\`i@YKENlaJfALY(V,a]"(YZ\f%'!D>^\u:&B2:1L^>.k,bUUa=s)F+@?QT>TN\Z+(m^n#UBX'UEsBsVX82;i`alp%2q!!8,U<kO0ApX;R7U#GUI`G7_L[26"IQhJsT%@6[&hMS>dTA4LoHms,A%--_qS%?LrTT_Js*)hNq(5_k-El8RXm2K.)`^uui1k@;9#OZ=ob)t7O*Y#Xd#cSs81Jj"kn<GSA$6]21A%ZoX5VeQ=Z>GRc=n,#lUV[;5m7TFGh1&&U@f%W+r&^,QTS)M;?:LDC[7:$O^F\-V$BEG-pmreTU]U2$p3j3W,#n_uO8\/j2#j3YZq%Y>^9oLpkqZ>BLqDXmBeB*"]MONel_G'f"],+OTCfOP^$p\)K-"hZ0;=fPL't0Os4pEra.TnYt]u@\um`#Co:55Wf;4V/&uT!Oud2%:0iX@2f+]D!%lb]T=PLa>G^=?i#@\FloI]7-b_s#gT*F/*Cs?pFWU$(E<dDF[^,8LH"^"a)Kd*?PGbdu3"MD)3-?8\90,h<#MeV_%.7)?qBL,fB!8RBQe`o8iPZN"m4Q&+l?`EYDi+c74o%)3Z@csGaBP/c@%let,C";E1Gaordie6/UA%7]_4Z)NDM"f7A!t;dPfGiKU%7/$^B;K_7h2!>L+WH@bSO>9b8s+(#%As@'4eIT^'brjg`hTSKVRp4ZnPItkU:H'VAV(LP8YYR1fbKOhlD?"@0Fb@:gh?GR;k9$Z-%[.ObE/YJ@\2)qW>@r8&s<J_Bc9kW\i;>eXf?-n[m-g1(_maN%tq@b#*fVGLn5VaR=%Njqr$Q@8/8S1X!*/hF*j,[)W.Pr:[-_utn%>^,6[r)]\Uhl-n'^jdT35U4RS.?QRs16qc=+Hp0/Cs%j$'e"cp'Gt;%GCDuEKjA?df-l4.5;.7@`4HB;)[qU(aM]_;I_dq"XOii%%Ar7/t-c'e*r/%\!SliRe*-l`ChRG:s@;.<'o2j`13Is3.Gp<-A%!n[LPoPq`5mXt;r]m;9Hlspe1e<21EhbCM"<u!>'[-kWOCXLj%D*N<BVUbN3LaW_L(B25uEh6CEP5LBU0.;:Ve!QMuGLE*#-)@ToB`-:?B;iltf?D&A_PSQVX!fq!cAc,oJtLLsdc@JAk\l"q&`Kel%BoqAN%,ER+ORZ,?DsS/ErsFFb)AN%U6c^d]CiP_omV]++Qj,_d[0_&1I)a#$,JgRjWre;e/7I(ihSkLT!=@(]Rp:Y+W@`-p)jGhJ%\VZ+N@MOI@/*A1P,0CsnGjlh&#5O3f#n(52[A@XX\4%#9r\KbeLmKVENQ&"jB]O*U57P79"j/>_E`47Nc$sJV==1Y!Li,U)J:T`Y%b4('FB'fnC*:g7]bTZGR!LP]Q<6A9l"/UD+=Rf9Kal&;F5N:%;SAc%A)CbVh%3EP"D@a""T?YuSS#arUEdP&pT_7&4^c<j6YoU;5%ZY*tB#FE;cGAqG87!oa+#s!bM`PRd^L-P.ghi/"$kRFc4S=.Og]$tg0TJ[DsB4MAm3bc+>k\2g:MGm]MZq%fhmW(f&>,'1ADHGSQ%jCfuY76K/FdhG6'CGpG6'$Zs,"=X%Q/M@n!bU#RH<&JQ+EP.ItW??gt28EY[q23<DlB5d6C*KG6$%1HaRh:Xq2aU/);:+Nf;cUX+%j=+An6pQ&LC!O.5&!>J4Ca8'#e1.;Z1ga[1e[ZjtNohf^)quhB;lhg;Mep3X-!HnGm&>;W_&uIO8Sr1/WB*'UbB:+(h2ZNM[48R'%bDt@U_S`Y@L,LA;]_mA`67]+D5g[peY"'TA4Nbt`fbA+QeBt",ASJQGXuX4rZ3oE,X0ir:jgdf#`DtI<hOQ>,=AFjmF8L4WR\^b,%RY.gWU9uJ\$qE*HGh/&El&`=>c>nk$Y@-DIBaeCK:"li(!f#9&4kl;;p?")sP.9CMWQ\1D%ET#b>"4:k;+WnJf"BYpV(NAk6`X`3%1"ghYO67)"89JS\_emrD<[h%aYZ7\u"UnT=6aK@SZrKrR3!EN_C/r-T<=k*89Nq\*Y_9EsHm03CVrP(5KiToX@+6Yq"cQV2,<AfC%dmRDoo-^(9(p1Gi$EZG^&C@fCc&bE*?t`-*+@+%QEaHT,DZnmTI7V.MJL#$CK=]<bk,`][\IP"3/f9r(o&QY8gV>ffbDVT):JFa8%dccR$qUIbd/C'eJ3Yg.[BM1dG/HI+K+!E,(VC?<GIrl6$9oCV\?-BL12>'El>o?O"%^=s+LH#kVDn)U+'-4)^-qHm0[:R>XkH(pC%%9`]V@1@)6KAmmVn/7qFC*79/#>AVU-qY'>5;IuSa_4Cf.Ma8Bg6tBs3)lcPX\5MRV(u]#hBj;p4-!N$]Gs]Jq\deT.\8[KC/r[$%[!4iNT/J1,e?S+31lQsb3E/C,h2u/3Xi=C47mS&la>(2_FHELrg>0\;qT-cM/8$!DO,:Tgj^`@\81fXOkt,FdC-(?&UH7VCM?_Rf%:,aI>"pu.+IebhPRT>\.9Wi*I)kHnN_6B)QnuauI3#gJkMg500,#H6G@:R<_O13>jQ(0bOCDH:IO6a:WgI/*ZdO]`4X$o#%3fG;"%>FP?,Q#Y`P%bojens2*LL"Tl[-;M6Qe?\d<ZiE]Z\eCEUl-siZm&CL0dFPfWflh05U29pBG'`pq"--DT9AUPgTbVOOR`H%5KgI-u%$EXWafOX?Xe6>0Y25-)+hh6'geA^Yd/WAqhkR5JeU1'UO2n!cAZ:nF>27C=T$WZC2Kf`U[nZCo_9FAbSeHNC/1.m`bh-!b\WcBh_%Vq)R1+r0c6\H\2RJmOZUDK!d8<F$8U)c\LCEeVh6QF5C3h./rq<g-rMI?dJ'Zr,dC4=G[636I(iOJd4L$KoE*b:`(u(2rX[b=\TW%^W;Pc_/R8)CD`Y)a+XpKTVM;WRR8\H%/JGiZD4R_OTq21$Vi:/gEq"H1#c1H'8JakMJAn8(tMg?*7&>^2eA;P3:1pdX=;k@Uptj2%(.G&\9u1*\0sA;[gbGYdq]mV/S`.j!57En=6e[N'mhFi@ehhS2aFgB"H]#>-aI.q2,`qGOnH*sB.#6A^J05%4[FD\UF>0VQ*QH$+%Zr,(6%Yd;`SYak)g*'4"90Og,*:5/QJsL1ki<R[g2P_)ic&"a7nnk.BL(i:p%B`a^CuW!geufEO8>6t%D`U!hhghka_+gN\T("jk%gJU2]LpOJ]g++_oKtEN5JX@C6kA]dGT^>%c1<6Q6lX760Ne*7O6Dc0n-_WOt;CKL\[mo`?R[8gM?_iTP"7P3LaX6DRF1<^RUb26[%=/eoOh$W#[->giiX&HE\U@)d)Ucii%j=sleZuakgbnfagj@LT_>Ss-QTlCChWF=n`BVAF;]o!Ro0GkNVm.4eTMACC5b,]3L?"L-q%Q=1^\L_e9ti@3A0>)!J7&M:Aiat=D\`7u4F/ILjR.U!/#Tb\ZfC>*PF:A8eCjU3.*<q;P/91I%?(j0(\D1cA-899Ik*=ok$+&.["%A@#_f0-,?jTJ\,F4Fu>8ILBPbPCk&?lIY6ta.A<ljLCr,HUJbrOm8#>XHapJE?kO&BJL8N_[.a6/UMS/?>QT.^UtLHIU'0]4uhAS%gF*70DLj9!rE,uNl5n53/Wd:F.1)Oom49H]E3\B60^p5DhF`Vs0>=D`e.`t;1bXo+ME;;q=N0!Lmq%fogqd9.AP6?niQd3Bm*8>G%H[LD_6G#3=p#K;JEPi?#$80Ac;OtUX9o>81b[?dW4[9JRNt"+#)#@,6CP;+jo&Rs@Q?O6QfH]IM)'.K$gi^g1rHu`n3e=e^THoRQ%+Zeg:6TP;I7BMFjMlNqi.ZCXpBPg*?elAZ+@<+&LL%d9o=bRnO?XJb8'j=%(+>Taf^ga<9ahD^a<MAY-%*rdB),+pC7o_hW\>)c<%/H[@gLK8-Y1]X!"kecS%jI$lQo*);!q0_O$UHn?u:mm6[BN7\eZ5i=_lcP)<+5eRZ6Z+a#)@CT(Z+qq/9,.#*NcE*&?#d`*=#kD8%0ldhd4,`XmLq0@=Z%V7M^4^)q>aT';\H,&0mj]SBp#C:[_,DG!EK\00e;rW]#00Y,QJ7V$5VQ)&jic-&&'g-!A.7MJ%h@`.AjC<I%9,j_&W?7S,j,e6'E>TmfOm&H`/"3>&lL^0jMPfpF-[K`L];%>(OtTj850-gGe2S)ENqWf]i^(W1U5d#id_m@J*UKADMC@GMQM24a%ZdNhV:q0%4e8-Q'-1m>Z`5]*IkgaT$3S9#oTpds#Vu8F?nDYWQa1bKYM8EI:.=-(e)lcCY7MO/S)KiEKIOiDWNq?9[,Jcp:)_]Er%,%E<tD7csX4@)V`T2M19L<oN.c;$d@,p'ea/NU]leQY09,\jBTXtElcID&m$TqN%*QJm*helmf?>na=d1E*!qcqK7!.jm@)>%BHY%2ioEG39o)!;s%dXg5sA;_ec_hJ'R:j8^tG>QT'3hbm%t*nFRZ?S+)N:UK[jN@SIm+*1:f4B!EkXHZSP:VN_9Z`EgH:q=^8h[j*qK%mbOHScC-f'$P$goIG;$E.:&EX?-D;@.&l?h?1WePmai30DG]rKAhYEEmaa6;^a-U^I,g16ckgpb_l0,d;V5-$V`T3<CRK8gHLpDd%a?-\[,a@j[]q<=7hr6`E3Tc??;Ftq04e,MQU?$)'S8E.3)*Sr<8qqfM&2>MaNg^XaXn?TUL#+<5g*mmJho0!uaF,d'BM[NQI&dN[%V3pn7DG&pt2INg^8&`(h4:eK-0&`Tjn$;Io1:FUGNPhoVTaek.B2pu"rl-+Z-+CoS^,Uo5l$07)cqYEl8_P0EO:cV*VM/G_%d1q`%Fe!F:8'PPT@Afo8Gi0ek0HiKbr:imYBXP.6<O:4Js/T^#>@Q<"[F2[UATBX<>F81b<k^JoI]V"7FUr,U(<G0^P_@=)kagLQA5l`/%(X]kDaZE]UL+8;hT"8\U1X\t,3F;3?;6Y#O.">uq4S#6AjH[p:9Qe9TVt)u/FlFWJ&m'O[,q1S$l0i<0o.(dVS4,O?'$TP[YfQB(%B1Wl2A+N8XS4+EM86\E`ak["Zr'1nY*"FjM_i*79Os"@"k7`cGYssKKkJW!;:oF-S51VbH;t?=jC[MO310?r8e?n$Eh^WYtGb6qp%.BXr:*hd=V?u0>i&VPpLKd`B5^q(58MmsYW.ZR2VcnLf"&00b_!jQR1Zi6n;b<_jdE7]9[*nAoCm\jgJ>,"&s#RQrP2]mq:^dAN.%]g5#dWX[ZOV-5+?1D,O5AQZORJ_t7W0M%Wbl.PVSXVNs[$[kYN\5GKK@g8Q6o!&IuW`h+<lCm@`@Uud%#"n<L@ip$_fI-WBm'VTV%1nC!g2Gkc>F471HcmH_@,'JO?'hbP4d.$74ZW&._["tg&>on6K&m[gm>='7bMf1.`26!WaqiGFUB]]JRd$D,eFW:JE3ncDl`J'bD%2W-U9[khOFL1^A2<3d4Jcr>"F"AP7!mo.#:PuJ5s.65eT\R^!CQX8O#)`*:0hULj#mr#,h>SGm6JGXDf?jG'^7`VEP5b$>('k@EK%?IO@o-E_5FPYaDIH,QeU_S4E6i[nf.</%K:UF6OHMb1E+a0fG2k!Z-0#B+V2`BBWAPSCJ^Qs8WEKf;q">K"t7;&/QiUqF?59Q@\K%#)>)@Dk*Wl<L1,Zj,PR!nk%[r_qeqjH^=I>.oXp>N?hKY&<&6SBPEXF`(3(h;m7V!!.MslV"n7;X%UX#Hu4`uYJAQ%8"8gu*_$tG%*cY9%%9fQ2abfJDG7]/*",]sOHs15j:mP_T&7uUTi\2Uk^q$6CN.+:SIg^c)AV:__F9!<k$\0a6!:*1.U9i4p:5'HBO^K"XXr^g#%&MI4Z-!=pe-5qNDW<Rc53Hl-\C\+CEZBsQ2Rl"hcF?+<M^pOJ0M#rnS"cCj?1Pl;G?^Wrck=s<o9_2p<PT]pA6IS>sq5EkG'h:O0%LF@7h]->O`G[@]HkhcRI\CJM&/>9ur<JS6IfGX+h/^4<kO]bZbdloC]W,PqV2P/rN4O&npNTCJ5d^0&,*i>g5d,;;o\sFuROB#RR%-WDq0$!:c=cf&']#/,H!ZPg6+=UZ-4_lU]a/uHs]A,FaHM`D%4aWE@VTb'%kesGUk6<C>G3sa_::g_>Fi7=Z`PN("9a`O-7a<UKT%lLhnY&UU]g`uStK0+Q5^>5G$?q1YMTZ7Oo&;>/X5q8ZbXq/\"gnM1O,T;?I?[\rIY$1]F$2]h^f99Kpefm?+_F^1ger&1Ybc8_QH%OX*%9JaVE+6M4>oe,PBI^"PNF0<\<80K^0.>H;iNr39jIc;mqq:m)PZY6nI>]Qke3Yq73(d94=(?_L_3[:6hqB[bmnGER6EclK]:%VQKJ_G/,1ML6F94rgZ5-`L9#pJ6#=ra6;e^qD:o\`$:#J/gn2%APaO*(@[!7riKYNZl0ZH,-J2=_U'_n&O]>$'FTYE%Jhql#r#N,%1ehP%8BTA<.6o5e@`6II=tu0mdqZjd90K/K("9NTY[HZrT\mf<MJ4He1_k?`][mV@SeaRH:bu4$T1&'_=p;m5<`?W"V?QMo8&%*u%%[YaEH^psI+&LC4I3S'%$DRJo;%/`(6_X-7Xb#J*CT2_8^^0UbU0!b3;l76(Ro7]::Si.*H(;<SJB8X+&,)-75LR!iI\o*R^8PnJ%Bn:`LdB??L/^nHL>A@>LW`5\<jKpWV7N59G$l-NEU,8`J6#idPeA_nN6GB,VeY]Nhe0mj&Ni)&K9iErM?eqQr\NoA_0)8F-6oC"&%\`-dMNlPX@lS(fnCT;A29ds*Or>P=I1p*1'WMYB#>6s\U:H#^5N2fm[h*Cda)HBJ=%Z3'EVi%IN.K,.!?_<pWVU\X#e[.#h9,7<_%P7@0dULL5_L5Ok3;8cG7TK(D8WgEu--=9XBC87%Vg7[?)QC#p9k?IVBHO5'Y,T_bU)ZBUE9`'(HVkBpcSTuqmg:cYSj!cL)r>$GP%9<k4fQ"rN;S/U!D.QjU8)K6uX=)q8-e*5t8\:X"W%$'iHR7W'mdce?AN`THpha:]>br:=,<B1mcF16"@%]NE"Uf9C@f/4Fg(joET%FjO*EdUcfaf+]*OjkDCSR>AfDU]iH0i0F2[ElP5=L[F_#W?L/\IZrjN;,o1gZdJPlHfd.njI)7>N&9YCNNdLI_;7Nh*f`B)G(A$)%_Pu!R0?M-W>^SoFNhUO)MTu[K#rM3(%@u^A6%=WY_`#0VZ_PTHg+.nd`1CBeh*$JnOb?47_rf#S.SF15m"H]N&3"cK[;]B;Y*?`n%*KmgfGRu@M+>ZSEI72-,7ZoGfLsL'=Osnnd9.?M>3gZZsk(G):&:k&g71(a>TM?.Km'o^!Lk-s4AR\E>ejF,h3GpthS8#o/_=X%2%VD1eR>c>X'*]'K%@8[`u]22$%fn;\N"O7:kY_bheIU\TeL_QACX-LK&HBuh\`+9Sg]Iiqi9fs/P)A_A;.Gi&-*SQgS-'FLMiiO5U%(AVo?!/=Aq9VjS2GiVP]_Pc0e=cs/*kWRBnV3l8e:_%*`C"A`/'IV-K;OfG5V)V$X.8F&6Uc<C%KK(;L[nE/W\m9+_6(>6:oX^h]%EdC+Qs*YJ<dp%f'On0!7'mO2X?@3tk#*:ItED.M&88c^ig/bD]d>"J!cMJml`q'*g7O`_%.#N4MQ0Cr;OQIBc6;WD3bHMtX^bR:l%T(!Si<5L'M/4hOp[$alY3(Q,nNspFJrCkSAr^R7jDWa\tLs)P?l=`gk;BE!)<,Gg1ZrL"qUa1*3er)E-bKASCXm(@3hC%c2"Xt>[%9^`/&a1J.X)Ga5VkC%/4h(lkRbba,=_'BF^:^P#P>grqM:'if-7pJNV1`5??dKYp+"'+%$FnIt,kh7%n?P\(5iMu[p=UrIh4"pI\%5,lRu6cC-%,eYc*B#@X=P;4);Z#X0._JYQG_kb2%g:Tt-%;5U3d]\h-+[lt]Qkc%]nZ/Us&j<I7E7:39Z<f1F1/SK@C+\q"f4DS,%k(PD_$[2^4d-&T8'V6U&LMt-BG%4G"=8FQ%M=dm^,fM):^%]$ON:'CX%uI5r_&*\'dGqZ=4@K<Y0^!NQL^Tf*+p?8G'Ss1sPmJ4#%8:dH&fEac]l"?(3imWK9+U&2X&J5/ZA]/aT*1DrjiM(:ETXTm([T?m38:d5@=(+g"TOUFWbO'>Upa3P4Z'R^71'2&KmG5sNnF6>2%9Xc]fR<)fLge77EZ8B[FSmmMM-Kh%\b&BukjeG6VMp]d+TOP+#BL5<Pf-Ir']>Q5:,cRW"R(Gp,g>A;h(=)I<-7.k_-=g,=/@oB3%iJ%$;"WVtJkr_N])VcsAH'4ro/-?1q0@WYZ;WK9(2A0$;h+Ul<9>sVL?)(!S+fWU4!'9YKe:Akr:_&I^oE.YkqNo)o=OGhpKr52I%Cl'b>3n:6pS09JG8]MS/DmVU09a^?De"j'/74r@=]Mukjft>Jt>r.^g*n%R'`9JQkl&O?N,eA+DDm.!aUkJ]+=Q>MY3b+1S$!^"^%O%Dp$+gHhdHYFqEF/O,P[9e_L--5BmGnsOSpQ.:a<t4V"Y/B%hJmjZ9Bq0<'fGGlJ'M)X$Z3HRt4DYa:(@TgZ"bEaGqHQ^N)>i'S%S_WBW/@LdQ-YSP]SHrhIGLoH\0MVl'5`ug;.eX*_Asi_HhcY=h+4Ei38R&h0]r[U)ieo]O#u7ro:%'Z.?M<Vp@90E`>P],^iJ(Ws%Wb_a^?:p[(jOr"k?/=7&IhaHk=>dWkMk-*&L&jUG,Ug\RMDM8l,5-S`S:go(GP,MhHRM`k9L-=Ucm)qSc@HImiJs`Pd8W;q2is8e%YY4(!Fs`#So6F2$<@W_$U`Kh0PWkn4rdjLD]Xc[4k^L_AQ*(CnkYal_pd,-[LIRWm?/.*'+hrm`>QDAfBp!+ej>u27PBU.S;C0Kj%)?-\Q]Y!r_C"T7<4\j9_@D_Ks[;k7UG`:L$GbVneM+7BT21/%"?1`Y+@el<67Ir9Sq9e6QP]Z/DkO0hMNM21QcSte[-(V]0bF<aM%"fO=/bp""]G6'+2?2tW.=<$%J+?N(s]#Vh^;0@,-J`h@q3nccN>9OqQ=%\,o9fu_"VNmjuU-`G\TSt3s#'Xp-=_0/)_b+M00HI3:%_<nQUX,FqQ<,/Onjn$9`0"@n4VffhXTj=Tibnk:j?#W&EZmlki'jT,OZDu:%]qHp#r)"?367ng0"i#8T.bO81XU7f)=I3%l([^`6%'<V[JRTXE+n3DZ89C%29&65Y:Sd834\q')2f7^?GTKR%\=qR#>h:0ilkc1?-B]NbE9/j2ASM'he^.8X8WhP])BY.<cpCUUnX8suZ%+DAg9@i1XB_g)_^)p&NGc</Q@/12%:Gf#cEfFPW/"L"Qa-mH1,'XV*8OV)hEeHJm2gOh6?*iZ#h(%=I!5(8Db`PA%XiU?i[e\ZUG%RMCH!%,G\d&TospM#8CSi4D+)+-&;5&3os\-,/b?pjn.+Q1@;>pk0`6^dDU1Ic,snY#Bf-I[S>/5:FpT%)K8Ml:MqGJ]`uC_r=FT%3opUd,'6l]!H3cf(d_:Le1!a)?O\4gELne#@>9"odm:h^U]\<uasodJJqH\WUM8u\V8s/]Z)4=t;/hu7;B9@/Qj?ImnV3f*4l=?2%Np/58]YTIRj5V.qSE2!tEPiTaUjt;L^0\C4X]8aklipPkEN`M<-Ot@-k(#NtjEN,a;[p4ZZkUWB=#W.R71;t.E-tAQ:#:.CTc_XR%OR#j_`P1Q$Yc(,C^;gg5iA`e+,=5#5I[$chF93(l19ff9<GkK5/[e[;L)e&Ygn<TuPT>!r664]EB.!h*i)'t2AI$5UF6m;Pk;-QT%$:"#R^H1B[*a`U_5OcUH2Xl?ZHH>kIV[E]Xi:.4>n,p0"PSl^TU`hp%Xl;\h)QWeOTEjM1*uD"_/`3[hr4ojDB9aPU'p5eS1`48Z%1aMO1pkEd1fr3lF4PkOC[j@5YV8EWoJk=H<DTg$k??WjRk[7Y[abP.AgN5'SDed"fSaI2l*$#oO)pYFQ:@!HIQr<QHa*3$m-eu%H%BNGFb?a<D-j_.WK>D7&HL*OYW?UrE&q5OeVV,486FA.=\28R<&QrXS2A,p^n$lF$$L(hNe^<!.R;C9amW_C3:QHrIK?Si0M.2-B^%<[Q0!*gf2;I)Z<#o)kD2Vl"Ws1'%o,BJV!nfaVf#9X&aiGb[rO16sX.aKDdilO#Culk!S,)(@IP!nf9M">Xls'6*<_,_<$AAHEcF%2DDu=R4JXXaRE(SOA-LX5W2id"RjG"1'HiihuYOS\1ZkE?4H#u(E1#B>I]3-%iL^k_LX.3L[ST"^0*\V0%[SUorATei++V(dgsF\%f5HqJj"De7gZQ''Y80(9LVI&3^0T42kbI.ZT4X"Jo=NQ?T78TlnFQJ+@e>->iUc0]okL0CBP`Tj",8]P_Jtc>jqJ69"QU-P7+]1Z%(*>`2"*()C(8DD6=SPSn6B*17pX\m!I'itR&J7fG&8$<]r95)H]t)tEDjQqNe-=(/.Jg$_du0=Jc/@2UdjNUOQ_Vmbh]Lh7ms\Oh%T?Ze:;[*69&]U_>+Q\[!p)0;R!gPBlEeqqN5b3Qs#t0O[:fMs"1iEq5nC)$bY(iT#L2XUBck9_a,";`*CmA$T`MKhCpe0Qc^`goD%n]qJS8)YNlg/+_"HZ2\1QCs]&Egu]q*IqpqE[7^M8A);W-i\<J7lg@Ii'3J?m(toRXR6kpRJu86SBtLkaQSiTr;-VWh\irS-</X\%D_b.:NG)OVEI0Io63gIDqHGDt&A'<rq=`&]+Y^Wc8dM`/c$")J$UcQ^MDIobiq%uP-_G3UQNBj1-N#G!0@]RT-:=9",a(pL?Ynok%=%]R,0N(l(%.e;/A`@(Fo!(cYI'q`pcP@(;6)_n`U-eS!0Aa?+qSVX\/X=60d)^/)J+<r&RS8SY39$=>hJTLacRiNZ+4^2cclNEJ%Vm$a8ZfM(II#V,hLhetO`;4SdL0FRrZ!)"Y'r]Nn8-^ps3:F;KqqiJ])_';8-jT<2N6acP^Gl:Q_Sr%kD\n>^BJSK%Rl<Z+DH5_\%f8,4c@Iu?$E:dsq\X]kk`Airj&2dN*!4f@p7DC5)i?FZ8%k]'P(>5`D^iK,I8B'sE3BrlKbBS'5"l0@m)D9Ti\6T%X_oL)q''+N`%?16pt&b4kt6dY>n"<s7MQPXRXNlirHP\p8CEGRN6j_UFZ9<_<[a(84XauXmS3a]$+8H!SB?>PZhZ'2/J8f#VmL.[cfH`2sBKmk(4%[%(K?esFF^1]UJ*h^lL2^Y0YT8.&!-cf]N,`TdKjbVGtBNb;jf+[pB-qbhZ.Yb:ghQh/bm3!9OM+\47`4<f9$!@)4Fha2AeMZ-=.%KI.`iE=@SH*!Ks*:%Us:e;a3eXg^a^R-_M'5(n["BcN>+2g0-e$'.+sRfl`"`dY;<&c);91DuXVX57(:73q]Wd1JA/V'e#7ahf?&%nEJ'X?[hP@km4%6VI*':k3JpSY,@KA&ZXmc&9mjg]Xu\6h/PC\i,/C,;t?jLhd=(LX:WYV-cpn;Qad:2coTodgg)M_\$Pnt]Qio2%&+prJDgYbqTQ<0OIR!U6qpC2F(A$)?an>QEm-FC[Xm3gGAckV+o:%\/A2NQ5H?7hnR]i#9SCCN5%mPc"T3P\Ua.239j^PRMElp&O%Z2/QaEd,+rMrFr:D#)tH*_'Oi!PKZ,GdH73]E*9t^"RAlXq-+:D`4XVQsD@GMtJCcBa;-e?-f\jgX4::l>B$s4+es?#QaAkqW<+<%?*#]nLGG3_!3IN8"E(reIBf2Y01SjJNE"2'GS8LiQr+$Oh(=WiIDrqL;6\f/[%2CXGIn[>,Qum1RLjEkC`pN<]H9Qc<>MM(of)K3%k:%L:p3R/Gk$n54@eAdA]A(`tjmmTo@_#\!INR:)cqV!=l]^^FIKC/[N?J'/9XX]#BSS?,]f?[FV'"_[Pt5`?PbSG$]qJd%F9DIL%P/6Cm>:m9jCmV>kl^Wdao&b6Us8FfnW;4=E76[`#1&CD6lfH+JEe/O]rG(sMQ=R@p4["(f]nPkrntWA*]n/EkiRq]5jlREs:ZOXo%gao^JoX3]V*uO$W@^NK2s06j/G!bSR69MMM=Scs.SUV,l+=;80mI.2YCIn=&s1A7/=t2E+:b.u`s(3<_m)e.#hu(GIloHi!hgE1t%JFd!dq#X$]S)$P0M)@MZfW3!Yr"?C#rrcN?R;\F5cu[MLBT50:hMdW_+=0g4[_DPU$G6,qSl/I\0`Bt[*65_qlJhJWFh(N.,Tgp0%\%bd=r)Ht\`KCE_F$r@q8O*`#T-(a(d_^2BauslPDq=eV:@#@jP5n+C+2)PqnD@?trW\p0V^6h3>s>ifj#Re+XZns#p<bgK.m8V5%5IB0Qoe,ZMDDtYsX46c)iqUDT^JeRTH26i7?%/K+s&H2uDAuuk]_Gj-(9&M(2g=#7`FO$[1S'"Y\b_t53iDD`I[\"N)i2t)2f`8:%g@g?FI.t,6)\9*1psFktnp7Qgp%klR=rjW((Aud_e@3WEgXgq-3_?jmXcgsbm&SEibq0@IkDP\93h>c8f5-e,T?%RkM!/C3JGAo;%cPDkj];s>c`Q`";-UBflq%fDo$59(?<Sh#Bc;kc8[9dZpT':E_9ZjkCV%I@J5$QgT%[3&44.)8P3U/BCn\s>Op"f!uH-.f][S,EO%I/W>Jrb=06]"&lNh"7A.Jc,??Fuc"pQ?-c:FOF&:M+m]r]/e0-NQuMN?Dt"Fh[&l'`V/G?5uVHhCmUJq5Js)j8Y#&r&&CsEB+G55%T;e:oGruB,`V'-Q9_DP4&GBphYrGn$=tT/p7To0^[sRB7C:X*T3&b'ugs4Lf!oKHL`+/&d;/>\GjVg.H:D3Bk4MRGBM)Nlok2&eA%b]K6F+QS.#mB6XIkk)LAcsmR$,(!3alS/0W\F?iTB!Y4mj,bf(Cm:'/6'%*>K$.]#ns.lu/64<qe[9WAqgQmsS.>T@5q&_aPg4WU%o^_+g6D\4r*)@BOeJ,+#>Lbom!9<]t[@b\#Cd:d5f"Xc\n0`J4fXOTZVDflpT&$MLWiNi8*$El&F]UkoM1XI:h6*(0`TVL8?%7uM%&*2"&G4T=ndq=)l^C5a33VpOj!oDh0Sh4nqkF2YFq5a=;H1MqhQ1W5Mij%qf>.h!-(k93_r'$XlY,A>rH@_S]qp%KU8NFLghCNq8%!u8b7H>,E<0=Z7M/.Gs(Y1)Yu>Z4'j'=&'FCq`d/+Prk")e(W`(J<AcN5fc-0L!OBRSVP%Msm5j/iN%=LZLO#DK"qlL4j8jF7.3e%Wq3BH+<^Tu1(Z/,Ld9E+7<Ya<+L3-sE/F+K.Y'*R9HSWa-oTi-Mtnh4]_cfj`G0Z]]%Gr*iHM'aiY?.&S&77hF^9"Yc!l$ZCZf,T%!ig=Hfj69`G>7MQLS&L&Zd3u7cc#%K7OOfL1,O'9%bJJCQ9.B:/hBr!CSHK#MA;^TKqG1Vh?!RAo]bsHT9fAI^'skKM2SqR_NsPD%?ZE\OdWR?.cnB]=]q7r0FSbY*nSCPMHhbMrO(/mAhTMl<Cm\32Eu_@d?]S>m9Yu)h-$6M!PE=h!m>s]F/"MgA+%AK__nU"oN3C(&%OML.GW#[QCQ\*'a6/B1V?GD"?^<%*r+)D<ka7a+rjD>Dp?>NZCTF%7WqJq"/NB)5KNAO:uQBZUrAFse!00W[Vgl.?,7ko=g+rB"W%nOjG.f:2/WMoOKRFY1f+4l`aW[b8A5^HM]g((![F([;2F$cR6Agc,*LMh/$4(Z4]E3l>4(qnm(hjq`]e,VE_*rBQ$:oBZ;L+E.R!%^OC=uB"V7+Rb?dc:cB6;Fd+]q3%qbR>WsDDaQDm\2Rn+D"_OEB"F@V'M$bZ!PhJbieEu,8?#2IOpOJpF=@.eQ#AflGH+L1U$k@SL%+ch!)1"Kb(o&Y*"B#N*4[n2kQKAB"@a7"_rRW%*=jCB52*6:)@2BcS/(VO)2N\=I8S'/d"c8*W:p>mVA9Er=NmTsRVXG>Nn"tCPR%L^%)RB)H+plL5q;HLY_k,I7"CiKsherQScM6+HS>`;gm.=W,.9%o2Y6qqm?N?I*$o=rcH5!\J<;@U'"PTj\/1j\X3`T)\5)S=-ZN%g(;bWgRBEED@bg/53*bEi#?@IgZWqoa]F.*a87P9$u6*+`;.K"At&)fgg"2+cmf0;F.gJYi:?:Zo>&'+ldWf,_%.m3c2D,T6+sp8%?Q>.?L(X;`-0:_LJb%%:CQ5A82Wk@'LR\I!nC9M`N[MR`59GscY]p270pl+1U]5T0r"!-srJt<E^)72Um%LuHDW8`<%2T1+e0:=E%*/%0"m,I=-"*S/U\@I$9TAB9OH$_E`*p=C6N<-[#EjVuE_2#%W,JUinbVg7NHk$'OZ8MIi]>4t`OPQ<nMscgRF1Xc>!&9XbX*hKK%^+c%la)5iiT'K#`VUbNVU96/17a@/:EX\u1lg;@eO"aJC(uO/R70RXe-.U^a+&ohUC%akFYJ=12X9;J\8IGcSK9bBKH<dn6JJ0i5%`PZle!Db$7#m_R(NL-CVhiDAR(mVT)fVO*E;i_$XG)q(KJPtnV5da2G^(2@PJaKHHKVE/Y_[>FEEO1&#*f0M3F;nRXd)@/e"INlD%K5gE$elYF(\q`eVMq)uufKqt3*TjOaLQ"WS$o8DIE7;-IW7g@KD77X,qDR;DmSf`+FQ-;uP:J8gIm..e[obe!CgSe/:n-QoIWMQ0%l(?66qaf=EH2d&lmJITR)9pd"Z?1G,Z'I3)L;FNFVbFJRTV!YdM.^`J=qp-\U+Bm#cD'6ChHp]J!I;BSp,C/Kg7MVf?7\QAB4j!#%L;)g4qNe%rnu9dhDI/:9i(qJMgP:uh:4/QoT76WNlXgNh;Z(5.jboc0l(<FtLL:)ZQh,]Rs0q[I^A)+,nb/0If,q\0s4qV>rpK_4%5G'Rkj-tPf^]2QXs8.j@rr"5Er0dMMO3[dckF[18]t7t':92^ppPcM0?^<XW^W^#t?iIs`^\lFJ5CWO2pTJL!^A2(-@I`3p^HDP.%XTJIpG4OoWs*F\7YO(9EFSY6P^6jo#5C^(>eG82JTtFu\p>/<a^OL8cqobTZp>8)Zs5[p9IWP)Eo@qmso[!O*n'5P=+9!tibNe8?%.,LH,/:[P+&D99)h94r]J,RiGS:!=;J$m&<'^h_\J,H?+B7KpUURUf(5L&&7n*]Pa-^QKEpP;sbs6o8,mUe-Pr.emiqKV[O+2+2W%^7DuUrnV,OpjYMt?'t6`qY4.lo(,("*[(8jqOatjEs$pjm([045BlS,QV<Jl%UT82+=]uqE_o%WW2Q)iLl1.GTS.CcqrM)[>LaCu%B:'P@@DBIih0g&SAi`mmm],]GkFH9HU]"CKSRbd8NA4[]T?!(]r\'jhW]eHon]I?Ng"\'r`3iS?+T7BO<n>U^Q/4K'38\"egO+>4%Ic.F(<:-OTB(X;g\ZRu<?[^RO^YaGlJ&\qK1P=3E\C<QBqo/(QMOV4r@O.geT&18UhbWQFWVla-:AqcK^T2*ep`c".:HNsh@tV6p%I&cTEcN.nJH;D3c\`\tH9!/QfbO=WSR<5Y1WOBR#)-jRY`QHKWb!dnab<oBuSJu.:TN:p`WNGdTRgn=rjc20%pl<1D$;,=BQfLWH%:l`7%:PJ@06HPUjH2cUYpq)giC9G1V<fa,\#M=rd&+3">jHW8pHX,EiaR<*%^1I;t\u>!6Y?0/[#GX$49%X0m^#W(F67jcg[pS`=%3u@^pc0'Q]pLGT;!CM3hA_HDR?7PEt"1Y*.i8aWCI&SJ*QlI\Z3s=*ahJc[sY*FK4V:4_E<:qQHpKQs,f2p/<j4Vg\Ze?jm:>_X4%V=s3'Id'fC@J*:Yh:2j[o6aiUI+TLp-o.aP6)OAuZn^r(4(qe*G1Ee1SCF,:5,$YI,#qau]J*@l>E6X:*BnUPQ7dCI`PLL"9\S.6%fHr,EamT<8(,)(NQ2CEk)jS^*ZZrtKA1T8i'o?e)o&Fu.qT5)7?$QPOBlNN13sF`N?edaa/XK4V8)m0?\lP!1]=%-pK.+T36&tnU%hb.iLNK<a=4hgWRW4XS"f<n+d.p;6K#&16lc>VD=1!j>RUX^c8G'QDk>FC7-Ep?u>](8_b)SBu>W-7b/[9#E%0CRLC0=r.Cml`kd%/'hR(7!O$Z6)4@Wj=b3$b,CT?/iQR-nua]8@PE\r@C>V;lTnTB>:<oJmUbFQ5<2pAHVa,]4_jmG5O*Q0;`\l+A9/"RT?@'#>sW1m%\S2G.Q(97meRi`0m0boL3.^.uT??V/mol9rhLZ^\iG#BYClCF$?_rsAh.l@@+0QUm]W=&Wdcl5\[<R/3e#h6/UWZ2E/&g%VD05^*%des9A^8>^O_O?PYg=++2RahFIOO('QR+H6,>9G!Yl_WXfT-X<j;7?kkDd?8%hic[@hUT_l,fYXZlZoCQWid@C>/-uJ6Y.OpW\:4A%H\W(jY1GalkSoooaP?5*Ya#(LH>9TH56#S8)Wp?2.+(N!Q9K`>!u?qMJ?^b/;h_k.P,G.?FRd!6rdOKu;iBWcVq&JoAu<:BP8!"+%cK-qZD7k>/?]:77GI]9-eICV9<SMsu9#^DBSD%lK+7kQfB-hOL\loa[X7m@C;/$d8<rkj^cZ?e?NGUj"YADst66t^k`d!]_nBWis%`<uF&r2H3nKHkl5-XYUK<"N(gROW/clDgAR*XeP)T,PGL"Yps&7mPVmWf/SOcut@SYWlb67=4M-qhn2>$BCuXL.'#]F+JL,`_^WC%`e8>.Ln.ItD3DnP0;Jn5MK$XCSWZ33N+%Vl:1TN+2Xr5a`\p8^nM1U"^uG+Sk)kXT'7s#lQRuf%FR]]h9,i1#>g!\8\JE'W#*D@/%-IX)^EhXdSAju_F:"_ZgkSPKuk?8Y681njQN$4Blp8j3Jl(80>GnNRPZG;f2p8f[A\7sN]M_DC,`_6^%=QmiT3TJ;<?:]3YC*[Dd%0^kI-NKXfa'ALg[<9UgPWN/s=>q"Sb']W<G!i9)k11I!=_((rJ#hufW0Sn5G9:b"'1`I4\bSUEGKqKDd+7X$R?18JWA84#<c:3P!%5n&]hfc?//*\//$3$c6Io\20%Q1O>M#k3><WV?&5GNnnaFUu^=]cWTX.%QsuIFjB>rt1)F@Z:lU7#idVD)+;4D:L_Cdq!H^CI_=2%o?4#-atg#V3Pef$DD-ip%k&;9"2fKe'qA`<1L:<AAZr2:KB\`4nb&d/c0JED,^ui_&jO/lTbMJX+u-47bGhmCqF.FPD?!4E0BGs4%FSpQ-<]V,cI+;,s>ho/IZX2-k5F,5fS=n/odD=,Ql#5gj;Jr6=@p2r@%`El&MH6*cVMqdRDEaU3QdjdGj6H%Tq;Bdg8T*DPPkH_i%^eQdXFr'sg$kI[ee+@E)APh-j=ke/A#5\nHSc`.4QLB?`WTr/BDm0"X1d&mn[r9&uY5MB0HWq2MDh=N'?WSWgA"=c8Tf=pI_nIZB%euSg'3gKGh8oF7^/+s>DD3>-o'HU6HpplH<b>A)W1h0<Fmq>Wba_#&_J+>.TU`Bso<*qG<D52_.Z1%aJg>RA>/Tk(8]bg5Yk#se8%jR>T%JF'Ubl3N"^A(RC0,j:"Y`>&e&Zj`B^M3Ag5T2W!q0^,#^5eHguScuP%S^p"];#R/u=+LZ@Vs4e`JmN;!WA!1if*"i^8Ghge%O.qJ8Q]kn*=O$.)iMcTnQ>1r?Y#g=qF3WW.ii/X^cjdg6^U<doa&d$Sr[t`ZYC2HRKUDb8RB+)f?Hq;>l;MK-I+0dc>ctdN9F$&p%'e::FS=J33M.c,T-2.<VVgaRHgK\O_nV?t^m[/WGr;l4^H+T&RU^E)Va.fZI/?E6&YPbYt!n4m^6@!_V,;&ZO%j<$k&*uO]\+0Ch%ae9>-5\sfVBErd0*do]QB>[V.?s34OH^*5Jn,?K2S>sQQ]rP^`+5`g<[LZ"YNTYeq0):&p4H&K8%EJn;j("d<,kjVHJ/m<m)ii#a%lUN'sTpPX/1iYRXFaj,+io\p?Q3i]\o&oT+bIIMSFF)NOJds\&\b^/?K[DV4[WHZt0Hr7MZeg3%UDVj:o@2c+[]tqL/$]c+@/f6j%V6j9OP^4]U\X+0>EpkMTE]qhLgoOT=CEZ]f\k>f,(rFI/RVae7>AeT?#X2[&$HheHRQZ,F'K6O$IFp%7<*?AR=3T#6&7=S_\,TdZ%?#CE0I'33aDnZ#Q`95Je>bd`H-0Rd(7Pui`^CCXE`>jWQJQ+fQMq<LEj'aO)<*gE$7Hk:R8Qf?peVY:^^[IXFc,\Gq`at]Xb)k81%n#elE@RO^EV6?+1Bq*N+k*oTqr:JAMXP`\_[J+ap,3FQadZRWB-<0_7pQoUglM5)Y'GTBsC9>C%hc4#YX"TT;/`#;+QfMW?VY8O=%9Xr:m1G\bEqZ)2I0<<"G_0P:P<CAap1R!IKMAHL8I9^M/kO(7bn$Ns6nV\Zo$Y/$1l6r8,MJ4BQ5e0%YG;e?!mS8JQmh[PGCUElK%rR@SQE37,+mIB?sb;[br-4H1Wm'5$ihb62if+Y;Wr*sM4TM=)8'o.0u.=Zed00h04f1KK3n>a"oU[s[J1Z-)mJN$TrW1W^1M7g.a%r;?=Oq9!iWb3@ODoh&$U.%ODNI/-]Fd5W<Jqd/&;4Sg<2`^lI'.O+a'q5;CT@%-A0l1hX\4%UAA_od=TIotL)a1BF%EnRB2<6hsi%lVK>/Mn8T\FAq"@3c::\$XklsnFnG1:`eCh4hePad[R`=O_FrfMjOZ7gJ^$)<_G*rf9JEhh>#)m^`7Yrd\_iNLQ0">qFG]e>D^m4%#H<'Np6`JkEE_5=aL'F(eWY;lAaKW_Qb'<Tru4+`(uur+)l)+s3>mmr2YL)/:$M:l/a=IEm2`glQ5QMSaeE>P@I)6D*s-/Ze17@W%0G04)QQX>Kku68q)&f:#5>&?4P,]V=lI&&q$RT$=Hs]0.cp_"bOnhbEg?'8t@Ai;C+2tA!cNWOTcYm^GUPW=Q@st^gQEHP"Re^0%%4k*/"1XFH@4F<""I-_i'qbc[cI&@\UW"!r*ed9fj`>*>(Y'&I:#-UH+lA;S8W3gcf5;SkmpC<dqcX2!eh6VWo`BhWgI_8SSCC&nu%_jekhWkEaf#i*oqs'PFfhu0W?-Jr<ZlX@"t07A:&PAmIY?=<GG.rXI@P.Rjam;:qn;b]54ajb,(9>%u93aT61oHFd.s"pY7l_QpN%M>bNGSaL-,6N2A@'7cRaA!EhClJBg,"f.uYJ[X"ep/SfINB4<+hiIGD1<kFZH\UGA!cX1p!,T0I1!PTtGf"DPePl.tg:JiSS@`\d%&iT(GSZe4UG'gGkYI=1$lEME;KZcgQ[4%?E--D.C)$I^QJOT;%9'XMjV$-g6(:Q'PKP)t5dTQa*`OG>79q::LQ&h(B0;$eS_oFhQ%,eP(!gb=.N<WEsqF620"8ZOBf?;<YQi7E1Fd:M/bp"p7CXQL;9WJ'UiO"ZUamGRjNf`f1!&uscO`bcsO\C5t75/tgiUK7='<kl.:%9G+R#M0?1&gok<#hmOB%/L]k44dehk?j91WE$^C6A@$9^Va$`A>B%aQ)*:bT"L0Q.2q,t"JY/Si<c.k!^XV:j%@pd86E<Vc/,8&/%FRo4u@X*f_ZM[o*>1W[-Q;Y!`o4r=leM!_b$ZW5JDB9h,9./aU@8`f?KBgb6q[h7Xq$T[eWRN$`A%KDYE4E/q$lI`KDQS.:[q/KO%H9_.'HgE[I;r0TA]==na+*Nsn?`>nP6!H1c=<H9&Qa"p,beCck0o#-DAr6rWV#uY.9`BXc]lRRqA0O5;%G!2uCZD$n=W3XCdfE76%n]Am'?Z?N#BX[V;rqEU%XR81mNN0V\GTF7ZGDpsFdV&<4Qq"L2g.p/_H$9\Jpn[H6o!2Xt1Np"nN-(C=*@3e?+eQJn<ZLRg8)2Ba%A';h%k$5\eGrjb@\:5LM+7=h9UbU9R9YY12.GlX3iZJ!O^dF(X\,k]1)6^cUrN%EB]huN#q97t@]tE7#?XYgH8Tj&WFb9KV.JLE0%M/Nt7!i]Cef%9d[J$G=jBoV'Wdg!U\gZ`#[LPa49lJCsbDmd&s^J#H&f_c6mW9BQi&0JAAA`N<"/aV*aXU`WVZWZaUmP=IpHLJ4_%r7V*]aUl+"1HoF<jgVGDe'@_-j_DO+.P&]8#]AOb_Jc_lP"knse5!G3Z:1-,]hEikGoQ.Y<$[b_WlnD*;1PFDW$fpiXiA]PI>13<%NE$Y'a`dJ9_k/h>Y:mYk01Vcm%K3O>HT-Dk%#f>'&;eA7m-uOI0<_!u=?*:T!pc/Z9QmuCP07+'!/QuU+('eFCG_,PekJNOD"PA^%,2WJK_]iH=<]rSa4.fl1(Ta3+h!#p"Ik@&^f7bG3M)]so!."(O%85L-_%.2E7:bN'lW[cg=-N*`-h*;masAXQK.X7>]/5<ck,lTW%fqJ\(?%+7DmPVVd'7<4P+eD_N%-hN:p2nisg$E$qD3CsuK1YA,pY,T-gR4c2fGPMZ5:C0"2ua;t4)NMd?#A&Wd756pp1mGr68%^S%'(>,[c;A=3dX;7aidQ<h&Z`*Af.pF]/"#a6L08qoiKW65mWST<g5CU1gZ%%1Z.hk42]jtBo$tAHWtgB9.-%$/!qH<04,7W2+<FP>%MU.^Uc=c75e1\MR*SF8dFt.:(p3!smbhj$(<\SZ)^%O9hIRfAKf,d_'1>T!ToR*clU!e<85'!N=KMV]L(GCeHCE<NR%F?'od\ZF"%BY46T^Cu\HDQCCs(QKB'fllP-F6BcQXDD.54i1HMFV7QaHY=P$R7>j^pPMF.!]mj90Jc]e<pi;N)p*CR<SL=6^icV5#ooYq0/TB-%ZaHE*rN(1KWkVjK?t;t<?);lmI0R^dIg%oNd?tAD,tG_5iXSt4<4fGSSTp],IFA(dhZ!:ko`"I8.liLtV\^(Ck.b@4@Co_3OEC'a%PWX%-+hi=Zl@(rb^]*Jh<jS]VpFeYE32eIQ0n^<HQK:2Ydm<`k-`D^8C9rM7@:d&'b\'i7<P*-,lqgK[4R;e,>Ar.ul4/,5UUT*C%R3oX)`1&Nr?\_;SqptXN)Ku,co-1g(908c<@oCn/+"Ui0mo"@c@%(,1*Cl?"3ZF5/iEp5-s65T2IQl_crqB=Zq&Q)hY)VRM]C4WZ%grjf(?@pJh:VU?19;=[/n^Lch-^DL'V9eRZnEb53m-"80EPBe=r:G`]g\J"8b\#RfdG$T&BFL[%^X2E+LJ-[r&%oG))k;Fp/LE=Q%1jK$,XuipC?geIp(VN=$7jmXa*=#Z_3Q^_QW9W#]osjb],\l3qgYLK<Na:lde:#<;=p(A)ME4j+=_rYE4Zp%dL?Y[LOAi"QA"8MW%DABR)=.!,BmJ"Bm:ZOF6.]g:&go<F@fs?blr+QU+'$3*R$Q]E)[#Kqe`'CpFU`<3(*9O>i+T11%CDC#jBV'to==b<c/2-HQ4bmG:%7s31O]p<F%h)`WqZWtV<OebaH%c7>Urbm;U_.jBE<i-?$'\:6se\\Hp/N0+seR/uBH!TEZ-m*]aV6\;MX2&$F^^$&"anQG[dJk7.%j6D=a!7FK<q&=A"5f"mj6c=)S#jR!U8";?2mt'PX3:;fQVf1V!a7&HnB/%G3dMh2!H28B>Y%]\)\:i:6YWR"=3;pq%QJHCu>d3Bd%Kd.Lg0.["iBBK,FOP_g<#q('3/"Z>?Ph2_B%];gXWaa+Agk$lk0nVc-:"Gt(l?e8goq&iVej\8:GRl5FU"Gf.oMA18KOjgAd74NX%ZR@?g,4/bI>j8Nn5N->rIE60d)3iYJbI^bS3E9g?o$2'm@VqdR#s5-79e:nSUVa]Her?fiO.@<'^RZi'r3UD[l_jA3kWa5\XmU[b%K5d+*;p:9:XH;gD8>0#W/Flao-;0*&oDJfhSr9#Q7>4eOG-'=CV"JQ@Oee<e4"l9(;&U6>@0rCq/4)hP69GXj;?ck^9l6Lek."Z2%5FpMW)i=>_OLC0-7/Of_rJNej'Xpk.jm%c\ph6fMkI]7\m]'YZ'iOj;jXlo4S,$_E[sf<R78no$X_?_P>*#Q<hVll"9/`4WDk'5E%qj5iHL>*NS>lH3J\sK1W`/ukjLAN[7lA)`ppeVOFR]%[eb1AL"`ZP9jqNPc=HBh$;0IZ!(9Bi($h;Y"i/83;1Mep(V/Y1Jt\(=mX%\ped*c^42uI'TPsS%XWY8#]*-GmsYZ'YilN'?Z1aI203pgb6'iK>H^>'KShSE&m1$Qj+Sa:ofZ&L&:ki)Y^naPF`;!Z\(>W\-6_b%j&D]a>pC"1lVd]&k([&,dXF.T_4Q]_q"h#Um.>I?[srbch.]6iQT'*UZ_!`EY9(%p0itik;rrG2&bGF4.iKK<q:NKpdl)\+/INLh%g1_g%],e&PpG5"(b&?h<qGkeP;sES1X)lC2cVBhmcUoIkWZEMt]]RAe:G8_3SLQ.pp.;7EfBECh=LgVjSWZ<2]A#fP\A%R%^%=_^%mD#f5G1p80GG/*n*.:#7:4X0&CX+fN!_U0?Fq:h3`8mq1Dl!;[,mBi3r<ZB5hl?Qs.XrKlO(bGUP)X@kKDW(/\PK-r-fo\\&Nr2r%QL7/U:7Hd=rlnI#H`gSrn_q'j2Xp!R0RhqiM>6ehSQD^o?*=uVVpL?C<EDuA#FjS@8lp4ArN:G43Rd*dE&73M4$W9#1_Sgel1'>N%>a:TIhJ;Z.B;X)3@//2W`D2U1kWPpn\(+r0+$*DO+u/gs>AEuVm.;b@GBKpUZp)cp:2@<\FiR1ZMd5SF-@9kRM%,f@^I.[(j[^QN%\i\_D%c2Uq/Uhdk-(dqN'&:SuDb)o8S#B'bmq$D2SpT^aB;[,Jm7lJ5%rRlKAZnj+nk1nVmX4t2o0i(gCLqnaqY7.;G'`$)qnAVm%20+[PdV0uh1"SSVr'r=7FLn#&^V>"AH$4M=rL!6B'P&tBgZaql(Hr,=Q+4HDdtDqC#D]M_/ur2JcVEpufd"oolBfW'I^N*iQ[YLV%\^&UkQ?T6^`Pg]31p"2JKjI<Z[=9(5#JjS"H?$a.N)%".UP=tH[KkiN)[ST#9eaiNb%BX^r7(hNHsXu,giIm7*j;$'Ics@iVHMsQ%%qO+fY[3,ESXj?t_q3]Zlnh'kKjIFRdE4ps=-Paf=r^:n_V;eBFLiKrV-W;EQKj7k7]1I*NEld8'5+;hAptPBJSoOmU@=,fW3*IW%ctRppmW@s4SM3.]36F9pg,pn+f!\,Iiq?NU768CoN4H+H%->O!2Km5;+S\3/>J;'tm6ISdKQJ9"*l$$!0lbD6BitP+I!+#Oh=Z.Z%mRF[qS_MZ8kNR;Dmge)&?;Fu5lKMu`]NW:P?4s.2poULf<?@c.ONhh;mDi+9?;J<@lJZ#IG!367^H!3HI,S9%rd&3/>!0Hr*Vhf<%D=6fXXpi"9mW!H5==]Z"a$.h7c9\]h?MA`VpX7npcSM.g[=`8Od\K4`"(Np#eR$GCjATXWXF!krpcRAiT3&HRMQWj8``hKb`TlBp%m.5?Uh5Mg#\)'pT9D*f1KUD7XH>j92q;8DT9DL]br:_KIF+V`eYMXfkUSiB%]t.u0a5)^EXTul6OuG:A:O_-q4h'LGa4'IQOC(b`%F[(iX/e@6Bjhm\af.Yq8g\S[UA^@9ZMkfJ,Gk>Culfhf=mi4c*@dtifa62-tk<aIWn>Q8=:FChBT[`cU7dnp/SkmB;)t@HT/,DN&%:1+L%k7bts7C#S$0)R!'IVb)6LBsl2hH^"LU_hX1BNK$%9_EGN=O/1[gtUnbl0@e-1jsf`IV%^<1`F,#N:BsgrQe(mZe#4^kjh(u%4tG^k+#'.I,3b0^SD2Z0f>/K@*"ut?GY'PmG.0!4p\\M&/A1'_\2u^Kg`.jQlhP_DFEU^^X9pS]La`7H^C4c<EV9*Zeba0l;W?9B%e)gFS`j\mL?<.Pa3`T4r9DTD_41&3^VcWTnSMm4JJ#A:Gi6(JP'H&U\C<`#NAUJ99gA#b6pl=`@3a$%AHW3+>3dk==>G7TS0:SSH%#II\OJs"c9]K;C]Y5C@eY.nueY&nh[Hj?9=_4(SbiR+jXY&C4ONAn?VhmjAX`4&[P8'_%ZS#2_peqJ1J4);!!jjRUQORC4DF!2%5%c_92W>j8eDhri8G_gF;ZH\6>$,K<7^S?je!+*P,!X:&C5j/I'KG[O?4r2QFg[mL^:@FjT9`o/Z1GX$'EZct5`)\O5Z^J[ZGZi&<Z%"7`mM;_c>K4YFW;2u86#q"(IHC'<@ZF)Sa,%0'J84%Qs">\:>J`cG)?PN@::Hq?/`TOP*$W5Y-R5Vc5agC.UI0=TP^X]Na2g9D#&%1:JdS@cSUV#)As^NpP,a5rDYe'UoL4)8%oRg@48DC9DQ>oLJ\qIo&MaTNjk,]ru7JaZftnNHbnHKoueU%),iLe/D+Q3r.s+ouTAZ%\'=BL]]L#eYqm[*F>'\$.nJ8fgcdsYT=045I?S!a+$pm8S0<i71Du.QnE\]A_bk#5<^:0Xrkok7KckSs/FI*JpG+:2;7a%f`_oj0%n#ifPB>V;'hK+pEkJmG[0Gs8@+Cr#NcW0hr/UD0@PomF:HhL4^'8]FhNVaW$],NZp-:DbT2YP]qUWeoPCU](o_!quhT#Q7tfV%O5%mV:rOms0b,J$)K?:/,!LghY.k25_3G:jor2*S"p0&,?ZflZG:%FB0rP3G+OY,I?qVUK?\%Vj`u.+Wh"h]<,Zc'#nNN#G#qLG';,E%X0]uKB\`S"[+Op0^EM`N,C]$XV2oGe8McU$$>?N(]a<)RG>l;"NYlTk;<YXfY.NKc%Dd8)>Xp3Q>IRu1=j(n=D>[nH('!Yq(6@I\%f5dU^jBPOZa-;0$M![JIh;s(AQSrl&rD_W2/jdZ!^HNkUIYI@#^?[r(F?/btKt3PgZ'SGbd!f4m!ahQ/!bH4NdF1@-XM%s7;,#GT%7L(M/2k3d2;+m&(N9gA7NG#_l]QkS'rtl27(="QlF\)@LJ?G^.$";7JIr?id6RnP;+*Ig99fc4oG/ij!2SW`*VjVYcf5G&t.ab!O%GoD$9n(**2'o@W]Cms5n1bQh?3,-Ttk%C;3[H\NX0rLh<'4Xdo2D`@saHfD26M^1%j)eOqa==UNX^aCm''I=*N!`K/#@l,,bH]Zr%YB_.F9c2O>[R/I1M9j#'Y>*tn>i(sd;)WT=-Wb>q*M^,!4n741'Ai*YgmGP3"Ek^NYHVF<T=GYj<%.P398I-dEq*B:0e=WsThLXO%@0Y`"/cUKfBl%\s`:B&,P"Ku!W:FLiRa!3=[P[@_[j-[h@=rBZ+1%[.G]biI#<kG5*Fjl60n]8j@1[CqQ@4N&M9RlU57.C[`Yb$=%\$I1X!:sEae_g+lhtG(;IPAnh+d$(O;-P2C4MtULZ`u^QDYV4)L8]VGYF'9]TjNC]SUNcu^E)`r?bQk5T98@g=<3*,EF62qoTBbg%nf5aI@7A1'IcOsWP[jXZ3/#mH4hA#dAoPKj8Pgr=m,Z^TdJ2Ga'+kjsFTV^Le"#D/+k^.9^KZpbH^Fr)LkcFXT]GiJ6G!nGq%)GD%Y?e:ir4%R$Ht!^s-aYrF&Yk7XM:.6]qQCSK0tq<E]lXIb`'F7[21Q^^G`@oM)7f!f1cS3D9MOZ>VY$J7P]e68&dr,ARqo6J[.6`B%=n\4;*reC&BpPt*G<^FL2(1M6Z'c<b`mFk_A^@I\s$5`d7oAj,fWY3g1g8ZuMhrT('FCZ/4dXUoP5tC2K3hgZmVdmf%MhM\<Lo1&%MqCm>dmLPqCY3,l<L8N>SG=*XX36]7^'j'a-RFBVSpPqgKC9]0S0rJK_oAa]Z!8,p0k`*thMR;4o?-,$O^lB#S?tmh/O8DPH[O;s%EB97=N/$bWPBQ*N5gmfW4(cg[jB:3);=?7=^.2\Y*Q"5/W+1==B]P@q[nDR^7I;djI:S\]q/bHta6L.uj1iXtB1-!rL.!=tIR[dQ%rjaW.Orb8'Cj(Zt(Eih9=F`dYI^jU&_cuUONVRMh=Lp9K%MCZHb\nq1^dU4cSsT2t]Hl2QGlMT'M<5Pb+RRB+dEWN6pIa0(phlW;%\_cO$8'!(;)qd8o/D)<4lTmV@%_Z]ngU8qoZ47@`+mDVa$Cgf%,3S7^gt.Yu^EjE6kp9m-#lJLJ()iZ2a:dA('sgt+ZY)M4RJCFm%=,OrY2Gc*h+;IYg9PqgeaNZO[R#BM?gaNf1'i.JAEp%jc48tc1CQa&4-BQ5ZN;<_B_R(2mE,*:KH0fk_Ol$'M>r\IsLE>"\"_Pr_%l.Q[e$faGIl9^8=!KG>EF/cq^oiC8-@McA+ZokbK`B<k-UD6]DcDAK4]^1!K<[+fJm=`oB_7J!V0\ti=@30:LdY4&$Su0*Glt%C8%j\P,33;Z?%>tB)aRlj-g0RR^<(tZI)46f'WiQC)7"Zd#i/BSNiXsK:*YttiH_U=.8jCqJF5[!EkfQSn58fH.+f-@j8albt%Vn`WV%*ufZ6pdk5Fl#c>:Gr)EcaW]<[V3nP0C?`lB/c!DMI215k0Yg9Oa^"H3pTNA_oR<_I_-GoTQS1RTIA="qD\ZsNf<&5DFdZt<"reM8%-K;!A$PQ>0gDOt5,Z:omrALl7*ttE4bloBM!_$LOW_!l7&;(;s$O8APXc^jF&2b;`Ui;CofX"`?a/`r3rV#[_/)sg\N0`^Q<R=0D%MlEBXY+V8_)#@_O?#Tt<iP!ND6Piun(K;tG9+>0G"eDu'nF&5V_%h'SfOAUZJh-%ieUi:RTaS#rMo6B06Piun8$Y2l:dZ&s*iXTl%5Rh"<"W\P9S#:un\:W#5a/7J83>7SS/'NITXR3eCGlLC/ipTQ.nr*.Kf*9\:\+>[N&G8q[eMh,QD0p+l7VMQf0Arfm9.mdT*aa9M%5LXEq4AAl09P0_>6Pb<N63L/UH[GjRV<=ElZ!aJ2c@qltFrJ,K7_3@kBDR_f.j([B_#f?J=Ybc[d2@l)_TA7I1rIn)gn*1+W+JR(%0mMS/)<AN?R(YL)GLWsdBXXlDRdP@Mc.$2]B-u\UJO)rDbSr:FMVYqSD;8IGe7,mOV1L\',p4OB?^Gn0Vn+&(P[2OAkkuA<F/E>r%ce:oMGAQOsTA6440r3%Y/meg\3&"*G`,UOj`.HQgMbIb50fA:l_NllNp[.9QHeF?@jpmqV%ihGn_^*P;Y6(H5m9"dMre:;W<F@(R%_7'p@Ae]&VbYlItHuq[<4M0d2Dh^!9F%(^^rhX=_dIs`hO9/*iY6[6!b!--f?Fiu!Vlrk=JY/WrmlU<GJX%,<pnlW\p_/:TL=^8.%jEiVG7<^rn.oU%obc+V)`7XGkY@T&>q/:u24@rJGr=rhf^ooed89>abL+[i>Nt0*DF(t`Nam-T[bCFn!\$YX?J-m:Rb/[H;ph'qX%O1&+W3&-OLcJCs&2o+,<3?pj=?S/J+dfbtFH$V'DpI\N@#:F>eg`KU2EbE>JkOC3FS'Lo[dG_jZkTY@\A2*0r9LD=3jjFQ$o#*`Z%,b,l(g^P@3:-3K/>#hY$0bdaU@o`AQcP![RE0VtI.Bl(_6gFGJ7!YoMTBn9L;ClY:_R@L4nMH,YA_5iq]Cj706&!:AHPa^o!`k"\%-k_nJ)<X(,=$8=)Zcs2H#oJgbRhcC3YR;80R?jBbU*qX%8FEfG[e\aQ.j?4@l9A3p\hF_aD16DKr[bJ5&.oe,O)Kp1n?k>R7)jN(%!5H!,s3s.T1,QTfHl:Z)&K-XE62gP]$,Z%49iRqfXZgZhLl>-"*t^:\dlq;^%cBe_7EOMo,`:W=6M$23kk)OX0ZN\0hBH\I\'Oj-%N.E[CL(T-o>>.kK9[,)/eu=eLPbI1PZR<l*oZPQeW76O#j^YIC"i"fgBm"R)jYD-oW:#Aaf*ea^UH1$3;L!M>#UuqJ5GX15jD_)E%d.>Dk.r?;7n_f?W6d\?"T's4GH8m,kAkH0QmWuCXS3JoY4e-^3oV1[1k/pL0>n8k?6Zk]fE'u&!c%4@/iB0m=p!"$FCH\1L)p6n6%>AQHma17ttfRiGJ6C\[mJ9j1e?.bCU"kUY;pgQGA3Z(HalNWo\?E>2A5bW6C>t5>#gQl8g+t'ZArl4hJo9\((&.4g33OPENbi$i0%]\&7fH(JS([QR+6RCC2mBP#V1p<J5]0%%rG"(L\GB9W&lg!F4Z%nkQ,$ZR.[B]&gL?0SbYMQ"EiA:B0fC@'`JF+!&90,rJ[YPq?n%lE\D1h[<i0X.P*9##*_W@`*0A.qrW+2Ip"m-Cj\/)l"GRrH.MW[!^?(YqbDR1Xf)dA"/oHXV#35ElG6o2V"$%Ei>C`e;HapUu))'%YTaf#>?jV^mI(*+;YamL&J_;$jo':?/)_sUTq/aT-;uQ5l;WnFU[`GuB!"T5Ige1"&prg7&I&P$1j.@p,<Sh9,G(K7_i=GUKa8LH%1/$SRjk)mmiQrX8RaL/cj<%"Qr75GaV/ULp/OPlAc/r+,[1po/##T%&?R^^#N%-Bk'[A?q(=GDLr>A'=\B[k[."$%^8Bc6$]\=L>%>1eC@=E%l+O+Yb"$kYbE`gd9rcXF^R%\8@`caLCBX@BC(F.p$]!`Bi=b&8Ina7^.?\Cia8O;,N!7m5@S)$)cRDN465B?Tol(M'O!%2_Sq=\pf*+b`0cIg>G0Pae)TupdhJacL"q;=*hJ+ea:l.BtjV/;W(WO%<&CNlBf!QB48KX>W$=a'(0>jala_aD?np4/J],gOI\e?%fPTaJWm-:%*$o!HNQTM2?a8@^Dq,`^bf9rffTBsWI6(A/n5AX8^LFZ$'m;g9J#@On[Vr'gWV3B"/QT_k@HT+`CWce.WNu_d>W$AB%l7R7t$SjsF.dWs!5_\$7]pn]^PcO7i[=(*TqtOXK61r'tfW>fdm'`qhGM5#[\YbomgrC3mI,FDhFa>$XhLiL_hbHIteS8`>kGk['%#8UFVbhML(aa>_jHX_\M]k?hmqb?K%\PW^]@VVZ&W_q:QF2!gmL+)_Xeia^^,q.r*C<E[5Jd&O($0N@,2+3$p\C-t]lVrjh0)Z,@%8phiGb(!6Q.J]dUGojEg]!.[b]^CpR4B#goS)e1?_G)"rp?-23IO)p-3Chkmf,&[ggm#Ic"^N>84$T?aha6Jj:*%d4]*:SH4[^cr%j".UQh]EZ+?i&6sbP+VQ%<hj/Zq0ZPeT?;#_ou.UkN)rq.,:Psl+Ccq][)A$Vjbm]-Kr9!F&pb8e^D]>q)H8M[Vr&AT<%3]BQ;X)%0;t>bX/W'GKZm[qkN13Ke&\jpds:?00Y29jeT>-*FKV0s"]Wrr`EA_o_C_LNc7@I@^"5\Qdfl7_[D6N<Y?Eu"mcYjpl+E6==oF%T%ds2DEIBrD@eT>-`(Q$CISqa2@o3+B)CoFnEkpDmgHDg6SWp0Fub=,I\c%N>d=49l%KkIA:\si&j(n7XrcHF+_/A.FsWrZ+&^!LLT%Y6H0YYGUpF/Xa\2T=^Q;X-V&u^!9tZk>a_.g_j6_24[f#SQikQ?VT^;%**3f$`U!2;9?4rC-&P%\q'\Qk'$g7j4+0M!+#>W]hU::%65GAG?$Q+RRj21s;eTlR=;Qn0YKgoSJ_%f4m]-`&0#HR]lHQaI,.4]:XqT\!@9A1-Ja/%,./6h+HOjk38>/F;W8$EGU*m,f);-#l%+mS=0ilN^5,"TQRi2INYHQAAV:63J+n+gbNW=h>AX90YfN#)$"k\c-D2=G>KSEF.21Wa:Ek0@>Nm"X.7%XZH+5UBLA6Fp!+Jd:Hd%Rhso*3MG7`?u4]ZQ4V['Ko%5Gc@4T1DaZ><U:W+e8sQ&bm]>-O=n7)kUI*u6=_bokc82#4os;-33fEBbUJSq5do2K=C)c]RCO(C&%6KMYVIG26,hM$&MXt,l7T6k06rrNPlVWRkI6<+m!-ZOgA8jgNF$V;Pso*tZ/.65T]>=:qUee>I+Hki4Hfhd.p4]nkQrPO<rmVJhc%`FVE-/2A10,\/g_Pf2_X='4US;Yc]IHRjcVid2Yi,W8jgIoCV&08[%l0*dY@>dE+f;L!M"(MR]3@;Wdhm-__oqhS^9F.V"S_-/nt%WIWW'AMfU)kATs%@m[-<E(5'IU@MYEksAs;qd'A`#di.qmL3i\\M%ZciedQp:nQ!C\d.#T\$-e[;-,BO@e78$>KAK+mghWL>r4CO%no6HGY;oIJ4JhgK]@E^Jg$1SGm]i3?UA1puEo3'?j$c'_"plnmQuRltD6N"g+iF0FeB4#;CcL#UGI5*4qi89QZ/NV1GCRB:HBoN<%!j$B^a5%ph+02@Eh39jPI6uhU[ue0H^H:jqSsAKdh@k$'@4n"=q1cL1pV!FO@p%2u\-mY`3@:^VUp/$9fC8N@_\^mIQTJ,\@3a_=%CV.cNSfr^t:8jrYE<1d$\%c8"mB`C*A[F7/1s>3D#\[iOKsfQjQ08qKMbS-1s'.NA[>$[Td^P2"@]'!F&!$X/mYX1R1*17V3Hn_d%\bFAK?l=_;&>Fu[1N<.n:+\B3N+o"1/=bJ?XGa:BIQ;U-(;lE(Tu,;fMO6F,Qgaot^Cgo;_\Ou[G7%+Q0#6\]^L3YT0Jk7WZXM%E%65bNCCrU$'@P=#5'O;@"0YHs6$q]<pX>R0Bb;\=B)Ec?I2bn&\XU(EU(5:SL0ehb(U[aBGA8KCE3;F@0Ag2_7lK1Fkh1G6*p\6]n%.PFcOo5oh4'mRT[X6M^D`g(QtQ`G<c?N"#<B"c>pYg(4I'"ub2odUTT?IuAUX4OaFZ.)`JG:VeA;l*C;m9ppracE9C@\:s)RF*>4%4`"aqT/U*LE01tQVqhJ\FEb+>AkC*A&!u!t3qOr>PM_P.X_=>laj,Jis4Y6HErA#]gF62g/K]7\)Mo@+Yd%2;mS4jUY.;a>9W-/c%Z,(B(2.U/4mYgM/bI?'":[R%[gp]+W0RhqCMsp^V"Mn<3?d,'^Xti,km<['Gh?6jXI0koNXLn20IsUD7kut.^p?^CFc`:"1hDai[%kgC9`>j^IHiR=dWFBi/9mdu<Wb%TiN_OBTea=jk*F(8\P^#.T:IF$-F[ed^TKkaIW[#OfR2;(kiN)#:Nlf6<J]:T/b`'l=r(R-hG%1/=0Wh.!hD&">d!Uml;&c@#j>7"iLn,j@8SOGjO&J3hGE$KG4?KQ:lpWDtlWho%!W$oUL!WP.^p5msr>?8o4G<+ek+$7GmqT02rD%WjHIXRV!UW.!k0jM"@g\4k3\52Q%#+8X^^u&fU#nZa<7c3N*Y=5>F<c^BEV3'oh`Wk/KI$<OP,sH$trim`Y7*j9d9;mV?7?0*>[f%jP78!S/PJHeR)-1dX>s5]0%dTg\Kl>pU(0pgB_T_[:MM]\^l7h/A#snCPt0*(2Eofer*8q>-Ka]/?LVr0iufEUX43dc$#FX_/g):%@31-mU3u#5iS]g6i4<jPS?\Opk5%+DZM+5-]CH<^&W?m!.mm'dE$PuOVOtHX[RY^.n`NAlEh'7n9H-^@1F7,dftI9Q"1l'"f2ta'%hAjpFCIjZ^0C/G*ml:UrXDrDS'7!2kPQEo-]k8dll^TL*;S]iocV\>[Sj1OPN#9jH0"jJNA%<02E`Ucr1cG$thcVWkomWP&P8"dh%0l`<mPC+==-l8J^%Oo0jV$\nm%A5eXq[Wj>+^@h/<"6ShVNr6XWWC&gs*GKRHi<kW!1=8G5?%Xff5OFMMuBmfcp]Fu*p-uSXPXB0%F/,=XZ+j<?3gM%a#&p<Vaql)igo/9gaFC,ioH05P<oVi:1r_=+/!ooco;-gjh8o<Q9DP*eAc9(jjn"?Z/H/P]kr5n"i_htX7p]O2%SpW3Q,<Lagh156T9DQ5pE/VJq0CXGOKjDh;pAW2p0'..B'lZu$l.0KDLM*;QK7.Y1>K#2kGd$!k._-=<2Um-KqDkJ9/o:AO[]S`+%I_el)NuG&`h<X6u9%U1oIm"anIBR!s<63Z)TCH5PT+s,"p%(6aC=[b16;d=/p\G&+L+naj\aK+u;9?4rHi8mq0#)A.X^C5'f.VA`%PP8/Xm9[Qc>Q+PC",P"2I_c]gc;:)1?9cbI$9m#<&,5o(B:Sdf"ms6'f^^9EiZlJ.S*OCq?q!S/GntA&?gt1H1S-knH`pe\X6YrQ%4nH@9?<L5!<kl36j'+dnHh_sdJm0D!^OU\0Ji?YrN:+7Eoa<CBor(F[e%L4e)_0F@I]hECrd:p,A/ZG7X.PZTo]PcZo3T1>@2<kI%Y.riZkIFAuRh1=@2#k7<_$S`=MU]DulfY5(R^gmdigd&6hWku:5jLnJH11D6jL$e>j@.ki(VDgl_gQoRSDrM?O)P$/#ObmqB!:@d%^=P#_MqC8KG.)brJh;8Ck'd5UrISt\>>/&N[/>kRCbb\\"n+C^ZO$PVY@$e$IWO;b2a``td!^:_+/WQ*lF2lPpnmo9+\lsC][q(f%X8#p4B"iWj-AjAp\,+bm6Z_,MB9S\FXaYc!8t4Y\nYNK.n+@&DF)HKDhd=I<IZ(.OSURbL\@U:;n+F"k$$eK+hsU0,/a(::?GF5k%_qVZs3UTCLGEldCGm_.50Ar)$RI9b>O^k7+0VQJbGctInU=2M(l&YT8q3AuldkDQOk%Q%]N[s;,f5ER^nuqfa3<[sPXa]kP&$ks+%"]If7A<;#h]mdePTtQXLkIl>\"gM#OcZcR"n?%-\p=Q#*oa<O,$l`djp\KTO@HP2Rcaf5,>Q"W(CM10/03C5.WT">7Y@"MS0J+U+%Wm"5:LR&W.A4&"DAph,6PnI0kO.;p<RF!S>`Uma)i5BtTfqM-"8a0aJm`h2QmGhPiaGU=9qa(il-=E*(Bl($.SO%oD@F=jE@N<YR%f(ZL[94,)5C(1CM@9AC6?O'*39Pe35]\&QDZB?-?mH"-(mWu4;l,i=^ea)>\c6s8VeW4dp=80kWlH.";2>6QgdTZ+QrF@*,jeVS(%;*UXVYJlQXK=APNM67rU2Lj%Kpn,6dPII=]ca-)YIsg*e,iY@i-'e7L-3$()C8WssIT"e:d3*TF?QT]pe`_%gf?_FGe[NfAFmJ9S%V5O%IL#:Fa(@lq@]/gdFDmZ:]]>f;!-m*o82P6ch=6I"">lF;hc8AZ!#@-<Yi,(/mhp)YMDh[lCHMZP3-QY,q/IT>$<*hYr_'Or$%Z8\q0Y'(#efA.2&b/9gK5VgrFe<^r*U[!!8e>h\)q'UIlUiDIRHMR<f)d/fGFRjU`$?l!5poPN(0+R\R??7u93e#/Q-J)^nm8\#p%ZQ*bQ1j7Im:3Q2k^:(5@m,CiDVV>9DD6<a=Z:NN$bOqE"FRX_aP`,d9a.QTG#>T`JYjCrmqfKbWd@;oNX^sONWdRu3Cock6+Ip.g%eLo"ZkJc4)=\\//A$0&MRRMbomhT9U:(Krkjl%>YbPCP:^3]]^\_CD(P*l[=X&R>OCU1!=BO&LG=$0JWa2[dsF(^93h/@*u@[6\*%NlT-7Y!%42l<NcJ,9q<!cY5#`rQV!q?c@t[%"8Wm1Z/3D\'LAHUfg@!YH/CMLs*n<K)>ol/,%rJN>22PSD&)_$\0F8B,t1BV9(B1%F_g<:hFZMhEA.(*fA^Bm3e25=Yld^Ah[fF5,l=5IHaFl&jtQDjN.88XA_@<lq%ro/a#qGEm^u[5%ME<LI&"+)[:(NTE[580hRLlq%foIm^4,ojA%Uh@r---<2(+an(9r0/oT7YJaj*f-hq^?$go(^,_.31nr7_c#+Z,H0]R%pbQdZ[SFG)eP&CcqaI4=#EFbs#FjnAJ&[%E`_p5DZAcbKVt_^nl/..)`CkpZW8_a@TDHAc]_H_XXEOpS)!fh99N=9VVtsp]N:HO$-hU;NCF]4/B9Tjk>m=AWO'j#;E0jM9'Y5R%h!i;*6K7heC/XWQNDTK:[t^`mMi.g4BL62+r*^c-,#+D!W&F6\'4)Mt/l]#uG_6$s:PU_$"dE9j4;1EPpu\0P]hh@D46A3T<Q6@r%UP[9=&R2onP%k`*o*J/Sq6i(C2VW[O>hX:D/[.&Y4D[4]ZQDc<gA,:nkOQ^<jl%Ce5malS`tfb`5I7Q8;Z#^T<ScDdT$X,>B-$AA%Z(lGWN\cJB_-@acj.2dll!;Tmpbh#(,,5n)2K*-t=1.pC^F,K=SUZo0UPZo]LR$?#HM)@TWH<N6]3]j.'JE:tDP:=W)6QkToV9oO%_S50dSao\>L@R"=kJ-B?X"-e2Xro>FZ-!mt9(0'sniX'TmMa-4)g@)930Blq`9.,=**/Ni)OEVC]P`-6)P?2Z[ie\GO/^5G%+YlH%Xn'Ss7WtgG(5o[!jtn\T;T>`&0CO[$mUJ8HHXCZoJZ\N$ija5VBTf6_?&)La1*l9Tj<hFBPfQSKPor)4:^dM@]:$)DrYE4.8)_lA%H(m`$Hc_G\(5a=FrAAX[6/EsO\ba@$X=]A<^MYc!U^9TE+*5MW,*CMt;j8)AEh*';[lkmAIk"]GGH9'+.u-6g^;YZt`o7h)>9fcI%jp,oAf9[$j:*X6S<$L'^QKCkDWh)."%j.Vh&C!"=[W0O?Q:X86FNik#`M@QBl,VoF_&1l@LKp7'Dc/[E6%#dXSjX_1MdZ*hA&J:M%PPa^S]EGZJ.4rGma!6!-geiH;(kr@*Jb4<6eH#"aXDSsu-m<%CY$[%8>U$E6jhc2Y[+k0M,\u:hr;`]e4[pCKHHU?SeNbC'H.ah'%9t\LeSCRBkC^!-,[G/q7Z98^&:Gn+^A2k;,L'3o%@!BKuC7<nN_8c_i1VsPE#4l5X(e7%$Y=FWMTClcA=9k9=bP:#<H#UU24e]>q%nKQYo:8c/@`.-J?[P+,aK7QW(pV@TA\fpApN`*JH.Lg=I/<c?(pT:WdU\R#6E5X>fCH;dAb)&:9;Jb3$QiETg,8"e9%$:dY='o2+%%2pXn%SpmTgenhO0:V!k6Q6?7,=k]@&oIp5,JAo'5saW/q;+G(2WI%'.7?0;&PDac6?8>W_KP%McXrr8MeWYNRWN;8UdCBcM#q_O%aTN641MCk[WeVZC&qht]Oq)MsYV2dM>g5CC".&$5L*@f?\9`Pg6O/H-K>lJDoRW0gDZfF6e.T)HiKYA?C&lgrL*fg4*"gC*<*,M9%1X7_7N,JeL<sCRFrSo`%*T#Sae)4J!jWZ.;Ooq33K:A7^5WTL6c,nf+A;CF6Z+q^KPqZp)UeH_-RL$MDktK_aOP4Hq;.N%qL0-Qq%a3=h"gP=&Y(m9cpr^9_"DC2A/]^K`ipVB6GhS9<uWrZdc0UHq1d;ia#icm8GUi56q7W$aC9_Ngt5YSk(@[8E1S&U$kP7,(<5-(0r%3b[k5Mj"N#1+8-mS)EG""sYn=*rClBa9aY^J^Bd"'Z.L&0=[@td`=4$Oe%>/]JQqP[L6^/GeoSL6YU'D`!0#?#_%W#:HJW'WKm%l%_9)d<QQ<d3FS$5&*?_n[1&[G3DM:X\h(P\8)<Xp?.\7f,F`2P:qqnj.e$5I\LK'uG8`F`(1Qiqh%Eo+).%V`>\@%NVI])G0b']]^%"^mcK7ded%&\73[n,/8](kK9hjUKk$E[>LL<mOqBI?TY^V:XTcA=-m[HO9D.5-b8rHR\YS.qOL_p=Kp[qHgQs&:6F8F8<uN_R![[%nh5m)"#`?q3/cP]_1OTAi)R)#?jBhTU)CJ973a_.2`#UKA.EkN"^Re`p+ZW/fX;l/;i'2'Zl+$k<B&,mDgK0:33uDK4>O]LcA^Lp%mi^>EGk6ig1X[]>,o'Ih<Y4.;4A!m*1'i_qKUd2-+@\n<(H4]LHUo^(p@i(b';o-X>%Jl)XDe'B=oX@&B_JBi\!ntmU\8H+EHeOu%Q;5H#n$VKE2R;*e:FTGV)rDIVJFqC*BG&st`5_#LeYbs^%c:jA:u+tP"i*RP@Y"o#qsb0@oF'N5dThm9V*=kkm9c%(5]-*#A,k.m%H_%&q=Vpnf%c^l:p+M0gKEpJm%YJ&Fm"=TDWYmknpa99e\Q6R:8$2Q=0d6CSR5/:X0^b=lMn#'47&8\U5?AZbkM5Ug(R`I;^qRAZ%.NqLV#QZ$t+3q&>eWcAuf5(9HROPR4?S^5[gec'mJ/s9T``ShTm(KP>&HkI-jKIPI;q5bYA-X;m@I`F!I&6_0Z"0.7V_ZF21[?;K%Km0nsWbN/.)>FNEmg&pm\`t+Q'#JrLH=uXm<(NORSHbhBg<%$8Nj8kW^8Enf6t2(TS$cP*F:E6er*V0e,l>r<nBmZg6Pn7*/W&pi%$!PEJX<I&#66UcsB+5GbKs.)%o(C\E8`GF>#JF5*1m]mpJ9,$-%>e]A%tfPE,qFXL8K0?G?3pPc0j_]#ikP'Inol,9(iRMNg,9[X%G#lcc'dBZTa]Wm\P;O*S06]PXljXF0n#u3;9BjN0,Zi^Yq6TPQIXTT/SbE'?W7l_>J+^NG9,gO7dRe"_8!C!eVuCaUM4EKJ5H)$2%Si-gim[f;bgT$!qW4qJTO64T)^0?$EXpRl!08UPl`+C(">X?e+;h^:7B]@rRO/CgkiR,P92OYP&S4(j'Qdoc(gD:.oq//6NAPL[=%CZXl./+ZU+WtuuSS8rMd@AK]\Ik7FG%X*bWqQQVM[k=uZrj?iS)r+b@j9/_n>=kc$EdPKrqsGXI'2%-3a"WkPgV:pFqY\&3K>4pT%`\ZF^SDPsuZPh#P`&>hcm66t`s"$Pohab0'e5KDgQq<5CNt]P!NJ\XZ-YS%[Z#eH$rOOjE&(^>RZ5'P1&8K?io(.$\J(haMRF(jH%-gD=#HViTXNBf41X.e_.9Ue'Vq%%2SRC,9'd5X%'fMC2[!\$liM0k9'2lm6'8VY?+\'fS!9J^\M4(3QL<NmOpZciM@SH,k@#Aj-o%%C0Q5@!cc*;rhNR"gQ,Ah5Fs7=oj1e+:T5@CDWacaJ"bj)=d]2j%LR>O)&o/]%K?\P/:;KVUT;JAF+OLVR78BdV`X<9@1L$(mXJu%%M+?Qc.I7;dV'EkjZ@5r$`hs6[Hk:h<YB_Xn=,_!4j9A.&=VMCh'ZMYDbBu4r2Hf3$qZVY`D(0D0t2+t=Vk/[3Nr-#Z+mbm`\C_D%QJ\X*cIOlq.W=V/:[,7Y:%jNfTmW%,^YdhfHb-S,n#8kF#^1V<>A8H#\mY&?6*3<l)tl$.[?iRrFdLFrehj-!KUBW$$=3I2Cnf_"%,"dOd17._)<@7WQRd2&.=cDe>p=<'[<d5Ki\4YTtbt"+<8Nmbm@.1m\]LoVp+>\@mgLkZarI'2$b&sSMlY`hA]RI&Ve[K;A5?E(L%;lG`#6tbO%ZgrsEim?CgWH!$D,MF-W>tQ$MC:Cf(itjN>dAofG<aGeg)Wggrq,r-&%8XemgY0B+LeiZ3KacDj-uNo=^;nf\3A`m1%_P2kSY@]-b*ROF[@V(Y7PgNYkZ#q1_4uc%u=cKRb[4PU#DW?B*B_qJd&0G_`(k"m8d#9<$<sH0=Vj^#2''jfp[q>&TQm]=o_dtUs%@4u=KRS=fUYXrF0E[k^67U4HSLAB6_G-\!P6sBhjA_JRbF$_a*P9N1n5&K%8)<*gkLC4b@05\VQ]#50X0CPoWH&%kkII[C!.oPs"%<RrI$a]q-?4l;>EUH=br4>F`uH-PNRNBC7A@K?GW0JK"G'4s.R\WPKIcB9%XBo;5g:[CJ*1BbWE8i4iK9LK2%g-Gt6l#S:*g,;Zn%a>b]*!k3sp.[io!FpfYJ?dIp70sN%NXg=C::d)*Bc3>`LhV2GB[=(A/&_tZK3pUV?X`2i_f'#<AnB>C+E/!*n]G>ZrRtP$`l`b!i%1*0.J0P24'lXI!,empd63\cXI2`J"j#6Lu"!K""J_I$FbQEt#(0'SR,[*Ju3>JnFdf+d\6kk/:LEl?kO$(6-l;0osh]fgQClf,B>%B/&%%gN,'jUkQ'<m7i:k^B[9hUgG&IpFHruNi@kgCDI)VlOD3<Eh^@FA/5L-XTOF`n`H%egkS_N]M6T1.tn;C#LNQ4Hc(3"(8^-B%NEYX'@0;FsI\[[jdq_oLs1&H2.Pe4/jS^N%>lB?6LnFsVEbNa4F9Wm,#inUjqII<SoL?9rr9H2rr/&SHJ9A'76kc3?H-up_3h934%\i2<$.sJJ+qD3s5bU.9fEVhPaKP>Yc,)X&?,TJ-P#IBK-;/90FpP)UJ,:JVHd!cpZ&N7iZr%pUWIq114_S4Cb8%gVhQ8dM"/(mJ)%qP"F<c2F[j-cW<,D;)O07a'?NRZ90HXu\d*ApFTeL-hE#("/Ib:fk=pXKSCM\"O291Xk",LZeL<2rMR*pNXtt$p6r_=;RZb`mo>0%O(5D.m.#'jNdlHJ?VX'8#<),2?I5)to&KIX5)t-jS\hQ/)YqGGjNtJafnes1peK/7d<+PS_['R!ROMT8_u[aMQat(GR,%Kfae"FL%D$h^JS!:p,lCEsso<eC\;g@j8^=Xs58tQ'O0cnOh-!n!E=.1@`U=U8Ao9@@fjs48N\stT\:B'%)B2")Er7R7W-=4tU7TP];%MLX.%UBXcogPCpHYqmfh;bYPuM'*K^)(%,Z7_s:hXE1rJ>-]1hnn]#cN3kG41b*arp=uUBR0QF3(`@g09..O\^.fJ"o"3kq1!(RbJ!/ki%UuZ]][bWZ:F5(gM:.p3+gaa$O)9\U.;BSA"5i@pFS.VkR?iI4FT4beKShhQZm2OHu_G<2cqM\h3<Jr'`_<PU/BTF/>n;-f%0ZNS(%gb$tJXO<@=%HjH2G-rQ#CXe:.^!l8lF$=>-o.G<8qbCOC0L%WL<dK3r@Nok%Gs*2eTf<Z/`H?GgbF+%`GffK:XdoUm]&Codbi?B5%d!#UpX2hAVrHac#'4tS?a)T+TemT"-r-;u[Cd2esHZ/iBSnDMR9MkQF=_&T/8&^LVHb]S"ZZc,XPRueR`0`>#9)imd6V!J"k43&G%b35GW)gi5Vah#.Xl^:3VT1CpFk;)l]9oMR`S_''^_PVXN=l->Hm)O2miI@sc<4UgS$L8Jq'Jo;n7.Bob>oE,gs.*]WrKf:tC&U2N%.f>Vgi+`0P3HtD9PQB*BWW2]Ji+`0PahAo9nAG8V6oI>UmdPV%pAN5'g-oI*J=Q7$iu`Y7mZ`(%n)(88IsQ_Q^L[7tKE'm0$aRF@%lM+`]RmUlT0bPl&/d[B2(3!q7<uR$tmn]_Qrc`SUT;;u"?1,2IG,e1S9?+RaG^"3X%\quDn2<C$i)X7k7bEQ:9-sAjjo7[1V'#JT%(u^d>s*R3oF"HhY5Oc]Gr:gMis':eRp6T[b\><j9oJe&<=\_kj,uG>]Jfq!b?]g;AAp%6U.',jGOt:-D!!:C@e-!X:q%=PaK?<Dk%3O3-1&9!mF:(IkM99LVT<R**$*-*;L.Toadj<]ZGZ6HJD3%jPf'm0k!0ebo9EhZ+EC4GQ(=mnrOOG-7G^u,I5">S*A)Xe,F^,9;U%fn[Eh9EgNX#i76TZbU:8D^Sr*#nmIX-L)5Z"Ha_2(QA<9!e7>n,?Y>G'OJrQML^,S=\2En^o\%YZn)H#$URnSG]?<lFp&Ds+D)p&%UOPKs6oh<)*7)9lAU+ct"G!0*GdsijnL=P"XNYbN;C-pUA-j<nbDI]_9-TuC'NH=OQ?4/B-EB_$@/p0>i=QG)o0ud.F:#S<Z91gI%!an&5Iesha6(F1)AO+#\#bm=1FP6*&#/GoeX<d$=#R2ep)WFp$!&*8`A6i(6TYjT:*[dap78:a^?p_L7cfD11lJuki":U`TZi>cr%RCKXj2Y&k51k'.JI@aj6c6E*_4L'!R@;ri_oY1tU8/.p-Lf^6F@%T(k,Y@JSB97lmA7\d(4^n&^Xi]-tOWi1hX),j>OFT_SAMSb"%JY2nmIOG51]Js3nEJF)n-grf'a!5n<[1id!-7OO5s)(9b#Do:Qq3n8(#e&Tqrj6!00_kg\gWKQkU6(>6lBiGu[qB<1JFpqR\tm0S%R\Zu8`,6=H;h.;MUF*e4juAMD1K'hMfa=oT5h9I0WiV;"5gCjL:-gH9"E_m=-m'2"?:#m#+CnIQB<;6c9;:JR!NLnU4$K,:dAbh%%o`/+sr<1r=4Ms_lUW>QT!+:)+;fnBBi(fP;&4hD)N3"W4C,hX5M""De9j?%3Z3[0k!Da;0!YlK&Ji"&bPb\kq-\K3h^H%gD#k(>5%Hn9f6"[N+rXT/U"(mI;&aLmP((o#de4Q4@@>ud;:[&e/d:3aY7aC'T<LB*D=?tj(7$9Z`S:^[N/o,NcbLE@-;%`gpPEV+!H5^<m2%K*kudd('EkPm%1lLaE6Z"lkBQ<(UO1=dd2[U7GYk7c7R32qCij21fllIoTDR3]I]S48*8YAmU0+e%)P'I*B?6?>)6q'E[k?3!0o,%,*TddH(2KH-MjQL^qlt"34$3;#qRIo-nnNN0\"%V!,\7%RkRUg'dlZX+Y8Q4>=FX>GYjb]A=4&:cQW6Z,"kKi-Y>e9("g"*XK$4`%_)9N+![p&`0L36&i+LDuLoSTA([On_1m+U`*0d+s'(Zm">!thKa_,`:(5'n-e;4NY@ZXuL=M.IU5]Q&mZZ'[,"jcF9N[GJtBae'.%YY6Y_LA_C08SU!cSB=(s+.P2P'*PD18h-6pasf*B(ds-+aT>+849s*UWs\_>Zmg$MnY$'bYn.Lh*JcO^eP$f^7IWGu,\kEZp:)J^%pZ/,71j_2=kbp%!(e>70$6ucJ^_G`E8].<V!O.34d(iRZSUCl_*/V-.&ctIPLf6o6'P<4KCe2B"U?$k60+g:3&s3GHUS]`.M+;V\%,j(ICRLfOaEl]SD?,4iB_MQ&f66<"GiaE=c`ekfWK>R3iq8<BdFFi&3\"HT$e9P7fnM!m:PQY#X9k)qU7X,l^as![e8R4XD?jS=2%XXs&P_*DqO-LqYP!`B8<FM%e.S$)<]?noa,-._,o>VZ]=8Mtc5G`RdqfN.,\Ku."%$l(=lIg`,n/f;f.7+DJP7HA5j!p&rb&#tR8%UmfhEcCpUR%&AHKnHru&6s=&-fHJV;8u<"d]?Wa9ED7XIAA]7HCJWCeAkeJ`L'N^a)?(9,?/a0)j:sB$M>.<rdM8Pg7>.M$G_Sd(%A/eBhY`cjJXblCK5Ui.:N(2AY#6YHDK,eGCUq\nm,5l*4Yd(m`&gG?;\2%ukeFm)ZL^fLAM!-@N'sJiB9M$F!ZU!^gJ?W=rL-Soc%?%XD%8S8s&;hMi93dK-kO<.2N3*8_'A5#CW;'Z2G]PO0nJ.Eo?A8W*Y)tjIhULk*?i@6@T5%;#e7PQ'Clru_B6q9R:&dWO[OZ?nG%J[gCOR^3+<+]):!^bkQP#c47uaigW#3ED9Y&9L3]W]O;uSVTT//HtAQf*0]qbQ9?@`#2c55WQ"[qP,/UIKdqN#K2]h5]["13CH'J%Lbn7>9BAT0<JVW^4Uh9-oMk?'Bj4?kC']ErZ5dMu!15*pJjBnKO.F'iMZRhL%(o%`%>uhN)cSN$(XXJ%nK8I3%#uMa#Dd:$n1[L1%@ith*5#6Eh_GimOd"^mi6?aWOnIAg>0KDm;Q)$P\PI?n4_)d5.+h2L;fHh7I$kk%D.M0E67Z=:'@2@NQgEQ(u)q"i,aA-\h8ArUh%"r^G"NDH5_>r$_+']"(26([b(;.2palif1X_$E#B(Ne(i?r`;EJ-1kL&4./6`PSSP7DJMIRGSYBU0gjd6Jl=X@DS>YgY[=n4@D)P%$Ne@N&76"MCb!nV1gpH@*MI<M_I#b'Ne(<0*sDuGP)M%s%G=(ulA^q=3iF/t#L#gZa9k3GBgWS$%8@0bLI<)e7>uS2:DW9M_m&N6%JHIZ?3<BF=$T:4OIkoJ1!@WXe%b_BE1=kla$=`Y`<;%'CE3H?4.);FP"gRjNCr0dhpJd[&XhZ*$Y_49P4V!H3#`6EK,@sHu/=;Hp%'+7/oOpmb\-t$6b4K;lA.L!APA[MP.a&&Y4N%GED]O>94R&gX,4,&3bOa*:AAq;?V$N_H=dr]LFL+UdhG/1ms&O]_B*bC>V=FpSb%U-Whp[K:b.P3dEb0EQo<M0'/,;M_I%.?#.1M>9`a,SLN@(`hWqe--F\/W'U*>n@#P64aicSHQ;pFk5A6[-8FZBAZ$9V@o[B/dMN7%Eai8b#%kFh!kNXqa"Aq^-X^.>()M^^!DWD'fUq*JnC.QVfbpYJog#a$Skp'm5S1qL13Ghb:d)#gN9\7l(tLbpG6(d";]Te-()BGG%`Ge'RT^s(ShhhZa/]CKAeqaiJ4!4gXA<H^1UfUM*PZ6"B,eb?f:bXsbNcatH:g=pb"ABY3f`&qP&=f1)kQg-jN.-=$Jh<oN]L0G1%(dj&O[pH;\:n=88<j\8%&_)rU/i\N?%:]MF_DKpL"5?E_=WmhbS:oZH&ZK12#cn@7>_47Fnqt`,V1OpG=YXAQW#2d*b]Him?/<Jj%2N/4m'P<16'p52p&d!f&R!d,`/"5_lg2@!9$kqE^,8<K+L^dk6AY\,jjrmASE3+o4aXid5P(Rg.QOT]j)#`"nAt.]e#\]S-neO($%Ug_I'&i='[16<l\959_H0KM?+@n3g4-35GRB#t17jRS1Z(a@ZOL^(kM+_Y[/4!duD?4aeY/;gNI4^fa=3Q6O[:Y<SuJZk1^jqsBW%#i]j1ad2WEfG>0u1U`I>UC"^t]OV%e[RA+)(3m-B)'L?T?7-m"fcf`3b`_\HOK++qZ%Uq)]HX[E-upG[AXNikL`H7dU.WBf6?l@+%*TA.72UPT9`BD"e;4)=4!4Ik>o8GDV@o,"[Gp@>H*bAc9.e(Y->MauoC2I50npUZ)QFJ:q/"4\>H\?C5U/6+gEo:[=,%E7`fE@V/%*K71sN07`F/I>HDQ5FmCEFI&faY>d:4fAp2^dX)kC(ZF8bsAQlLdm[AUe&)XKVA8icsW%C<h'cd1P8CG(ib;IACfUld9mWr"A2Lb%0^MT#1`C/(!'A\@K.))q$$sEM=9o<t6KAP="JdDXr/JRlr]uo"o"5Wjqq7E)Fco9>!!5gX5c0h\AYB7eYDU+`3^aSS@s"`5Ck/XL%C^;gq$u`^iDo8M;@UQ&sJr,R;QVDBX8dY6<)6/@(J76Fels#Wan=/^!J_97D_O+b7M"^mp//+nABVp8r"p@@43'oRuogh>EPekdL%,UTs[&5IAfejUIg&U="$?tEUYBg@c2=91]b!js>Bjpn+X"<e4t)WPdoOp#.^P+srKV:F6R!P*04VU9o:"0hoZ'P%@MYp#[iFXnSj%SS=J>_'0ePU^OIt"+iKE;f%g%5mCd'"<!T+a@*8iA=<*F70um(3%%!_aL81;&s7\jF'jb,";)jL7'PDH6(AtC_)*3h+H:2I)<!gm%c$tQZ;r[k";0F])VC$6p,@>E/7?L]u7Q?J2BK2*jCg2PnRGgC9`6]#MDG"WK6]1q<;Om3S`oaQE$tO&'$3j7gZ`QW7,t(%,K7QR=%k$GV:%)d9(7=iG[71&W90uE9Z+C\/%Pa;si`0K8:E3`r('LH;\%*XY6dY@*[@[%0tLKHrP#b-%4_O?BSf$*4A=Q&7n>oH??9us:@%)[ce&$3LoPf'^ELF@FTi@>lI53Uf17A`/*ld6LR[E>MVdD+o=Qd:L]17KjYMZPRF%)CT'2P9^(2*=W]_d>XLBBHRD`4Yu5)0,P?3%AA4qPNkWVC_h'V<\%hTfH,sbq"%m,l2:*0%":.'3X#fsme'K$;=CE^!@YO;b/%.RJqdQA(-<R<]]qp;m+IWTW7S>Xmp-q@!M!Tl_%5u12!M?Yg<Z,;,:(s'?@0l_<*J1P^bjU)sBbh<8h!Bo.s/SXH/W&t8s!?;Zk>G14@M/A)9m-\\O2'fdSHdi^MF2eG>mnM>TN?p1`%9O2.\JeAlR;54G+131)27eWrQC.LqS1+8N?B]ECX0LD^"<^K-r<Fk-G&hb.eS8CkqLi#d^&>a<%#F)i`P:2A.;[gl,VBceIe!Qto%^m@n<b6NHIX_qZ3d^NW.*)W<)28qgs,u7qX0A>XaJkbe`d3MaTa0_b#@8.@e/UIgJL(:Z%#R.[[3T>][FVrjQek6)4ln[-+"^&bY%&V>U"F)/iV,h>eU0H&<$7t\tfI46p5+C6qs6nDi*JQTo+"^/j0,QKD5>=Xhg"pYVlD(?"=fH>s&BA$0NE_&=!\]R0R>De!"M?mEa%"kJnb(mYj`3FHr5AU,'sBh)$V/VO`>o1p6.$7A>+@E+[t8F2iXTOCPd?s8K$_D2W7$I:dl=!a%*^i"8PH5jknBh_G)[AG@r[\an'%Bh^T17"?D&8K96!T*PlUU80g,!`i\e<uK`"m&<Qs[d5HK)C2H/2Q)B%k&k9SPn5FCB[iW:0Pq#b2JPu1$<:*$>H>7N4:tGV3CP+@%S75m'3COmmk=BVb,Y'[0J+>XiIq2?oUh`"KgR+FsXj`S&$8KGTG-mSA/Q$TA%i!#S55SP;fOV?jP#YllZ3tRUV^/Xi1bs,.3$k7e%XU-Q5K0:VCOu`RZ@)a%oJG*24TG$bubhs1tE@U,W:,+FY3/%ej,+IbKh$KN+5`ESp"c!SM23T>gi"SL;Sp(=8Y]W7;N,U"$KeQim%RG\eAd;"9Oj:C/cA6F!WVm(3Y8<9E^JYSoY1h.1"\gfd>2CGbI1BK#@E$Rf5#)j601H7gLe_(p(*#gOj2RbA"aVt6hlQu0e6qsOF%JO+u1S!k1FM`AQ8&4K)1[%n"oWC1H\_X'rjKLnR?YqV7u'%JXCfbkA;RtObknoH4QWQ:NEA5lGlUaZMrM8$4nB#r1#R>IE/'enS`%qG@uK09)Y\'mWeeW=4M4R!C6M[RmB.Vesl8gM*,k`%\EL9+R+GBbU"ZnVhP`7;umS+H-#f'1FT6^.?Nr"0p'@#%Zk4P(jAkA!%,j%-9,H?'"AMdanqk%#_kUN1H$,,S[$;PN/UJI80rUNp8HeGF5!]N)IU4![oC@\\P.%T9G&R\@P6?W[:o\i'!a\0iIH1`"(GZ2I=[YW%0hio-!)ug;jH)/O91%n$IHrp-p;#P+*X3o2nBS<h/$j1A$BYX\HpWXb8r>u"_'$us/Lm@mVJm0S=Xo!k+_^4#-rqR3,S?Q/:LIFb%K#/WLnRTW\%J^-ERjAecq)!qKM[],m_Rb\V6C=\Y4<pN'>FA228+alkF12j]TZEY`/^1*PRHQY`$sQ%mNoAGU0Ha[IO]A#/(/[Z'%A$_E:W7\C?o`.]9:RMGD<7(h]:LLW0`/e>QZ=$A4p:"?^O1n.:P9XjG`gg3F>-s[t%3qH%`ateZ6ZH!VOMQt),Z/(/_BLV'l=lY3%<6,OMb.p\'O>1.EZA'cNBBUM]"Y`PT@>1_?e;r-jPRU$NJF$+]fXS1:8D*u5DWjuV%:iEX17RE]6P)-*Tr)B0Ri?>ZlReKjaNFu2%!'oRdLROgM\]k<QZDomO!"gMK$km$HWlR!W/JIO4huO^*o`?XYES`B;L'JPh:`aS:^r6AB@;@,9K@)48A:t<+^LV#+%'@SX(i^PK%Lf]*l!G=/)-G2XX-3T'Z!IPO"Ui/Po\nDpq.]+FF&A%?h$p?-aE#GtlA2=Tn6k;\OFXnN5JIX!k$&:/&Jt\biZW5"M5sn+NFob-P%#(f\W5p;k'0YjW=]E$F"b"Y4aUf%dPB7%o,JqF3fD)f5[>8"*2@+#D&!m#PDY*sFl8FXlU[29`5Z_esJ,k-N?oIV&7VQfV.7h1uG%P8QrP-npfYd*i)dK`]Ua;^<#N-4$#Ae]DQHWlg,i)(fAcj<Ap+U1-mMY[VJ3,Jlo+PO5XEM*fR<(Q;q!0LQ;k#i)fGalY90VeXFN%1nnq9jG?^(+VCfB'\pD]GLY$e7"B1)NL@.WnXs5Y&uqs7Zt.3.A_a+`=][l.i[[T5;A^:-AI24q'l9ZTfqQmZNKKj5?q,h9QUjT(%R=Sm*A4($K'P%ZpDTEm-HYum2Oq,Afs("fB-/j!9DD4>Sl85Q.!gl"&+>_G:gTa2/4UN[:<89.S*A7^aAKok?L"O)l+DXAg48,?'%1NQ`L$J6ktB]PtAlp2AE+GgbkI;`BkNg"Uk=3V.K=0*eqSH@G[ZD9M;!k"qq]<t&10G)X1GfK2gQsmg?6Rj`E4&4G!TK3b5ad=nC%`>$@pOAHYrg18`aQm"RK_K]Tf=:1G"9L163,"6\s/QicY1(g%u+ujPgBT0>,r!VY[C_/`,:LtZmKIP+n':!^cgp"3N'Y@jJ,bN/X%#U3LGVNAq[1M72nNr`*H7AQteR9X.BkmD#*LcU`7NJk!/rWM%r@:6Og`I-tT@l@SZYO.]:o;3NAV_G"/ec+,-2AskAE92r$8^05K%<:"BonX1S/;4G?<BF<BuTM6EON5B'7&]\]t.m35i.(&aX!M[^uMU*-,BuXRKWi33RLN,l@=a[#Q(_92mGmeF]<>DJ_6&:qCA_V4W%\ku$hm5Tb*P/%d(.6ML)ZOoVGK-ED;NXFKi$Hm^N.^RpOYi?ESW)U4PXQ"eRbE0WNGtDsWEhil6Ut)j58@KiReWLn33+>3/njVLp%0Mg>+6(FfL)/#@X$o2WtDK6.\>>>c%*O0*A:dGJHdi?I_'LoQ4l*jtQ3tBJbbR?]>D(Ve0PjG(nL^eoJ+AY[tFJkCT;3o#a+N9c'%X^F\,B(nV+;MAbLT90OH#%D6?;&DA@E_qJJ%:`7GIHq3GZhYH&Hbh&^)@R^ld\S7%T*A_3%2tNY+^.<8N8kj*_oe@%jGZq9c!*'N%p04?0fl0p4:(7<1[V?MXB[^W?9`]UaE0BU#0H`pG5"oT%F=*sQOMKe;1rTb"P+<Kq@dVZAOL8#>%DdQ?CSq@u1ID%^Ws3tMX@Rr>%elE7*__e.5XVqCQDq-NqF*4`6S^a7`X9R-".[&a\N8TSRG;,S?fr+ZGlFNEb960+i$f6AXRf^oFRT/R!Bbt7rG[N1@m%#TJ7GHbc%2V!eBq=iH#&W-kMHY6?k;nAB[1,9OU3]`*m:KEU*T;IlXq*Vkl"&'J3h5A)Sl4IsoreCkM\$:],P@6TAhJ9B5)@(YZ`\Ds+*R\en%!te&5N9_XG!]4MmYn>j1,cLulBnGI7?(,D92K)_14'k'fe%kCk\>F2n?n-KOTTe+e0SV;?79&tpn9";!*-Q&c-jo9YH^D_ahk^XH%maCIFfE_jq-0dVU@9KXI"kc$)JZ).qOkDA3o4TihoZ4'P.j(CTe?!pt@7HRS\r(q*`p3rJDSUfBF<f`$E.*Vrj7V38huk%F6r:Gt%"IALp.$lRTl-MqNL(LHmjk10?#n\9U0M';d.*f>g1]k>e*EIG5#M.Zfa\<4ZCG$t2K9rP6hk9`;,2Q`qCT+2=K*Tor,-:8eiC*b&%Ip`aEnF[5A'qS702HU\k2?FToF^,q`61iLQEY!I@*ruCDG>"cOra%iJJ(q]"X;(Y(LE7*SX1H;Q#-D)pNX/%6$O(_NHO^#'?4!k8%7<-""OeG)p)r(u3i]O]aJZmF%i@`eQ)CUO)S9,p.4&@3C?b\>Z@O5\nUZ2cap[iG^B4<a7P6>_2Pa/:XYS0o*?m?0H0N"!eH6N"S%B9N!J=NFNB0k_\Z=j@WqEj_qLTJTFu&VlG]6^OXE`mXhUUYn9p-Y=Q!N$1@"g8pXMha?Op\h"NfXA5on2I.)9,oZCVW$7;?bSBEK%%%KoQ5#WjsQeCEK9oW2d:&PAu`lnmFePTpH.Epu<k:&<#Q8N<cA,,@6.a?D;F95198nf'RS_7i]4TG;Yd;7C9.oXCrNQ0H[f-i,o%U4_(pI"&g&_jOiDD7tYtjZCFBmXaaKItnF?:<7n]$FAWEZ`"\MHUuo/]tduFKHBTiZ/`FlgK3%.H`_FFDAV]P8en"dL>2eHGOS"3%U',ZFKMhuii`-a=LK4\1Z.B?7H;U]X&Zes,nomg8$FU%kiWcdt_M+.d'u\k/]L&I/G,s+\L&`#n5+i'i?Bfs:qA,_4q4deI$ZRCO%oC0e(TlE/o'u1`nWYHX]Kj"L2VIUMOFU3M>WYIMAKn=j4.0aS#WE+OgQ"gKW5,#Y5C'ALnk^sk,Z;t\^=oe"FWE,+XW"mZ&W`m4W%+)C_-M<9e6a'U5'GH.j&>/BnMk^o`J\7<@-&[_[UKi/G\6a5Gd!.21C$:V0Rj^EX,CcPG\jTIt7#OLkB>kM1PU1i/t<g5*71+65^%2QSh0q1W+D?3-W&Fr'SSX6LGT9b+AC-<S.%e#$FP$(KEp\<Zn\O/[F/pE_Qs^b0jT4:t0tjLLSEG*Rkg65IBng=VjR6GW`8P)XP=%O+IOT2OK)_&mO%&`4uJ:KT#Ku`K2/F$eA44"V+<cJZ\^<f_S/`ENr3M98J'H7#"#<p,`oO0;uU$"C`7l$1LoP[44n)AO)Kuc@[8o%d8jd-*P3UbZ7G`YZ#>.H0MY1[@ccGRUIi,H-2TIE:uSB/NkaJu.\nsl9b*#U`l\a$mG]WAEZJ9uqLi.9`%3_hdWI1Oed1>dV"Nq;%j_Nk37P8'*$mUtA^r0(FY8WW7%+Ia_Lo=@1[ZRu7er])nmQ!e=H2I42r8JSa]pcYObZh@U#ZfmZCRj'XBOPCi5Y38K3Z1KU`0TYm%EcWNe31=emPfLd?ZA")C=PD!]K=c+37tF+KB16UZ>6bQq>RsC'>GI.<,?^&[IXQ8gXFkkeY:po-<4Mu^W.e>h9ad]<1.&_h>m=Ak%.5];"m,6J=T(@W$_nM59?MencNE\.5FdE_EXZ/AlSAUU#n_6(2qm8$;rI,ZUa[15B/Da0AgH>cM"6a;#cf9NdgE:`h/3Nej^8cHC%I-h#YB[3@fLg9bcOs,!1LU9_O3o92#YrrF_$lg%F(\O)B'k#48AMsqi<M8m0kg?bapNhO7mkYI5^*$5k6e-k.%t^/?!hEA"8<LT8%9U]CQ_;IWoOL.43G#p\*9(]+74CbE8'lB<FMbl[irtI'q;ta5Z":@kG#l5;QKMl/`8^3>[)!T+uTts%;ZQ&3ufS=]bTM@Ln5iR;'%"&#@cb[]<s0NQs]PoacWI1jpLCIBL2K:3N9@:'2Z>,ehmc-J&7E&]\7b5Ki/;j4s8HNlKSci.fQm+sn<]$T,t@V7S<2i?DCRda?c%l%9%O)'G$'lAR0"^bc:L63gegNth+5[2$T,TEZ`]QF3/s?,E;kSHf4qU)%R%+Ssb]%G1oj2HocQ&99+57U**R)cX#g%N>Q@jVg:j%!fs*OcNf"T@1*D#o=UOu"^9rb=\&jMQ-/\VRM58+-&'q]1W7.WHm'0IlAi!>"Zc/GkV^S=V2!<EGYk*LOgE08NTFq7.a_2sn9jW+%=KksW_qY]#/*7%1G%(N9T`W(Yle#BVETA4Q<ATJ7c\i(iV_o&gGp.q^0rd3j&B:77/Ou(6,8CuVD\!;.oK`NB'e%9q@;!ME",B@4%jc6Si.3J^?S+p$W#(.Z:l;oCKI?bE=q^BR[>?s#F-G1;)>-F,pI4^V9_kH?;m"'r&A2rQP-XMlR9%QVPka,A0O!;LO!jIJ].fs8t%W3nn^G[hfr$iSdTnJ-4XcEtb%9pR8S:S&gEh)IJFSjbAoN+K:8*#ZV$(`BU&P%$k&,VV")F0X)bZ@8!:_A,q10J^Q*aEAXh?M*p,%ITO$+i^FpOgnY`ndCXQaq@mCrJF"$'TcK]VL"m.*gI5c.Yc/6uC/Z1B?cWenRmXe\HC`FKa0G"[-Zm8#*!i+b>XPq+[?[/C(D$Z+%K/Q81'>'9O)XiIY,KNArf>1X-SJ],),<fjpZqL9WU">?8H\c\H"^Rp-gWN<.P\#3J8V57*e;taqkKPZ<g@iTXrWNT;MBR6qABYUU%_Nba&:^ibYkX+3OL*9#j*pB3<L&`tYQAVqI-W]7/s7;M-,#WB5jMs.*/!M5khGqjB"Ct6e,qmrk&0,X(TJXb&A.1O"kGp)R0lY%e%$<#u],s[!UAO/eSP0WX*V$rDQ/]0bsXc]'Rls+]fjE]Q9O@3bI6:7sj\6/<X^"#<qKbYbrJ8cf5R2LY83O-(;pgu@shND&2,R"Ml%R(7ODP"M%?$Kd\F@u,D$SIGb/hJ5N^c%^<KDB7o(0\ej4%"O*')rmEK?I%kMFc3HBPt"%>1uO*ceD0coq:UFrY"Y!1*k-#PjfiW[%V&\%q;4%)dh%4R/`Y(W,]OKoCNT/OVLg,)=e@I(?F'(B>:?mISUS%LlDU>4TlZU4KHXg[D&8F3lBFHOY=?!$EY/@iE8TGj&%4'h4%Nn03IeHbCE`\VpQh&*HedC.l*&,!cMnK>h[h,LgCXP4;qmJs5/@m3DiDVW!uerAjU&*qO9JAu$R!AWn`Cg/iQHS\@LG)O1r#O=:1%*k1R:Zn&V'7'R9RrFEd]\o[H08ZgY.I*#MoX4RMGr=5<aR>gn;.%s#aKqCC4X`.mKAZs_k`%(K-M-7huX^[nG*o1Ug(V8\cA%^Vi%A4Xi8<iPr-cAK:[<j<0s<pZNrPO:&K'.`bf?Qg:I<:$=5_Kq_PlnK9$Mg*-(+BGa+bUW=r&uXH#'IRdt0,#lSa'5`Lf1/%qc*Et^%MEMNoag>N<n]_>*:^BrV\(0ecRb4tUJIQ4]RqV>7^7/$=^"&>KjK@)R&F/qKH+cCL>-AIXG(n,Z*c!4?=rV*!Q5-K+*t6fEp!6*E%MB[9^30,'%opLRS[-Z(Y4_CH]C;=:A[<Uu$P+WTV0o$u.n^M#2*l^h?g:J*c"(K5qa*+`EY@OC2%hX2_3#/*C5bp?GZE]4&#Jc5i%cNAVq'^9X3/^u2AcES#3j>@;.\F=Ts^M7-ojZ8G=&gBFomTX=%H8HFJN<2YNWPf]D^pHQ38X7F/(RXIGkbVhJDP0NlY@sOfLK]&r%&d="Kk'`IBE:J%J'MB.UY.aAA&d9#!KTi\()i&ES3D'u'hpj4<BEe(/PeBHcACOXhM;ig7?1Xp!gH(QI.&/T35f('q&o+S#dQdCQ%:l$CG.%qB@C1d1k29^ah.%YeT?nuu<WJ4.+mhF"p.34o+!Aea)0X7R4,rts4mXM']PWs+K6;DW.Vu+NCJ<[3\Ws4t?ofQX,3"V%n%1$-[L6I]$n46kJW08H\&+X1mVAgCO,N&bBXF7+u]JWj^JA>L98d9"s6IjX4*k_u\946KEkhs:n%@BZYM^stqCG4HFljj@UdoEZ``%2]>ZqWO<^=X(OS9j/m2ZVIEb-!AQK,^n_fAfpihirA;#?f0iKRJp6lhKadbCmY\]h6^WNL:??KNI\>7o,Nf%bg&'"0>7LP,9f+!5%[^ST*RtoD93,gPQYsPZ;.[BY9SFW^r;S,nP"XGmm&+0cnX&0CGK`ecYQJeklG5k$::8cMQUUQ[Yh_YTP`T-^TXB=g)(LbVSH-Yfe%1g5soUU(#Ff,WT]DThY?AhAhEO"HDEo95nI_l6VTR-(Pf0$IN_GN%L+4jjOlfm#Ll+8`Zq4N?8;_h&-"hnHs6csPA!po2m::49#g%iD/3%q>72_b@fnd?#U9]n)F!l=+`:'bT=(]]40A4g`mBuObB'Ok>CM\Z'C3,=NDNp$e[i(PdFFq2Ai$-kC+Ek&EF07mY85DiYlU?%gs+1KJJ#L=(9n*8,Bd=*?jk+$G07s8/jdL::6DG`&Nb9BQS*,\5)Wj*7I5b3`/YK?U;FZ^e&4]1JC+NAi:Jp]CPIQ/!-k)!K^017%Br0>sY87h+;RM#q*+:i]B>.lV#R(Hs_5E1o;"D<A?e0JXJ.SnGk4*c51gU^6p)Q-[fT'VN:d07:&1](;&Zd_Q[<VZ'U<UM>(8oCu%j)p;:K*uPd3Z^*g<a3L;ju'Zq+^uh&^NdC$,@Xg2iq7h(]^FF4fCsE(N8QeLF3,o-\D8UZKT/Cd3WKqt57dM)R=Vo=oAO+-`-DjD%?tnrg/D]>/5XSPj6F4s541rS--X%,2\Bh8c_nbHoG<H(=[HYILCD=6t(5=E7qn_#e4G&u]hZAuaiu*cieOb#e^%.cILUsX@OULse%.NNg<JOLVM5MT226?pId>,Z>;Nf(=2fT&kh2F@`mCuQ%[6Q/5J3ciO72WJ\tH1CVJ"f,Yg(1Rr[DZKu8\`=Smi9L4_@Yc.W;.Rcm%#a%.3+hpDeXAlOnH=1eCB&o3Ma<B@g.*LIX7!]"+2!O^cU\-/C8Jg%(ph`M4]PRru./Htj57/`AjMopGq3)NLeCTD2nF5E$rXWoe%$J7^?@u0+kF?;H^[QZr;Uk"0p)D]GK<%_iPY;(!@P5H"OqAD1Scu,eGH\o<#H]MNB3f7n'qqCrD@>%I19A1a6%Y[%?NJ3^dNsBE.%V:WJ5fbeMA8JXHNZ,^p$Sbb3UisC-_KftJ/40L6d(c#*)&[te'A?+aSUSmfH=+9!%bSr$sNEU91:tfS\*S$6#+;Q^uk!Ds_NL;7+%]TaD>UZK%*1EJ8&YtLlXjPgc8,8N!;80]HdBS`3p`'iPm8WG?26C/tDh@UDj6E9_hQlN>TBgZJL&0kVRBCDSYG1:$>&fjf@^K[g_%S=-lU9L-`;3CZ[Z>T:5mLoKrAmq<Ik<E-%u%>S<;"Z]`L0"(7<q@&c2Sp4"S[?/L\&2H9.+]H05A.".h8snC^j^TMMfND2U,*_C6%1BmBXR-E;">rJO;.TM:m.`FP@Lmdb2FmhY,VMa<lXs:q[R)[j,nu.E1.boX0;,]_2C3",\9n"B-kIMa\VK"Nh2<:08.iXIMG5s13%H62X0:^\b:BABj,Yk@=2A7gQb\"Z*8!PO:ATT;ERTMQS[ap-ItGR;EF"A"EH4.Y"U?Y@C5:5'kTO5qg'Cnc+$O0'7tL?J\JXcfpW%BiXKTF9"licEiGeMGj*&GLnG+o`E$L.8pj6n8=m@;k$=oqQm8*Y4?SlVrEW!/\Vm`4H*!$YOEp"k\#uFRDiL^h5rj;YHXd^[P^fZ%iArZXTqsJ6.`XCd]0p0G=I(*,^fHD\2;]T.](17)$oqJX\j%"e&G/dgX?]h)2iLll^,F5u9YiTh-jBjm)OSh9IZ8oR-p#$BS$J.a%JJ't"Dshjm2,VU[3,L(%:uKo/AN@nKI%Z#bb$nK:f:MtCfF%m@2*3Fe!9bn-onuJR5$Z&Gl>6B3`]!dM?0lgA7q=H$mb-J.I[DFO%/TSXnE3+=9.-r6"X5^C$>I"'SNUp_OH^iYk_:Bdcl\i7r^5+kX(NEscEmebWi[C8[o"8TR[E!<sY_LK;=)3`(,JK%Rba3=:98gGs%N)t+kJjnUg9X/I?7?kFu**L9Qlac;cN5Ni\EoY>&p_6V*f4CIB+a\TdVXE$SpLibLW*q@]-,.GUDEq=D*V3i)@(M:%6lcsQff4.6%#!5eDEGLj4K[3uEKDjLZrbU&lN:T\%a!*\Z'OQ&d`5-S.HtnT7j>V";2&m"3P]ZX<%O->(-*6'cp_n%;Xl4FLo@9f,*u$YZ9=iIn%Xd'Ab=7H0dYMTk#I?<U,p2u4GMXT%d8N@ks-4M=3_+-DBl5(-Lg5O[7(aCqH_MEnJ`MG:A$*g4FOTeTKm"$T/[S`shQKgR!&G9$P%0C$o7-u%NDZ+q\MMdqEB[[MLRQ@r?G@rUZ?K\2U`j"8)uU0B\U8r,ndh/QI^/DINUl*q@8>Mcu]Rh4?LBqE+qKnP=]lAQ8.dM+Tb%i57Sk]!\0h/*r*'$b_t"PbFk"=NJ\L2SEQ:=P@O-q65SV5&A$!%uZ"DY[L4,N,6XcK^iJf'S-c67VdD(kIs,^0D;[t:bY'aPr1lO%#ML,]mkF$@5k\f\6^u#oQgocIh^YdNd,d5:=ceKNAb"I*0uS"md-f;qOSATcA=F#I3au<XOD^.S/+\k'qh&,7l50T\K/Q7\XEGUK%a7&urZi3c'3E@Hus3=gFeghVI[rY*P['/N'IN$snPZibL;EG/:^i[Ol_I*J\4Yd$WU4:TW_P5K04$W-K>@Hu61bXqMidARm.:9=<%X5'ICXda](FFZ)_i!VH5"Vd/1`C6SEMRWYl"Tr4M6,SX5f_E"E8.KJ'hE-a0.]kSYdIL=:Q(0a<&;W$GS1]WT;(!sB"bCf6,]C7:%7QbF]:LT">o16\keh"n?(T^Vj`/OVQCr$Q?=jRcB$=\+oC=m&_gg04Fc5+>s&['u&$atNOqQ7%,"(H(4a#7.`UWkgG+YYg'p+O/U%OSp_m1snj]l0h(W"E9Y'4`CRsbr5d`I79QbVVUe$ou"-[20bKH5:#i.g;lKRdiLIVH^M5b_6b6;V@B6ge$M2!`.McJGj/Vi?,,si%VX92/p;Ympn\*H$[)#dg1i4L[VeIBX3)(>0rM+)1hj$^\*dG&IBb)m6%b'iML+8SaH48gjm9\mYHY1t="Of8>Rs#nMj\.JtTfPEc%Zq&f>b&,j"Fh-;7*HBOdbY/tN4\Zl,r(#6(O;'iO)]Mk6C%n+IpLr8Vk3Jo#Z,]gCJk'n*IbCS\1J@Y:ibhQ4n`,&e8%[>\.=E8>%/u<7Me1r/4>;kR$=6Z#T2Ip1m1m<o=9eOI%B*''0&dm+tMn2Xd1J7g$Z#iD*ap+F0Y4=o$\%%^+%[L5*3FpHckEQkg^[>]ZAO%fM%1sGM_>c=RA-u,\p;"ZNp0-]Ns3C`50j@VM;"O_Ub0sAOZU`ANBA]*.L0!'>0_qAoVC@)fO;>`O*46X83C7AH@Oue',?1UYj6=/oD%kEQ(s]J:U68dOdUd>mc7Ya3:W[dq*OjH[Q)/['Q1B9Q]>FO$r*bS%ocV,PPg0cade=D$6`IW?p6QC(-Q?"du0-R*j*:+ZQWWMO)d%[Ic!&H@T0d57%PXBBo#3:`,1ZG5s2-HlfT-q#C1KhuE*Tn,NB*D]f#Kp?D&G>lWh[^\m98QbS"Hn]*l.IJWT^?[i"J00d2Kp]#X<%nb2Qm?iKNKqj1Z=q=XJ8^OQ.<ofqn0s7l<Bn%\kspAWfrrV@<QlR0=?Vb_g=Vgj*kIgGp-#6~>%AI9_PrivateDataEnd