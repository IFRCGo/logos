%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: IFRC_logo_Portuguese_P485.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: SŽbastien
%%CreationDate: 2/27/13
%%BoundingBox: 0 0 758 71
%%HiResBoundingBox: 0 0 757.2129 70.5000
%%CropBox: 0 0 757.2129 70.5000
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 12 8%%BeginData: 3944 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FFC9CAC9CAC9CAC9CAC9CAC9CAC9CAC9CAC9CAC9FFFFFF7EA8A8FD%05FFA8FD0BFFA8FD19FFA8FD09FFA8FD0DFFA8A8FD21FFA1C9CACAA7CAC9%CAA7CACACAA7CFCACAA1CACAC3A7FF7D527DA9A8A8FFFF527EA8A8FFFD04%A8FFA8A8A8527DFF84FFFFFF53A87EFF7D7DA8A8FFFD04A8FFA8A8FFFD06%A8FFA8A8FFA8A8A87DFFFFA852FF84FD04A8FF7D527D7DFFA8FFFF7DA87D%FF7EFFA97D52FF7DFFA87D52FF7EFFA8A8A8FD07FFCACAFFFFFF9AB5C2FD%05FFC9BC93BCA1FFCACAFFA8527DA87D527D597D7D7D528452A87D537D7D%7DA853FD047DFFA97D7D7D597D7D7D527D527D527D7D7D527D7DA8FD067D%53A8597D7DA8FF7D537D7D7D527D27A8FFFF537DA8FD087D537D7D527D7D%597D7D527D7D537D7D52A8FD07FFA1CAFFFFFF9A8CC2FD04FFA18D8CC9FF%FFFFCAA7FF7D7DAFA8277D527D7D53527D527DA87D52527DFF527D5252A8%7DA8FF527DA8A8527D527D527DA87D7D7D5252527DA87D52A87D527DA852%7D52527DFF52A8527D52527D5352FFA8A87D5252AF5252A87D5252525352%A8527D525252A85252527D7D527DFD07FFCACAFFC9CA99B59ACAC9FFFFBC%8DCAFD04FFC9CFFFA8A8FFFFA87DFF7D7DA8A87DA8A8FF7D7DA87D53A87D%7DA87D7DFFFFA87DFFA8A87DA87DA884FFA8FF7D7D7DA87D7D7DAF7D7D7E%A9A8A87D7D7DA8FFA853FD047DA87DA8FFFF7D7DA8A852A8A87D7DA8A87D%A8A852A87D7D7DA852A8A87DA8A87DA8FD07FFA7FFA0B08D8D8DB08D8DA1%FF8D93CAFD04FFCACAFD13FF7D7EFD56FFCACFC38DB58DB58DB58DC9CAB5%93FD05FFC9CFFD6BFFA1CACAC9A1BC8DBCA7CACAFF938DA1FD04FFC9A7FF%FFFF7DFD05FFA87D52A8FD08FFA87DFFA8A8FD0BFFA87D7DFD0CFFA87DFD%05FF527D7DFD10FFA87DFD04FF7DA8FF7DFD0CFFA87DA8FD04FFCACAFFFF%FF9AB09AFD04FFCA8DB0C3FFCAFFC9CFFFFF5953A87D7DFFFF7DA8FFA87D%7DA8A8A87D7DFFFF52FF7DA87DA8FD067DA8A87DA8527D7DFF7D7DA8FFA8%7DA8FFFF84527E7D7DA8FF7DA8FFA87D7DA87DA8A87DFF7D7DA87D7EA87D%A87D7DA87DA8FF7D7EA87DA884A8FD057DA8AF7DA87D7D52A8A87D7DA1CF%FFFFFFC293C3FD05FFCA999399C3FFCAA7FF7DA859A85252A8FF52FFFFA8%527E7DA87D7D52FFFF7D527D5252527D7EFD047D52527D527D7DA8597D52%7DFF7D5252FFA853A8527D7D7DFF7DA8FFA87D7D52527D527D527DA87D52%53527E7D7D7D52527DFFFF537D7D52527D7DA8FD047D527D527D527E5252%A852CAA1CFFD07CACFCACACACFC9CACAFFC3CAFFA8FD047D52A8FFFD047D%A8A87D597D52A8A9FFA827A884527D52FF7DA87DA8FD047D52A8A87D5253%7DFF7D7D7DFFA87D52FD047DFFA8FD047DFF527D7D7E527D7DA8FD047DA8%847D7D527D7DFFFF7D52FF527D7DA8A8A87DA97D7D527D7D7DA87D597D52%CAC9A1CAA1CAA1CAA1CAA1CAA1CAA1CAA7CAA1CACAFFA8A8A8FF7DA8A8FF%A8A8A8FFA8FFFD04A87DFFFFFFA8FFFD05A8FFA8FFA8FFFD05A8FFA8A87E%AFFFFF7EA8FFFFA8A8A8AF7DFFFFFFA8A8A8FFFFFF7DFFFD04A87EFF84A8%A8FFA8FFA8FF7DFFFFFFA8A8FFA87DFFA8FFA8FFFD05A8FFA8FFA8FF7DAF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (PANTONE 485 C)
%%CMYKCustomColor: 0.0508 0.9802 1 0.0050 (PANTONE 485 C)
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                             
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="ï»¿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS6 (Macintosh)</xmp:CreatorTool>
         <xmp:CreateDate>2013-02-27T17:17:19+01:00</xmp:CreateDate>
         <xmp:ModifyDate>2013-02-27T17:17:19+01:00</xmp:ModifyDate>
         <xmp:MetadataDate>2013-02-27T17:17:19+01:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>24</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAGAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9E6fp7ag17PPe3ast3PG&#xA;qxzuiBEcqoCqadMxYQ4rJJ5nq5+XLwcIEY/SOjCvM/nrT9B8523lh49SnluWt1Fyt86qPrDBR8JB&#xA;+zXxymcuGVb/AOmdzouzJ59Mc4MAI8W3B3PQP8PRf8t19/0kyf1zK8Hzl83Q/mj/ADYf6UPP/MPn&#xA;zTbLzB/hzQYtU8wa0rFZYILx440YdVMh57r+1tQdzmNOQBoGR+LvtJ2XOeHxspx4sfeY2fkyOG11&#xA;htHvLjUIb/S7uG3klQDUPrMfJUJA5KVNQf8AIpkuCXCSeIUP5zrpTxjJEQMJxMq+jhP4+Kj+Y+o6&#xA;xb+VdKbTZLoXd3fWMDiykiiuJFmajpHJMRGpbxY0zLgdg6vIKkR5pLcedtd8q2llpx0zU7rVr9bu&#xA;+9HVXe+ljhtfRTgG0mG9AEhkFCRRNyx3UGTBSvPzL13VptPutNtlsdDTWNNsrtpJHW+Y3EEd3Ipg&#xA;KU4cZglCeR64VU7b869Zu9Ka8t9D4PdQ2dzpZnW9hhK3l9b2fpyzTW0UbMBdK4eBnU7+FWCou8/N&#xA;zVtN12Gx1DT4JbZbhrC7ls/rUgFylq07+nO8KW7fGjJ6XPmB8Rp0wqpa75981v5csmc22lahrBs5&#xA;9OOnTNe3IguEllKfVha3EsjqsI3SIq1TuApxVR0v82tcXy2Lz9Hx3CaJpcOoa7cXlwYp5VM89u3o&#xA;IkCqz/6I7mqqK0Sg6hVkX5ieadR8v3dlfWpLwwaZrF9LaMSqTPZ2yTRK/cb1+/AqUX/njzw19p9m&#xA;9taafMdQ0/1hE73Aktb6GaQRn4FbkrQMG4jfamFUDH+d+s3OkveWmhUku4rafSfXW9hhP1i+gs/S&#xA;lmmtoo2alyH5Qs69R2qwVOI/zG8y2+pPFqOnWS2NrqiaNezxXEgf13sUvDIgkjVfTUvxqzAmtdqb&#xA;lUu0/wDOPWrpjbnSYDdXi2J0p+V1DATqFz9WX1HuIImeNDv6sSkP0XtiqPufP3mC11ZbN7O3m1ac&#xA;21gII7vlYpPLd3MXqs6ozr8EIJUryrRPfFUNP+anmpmvrez0azkvNHs9QudUVrmQRGTTJxG6QP6d&#xA;X9ZTVeSjidmO26qzXfzb1CHVJLGC0jFjPLLYRXcf1gvHP9Te4VzMYRa8g68TEshcU5HwxVPm816x&#xA;a+WfKEdpFFea15hS3gSa7kMcIk+pNdSySsgZiSIjQAbk4FYbZfm95g03y9p7T28Wo3awtdama3Mz&#xA;qr380AXnBC8UKqkfwPMy8+gHXCrMPLnn7U9S843eh39hHYwBrv8AR7sZvUmS0mEQdHMf1eUSLViI&#xA;5Kx9GGBWPa3q3mez8zXmpz6leDRYNUgtoL3T3trmxtoiYo5LS+sWMU/N3dgZVLceSkU6Eqi7j83d&#xA;Us9M/TF3o8X6OvYr99IijuGNxzsGK8bpWjVIxJQklWPDoanFVvmD8xtf8v6kn6Zs4HubOz1CZ7XT&#xA;rppYZSn1H0eael6yHldEbpWg5AHlsqq2n5n+ZL6ePSLTR4o9ckuJo1e9+uWVq0ENstxzVbm3huAx&#xA;58OJjpsWqRiqSaH+buuWuh+XEmgTUnkttJGq3LfWHlMmpSLEXeSKFraHjzVgJJAXrsO5VVr381PM&#xA;Nve2XmG5tY08vyabq13Z6fbyu805tri2hi+sgRtwYc6/AG48m603VRlx+bnmKOykC6GVu7a59K6l&#xA;eDUUj9Awessq28lrFd05Hg59Ihacq0IxV6Ro2opqej2OpR8OF7bxXKem3NKSoHHF6LyHxbGm+BUZ&#xA;irzTzz/jT/C0v+EfX/SX6am9b6tx5+hSXlXl258cwpXwmr+o8npOzPy3jj8xXB4Q59/p/RbwbzB/&#xA;jn/FVv8Apv1/8R8ofq3q8fV5cv3NKbfa6Zim+t293pPyv5c+FXg73XLze2/lR/ytX9J6h/iv619X&#xA;+qn6n9a48PW5ilOPemZOHj4uvLq8V25+Q4I/l+G+Leu5jv8Azjg0P6e8xre/8dgpEV5/3nESP9Y/&#xA;4cpXHS1fwdj7XA+Fi4f7vf3chw/Zb2vXf+OJqH/MNN/ybOZWX6D7i8Vpv7yP9Yfe0mn2V7p9gLuF&#xA;ZhbmG4hDfsyxAFHHupyUPpHuYZfqPvQt/o/lXzTao17awanBbyzwo7ry4SRu1vcRhtj9uNkcdDTf&#xA;JMEu17Qvy60qaLzFrFpZWk1s8AgvZFCMJYvhgCBftOo+FaAmm3TFWtB8u/lxqNlJfaJZWU9pdOnq&#xA;S26jjztpxOqUFPT9OdefCgo3bFUwk8keU5dVGrPpcLaiJhcC4oaiYDj6gFaciNiabjrirHbT8vPJ&#xA;Hl7TLhNajtZbe81JZbeQwC3S3advRtraEoSyIhlZEq37ZGwNMVTP/B35c/W7TRv0XZfWdPhNxaWf&#xA;piscDTl/s9PT9epCnavQYqneqaDo+qimo2qXIEM9vRwT+6uk9OZPk67HFVK88reX71uV1YxysGgc&#xA;Ma1DWvL0CCDsU9RqfPFUru/K/wCX2kK9xcafaWi3s8MZfhxDSrMJ4VWn2f3yB6Cg5CuKo+10jytq&#xA;lpHqFvbQ3VrqE0erJMBVZZXgWNJ9+tYQo+WKoa3/AC68j28U8UWjWwjuYlgnQryDRRsHjQ8ido3Q&#xA;Mn8p6UxVWHkfyiLJrL9E2/1VkWNoilQQkrTqf9YSuX5fa5b1riqnbeX/ACVZ3I0a2s7eGd7GWP6o&#xA;ikFrKWQetWnUPI3xE7k4q1ceQfJUt019PpVubgN6pmIIo/DgX60DFNie464qg7S9/LbzVaxeX7Wa&#xA;y1O3skSW3s1PLgkFI0khPUhOQXmh70rviqvcfln5BuII7eXQrQwRR+jHEE4oIg7SKnFSAVV3ZlB+&#xA;yTtTFUwsvKXlqx1aXV7TTYINSm9QyXKLRiZmDSkdgZGUFyPtd8VUrnyR5RudYGs3Gk28mph0lNyU&#xA;+IyRbRuw+yzJ+yxFRiqz/Bnku2uL7UW0mzjku45lvpnjTi0c3xT8w3wgSdZP5v2q4qs0/wAmeR2s&#xA;o3s9LtJLO4hlCEIHSWG8SMSVrUOsiQxjfsoHTFUMvlH8u5Xk8vfo2zeW2KahJZMtZB6waBZiT8RD&#xA;LG0da9BxO2KrLLyT+W+rWdre2elWlxaRqkdrIikJxtWKR0G1fTKkI3btiqPj8heS47q5u00W0E94&#xA;k0V0xiUiSO5PKZGU1UrI27LShO+KrD+Xnkk2P1E6Pb/VvVNxQKQ3qlPTL8wedfT+Dr9nbpiqMTWf&#xA;LthcQ6LHPDbTRNDaW9kg4hS8TyQxKoFB+6gcgDsuKprirH9P1BtPa9gnsrtma7nkVo4HdCjuWUhl&#xA;FOmYsJ8Ngg8z0c/Li4+EiUfpHVhXmfyLp+vec7bzO8mpQS2zW7C2WxdlP1dgw+Ikfap4ZTOPFK9/&#xA;9K7nRdpzwaY4AIES4t+Pvegf4hi/5Yb7/pGk/pmV43lL5Oh/Kn+dD/TBgHmTyHpWoa//AIi0WTVt&#xA;B1xmLyXNvayOjuRQs0Z47t+18VD3GY04gmwJD4O+0famTHi8HKMeXF3GQ+/7u5kMFxq8ekXsF/ca&#xA;lqt1PbyRR8rBbePkykAhY1rUnrVqe2S4pcJB4jY/m06+UcZyRMBCEQQfrs/af0LvPWnanc+X9Ihh&#xA;gurmzivLZtasrJzHcS2ixurIpV42IEpjZlDbqCMy4DYOqyG5H3vLdT8rfmAnlaGwsdM1CCaGDVJb&#xA;L97LNOl1NqdzNDyaO6hjSX0jG3rv6vIEgCvWbB6h5qtNV+v+VvMCafJqa6U8rX1nEF+sKbm39MTx&#xA;I5QFo22IrWjGmBUok8v6j5h1izvrnRJNEtDLqF0IYpPQlmk9O3S2mvvqz8TI7KxClm2UcvDCrGZb&#xA;Tzg+g2cV15c1K7uLbQdP0sxTSEL+kYXImuH9CYSPHGPiJrV+nvirOdI8nWV3+WcvlcfXY1lgkhNz&#xA;qIZbn6wTzFxQs/HjLR0AO1AB0wKwy88v/mLqmmx+Yb20e01PUb2GLW9PjWSV1sLO1khiUJBc2TyR&#xA;m7d5iiSiodWoQvElVFPI/nO50rVLnVP0jNq8GjWUGlSCeaJjK890JgyJcTBpkt2iDM0jkHetcVTJ&#xA;/Jnmmx1KWbRfr0UkGuXEOmmW6nlgj02bR2NSkkjKYzfsKkgnkB4YqlGl+VvP72saXkF48S3OlyXF&#xA;tOkg/wBJieQ3EytNfagXPEj1HTgjbUG2KqkPk/zfo3ljTLTTLO/ka50HTYtXga5uGEd1HcQ+qOCy&#xA;xt+6hLqYonTkg41pirJvKul+d4fy28yWEIntdbaS+Gg/WKxMqyQq0BjDzXHpKXYlQ0p4Hr0IwKif&#xA;y00zzbaWuti9aaGOYQ/o2K6ilj9OcRt6zKs97qLlS5SvxgFgxA3rirBrPyn5zDxzQ6Zq8F3HplpB&#xA;5ikkuiZb2aO/hk1BbSYzfAZoVchlKchRRTCrOtK8v69f+QfNOj8bnTk1Nr6Dy/FeyGSeC2mt1jjE&#xA;jM0rKvreoVXlVUIG2BUr8wv5n1fynJp+neUprDUbHRrmGO7n9BZbe5aFY0t9PeJmZubLuw4rxUd9&#xA;sKoTVfKPnSw83xQaK92mjwSWB0eWtxcrHGsoe9WaV7+JVDkt6nqQSckIC7qKKpZZeXPzAjbU4fqu&#xA;oyWcr28uos80kN1PEt+rT28b/WHildrcyfvYxH8PwUqRRVf5g8uefpmhOjQ6pYaWLedNHhlklu7q&#xA;3umupGWR+F7ZiIGMp6freqEQcW6lSqmV15O8zT3bTSRXkst5qetRXimeUQGxmsrj6uoiL+msbXPp&#xA;ldvtYqlek+XfzBi1LRGhhvLK1t00lLOIxysIIoFRb+OUi+ihjEjrJz527llK8dwOKrN/zI0jzL9a&#xA;stY8rwmTVZoZ9GuiDThb3q1juTUgH6tOiv8A6pbArGbXyh510nzraW1i06aJY3VjHpkkaSNCulw2&#xA;0cc8Tst7FEnJkfkrWrszkOCf2SqVyfl15kg8qW628WpnVY/LBuNry55jXD6RA/vftpRgq/ZG+2Kp&#xA;h5k8q+c7W/ubHS/rs3llb6OWVHe5vJJA9iFZ6LeWU0ifWF5Mqy7OeXHriqhZeRvNd/faQvmC3urg&#xA;fW9Kk1G6LtDIY4dNv4pDJJFK7VV5o0kIkNSepriqnJ5e/MOPTuD2+q3N+llHb+WZI7p0js7uK9uA&#xA;Xux6ylgYTCebq1YwV+ar/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:07801174072068118083A94F05CE3472</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:07801174072068118083A94F05CE3472</xmpMM:InstanceID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:01801174072068118083A94F05CE3472</stRef:instanceID>
            <stRef:documentID>xmp.did:01801174072068118083A94F05CE3472</stRef:documentID>
            <stRef:originalDocumentID>uuid:18A64DD3AD67DE1184C9D3A080E453F7</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:01801174072068118083A94F05CE3472</stEvt:instanceID>
                  <stEvt:when>2013-02-27T17:09:54+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:07801174072068118083A94F05CE3472</stEvt:instanceID>
                  <stEvt:when>2013-02-27T17:17:19+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:OriginalDocumentID>uuid:18A64DD3AD67DE1184C9D3A080E453F7</xmpMM:OriginalDocumentID>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>29.699996</stDim:w>
            <stDim:h>20.999993</stDim:h>
            <stDim:unit>Centimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
               <rdf:li>PANTONE 485 C</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>[Registration]</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>100.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>[Registration]</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>100.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>[Registration]</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>100.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>100.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=45 Y=60 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>45.000000</xmpG:magenta>
                           <xmpG:yellow>60.000004</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=50 Y=5 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>5.000001</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=90 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>90.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=20 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>19.999998</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=40 Y=15 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>39.999996</xmpG:magenta>
                           <xmpG:yellow>14.999998</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=20 M=0 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>19.999998</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=25 M=100 Y=25 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>25.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>25.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=40 M=40 Y=40 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>39.999996</xmpG:cyan>
                           <xmpG:magenta>39.999996</xmpG:magenta>
                           <xmpG:yellow>39.999996</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=40 M=70 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>39.999996</xmpG:cyan>
                           <xmpG:magenta>70.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=75 M=90 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>75.000000</xmpG:cyan>
                           <xmpG:magenta>90.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Aqua</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>55.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Blue</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Blue Gray</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>40.000000</xmpG:magenta>
                           <xmpG:yellow>30.000002</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Blue Sky</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>80.000000</xmpG:cyan>
                           <xmpG:magenta>5.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Brown</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>85.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Dark Blue</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>90.000000</xmpG:magenta>
                           <xmpG:yellow>10.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Forest Green</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>55.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Gold</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>5.000000</xmpG:cyan>
                           <xmpG:magenta>20.000000</xmpG:magenta>
                           <xmpG:yellow>95.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Grass Green</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>75.000000</xmpG:cyan>
                           <xmpG:magenta>5.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Orange</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>45.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Red</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>14.999999</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Violet</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>45.000000</xmpG:cyan>
                           <xmpG:magenta>90.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 485 CVC</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>91.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 485 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>5.075150</xmpG:cyan>
                           <xmpG:magenta>98.016319</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.497444</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -70.5 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 70.5 li
757.213 70.5 li
757.213 0 li
cp
clp
123 70.5 mo
0 70.5 li
0 0 li
123 0 li
123 70.5 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
31.1812 42.4038 mo
15.1797 42.4038 li
15.1797 28.6885 li
31.1812 28.6885 li
31.1802 28.6797 li
31.1802 12.6782 li
44.8955 12.6782 li
44.8955 28.6797 li
44.895 28.686 li
60.8965 28.686 li
60.8965 42.4014 li
44.895 42.4014 li
44.8955 42.3989 li
44.8955 58.4004 li
31.1802 58.4004 li
31.1802 42.3989 li
31.1812 42.4038 li
cp
/0 
<<
/Name (PANTONE 485 C)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ .0507515 .980163 1 .00497444 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
f
82.1157 35.2949 mo
82.1157 24.6382 90.7549 15.999 101.411 15.999 cv
103.784 15.999 106.056 16.4282 108.155 17.2114 cv
104.209 14.0884 99.2217 12.2231 93.7979 12.2231 cv
81.0103 12.2231 70.6431 22.5898 70.6431 35.3779 cv
70.6431 48.166 81.0103 58.5322 93.7979 58.5322 cv
99.4028 58.5322 104.543 56.541 108.548 53.2271 cv
106.34 54.1064 103.933 54.5908 101.411 54.5908 cv
90.7549 54.5908 82.1157 45.9512 82.1157 35.2949 cv
cp
f
2 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
118.043 65.7441 mo
118.043 5.31982 li
5.37402 5.31982 li
5.37402 65.7441 li
118.043 65.7441 li
cp
@
134.837 27.6641 mo
134.837 4.72656 li
150.337 4.72656 li
150.337 7.41406 li
137.9 7.41406 li
137.9 14.5391 li
148.65 14.5391 li
148.65 17.2266 li
137.9 17.2266 li
137.9 27.6641 li
134.837 27.6641 li
cp
0 0 0 1 cmyk
f
155.947 17.7891 mo
165.447 17.7891 li
165.318 16.3799 164.955 15.3223 164.357 14.6172 cv
163.439 13.5234 162.248 12.9766 160.785 12.9766 cv
159.46 12.9766 158.347 13.4131 157.445 14.2861 cv
156.542 15.1592 156.042 16.3271 155.947 17.7891 cv
cp
165.415 22.2891 mo
168.231 22.6641 li
167.772 24.3672 166.921 25.6895 165.68 26.6289 cv
164.439 27.5693 162.854 28.0391 160.925 28.0391 cv
158.495 28.0391 156.568 27.291 155.144 25.793 cv
153.72 24.2959 153.009 22.1953 153.009 19.4922 cv
153.009 16.6963 153.728 14.5264 155.167 12.9814 cv
156.607 11.4365 158.473 10.6641 160.767 10.6641 cv
162.988 10.6641 164.802 11.4238 166.21 12.9414 cv
167.618 14.459 168.322 16.5947 168.322 19.3477 cv
168.322 19.5156 168.317 19.7666 168.307 20.1016 cv
155.884 20.1016 li
155.99 21.9199 156.512 23.3115 157.454 24.2773 cv
158.395 25.2441 159.568 25.7266 160.974 25.7266 cv
162.021 25.7266 162.914 25.4541 163.654 24.9072 cv
164.394 24.3604 164.981 23.4883 165.415 22.2891 cv
cp
f
173.556 19.3594 mo
173.556 21.4922 174.006 23.0869 174.909 24.1426 cv
175.811 25.1992 176.875 25.7266 178.103 25.7266 cv
179.341 25.7266 180.393 25.2227 181.258 24.2139 cv
182.124 23.2051 182.556 21.665 182.556 19.5947 cv
182.556 17.3154 182.115 15.6426 181.234 14.5762 cv
180.353 13.5098 179.267 12.9766 177.977 12.9766 cv
176.718 12.9766 175.667 13.4893 174.823 14.5137 cv
173.978 15.5391 173.556 17.1543 173.556 19.3594 cv
cp
182.494 27.6641 mo
182.494 25.5703 li
181.439 27.2168 179.887 28.0391 177.84 28.0391 cv
176.514 28.0391 175.294 27.6738 174.182 26.9434 cv
173.07 26.2129 172.208 25.1934 171.597 23.8838 cv
170.986 22.5742 170.681 21.0684 170.681 19.3672 cv
170.681 17.708 170.958 16.2031 171.511 14.8516 cv
172.065 13.5 172.895 12.4648 174.002 11.7441 cv
175.11 11.0244 176.347 10.6641 177.715 10.6641 cv
178.718 10.6641 179.612 10.874 180.395 11.293 cv
181.178 11.7119 181.815 12.2578 182.306 12.9297 cv
182.306 4.72656 li
185.119 4.72656 li
185.119 27.6641 li
182.494 27.6641 li
cp
f
191.541 17.7891 mo
201.041 17.7891 li
200.912 16.3799 200.548 15.3223 199.951 14.6172 cv
199.033 13.5234 197.841 12.9766 196.378 12.9766 cv
195.054 12.9766 193.941 13.4131 193.039 14.2861 cv
192.136 15.1592 191.636 16.3271 191.541 17.7891 cv
cp
201.008 22.2891 mo
203.825 22.6641 li
203.366 24.3672 202.515 25.6895 201.274 26.6289 cv
200.033 27.5693 198.448 28.0391 196.519 28.0391 cv
194.088 28.0391 192.162 27.291 190.738 25.793 cv
189.314 24.2959 188.603 22.1953 188.603 19.4922 cv
188.603 16.6963 189.322 14.5264 190.761 12.9814 cv
192.201 11.4365 194.067 10.6641 196.361 10.6641 cv
198.582 10.6641 200.396 11.4238 201.804 12.9414 cv
203.211 14.459 203.916 16.5947 203.916 19.3477 cv
203.916 19.5156 203.911 19.7666 203.901 20.1016 cv
191.478 20.1016 li
191.583 21.9199 192.106 23.3115 193.047 24.2773 cv
193.989 25.2441 195.162 25.7266 196.568 25.7266 cv
197.615 25.7266 198.507 25.4541 199.248 24.9072 cv
199.988 24.3604 200.575 23.4883 201.008 22.2891 cv
cp
f
207.275 27.6641 mo
207.275 11.0391 li
209.775 11.0391 li
209.775 13.5859 li
210.421 12.3965 211.019 11.6113 211.568 11.2324 cv
212.116 10.8535 212.719 10.6641 213.377 10.6641 cv
214.327 10.6641 215.292 10.9688 216.275 11.5771 cv
215.284 14.1553 li
214.603 13.7861 213.922 13.6016 213.242 13.6016 cv
212.633 13.6016 212.086 13.7871 211.602 14.1563 cv
211.118 14.5264 210.77 15.0391 210.56 15.6953 cv
210.245 16.6953 210.087 17.7891 210.087 18.9766 cv
210.087 27.6641 li
207.275 27.6641 li
cp
f
228.681 19.2891 mo
227.651 19.71 226.106 20.0674 224.045 20.3613 cv
222.878 20.5303 222.053 20.7197 221.57 20.9297 cv
221.085 21.1406 220.712 21.4482 220.45 21.8525 cv
220.187 22.2578 220.056 22.707 220.056 23.2012 cv
220.056 23.959 220.341 24.5898 220.914 25.0947 cv
221.486 25.5996 222.323 25.8516 223.424 25.8516 cv
224.515 25.8516 225.486 25.6143 226.335 25.1387 cv
227.185 24.6631 227.81 24.0088 228.209 23.1768 cv
228.513 22.5342 228.666 21.5859 228.666 20.332 cv
228.681 19.2891 li
cp
228.869 25.6016 mo
227.841 26.4932 226.843 27.1221 225.875 27.4893 cv
224.906 27.8555 223.867 28.0391 222.757 28.0391 cv
220.925 28.0391 219.517 27.5928 218.533 26.6992 cv
217.548 25.8066 217.056 24.665 217.056 23.2754 cv
217.056 22.4609 217.242 21.7168 217.614 21.043 cv
217.985 20.3691 218.472 19.8291 219.075 19.4209 cv
219.676 19.0137 220.355 18.7051 221.109 18.4961 cv
221.664 18.3496 222.501 18.209 223.623 18.0732 cv
225.906 17.8018 227.586 17.4785 228.666 17.1016 cv
228.675 16.7148 228.681 16.4697 228.681 16.3643 cv
228.681 15.2139 228.416 14.4043 227.886 13.9336 cv
227.168 13.2959 226.103 12.9766 224.689 12.9766 cv
223.368 12.9766 222.393 13.2109 221.764 13.6787 cv
221.135 14.1475 220.669 14.9756 220.369 16.1641 cv
217.556 15.7891 li
217.806 14.6084 218.219 13.6553 218.793 12.9287 cv
219.368 12.2031 220.197 11.6445 221.283 11.252 cv
222.369 10.8604 223.626 10.6641 225.057 10.6641 cv
226.477 10.6641 227.63 10.8311 228.518 11.165 cv
229.405 11.499 230.057 11.9199 230.475 12.4258 cv
230.893 12.9316 231.185 13.5713 231.353 14.3428 cv
231.447 14.8232 231.494 15.6904 231.494 16.9443 cv
231.494 20.708 li
231.494 23.333 231.552 24.9902 231.67 25.6797 cv
231.788 26.3701 232.021 27.0313 232.369 27.6641 cv
229.494 27.6641 li
229.169 27.0762 228.96 26.3887 228.869 25.6016 cv
cp
f
240.041 30.4766 mo
240.853 27.6641 li
242.978 27.6641 li
242.462 29.3359 li
243.339 29.4395 244 29.7129 244.441 30.1563 cv
244.882 30.5986 245.103 31.0908 245.103 31.6328 cv
245.103 32.4141 244.725 33.1035 243.97 33.7031 cv
243.214 34.3018 242.077 34.6016 240.556 34.6016 cv
239.696 34.6016 238.941 34.6016 238.291 34.6016 cv
238.478 32.6641 li
239.147 32.7051 239.638 32.7266 239.953 32.7266 cv
240.935 32.7266 241.625 32.5889 242.023 32.3145 cv
242.326 32.1035 242.478 31.8447 242.478 31.5381 cv
242.478 31.3477 242.418 31.1787 242.3 31.0313 cv
242.181 30.8828 241.962 30.7559 241.642 30.6514 cv
241.322 30.5449 240.789 30.4863 240.041 30.4766 cv
cp
246.603 21.6016 mo
249.353 21.9766 li
249.052 23.873 248.284 25.3584 247.045 26.4307 cv
245.807 27.5029 244.287 28.0391 242.484 28.0391 cv
240.225 28.0391 238.41 27.2959 237.037 25.8086 cv
235.664 24.3223 234.978 22.1904 234.978 19.4141 cv
234.978 17.6191 235.273 16.0488 235.865 14.7031 cv
236.456 13.3574 237.355 12.3477 238.564 11.6738 cv
239.772 11.001 241.086 10.6641 242.507 10.6641 cv
244.301 10.6641 245.769 11.126 246.91 12.0479 cv
248.05 12.9697 248.781 14.2793 249.103 15.9766 cv
246.353 16.3516 li
246.094 15.2324 245.636 14.3896 244.98 13.8242 cv
244.324 13.2598 243.53 12.9766 242.599 12.9766 cv
241.193 12.9766 240.05 13.4863 239.171 14.5039 cv
238.292 15.5225 237.853 17.1328 237.853 19.3359 cv
237.853 21.5703 238.278 23.1943 239.127 24.207 cv
239.977 25.2207 241.085 25.7266 242.454 25.7266 cv
243.551 25.7266 244.468 25.3896 245.205 24.7148 cv
245.94 24.041 246.406 23.0029 246.603 21.6016 cv
cp
f
262.478 19.2891 mo
261.448 19.71 259.903 20.0674 257.842 20.3613 cv
256.675 20.5303 255.85 20.7197 255.367 20.9297 cv
254.882 21.1406 254.509 21.4482 254.247 21.8525 cv
253.984 22.2578 253.853 22.707 253.853 23.2012 cv
253.853 23.959 254.138 24.5898 254.71 25.0947 cv
255.283 25.5996 256.12 25.8516 257.221 25.8516 cv
258.312 25.8516 259.283 25.6143 260.132 25.1387 cv
260.982 24.6631 261.607 24.0088 262.006 23.1768 cv
262.31 22.5342 262.462 21.5859 262.462 20.332 cv
262.478 19.2891 li
cp
253.291 9.03906 mo
253.28 7.95605 253.577 7.0918 254.18 6.44531 cv
254.772 5.7998 255.532 5.47656 256.458 5.47656 cv
257.102 5.47656 257.985 5.75781 259.105 6.32031 cv
259.722 6.63281 260.214 6.78906 260.582 6.78906 cv
260.917 6.78906 261.173 6.69727 261.351 6.5127 cv
261.529 6.3291 261.654 5.96289 261.728 5.41406 cv
263.791 5.41406 li
263.759 6.60156 263.457 7.49219 262.883 8.08594 cv
262.309 8.67969 261.581 8.97656 260.697 8.97656 cv
260.034 8.97656 259.169 8.68555 258.103 8.10156 cv
257.389 7.72656 256.871 7.53906 256.546 7.53906 cv
256.19 7.53906 255.902 7.66602 255.683 7.91797 cv
255.453 8.1709 255.342 8.54492 255.353 9.03906 cv
253.291 9.03906 li
cp
262.666 25.6016 mo
261.638 26.4932 260.64 27.1221 259.671 27.4893 cv
258.703 27.8555 257.664 28.0391 256.554 28.0391 cv
254.722 28.0391 253.314 27.5928 252.33 26.6992 cv
251.345 25.8066 250.853 24.665 250.853 23.2754 cv
250.853 22.4609 251.039 21.7168 251.411 21.043 cv
251.782 20.3691 252.269 19.8291 252.872 19.4209 cv
253.473 19.0137 254.152 18.7051 254.906 18.4961 cv
255.46 18.3496 256.298 18.209 257.419 18.0732 cv
259.703 17.8018 261.383 17.4785 262.462 17.1016 cv
262.472 16.7148 262.478 16.4697 262.478 16.3643 cv
262.478 15.2139 262.212 14.4043 261.683 13.9336 cv
260.965 13.2959 259.9 12.9766 258.486 12.9766 cv
257.165 12.9766 256.19 13.2109 255.561 13.6787 cv
254.932 14.1475 254.466 14.9756 254.166 16.1641 cv
251.353 15.7891 li
251.603 14.6084 252.016 13.6553 252.59 12.9287 cv
253.165 12.2031 253.994 11.6445 255.08 11.252 cv
256.166 10.8604 257.423 10.6641 258.854 10.6641 cv
260.274 10.6641 261.427 10.8311 262.315 11.165 cv
263.202 11.499 263.854 11.9199 264.272 12.4258 cv
264.69 12.9316 264.982 13.5713 265.15 14.3428 cv
265.244 14.8232 265.291 15.6904 265.291 16.9443 cv
265.291 20.708 li
265.291 23.333 265.349 24.9902 265.467 25.6797 cv
265.584 26.3701 265.818 27.0313 266.166 27.6641 cv
263.291 27.6641 li
262.966 27.0762 262.757 26.3887 262.666 25.6016 cv
cp
f
271.4 19.3438 mo
271.4 21.4766 271.866 23.0742 272.797 24.1348 cv
273.729 25.1963 274.901 25.7266 276.314 25.7266 cv
277.716 25.7266 278.883 25.1934 279.815 24.127 cv
280.747 23.0605 281.212 21.4355 281.212 19.25 cv
281.212 17.1904 280.744 15.6299 279.807 14.5684 cv
278.87 13.5078 277.706 12.9766 276.314 12.9766 cv
274.901 12.9766 273.729 13.5049 272.797 14.5605 cv
271.866 15.6172 271.4 17.2109 271.4 19.3438 cv
cp
268.525 19.3516 mo
268.525 16.2734 269.379 13.9932 271.09 12.5107 cv
272.518 11.2803 274.259 10.6641 276.314 10.6641 cv
278.597 10.6641 280.464 11.4131 281.914 12.9102 cv
283.363 14.4082 284.087 16.4766 284.087 19.1172 cv
284.087 21.2559 283.766 22.9385 283.125 24.165 cv
282.484 25.3916 281.55 26.3438 280.326 27.0215 cv
279.1 27.6992 277.763 28.0391 276.314 28.0391 cv
273.988 28.0391 272.109 27.293 270.675 25.8008 cv
269.242 24.3086 268.525 22.1592 268.525 19.3516 cv
cp
f
297.15 27.6641 mo
297.15 4.72656 li
300.212 4.72656 li
300.212 27.6641 li
297.15 27.6641 li
cp
f
305.166 27.6641 mo
305.166 11.0391 li
307.666 11.0391 li
307.666 13.3984 li
308.889 11.5762 310.657 10.6641 312.969 10.6641 cv
313.973 10.6641 314.897 10.8447 315.739 11.2041 cv
316.581 11.5645 317.211 12.0371 317.629 12.6211 cv
318.047 13.2051 318.34 13.8994 318.508 14.7031 cv
318.613 15.2246 318.666 16.1377 318.666 17.4424 cv
318.666 27.6641 li
315.791 27.6641 li
315.791 17.5488 li
315.791 16.4004 315.681 15.542 315.464 14.9727 cv
315.247 14.4043 314.861 13.9502 314.307 13.6104 cv
313.752 13.2715 313.103 13.1016 312.358 13.1016 cv
311.167 13.1016 310.139 13.4834 309.275 14.2451 cv
308.41 15.0068 307.978 16.4531 307.978 18.582 cv
307.978 27.6641 li
305.166 27.6641 li
cp
f
329.15 25.1582 mo
329.525 27.6426 li
328.729 27.8125 328.017 27.8984 327.389 27.8984 cv
326.363 27.8984 325.567 27.7363 325.001 27.4121 cv
324.436 27.0879 324.039 26.6621 323.808 26.1338 cv
323.578 25.6055 323.462 24.4941 323.462 22.7988 cv
323.462 13.2109 li
321.4 13.2109 li
321.4 11.0234 li
323.462 11.0234 li
323.462 6.91406 li
326.275 5.22656 li
326.275 11.0234 li
329.15 11.0234 li
329.15 13.2109 li
326.275 13.2109 li
326.275 22.9141 li
326.275 23.7168 326.325 24.2324 326.425 24.4609 cv
326.526 24.6904 326.69 24.873 326.917 25.0078 cv
327.145 25.1436 327.471 25.2109 327.895 25.2109 cv
328.212 25.2109 328.63 25.1934 329.15 25.1582 cv
cp
f
333.853 17.7891 mo
343.353 17.7891 li
343.224 16.3799 342.861 15.3223 342.263 14.6172 cv
341.345 13.5234 340.154 12.9766 338.691 12.9766 cv
337.367 12.9766 336.253 13.4131 335.351 14.2861 cv
334.449 15.1592 333.949 16.3271 333.853 17.7891 cv
cp
343.321 22.2891 mo
346.137 22.6641 li
345.678 24.3672 344.828 25.6895 343.586 26.6289 cv
342.345 27.5693 340.76 28.0391 338.832 28.0391 cv
336.401 28.0391 334.474 27.291 333.05 25.793 cv
331.626 24.2959 330.916 22.1953 330.916 19.4922 cv
330.916 16.6963 331.634 14.5264 333.074 12.9814 cv
334.513 11.4365 336.379 10.6641 338.673 10.6641 cv
340.894 10.6641 342.708 11.4238 344.117 12.9414 cv
345.524 14.459 346.228 16.5947 346.228 19.3477 cv
346.228 19.5156 346.223 19.7666 346.213 20.1016 cv
333.791 20.1016 li
333.896 21.9199 334.418 23.3115 335.36 24.2773 cv
336.301 25.2441 337.474 25.7266 338.88 25.7266 cv
339.927 25.7266 340.82 25.4541 341.56 24.9072 cv
342.3 24.3604 342.887 23.4883 343.321 22.2891 cv
cp
f
349.587 27.6641 mo
349.587 11.0391 li
352.087 11.0391 li
352.087 13.5859 li
352.734 12.3965 353.332 11.6113 353.88 11.2324 cv
354.428 10.8535 355.032 10.6641 355.69 10.6641 cv
356.639 10.6641 357.605 10.9688 358.587 11.5771 cv
357.596 14.1553 li
356.916 13.7861 356.235 13.6016 355.554 13.6016 cv
354.946 13.6016 354.399 13.7871 353.915 14.1563 cv
353.43 14.5264 353.083 15.0391 352.873 15.6953 cv
352.557 16.6953 352.4 17.7891 352.4 18.9766 cv
352.4 27.6641 li
349.587 27.6641 li
cp
f
360.306 27.6641 mo
360.306 11.0391 li
362.806 11.0391 li
362.806 13.3984 li
364.03 11.5762 365.797 10.6641 368.11 10.6641 cv
369.114 10.6641 370.038 10.8447 370.879 11.2041 cv
371.721 11.5645 372.352 12.0371 372.77 12.6211 cv
373.188 13.2051 373.481 13.8994 373.649 14.7031 cv
373.753 15.2246 373.806 16.1377 373.806 17.4424 cv
373.806 27.6641 li
370.931 27.6641 li
370.931 17.5488 li
370.931 16.4004 370.822 15.542 370.605 14.9727 cv
370.387 14.4043 370.001 13.9502 369.448 13.6104 cv
368.893 13.2715 368.244 13.1016 367.499 13.1016 cv
366.307 13.1016 365.28 13.4834 364.416 14.2451 cv
363.55 15.0068 363.119 16.4531 363.119 18.582 cv
363.119 27.6641 li
360.306 27.6641 li
cp
f
388.791 19.2891 mo
387.76 19.71 386.215 20.0674 384.154 20.3613 cv
382.988 20.5303 382.162 20.7197 381.68 20.9297 cv
381.195 21.1406 380.822 21.4482 380.559 21.8525 cv
380.297 22.2578 380.166 22.707 380.166 23.2012 cv
380.166 23.959 380.451 24.5898 381.023 25.0947 cv
381.596 25.5996 382.432 25.8516 383.533 25.8516 cv
384.625 25.8516 385.596 25.6143 386.445 25.1387 cv
387.295 24.6631 387.92 24.0088 388.318 23.1768 cv
388.623 22.5342 388.775 21.5859 388.775 20.332 cv
388.791 19.2891 li
cp
388.979 25.6016 mo
387.951 26.4932 386.953 27.1221 385.984 27.4893 cv
385.016 27.8555 383.977 28.0391 382.867 28.0391 cv
381.035 28.0391 379.627 27.5928 378.643 26.6992 cv
377.658 25.8066 377.166 24.665 377.166 23.2754 cv
377.166 22.4609 377.352 21.7168 377.723 21.043 cv
378.094 20.3691 378.582 19.8291 379.184 19.4209 cv
379.785 19.0137 380.465 18.7051 381.219 18.4961 cv
381.773 18.3496 382.611 18.209 383.732 18.0732 cv
386.016 17.8018 387.695 17.4785 388.775 17.1016 cv
388.785 16.7148 388.791 16.4697 388.791 16.3643 cv
388.791 15.2139 388.525 14.4043 387.996 13.9336 cv
387.277 13.2959 386.213 12.9766 384.799 12.9766 cv
383.477 12.9766 382.502 13.2109 381.873 13.6787 cv
381.244 14.1475 380.779 14.9756 380.479 16.1641 cv
377.666 15.7891 li
377.916 14.6084 378.328 13.6553 378.902 12.9287 cv
379.477 12.2031 380.307 11.6445 381.393 11.252 cv
382.479 10.8604 383.736 10.6641 385.166 10.6641 cv
386.586 10.6641 387.74 10.8311 388.627 11.165 cv
389.514 11.499 390.166 11.9199 390.584 12.4258 cv
391.002 12.9316 391.295 13.5713 391.463 14.3428 cv
391.557 14.8232 391.604 15.6904 391.604 16.9443 cv
391.604 20.708 li
391.604 23.333 391.662 24.9902 391.779 25.6797 cv
391.896 26.3701 392.131 27.0313 392.479 27.6641 cv
389.604 27.6641 li
389.279 27.0762 389.07 26.3887 388.979 25.6016 cv
cp
f
406.713 21.6016 mo
409.463 21.9766 li
409.162 23.873 408.393 25.3584 407.154 26.4307 cv
405.916 27.5029 404.396 28.0391 402.594 28.0391 cv
400.334 28.0391 398.52 27.2959 397.146 25.8086 cv
395.773 24.3223 395.088 22.1904 395.088 19.4141 cv
395.088 17.6191 395.383 16.0488 395.975 14.7031 cv
396.564 13.3574 397.465 12.3477 398.674 11.6738 cv
399.881 11.001 401.195 10.6641 402.617 10.6641 cv
404.41 10.6641 405.879 11.126 407.02 12.0479 cv
408.16 12.9697 408.891 14.2793 409.213 15.9766 cv
406.463 16.3516 li
406.203 15.2324 405.746 14.3896 405.09 13.8242 cv
404.434 13.2598 403.639 12.9766 402.709 12.9766 cv
401.303 12.9766 400.16 13.4863 399.281 14.5039 cv
398.402 15.5225 397.963 17.1328 397.963 19.3359 cv
397.963 21.5703 398.387 23.1943 399.236 24.207 cv
400.086 25.2207 401.195 25.7266 402.563 25.7266 cv
403.66 25.7266 404.578 25.3896 405.314 24.7148 cv
406.049 24.041 406.516 23.0029 406.713 21.6016 cv
cp
f
411.963 27.6641 mo
411.963 11.0391 li
414.775 11.0391 li
414.775 27.6641 li
411.963 27.6641 li
cp
411.963 7.91406 mo
411.963 4.72656 li
414.775 4.72656 li
414.775 7.91406 li
411.963 7.91406 li
cp
f
420.822 19.3438 mo
420.822 21.4766 421.287 23.0742 422.219 24.1348 cv
423.15 25.1963 424.322 25.7266 425.736 25.7266 cv
427.139 25.7266 428.305 25.1934 429.236 24.127 cv
430.168 23.0605 430.635 21.4355 430.635 19.25 cv
430.635 17.1904 430.166 15.6299 429.229 14.5684 cv
428.291 13.5078 427.127 12.9766 425.736 12.9766 cv
424.322 12.9766 423.15 13.5049 422.219 14.5605 cv
421.287 15.6172 420.822 17.2109 420.822 19.3438 cv
cp
417.947 19.3516 mo
417.947 16.2734 418.801 13.9932 420.512 12.5107 cv
421.939 11.2803 423.682 10.6641 425.736 10.6641 cv
428.02 10.6641 429.887 11.4131 431.336 12.9102 cv
432.785 14.4082 433.51 16.4766 433.51 19.1172 cv
433.51 21.2559 433.188 22.9385 432.547 24.165 cv
431.906 25.3916 430.973 26.3438 429.748 27.0215 cv
428.521 27.6992 427.186 28.0391 425.736 28.0391 cv
423.41 28.0391 421.531 27.293 420.098 25.8008 cv
418.664 24.3086 417.947 22.1592 417.947 19.3516 cv
cp
f
436.807 27.6641 mo
436.807 11.0391 li
439.307 11.0391 li
439.307 13.3984 li
440.529 11.5762 442.297 10.6641 444.609 10.6641 cv
445.613 10.6641 446.537 10.8447 447.379 11.2041 cv
448.221 11.5645 448.852 12.0371 449.27 12.6211 cv
449.688 13.2051 449.98 13.8994 450.148 14.7031 cv
450.254 15.2246 450.307 16.1377 450.307 17.4424 cv
450.307 27.6641 li
447.432 27.6641 li
447.432 17.5488 li
447.432 16.4004 447.322 15.542 447.105 14.9727 cv
446.887 14.4043 446.502 13.9502 445.947 13.6104 cv
445.393 13.2715 444.744 13.1016 443.998 13.1016 cv
442.807 13.1016 441.779 13.4834 440.916 14.2451 cv
440.051 15.0068 439.619 16.4531 439.619 18.582 cv
439.619 27.6641 li
436.807 27.6641 li
cp
f
465.291 19.2891 mo
464.26 19.71 462.715 20.0674 460.654 20.3613 cv
459.488 20.5303 458.662 20.7197 458.18 20.9297 cv
457.695 21.1406 457.322 21.4482 457.059 21.8525 cv
456.797 22.2578 456.666 22.707 456.666 23.2012 cv
456.666 23.959 456.951 24.5898 457.523 25.0947 cv
458.096 25.5996 458.932 25.8516 460.033 25.8516 cv
461.125 25.8516 462.096 25.6143 462.945 25.1387 cv
463.795 24.6631 464.42 24.0088 464.818 23.1768 cv
465.123 22.5342 465.275 21.5859 465.275 20.332 cv
465.291 19.2891 li
cp
465.479 25.6016 mo
464.451 26.4932 463.453 27.1221 462.484 27.4893 cv
461.516 27.8555 460.477 28.0391 459.367 28.0391 cv
457.535 28.0391 456.127 27.5928 455.143 26.6992 cv
454.158 25.8066 453.666 24.665 453.666 23.2754 cv
453.666 22.4609 453.852 21.7168 454.223 21.043 cv
454.594 20.3691 455.082 19.8291 455.684 19.4209 cv
456.285 19.0137 456.965 18.7051 457.719 18.4961 cv
458.273 18.3496 459.111 18.209 460.232 18.0732 cv
462.516 17.8018 464.195 17.4785 465.275 17.1016 cv
465.285 16.7148 465.291 16.4697 465.291 16.3643 cv
465.291 15.2139 465.025 14.4043 464.496 13.9336 cv
463.777 13.2959 462.713 12.9766 461.299 12.9766 cv
459.977 12.9766 459.002 13.2109 458.373 13.6787 cv
457.744 14.1475 457.279 14.9756 456.979 16.1641 cv
454.166 15.7891 li
454.416 14.6084 454.828 13.6553 455.402 12.9287 cv
455.977 12.2031 456.807 11.6445 457.893 11.252 cv
458.979 10.8604 460.236 10.6641 461.666 10.6641 cv
463.086 10.6641 464.24 10.8311 465.127 11.165 cv
466.014 11.499 466.666 11.9199 467.084 12.4258 cv
467.502 12.9316 467.795 13.5713 467.963 14.3428 cv
468.057 14.8232 468.104 15.6904 468.104 16.9443 cv
468.104 20.708 li
468.104 23.333 468.162 24.9902 468.279 25.6797 cv
468.396 26.3701 468.631 27.0313 468.979 27.6641 cv
466.104 27.6641 li
465.779 27.0762 465.57 26.3887 465.479 25.6016 cv
cp
f
472.338 27.6641 mo
472.338 4.72656 li
475.15 4.72656 li
475.15 27.6641 li
472.338 27.6641 li
cp
f
490.213 19.3594 mo
490.213 21.4922 490.662 23.0869 491.564 24.1426 cv
492.467 25.1992 493.531 25.7266 494.76 25.7266 cv
495.998 25.7266 497.049 25.2227 497.914 24.2139 cv
498.779 23.2051 499.213 21.665 499.213 19.5947 cv
499.213 17.3154 498.771 15.6426 497.891 14.5762 cv
497.01 13.5098 495.924 12.9766 494.633 12.9766 cv
493.375 12.9766 492.322 13.4893 491.479 14.5137 cv
490.635 15.5391 490.213 17.1543 490.213 19.3594 cv
cp
499.15 27.6641 mo
499.15 25.5703 li
498.096 27.2168 496.543 28.0391 494.496 28.0391 cv
493.17 28.0391 491.951 27.6738 490.838 26.9434 cv
489.727 26.2129 488.865 25.1934 488.254 23.8838 cv
487.643 22.5742 487.338 21.0684 487.338 19.3672 cv
487.338 17.708 487.613 16.2031 488.168 14.8516 cv
488.721 13.5 489.551 12.4648 490.658 11.7441 cv
491.766 11.0244 493.004 10.6641 494.371 10.6641 cv
495.375 10.6641 496.268 10.874 497.051 11.293 cv
497.834 11.7119 498.471 12.2578 498.963 12.9297 cv
498.963 4.72656 li
501.775 4.72656 li
501.775 27.6641 li
499.15 27.6641 li
cp
f
516.885 19.2891 mo
515.854 19.71 514.309 20.0674 512.248 20.3613 cv
511.082 20.5303 510.256 20.7197 509.773 20.9297 cv
509.289 21.1406 508.916 21.4482 508.652 21.8525 cv
508.391 22.2578 508.26 22.707 508.26 23.2012 cv
508.26 23.959 508.545 24.5898 509.117 25.0947 cv
509.689 25.5996 510.525 25.8516 511.627 25.8516 cv
512.719 25.8516 513.689 25.6143 514.539 25.1387 cv
515.389 24.6631 516.014 24.0088 516.412 23.1768 cv
516.717 22.5342 516.869 21.5859 516.869 20.332 cv
516.885 19.2891 li
cp
517.072 25.6016 mo
516.045 26.4932 515.047 27.1221 514.078 27.4893 cv
513.109 27.8555 512.07 28.0391 510.961 28.0391 cv
509.129 28.0391 507.721 27.5928 506.736 26.6992 cv
505.752 25.8066 505.26 24.665 505.26 23.2754 cv
505.26 22.4609 505.445 21.7168 505.816 21.043 cv
506.188 20.3691 506.676 19.8291 507.277 19.4209 cv
507.879 19.0137 508.559 18.7051 509.313 18.4961 cv
509.867 18.3496 510.705 18.209 511.826 18.0732 cv
514.109 17.8018 515.789 17.4785 516.869 17.1016 cv
516.879 16.7148 516.885 16.4697 516.885 16.3643 cv
516.885 15.2139 516.619 14.4043 516.09 13.9336 cv
515.371 13.2959 514.307 12.9766 512.893 12.9766 cv
511.57 12.9766 510.596 13.2109 509.967 13.6787 cv
509.338 14.1475 508.873 14.9756 508.572 16.1641 cv
505.76 15.7891 li
506.01 14.6084 506.422 13.6553 506.996 12.9287 cv
507.57 12.2031 508.4 11.6445 509.486 11.252 cv
510.572 10.8604 511.83 10.6641 513.26 10.6641 cv
514.68 10.6641 515.834 10.8311 516.721 11.165 cv
517.607 11.499 518.26 11.9199 518.678 12.4258 cv
519.096 12.9316 519.389 13.5713 519.557 14.3428 cv
519.65 14.8232 519.697 15.6904 519.697 16.9443 cv
519.697 20.708 li
519.697 23.333 519.756 24.9902 519.873 25.6797 cv
519.99 26.3701 520.225 27.0313 520.572 27.6641 cv
517.697 27.6641 li
517.373 27.0762 517.164 26.3887 517.072 25.6016 cv
cp
f
522.932 22.6641 mo
525.744 22.2891 li
525.898 23.3984 526.332 24.249 527.041 24.8398 cv
527.75 25.4316 528.742 25.7266 530.016 25.7266 cv
531.299 25.7266 532.252 25.4629 532.873 24.9355 cv
533.494 24.4082 533.807 23.7891 533.807 23.0781 cv
533.807 22.4414 533.529 21.9395 532.977 21.5732 cv
532.59 21.3232 531.641 21.0039 530.129 20.6172 cv
528.094 20.0957 526.674 19.6445 525.873 19.2637 cv
525.072 18.8828 524.465 18.3564 524.051 17.6836 cv
523.637 17.0107 523.432 16.2676 523.432 15.4531 cv
523.432 14.7129 523.6 14.0264 523.936 13.3955 cv
524.273 12.7646 524.732 12.2402 525.313 11.8223 cv
525.748 11.499 526.34 11.2256 527.092 11.001 cv
527.844 10.7764 528.65 10.6641 529.51 10.6641 cv
530.805 10.6641 531.943 10.8535 532.922 11.2305 cv
533.902 11.6084 534.625 12.1201 535.092 12.7646 cv
535.559 13.4092 535.879 14.2715 536.057 15.3516 cv
533.307 15.7266 li
533.182 14.8633 532.824 14.1885 532.234 13.7041 cv
531.643 13.2197 530.807 12.9766 529.729 12.9766 cv
528.453 12.9766 527.543 13.1914 526.998 13.6191 cv
526.453 14.0479 526.182 14.5498 526.182 15.124 cv
526.182 15.4902 526.293 15.8193 526.52 16.1113 cv
526.746 16.415 527.102 16.666 527.584 16.8643 cv
527.861 16.9688 528.68 17.209 530.037 17.585 cv
532 18.1172 533.375 18.5527 534.16 18.8916 cv
534.945 19.2314 535.563 19.7246 536.01 20.3711 cv
536.457 21.0176 536.682 21.8213 536.682 22.7803 cv
536.682 23.7197 536.408 24.6045 535.863 25.4336 cv
535.316 26.2637 534.529 26.9053 533.5 27.3584 cv
532.471 27.8115 531.309 28.0391 530.01 28.0391 cv
527.857 28.0391 526.217 27.5879 525.09 26.6836 cv
523.963 25.7803 523.242 24.4404 522.932 22.6641 cv
cp
f
548.197 20.2891 mo
551.072 20.0391 li
551.207 21.1914 551.52 22.1377 552.012 22.876 cv
552.502 23.6152 553.266 24.2129 554.301 24.668 cv
555.336 25.124 556.5 25.3516 557.795 25.3516 cv
558.943 25.3516 559.957 25.1787 560.838 24.833 cv
561.717 24.4873 562.373 24.0137 562.803 23.4111 cv
563.232 22.8086 563.447 22.1543 563.447 21.4473 cv
563.447 20.7305 563.236 20.1055 562.816 19.5703 cv
562.396 19.0352 561.711 18.585 560.762 18.2197 cv
560.152 17.9805 558.805 17.6084 556.719 17.1025 cv
554.633 16.5967 553.166 16.1201 552.322 15.6709 cv
551.229 15.0967 550.414 14.3848 549.877 13.5342 cv
549.34 12.6836 549.072 11.7314 549.072 10.6768 cv
549.072 9.51855 549.398 8.43555 550.053 7.42773 cv
550.707 6.4209 551.662 5.65625 552.92 5.13477 cv
554.176 4.61328 555.574 4.35156 557.111 4.35156 cv
558.805 4.35156 560.297 4.62695 561.59 5.17578 cv
562.883 5.72559 563.879 6.53418 564.574 7.60156 cv
565.27 8.66895 565.645 9.87695 565.697 11.2266 cv
562.76 11.4766 li
562.604 10.0137 562.08 8.9082 561.188 8.16016 cv
560.293 7.41309 558.975 7.03906 557.229 7.03906 cv
555.412 7.03906 554.088 7.37598 553.256 8.04785 cv
552.424 8.7207 552.01 9.53125 552.01 10.4795 cv
552.01 11.3037 552.303 11.9805 552.893 12.5117 cv
553.471 13.0439 554.98 13.5889 557.422 14.1465 cv
559.865 14.7051 561.545 15.1914 562.465 15.6074 cv
563.803 16.2207 564.791 16.998 565.428 17.9395 cv
566.064 18.8809 566.385 19.9648 566.385 21.1914 cv
566.385 22.4082 566.035 23.5547 565.34 24.6309 cv
564.645 25.707 563.645 26.5449 562.34 27.1426 cv
561.035 27.7393 559.568 28.0391 557.938 28.0391 cv
555.869 28.0391 554.137 27.7363 552.74 27.1328 cv
551.342 26.5293 550.246 25.6201 549.451 24.4063 cv
548.656 23.1934 548.238 21.8203 548.197 20.2891 cv
cp
f
572.041 19.3438 mo
572.041 21.4766 572.506 23.0742 573.438 24.1348 cv
574.369 25.1963 575.541 25.7266 576.955 25.7266 cv
578.357 25.7266 579.523 25.1934 580.455 24.127 cv
581.387 23.0605 581.854 21.4355 581.854 19.25 cv
581.854 17.1904 581.385 15.6299 580.447 14.5684 cv
579.51 13.5078 578.346 12.9766 576.955 12.9766 cv
575.541 12.9766 574.369 13.5049 573.438 14.5605 cv
572.506 15.6172 572.041 17.2109 572.041 19.3438 cv
cp
569.166 19.3516 mo
569.166 16.2734 570.02 13.9932 571.73 12.5107 cv
573.158 11.2803 574.9 10.6641 576.955 10.6641 cv
579.238 10.6641 581.105 11.4131 582.555 12.9102 cv
584.004 14.4082 584.729 16.4766 584.729 19.1172 cv
584.729 21.2559 584.406 22.9385 583.766 24.165 cv
583.125 25.3916 582.191 26.3438 580.967 27.0215 cv
579.74 27.6992 578.404 28.0391 576.955 28.0391 cv
574.629 28.0391 572.75 27.293 571.316 25.8008 cv
569.883 24.3086 569.166 22.1592 569.166 19.3516 cv
cp
f
598.838 21.6016 mo
601.588 21.9766 li
601.287 23.873 600.518 25.3584 599.279 26.4307 cv
598.041 27.5029 596.521 28.0391 594.719 28.0391 cv
592.459 28.0391 590.645 27.2959 589.271 25.8086 cv
587.898 24.3223 587.213 22.1904 587.213 19.4141 cv
587.213 17.6191 587.508 16.0488 588.1 14.7031 cv
588.689 13.3574 589.59 12.3477 590.799 11.6738 cv
592.006 11.001 593.32 10.6641 594.742 10.6641 cv
596.535 10.6641 598.004 11.126 599.145 12.0479 cv
600.285 12.9697 601.016 14.2793 601.338 15.9766 cv
598.588 16.3516 li
598.328 15.2324 597.871 14.3896 597.215 13.8242 cv
596.559 13.2598 595.764 12.9766 594.834 12.9766 cv
593.428 12.9766 592.285 13.4863 591.406 14.5039 cv
590.527 15.5225 590.088 17.1328 590.088 19.3359 cv
590.088 21.5703 590.512 23.1943 591.361 24.207 cv
592.211 25.2207 593.32 25.7266 594.688 25.7266 cv
595.785 25.7266 596.703 25.3896 597.439 24.7148 cv
598.174 24.041 598.641 23.0029 598.838 21.6016 cv
cp
f
604.088 27.6641 mo
604.088 11.0391 li
606.9 11.0391 li
606.9 27.6641 li
604.088 27.6641 li
cp
604.088 7.91406 mo
604.088 4.72656 li
606.9 4.72656 li
606.9 7.91406 li
604.088 7.91406 li
cp
f
613.135 17.7891 mo
622.635 17.7891 li
622.506 16.3799 622.143 15.3223 621.545 14.6172 cv
620.627 13.5234 619.436 12.9766 617.973 12.9766 cv
616.648 12.9766 615.535 13.4131 614.633 14.2861 cv
613.73 15.1592 613.23 16.3271 613.135 17.7891 cv
cp
622.602 22.2891 mo
625.418 22.6641 li
624.959 24.3672 624.109 25.6895 622.867 26.6289 cv
621.627 27.5693 620.041 28.0391 618.113 28.0391 cv
615.682 28.0391 613.756 27.291 612.332 25.793 cv
610.908 24.2959 610.197 22.1953 610.197 19.4922 cv
610.197 16.6963 610.916 14.5264 612.355 12.9814 cv
613.795 11.4365 615.66 10.6641 617.955 10.6641 cv
620.176 10.6641 621.99 11.4238 623.398 12.9414 cv
624.805 14.459 625.51 16.5947 625.51 19.3477 cv
625.51 19.5156 625.504 19.7666 625.494 20.1016 cv
613.072 20.1016 li
613.178 21.9199 613.699 23.3115 614.641 24.2773 cv
615.582 25.2441 616.756 25.7266 618.162 25.7266 cv
619.209 25.7266 620.102 25.4541 620.842 24.9072 cv
621.582 24.3604 622.168 23.4883 622.602 22.2891 cv
cp
f
630.744 19.3594 mo
630.744 21.4922 631.193 23.0869 632.096 24.1426 cv
632.998 25.1992 634.063 25.7266 635.291 25.7266 cv
636.529 25.7266 637.58 25.2227 638.445 24.2139 cv
639.311 23.2051 639.744 21.665 639.744 19.5947 cv
639.744 17.3154 639.303 15.6426 638.422 14.5762 cv
637.541 13.5098 636.455 12.9766 635.164 12.9766 cv
633.906 12.9766 632.854 13.4893 632.01 14.5137 cv
631.166 15.5391 630.744 17.1543 630.744 19.3594 cv
cp
639.682 27.6641 mo
639.682 25.5703 li
638.627 27.2168 637.074 28.0391 635.027 28.0391 cv
633.701 28.0391 632.482 27.6738 631.369 26.9434 cv
630.258 26.2129 629.396 25.1934 628.785 23.8838 cv
628.174 22.5742 627.869 21.0684 627.869 19.3672 cv
627.869 17.708 628.145 16.2031 628.699 14.8516 cv
629.252 13.5 630.082 12.4648 631.189 11.7441 cv
632.297 11.0244 633.535 10.6641 634.902 10.6641 cv
635.906 10.6641 636.799 10.874 637.582 11.293 cv
638.365 11.7119 639.002 12.2578 639.494 12.9297 cv
639.494 4.72656 li
642.307 4.72656 li
642.307 27.6641 li
639.682 27.6641 li
cp
f
657.416 19.2891 mo
656.385 19.71 654.84 20.0674 652.779 20.3613 cv
651.613 20.5303 650.787 20.7197 650.305 20.9297 cv
649.82 21.1406 649.447 21.4482 649.184 21.8525 cv
648.922 22.2578 648.791 22.707 648.791 23.2012 cv
648.791 23.959 649.076 24.5898 649.648 25.0947 cv
650.221 25.5996 651.057 25.8516 652.158 25.8516 cv
653.25 25.8516 654.221 25.6143 655.07 25.1387 cv
655.92 24.6631 656.545 24.0088 656.943 23.1768 cv
657.248 22.5342 657.4 21.5859 657.4 20.332 cv
657.416 19.2891 li
cp
657.604 25.6016 mo
656.576 26.4932 655.578 27.1221 654.609 27.4893 cv
653.641 27.8555 652.602 28.0391 651.492 28.0391 cv
649.66 28.0391 648.252 27.5928 647.268 26.6992 cv
646.283 25.8066 645.791 24.665 645.791 23.2754 cv
645.791 22.4609 645.977 21.7168 646.348 21.043 cv
646.719 20.3691 647.207 19.8291 647.809 19.4209 cv
648.41 19.0137 649.09 18.7051 649.844 18.4961 cv
650.398 18.3496 651.236 18.209 652.357 18.0732 cv
654.641 17.8018 656.32 17.4785 657.4 17.1016 cv
657.41 16.7148 657.416 16.4697 657.416 16.3643 cv
657.416 15.2139 657.15 14.4043 656.621 13.9336 cv
655.902 13.2959 654.838 12.9766 653.424 12.9766 cv
652.102 12.9766 651.127 13.2109 650.498 13.6787 cv
649.869 14.1475 649.404 14.9756 649.104 16.1641 cv
646.291 15.7891 li
646.541 14.6084 646.953 13.6553 647.527 12.9287 cv
648.102 12.2031 648.932 11.6445 650.018 11.252 cv
651.104 10.8604 652.361 10.6641 653.791 10.6641 cv
655.211 10.6641 656.365 10.8311 657.252 11.165 cv
658.139 11.499 658.791 11.9199 659.209 12.4258 cv
659.627 12.9316 659.92 13.5713 660.088 14.3428 cv
660.182 14.8232 660.229 15.6904 660.229 16.9443 cv
660.229 20.708 li
660.229 23.333 660.287 24.9902 660.404 25.6797 cv
660.521 26.3701 660.756 27.0313 661.104 27.6641 cv
658.229 27.6641 li
657.904 27.0762 657.695 26.3887 657.604 25.6016 cv
cp
f
666.338 19.3594 mo
666.338 21.4922 666.787 23.0869 667.689 24.1426 cv
668.592 25.1992 669.656 25.7266 670.885 25.7266 cv
672.123 25.7266 673.174 25.2227 674.039 24.2139 cv
674.904 23.2051 675.338 21.665 675.338 19.5947 cv
675.338 17.3154 674.896 15.6426 674.016 14.5762 cv
673.135 13.5098 672.049 12.9766 670.758 12.9766 cv
669.5 12.9766 668.447 13.4893 667.604 14.5137 cv
666.76 15.5391 666.338 17.1543 666.338 19.3594 cv
cp
675.275 27.6641 mo
675.275 25.5703 li
674.221 27.2168 672.668 28.0391 670.621 28.0391 cv
669.295 28.0391 668.076 27.6738 666.963 26.9434 cv
665.852 26.2129 664.99 25.1934 664.379 23.8838 cv
663.768 22.5742 663.463 21.0684 663.463 19.3672 cv
663.463 17.708 663.738 16.2031 664.293 14.8516 cv
664.846 13.5 665.676 12.4648 666.783 11.7441 cv
667.891 11.0244 669.129 10.6641 670.496 10.6641 cv
671.5 10.6641 672.393 10.874 673.176 11.293 cv
673.959 11.7119 674.596 12.2578 675.088 12.9297 cv
675.088 4.72656 li
677.9 4.72656 li
677.9 27.6641 li
675.275 27.6641 li
cp
f
684.322 17.7891 mo
693.822 17.7891 li
693.693 16.3799 693.33 15.3223 692.732 14.6172 cv
691.814 13.5234 690.623 12.9766 689.16 12.9766 cv
687.836 12.9766 686.723 13.4131 685.82 14.2861 cv
684.918 15.1592 684.418 16.3271 684.322 17.7891 cv
cp
693.789 22.2891 mo
696.605 22.6641 li
696.146 24.3672 695.297 25.6895 694.055 26.6289 cv
692.814 27.5693 691.229 28.0391 689.301 28.0391 cv
686.869 28.0391 684.943 27.291 683.52 25.793 cv
682.096 24.2959 681.385 22.1953 681.385 19.4922 cv
681.385 16.6963 682.104 14.5264 683.543 12.9814 cv
684.982 11.4365 686.848 10.6641 689.143 10.6641 cv
691.363 10.6641 693.178 11.4238 694.586 12.9414 cv
695.992 14.459 696.697 16.5947 696.697 19.3477 cv
696.697 19.5156 696.691 19.7666 696.682 20.1016 cv
684.26 20.1016 li
684.365 21.9199 684.887 23.3115 685.828 24.2773 cv
686.77 25.2441 687.943 25.7266 689.35 25.7266 cv
690.396 25.7266 691.289 25.4541 692.029 24.9072 cv
692.77 24.3604 693.355 23.4883 693.789 22.2891 cv
cp
f
699.057 22.6641 mo
701.869 22.2891 li
702.023 23.3984 702.457 24.249 703.166 24.8398 cv
703.875 25.4316 704.867 25.7266 706.141 25.7266 cv
707.424 25.7266 708.377 25.4629 708.998 24.9355 cv
709.619 24.4082 709.932 23.7891 709.932 23.0781 cv
709.932 22.4414 709.654 21.9395 709.102 21.5732 cv
708.715 21.3232 707.766 21.0039 706.254 20.6172 cv
704.219 20.0957 702.799 19.6445 701.998 19.2637 cv
701.197 18.8828 700.59 18.3564 700.176 17.6836 cv
699.762 17.0107 699.557 16.2676 699.557 15.4531 cv
699.557 14.7129 699.725 14.0264 700.061 13.3955 cv
700.398 12.7646 700.857 12.2402 701.438 11.8223 cv
701.873 11.499 702.465 11.2256 703.217 11.001 cv
703.969 10.7764 704.775 10.6641 705.635 10.6641 cv
706.93 10.6641 708.068 10.8535 709.047 11.2305 cv
710.027 11.6084 710.75 12.1201 711.217 12.7646 cv
711.684 13.4092 712.004 14.2715 712.182 15.3516 cv
709.432 15.7266 li
709.307 14.8633 708.949 14.1885 708.359 13.7041 cv
707.768 13.2197 706.932 12.9766 705.854 12.9766 cv
704.578 12.9766 703.668 13.1914 703.123 13.6191 cv
702.578 14.0479 702.307 14.5498 702.307 15.124 cv
702.307 15.4902 702.418 15.8193 702.645 16.1113 cv
702.871 16.415 703.227 16.666 703.709 16.8643 cv
703.986 16.9688 704.805 17.209 706.162 17.585 cv
708.125 18.1172 709.5 18.5527 710.285 18.8916 cv
711.07 19.2314 711.688 19.7246 712.135 20.3711 cv
712.582 21.0176 712.807 21.8213 712.807 22.7803 cv
712.807 23.7197 712.533 24.6045 711.988 25.4336 cv
711.441 26.2637 710.654 26.9053 709.625 27.3584 cv
708.596 27.8115 707.434 28.0391 706.135 28.0391 cv
703.982 28.0391 702.342 27.5879 701.215 26.6836 cv
700.088 25.7803 699.367 24.4404 699.057 22.6641 cv
cp
f
136.212 57.8594 mo
136.212 59.9922 136.663 61.5869 137.565 62.6426 cv
138.467 63.6992 139.532 64.2266 140.759 64.2266 cv
141.998 64.2266 143.049 63.7227 143.915 62.7139 cv
144.78 61.7051 145.212 60.165 145.212 58.0947 cv
145.212 55.8154 144.771 54.1426 143.89 53.0762 cv
143.009 52.0098 141.923 51.4766 140.633 51.4766 cv
139.375 51.4766 138.323 51.9893 137.479 53.0137 cv
136.634 54.0391 136.212 55.6543 136.212 57.8594 cv
cp
145.15 66.1641 mo
145.15 64.0703 li
144.095 65.7168 142.543 66.5391 140.497 66.5391 cv
139.17 66.5391 137.951 66.1738 136.838 65.4434 cv
135.726 64.7129 134.865 63.6934 134.253 62.3838 cv
133.642 61.0742 133.337 59.5684 133.337 57.8672 cv
133.337 56.208 133.614 54.7031 134.167 53.3516 cv
134.721 52 135.551 50.9648 136.659 50.2441 cv
137.766 49.5244 139.003 49.1641 140.372 49.1641 cv
141.375 49.1641 142.268 49.374 143.051 49.793 cv
143.834 50.2119 144.471 50.7578 144.962 51.4297 cv
144.962 43.2266 li
147.775 43.2266 li
147.775 66.1641 li
145.15 66.1641 li
cp
f
162.884 57.7891 mo
161.854 58.21 160.309 58.5674 158.249 58.8613 cv
157.082 59.0303 156.256 59.2197 155.773 59.4297 cv
155.289 59.6406 154.916 59.9482 154.653 60.3525 cv
154.39 60.7578 154.259 61.207 154.259 61.7012 cv
154.259 62.459 154.544 63.0898 155.117 63.5947 cv
155.689 64.0996 156.526 64.3516 157.627 64.3516 cv
158.718 64.3516 159.689 64.1143 160.539 63.6387 cv
161.388 63.1631 162.013 62.5088 162.413 61.6768 cv
162.716 61.0342 162.869 60.0859 162.869 58.832 cv
162.884 57.7891 li
cp
163.072 64.1016 mo
162.044 64.9932 161.046 65.6221 160.078 65.9893 cv
159.109 66.3555 158.07 66.5391 156.96 66.5391 cv
155.128 66.5391 153.72 66.0928 152.736 65.1992 cv
151.751 64.3066 151.259 63.165 151.259 61.7754 cv
151.259 60.9609 151.445 60.2168 151.817 59.543 cv
152.188 58.8691 152.675 58.3291 153.278 57.9209 cv
153.879 57.5137 154.558 57.2051 155.312 56.9961 cv
155.867 56.8496 156.705 56.709 157.826 56.5732 cv
160.109 56.3018 161.79 55.9785 162.869 55.6016 cv
162.878 55.2148 162.884 54.9697 162.884 54.8643 cv
162.884 53.7139 162.619 52.9043 162.089 52.4336 cv
161.372 51.7959 160.306 51.4766 158.892 51.4766 cv
157.571 51.4766 156.596 51.7109 155.967 52.1787 cv
155.338 52.6475 154.873 53.4756 154.572 54.6641 cv
151.759 54.2891 li
152.009 53.1084 152.422 52.1553 152.997 51.4287 cv
153.571 50.7031 154.4 50.1445 155.486 49.752 cv
156.572 49.3604 157.83 49.1641 159.26 49.1641 cv
160.68 49.1641 161.833 49.3311 162.721 49.665 cv
163.608 49.999 164.26 50.4199 164.678 50.9258 cv
165.096 51.4316 165.388 52.0713 165.556 52.8428 cv
165.65 53.3232 165.697 54.1904 165.697 55.4443 cv
165.697 59.208 li
165.697 61.833 165.755 63.4902 165.874 64.1797 cv
165.991 64.8701 166.224 65.5313 166.572 66.1641 cv
163.697 66.1641 li
163.373 65.5762 163.164 64.8887 163.072 64.1016 cv
cp
f
195.572 58.1055 mo
198.634 58.8691 li
197.999 61.3633 196.855 63.2656 195.205 64.5752 cv
193.553 65.8848 191.535 66.5391 189.15 66.5391 cv
186.681 66.5391 184.673 66.0371 183.126 65.0313 cv
181.58 64.0264 180.402 62.5703 179.595 60.6641 cv
178.788 58.7578 178.384 56.7109 178.384 54.5234 cv
178.384 52.1387 178.84 50.0576 179.752 48.2813 cv
180.665 46.5059 181.962 45.1563 183.646 44.2344 cv
185.33 43.3125 187.182 42.8516 189.206 42.8516 cv
191.499 42.8516 193.426 43.4365 194.991 44.6064 cv
196.554 45.7764 197.644 47.4209 198.259 49.541 cv
195.259 50.2412 li
194.728 48.5811 193.957 47.3711 192.947 46.6133 cv
191.936 45.8555 190.666 45.4766 189.134 45.4766 cv
187.374 45.4766 185.902 45.8975 184.72 46.7383 cv
183.538 47.5791 182.707 48.708 182.228 50.125 cv
181.749 51.542 181.509 53.0029 181.509 54.5088 cv
181.509 56.4502 181.792 58.1455 182.359 59.5928 cv
182.925 61.041 183.806 62.123 185.001 62.8398 cv
186.197 63.5566 187.491 63.9141 188.883 63.9141 cv
190.577 63.9141 192.011 63.4268 193.186 62.4502 cv
194.36 61.4746 195.156 60.0264 195.572 58.1055 cv
cp
f
201.931 66.1641 mo
201.931 49.5391 li
204.431 49.5391 li
204.431 52.0859 li
205.078 50.8965 205.675 50.1113 206.224 49.7324 cv
206.772 49.3535 207.375 49.1641 208.034 49.1641 cv
208.983 49.1641 209.949 49.4688 210.931 50.0771 cv
209.94 52.6553 li
209.259 52.2861 208.579 52.1016 207.898 52.1016 cv
207.29 52.1016 206.743 52.2871 206.258 52.6563 cv
205.774 53.0264 205.426 53.5391 205.216 54.1953 cv
204.901 55.1953 204.744 56.2891 204.744 57.4766 cv
204.744 66.1641 li
201.931 66.1641 li
cp
f
223.525 66.1641 mo
223.525 63.7109 li
222.233 65.5967 220.478 66.5391 218.259 66.5391 cv
217.28 66.5391 216.366 66.3506 215.517 65.9756 cv
214.667 65.6006 214.038 65.1279 213.626 64.5596 cv
213.214 63.9912 212.925 63.2939 212.759 62.4688 cv
212.644 61.916 212.587 61.04 212.587 59.8389 cv
212.587 49.5391 li
215.4 49.5391 li
215.4 58.752 li
215.4 60.2227 215.457 61.2139 215.572 61.7236 cv
215.748 62.4648 216.122 63.0469 216.694 63.4688 cv
217.266 63.8906 217.973 64.1016 218.815 64.1016 cv
219.657 64.1016 220.447 63.8857 221.185 63.4531 cv
221.923 63.0205 222.446 62.4316 222.752 61.6855 cv
223.059 60.9395 223.212 59.8574 223.212 58.4395 cv
223.212 49.5391 li
226.025 49.5391 li
226.025 66.1641 li
223.525 66.1641 li
cp
f
228.947 66.1641 mo
228.947 63.8682 li
239.485 51.6641 li
238.29 51.7891 237.235 51.8516 236.321 51.8516 cv
229.572 51.8516 li
229.572 49.5391 li
243.134 49.5391 li
243.134 51.3457 li
234.133 61.9473 li
232.366 63.9141 li
233.631 63.7891 234.819 63.7266 235.928 63.7266 cv
243.634 63.7266 li
243.634 66.1641 li
228.947 66.1641 li
cp
f
262.251 66.1641 mo
253.4 43.2266 li
256.653 43.2266 li
262.606 59.8799 li
263.084 61.2148 263.486 62.4658 263.809 63.6328 cv
264.163 62.3828 264.573 61.1318 265.041 59.8799 cv
271.215 43.2266 li
274.32 43.2266 li
265.384 66.1641 li
262.251 66.1641 li
cp
f
276.916 56.2891 mo
286.416 56.2891 li
286.287 54.8799 285.923 53.8223 285.326 53.1172 cv
284.408 52.0234 283.216 51.4766 281.753 51.4766 cv
280.429 51.4766 279.316 51.9131 278.414 52.7861 cv
277.511 53.6592 277.011 54.8271 276.916 56.2891 cv
cp
286.383 60.7891 mo
289.2 61.1641 li
288.741 62.8672 287.89 64.1895 286.649 65.1289 cv
285.408 66.0693 283.823 66.5391 281.894 66.5391 cv
279.463 66.5391 277.537 65.791 276.113 64.293 cv
274.689 62.7959 273.978 60.6953 273.978 57.9922 cv
273.978 55.1963 274.697 53.0264 276.136 51.4814 cv
277.576 49.9365 279.442 49.1641 281.736 49.1641 cv
283.957 49.1641 285.771 49.9238 287.179 51.4414 cv
288.586 52.959 289.291 55.0947 289.291 57.8477 cv
289.291 58.0156 289.286 58.2666 289.276 58.6016 cv
276.853 58.6016 li
276.958 60.4199 277.481 61.8115 278.422 62.7773 cv
279.364 63.7441 280.537 64.2266 281.943 64.2266 cv
282.99 64.2266 283.882 63.9541 284.623 63.4072 cv
285.363 62.8604 285.95 61.9883 286.383 60.7891 cv
cp
f
292.65 66.1641 mo
292.65 49.5391 li
295.15 49.5391 li
295.15 52.0859 li
295.796 50.8965 296.394 50.1113 296.943 49.7324 cv
297.491 49.3535 298.094 49.1641 298.752 49.1641 cv
299.702 49.1641 300.667 49.4688 301.65 50.0771 cv
300.659 52.6553 li
299.978 52.2861 299.297 52.1016 298.617 52.1016 cv
298.008 52.1016 297.461 52.2871 296.977 52.6563 cv
296.493 53.0264 296.145 53.5391 295.935 54.1953 cv
295.62 55.1953 295.462 56.2891 295.462 57.4766 cv
295.462 66.1641 li
292.65 66.1641 li
cp
f
303.369 66.1641 mo
303.369 49.5391 li
305.869 49.5391 li
305.869 51.8682 li
306.391 51.0557 307.086 50.4023 307.954 49.9072 cv
308.821 49.4121 309.808 49.1641 310.917 49.1641 cv
312.149 49.1641 313.16 49.4199 313.949 49.9307 cv
314.738 50.4414 315.294 51.1553 315.619 52.0713 cv
316.939 50.1338 318.658 49.1641 320.775 49.1641 cv
322.43 49.1641 323.704 49.6211 324.594 50.5342 cv
325.485 51.4473 325.931 52.8535 325.931 54.7529 cv
325.931 66.1641 li
323.119 66.1641 li
323.119 55.6885 li
323.119 54.5615 323.027 53.75 322.843 53.2539 cv
322.66 52.7578 322.327 52.3584 321.844 52.0557 cv
321.362 51.7529 320.795 51.6016 320.146 51.6016 cv
318.971 51.6016 317.996 51.9912 317.22 52.7686 cv
316.444 53.5459 316.056 54.791 316.056 56.5029 cv
316.056 66.1641 li
313.244 66.1641 li
313.244 55.3594 li
313.244 54.1074 313.013 53.168 312.554 52.541 cv
312.095 51.915 311.343 51.6016 310.299 51.6016 cv
309.506 51.6016 308.773 51.8105 308.099 52.2285 cv
307.425 52.6465 306.938 53.2568 306.635 54.0605 cv
306.333 54.8643 306.181 56.0225 306.181 57.5361 cv
306.181 66.1641 li
303.369 66.1641 li
cp
f
332.025 56.2891 mo
341.525 56.2891 li
341.396 54.8799 341.033 53.8223 340.435 53.1172 cv
339.517 52.0234 338.326 51.4766 336.863 51.4766 cv
335.539 51.4766 334.425 51.9131 333.523 52.7861 cv
332.621 53.6592 332.121 54.8271 332.025 56.2891 cv
cp
341.493 60.7891 mo
344.309 61.1641 li
343.85 62.8672 343 64.1895 341.758 65.1289 cv
340.517 66.0693 338.932 66.5391 337.003 66.5391 cv
334.573 66.5391 332.646 65.791 331.222 64.293 cv
329.798 62.7959 329.087 60.6953 329.087 57.9922 cv
329.087 55.1963 329.806 53.0264 331.246 51.4814 cv
332.685 49.9365 334.551 49.1641 336.845 49.1641 cv
339.066 49.1641 340.88 49.9238 342.289 51.4414 cv
343.696 52.959 344.4 55.0947 344.4 57.8477 cv
344.4 58.0156 344.395 58.2666 344.385 58.6016 cv
331.962 58.6016 li
332.068 60.4199 332.59 61.8115 333.532 62.7773 cv
334.473 63.7441 335.646 64.2266 337.052 64.2266 cv
338.099 64.2266 338.992 63.9541 339.732 63.4072 cv
340.472 62.8604 341.059 61.9883 341.493 60.7891 cv
cp
f
347.759 66.1641 mo
347.759 43.2266 li
350.572 43.2266 li
350.572 66.1641 li
347.759 66.1641 li
cp
f
354.931 66.1641 mo
354.931 43.2266 li
357.744 43.2266 li
357.744 51.46 li
359.054 49.9297 360.708 49.1641 362.706 49.1641 cv
363.932 49.1641 364.999 49.4072 365.904 49.8926 cv
366.808 50.3779 367.456 51.0488 367.846 51.9043 cv
368.236 52.7598 368.431 54.002 368.431 55.6289 cv
368.431 66.1641 li
365.619 66.1641 li
365.619 55.6367 li
365.619 54.2295 365.314 53.2051 364.707 52.5635 cv
364.098 51.9229 363.238 51.6016 362.125 51.6016 cv
361.293 51.6016 360.511 51.8184 359.779 52.251 cv
359.045 52.6836 358.523 53.2705 358.211 54.0107 cv
357.899 54.751 357.744 55.7734 357.744 57.0762 cv
357.744 66.1641 li
354.931 66.1641 li
cp
f
383.416 57.7891 mo
382.385 58.21 380.84 58.5674 378.779 58.8613 cv
377.613 59.0303 376.787 59.2197 376.305 59.4297 cv
375.82 59.6406 375.447 59.9482 375.184 60.3525 cv
374.922 60.7578 374.791 61.207 374.791 61.7012 cv
374.791 62.459 375.076 63.0898 375.648 63.5947 cv
376.221 64.0996 377.057 64.3516 378.158 64.3516 cv
379.25 64.3516 380.221 64.1143 381.07 63.6387 cv
381.92 63.1631 382.545 62.5088 382.943 61.6768 cv
383.248 61.0342 383.4 60.0859 383.4 58.832 cv
383.416 57.7891 li
cp
383.604 64.1016 mo
382.576 64.9932 381.578 65.6221 380.609 65.9893 cv
379.641 66.3555 378.602 66.5391 377.492 66.5391 cv
375.66 66.5391 374.251 66.0928 373.267 65.1992 cv
372.283 64.3066 371.791 63.165 371.791 61.7754 cv
371.791 60.9609 371.976 60.2168 372.348 59.543 cv
372.719 58.8691 373.207 58.3291 373.809 57.9209 cv
374.411 57.5137 375.09 57.2051 375.844 56.9961 cv
376.398 56.8496 377.236 56.709 378.357 56.5732 cv
380.641 56.3018 382.32 55.9785 383.4 55.6016 cv
383.41 55.2148 383.416 54.9697 383.416 54.8643 cv
383.416 53.7139 383.15 52.9043 382.621 52.4336 cv
381.902 51.7959 380.838 51.4766 379.424 51.4766 cv
378.102 51.4766 377.127 51.7109 376.498 52.1787 cv
375.869 52.6475 375.404 53.4756 375.104 54.6641 cv
372.291 54.2891 li
372.541 53.1084 372.954 52.1553 373.528 51.4287 cv
374.102 50.7031 374.932 50.1445 376.018 49.752 cv
377.104 49.3604 378.361 49.1641 379.791 49.1641 cv
381.211 49.1641 382.365 49.3311 383.252 49.665 cv
384.139 49.999 384.791 50.4199 385.209 50.9258 cv
385.627 51.4316 385.92 52.0713 386.088 52.8428 cv
386.182 53.3232 386.229 54.1904 386.229 55.4443 cv
386.229 59.208 li
386.229 61.833 386.287 63.4902 386.404 64.1797 cv
386.521 64.8701 386.756 65.5313 387.104 66.1641 cv
384.229 66.1641 li
383.904 65.5762 383.695 64.8887 383.604 64.1016 cv
cp
f
401.416 56.2891 mo
410.916 56.2891 li
410.787 54.8799 410.424 53.8223 409.826 53.1172 cv
408.908 52.0234 407.717 51.4766 406.254 51.4766 cv
404.93 51.4766 403.816 51.9131 402.914 52.7861 cv
402.012 53.6592 401.512 54.8271 401.416 56.2891 cv
cp
410.883 60.7891 mo
413.699 61.1641 li
413.24 62.8672 412.391 64.1895 411.148 65.1289 cv
409.908 66.0693 408.322 66.5391 406.395 66.5391 cv
403.963 66.5391 402.037 65.791 400.613 64.293 cv
399.189 62.7959 398.479 60.6953 398.479 57.9922 cv
398.479 55.1963 399.197 53.0264 400.637 51.4814 cv
402.076 49.9365 403.941 49.1641 406.236 49.1641 cv
408.457 49.1641 410.271 49.9238 411.68 51.4414 cv
413.086 52.959 413.791 55.0947 413.791 57.8477 cv
413.791 58.0156 413.785 58.2666 413.775 58.6016 cv
401.354 58.6016 li
401.459 60.4199 401.98 61.8115 402.922 62.7773 cv
403.863 63.7441 405.037 64.2266 406.443 64.2266 cv
407.49 64.2266 408.383 63.9541 409.123 63.4072 cv
409.863 62.8604 410.449 61.9883 410.883 60.7891 cv
cp
f
427.916 57.8594 mo
427.916 59.9922 428.365 61.5869 429.268 62.6426 cv
430.17 63.6992 431.234 64.2266 432.463 64.2266 cv
433.701 64.2266 434.752 63.7227 435.617 62.7139 cv
436.482 61.7051 436.916 60.165 436.916 58.0947 cv
436.916 55.8154 436.475 54.1426 435.594 53.0762 cv
434.713 52.0098 433.627 51.4766 432.336 51.4766 cv
431.078 51.4766 430.025 51.9893 429.182 53.0137 cv
428.338 54.0391 427.916 55.6543 427.916 57.8594 cv
cp
436.854 66.1641 mo
436.854 64.0703 li
435.799 65.7168 434.246 66.5391 432.199 66.5391 cv
430.873 66.5391 429.654 66.1738 428.541 65.4434 cv
427.43 64.7129 426.568 63.6934 425.957 62.3838 cv
425.346 61.0742 425.041 59.5684 425.041 57.8672 cv
425.041 56.208 425.316 54.7031 425.871 53.3516 cv
426.424 52 427.254 50.9648 428.361 50.2441 cv
429.469 49.5244 430.707 49.1641 432.074 49.1641 cv
433.078 49.1641 433.971 49.374 434.754 49.793 cv
435.537 50.2119 436.174 50.7578 436.666 51.4297 cv
436.666 43.2266 li
439.479 43.2266 li
439.479 66.1641 li
436.854 66.1641 li
cp
f
445.713 57.8438 mo
445.713 59.9766 446.178 61.5742 447.109 62.6348 cv
448.041 63.6963 449.213 64.2266 450.627 64.2266 cv
452.029 64.2266 453.195 63.6934 454.127 62.627 cv
455.059 61.5605 455.525 59.9355 455.525 57.75 cv
455.525 55.6904 455.057 54.1299 454.119 53.0684 cv
453.182 52.0078 452.018 51.4766 450.627 51.4766 cv
449.213 51.4766 448.041 52.0049 447.109 53.0605 cv
446.178 54.1172 445.713 55.7109 445.713 57.8438 cv
cp
442.838 57.8516 mo
442.838 54.7734 443.691 52.4932 445.402 51.0107 cv
446.83 49.7803 448.572 49.1641 450.627 49.1641 cv
452.91 49.1641 454.777 49.9131 456.227 51.4102 cv
457.676 52.9082 458.4 54.9766 458.4 57.6172 cv
458.4 59.7559 458.078 61.4385 457.438 62.665 cv
456.797 63.8916 455.863 64.8438 454.639 65.5215 cv
453.412 66.1992 452.076 66.5391 450.627 66.5391 cv
448.301 66.5391 446.422 65.793 444.988 64.3008 cv
443.555 62.8086 442.838 60.6592 442.838 57.8516 cv
cp
f
487.275 58.1055 mo
490.338 58.8691 li
489.701 61.3633 488.559 63.2656 486.908 64.5752 cv
485.256 65.8848 483.238 66.5391 480.854 66.5391 cv
478.385 66.5391 476.377 66.0371 474.83 65.0313 cv
473.283 64.0264 472.105 62.5703 471.299 60.6641 cv
470.49 58.7578 470.088 56.7109 470.088 54.5234 cv
470.088 52.1387 470.543 50.0576 471.455 48.2813 cv
472.367 46.5059 473.666 45.1563 475.35 44.2344 cv
477.033 43.3125 478.885 42.8516 480.908 42.8516 cv
483.201 42.8516 485.129 43.4365 486.693 44.6064 cv
488.258 45.7764 489.348 47.4209 489.963 49.541 cv
486.963 50.2412 li
486.432 48.5811 485.66 47.3711 484.65 46.6133 cv
483.639 45.8555 482.369 45.4766 480.838 45.4766 cv
479.076 45.4766 477.605 45.8975 476.424 46.7383 cv
475.24 47.5791 474.41 48.708 473.932 50.125 cv
473.451 51.542 473.213 53.0029 473.213 54.5088 cv
473.213 56.4502 473.496 58.1455 474.063 59.5928 cv
474.629 61.041 475.51 62.123 476.705 62.8398 cv
477.9 63.5566 479.193 63.9141 480.586 63.9141 cv
482.279 63.9141 483.715 63.4268 484.889 62.4502 cv
486.063 61.4746 486.859 60.0264 487.275 58.1055 cv
cp
f
493.635 66.1641 mo
493.635 49.5391 li
496.135 49.5391 li
496.135 52.0859 li
496.781 50.8965 497.379 50.1113 497.928 49.7324 cv
498.475 49.3535 499.078 49.1641 499.736 49.1641 cv
500.686 49.1641 501.652 49.4688 502.635 50.0771 cv
501.643 52.6553 li
500.963 52.2861 500.281 52.1016 499.602 52.1016 cv
498.992 52.1016 498.445 52.2871 497.961 52.6563 cv
497.477 53.0264 497.129 53.5391 496.92 54.1953 cv
496.604 55.1953 496.447 56.2891 496.447 57.4766 cv
496.447 66.1641 li
493.635 66.1641 li
cp
f
506.354 56.2891 mo
515.854 56.2891 li
515.725 54.8799 515.361 53.8223 514.764 53.1172 cv
513.846 52.0234 512.654 51.4766 511.191 51.4766 cv
509.867 51.4766 508.754 51.9131 507.852 52.7861 cv
506.949 53.6592 506.449 54.8271 506.354 56.2891 cv
cp
515.82 60.7891 mo
518.637 61.1641 li
518.178 62.8672 517.328 64.1895 516.086 65.1289 cv
514.846 66.0693 513.26 66.5391 511.332 66.5391 cv
508.9 66.5391 506.975 65.791 505.551 64.293 cv
504.127 62.7959 503.416 60.6953 503.416 57.9922 cv
503.416 55.1963 504.135 53.0264 505.574 51.4814 cv
507.014 49.9365 508.879 49.1641 511.174 49.1641 cv
513.395 49.1641 515.209 49.9238 516.617 51.4414 cv
518.023 52.959 518.729 55.0947 518.729 57.8477 cv
518.729 58.0156 518.723 58.2666 518.713 58.6016 cv
506.291 58.6016 li
506.396 60.4199 506.918 61.8115 507.859 62.7773 cv
508.801 63.7441 509.975 64.2266 511.381 64.2266 cv
512.428 64.2266 513.32 63.9541 514.061 63.4072 cv
514.801 62.8604 515.387 61.9883 515.82 60.7891 cv
cp
f
521.088 61.1641 mo
523.9 60.7891 li
524.055 61.8984 524.488 62.749 525.197 63.3398 cv
525.906 63.9316 526.898 64.2266 528.172 64.2266 cv
529.455 64.2266 530.408 63.9629 531.029 63.4355 cv
531.65 62.9082 531.963 62.2891 531.963 61.5781 cv
531.963 60.9414 531.686 60.4395 531.133 60.0732 cv
530.746 59.8232 529.797 59.5039 528.285 59.1172 cv
526.25 58.5957 524.83 58.1445 524.029 57.7637 cv
523.229 57.3828 522.621 56.8564 522.207 56.1836 cv
521.793 55.5107 521.588 54.7676 521.588 53.9531 cv
521.588 53.2129 521.756 52.5264 522.092 51.8955 cv
522.43 51.2646 522.889 50.7402 523.469 50.3223 cv
523.904 49.999 524.496 49.7256 525.248 49.501 cv
526 49.2764 526.807 49.1641 527.666 49.1641 cv
528.961 49.1641 530.1 49.3535 531.078 49.7305 cv
532.059 50.1084 532.781 50.6201 533.248 51.2646 cv
533.715 51.9092 534.035 52.7715 534.213 53.8516 cv
531.463 54.2266 li
531.338 53.3633 530.98 52.6885 530.391 52.2041 cv
529.799 51.7197 528.963 51.4766 527.885 51.4766 cv
526.609 51.4766 525.699 51.6914 525.154 52.1191 cv
524.609 52.5479 524.338 53.0498 524.338 53.624 cv
524.338 53.9902 524.449 54.3193 524.676 54.6113 cv
524.902 54.915 525.258 55.166 525.74 55.3643 cv
526.018 55.4688 526.836 55.709 528.193 56.085 cv
530.156 56.6172 531.531 57.0527 532.316 57.3916 cv
533.102 57.7314 533.719 58.2246 534.166 58.8711 cv
534.613 59.5176 534.838 60.3213 534.838 61.2803 cv
534.838 62.2197 534.564 63.1045 534.02 63.9336 cv
533.473 64.7637 532.686 65.4053 531.656 65.8584 cv
530.627 66.3115 529.465 66.5391 528.166 66.5391 cv
526.014 66.5391 524.373 66.0879 523.246 65.1836 cv
522.119 64.2803 521.398 62.9404 521.088 61.1641 cv
cp
f
548.963 60.1016 mo
551.713 60.4766 li
551.412 62.373 550.643 63.8584 549.404 64.9307 cv
548.166 66.0029 546.646 66.5391 544.844 66.5391 cv
542.584 66.5391 540.77 65.7959 539.396 64.3086 cv
538.023 62.8223 537.338 60.6904 537.338 57.9141 cv
537.338 56.1191 537.633 54.5488 538.225 53.2031 cv
538.814 51.8574 539.715 50.8477 540.924 50.1738 cv
542.131 49.501 543.445 49.1641 544.867 49.1641 cv
546.66 49.1641 548.129 49.626 549.27 50.5479 cv
550.41 51.4697 551.141 52.7793 551.463 54.4766 cv
548.713 54.8516 li
548.453 53.7324 547.996 52.8896 547.34 52.3242 cv
546.684 51.7598 545.889 51.4766 544.959 51.4766 cv
543.553 51.4766 542.41 51.9863 541.531 53.0039 cv
540.652 54.0225 540.213 55.6328 540.213 57.8359 cv
540.213 60.0703 540.637 61.6943 541.486 62.707 cv
542.336 63.7207 543.445 64.2266 544.813 64.2266 cv
545.91 64.2266 546.828 63.8896 547.564 63.2148 cv
548.299 62.541 548.766 61.5029 548.963 60.1016 cv
cp
f
556.15 56.2891 mo
565.65 56.2891 li
565.521 54.8799 565.158 53.8223 564.561 53.1172 cv
563.643 52.0234 562.451 51.4766 560.988 51.4766 cv
559.664 51.4766 558.551 51.9131 557.648 52.7861 cv
556.746 53.6592 556.246 54.8271 556.15 56.2891 cv
cp
565.617 60.7891 mo
568.434 61.1641 li
567.975 62.8672 567.125 64.1895 565.883 65.1289 cv
564.643 66.0693 563.057 66.5391 561.129 66.5391 cv
558.697 66.5391 556.771 65.791 555.348 64.293 cv
553.924 62.7959 553.213 60.6953 553.213 57.9922 cv
553.213 55.1963 553.932 53.0264 555.371 51.4814 cv
556.811 49.9365 558.676 49.1641 560.971 49.1641 cv
563.191 49.1641 565.006 49.9238 566.414 51.4414 cv
567.82 52.959 568.525 55.0947 568.525 57.8477 cv
568.525 58.0156 568.52 58.2666 568.51 58.6016 cv
556.088 58.6016 li
556.193 60.4199 556.715 61.8115 557.656 62.7773 cv
558.598 63.7441 559.771 64.2266 561.178 64.2266 cv
562.225 64.2266 563.117 63.9541 563.857 63.4072 cv
564.598 62.8604 565.184 61.9883 565.617 60.7891 cv
cp
f
571.947 66.1641 mo
571.947 49.5391 li
574.447 49.5391 li
574.447 51.8984 li
575.67 50.0762 577.438 49.1641 579.75 49.1641 cv
580.754 49.1641 581.678 49.3447 582.52 49.7041 cv
583.361 50.0645 583.992 50.5371 584.41 51.1211 cv
584.828 51.7051 585.121 52.3994 585.289 53.2031 cv
585.395 53.7246 585.447 54.6377 585.447 55.9424 cv
585.447 66.1641 li
582.572 66.1641 li
582.572 56.0488 li
582.572 54.9004 582.463 54.042 582.246 53.4727 cv
582.027 52.9043 581.643 52.4502 581.088 52.1104 cv
580.533 51.7715 579.885 51.6016 579.139 51.6016 cv
577.947 51.6016 576.92 51.9834 576.057 52.7451 cv
575.191 53.5068 574.76 54.9531 574.76 57.082 cv
574.76 66.1641 li
571.947 66.1641 li
cp
f
595.932 63.6582 mo
596.307 66.1426 li
595.51 66.3125 594.799 66.3984 594.17 66.3984 cv
593.145 66.3984 592.348 66.2363 591.783 65.9121 cv
591.217 65.5879 590.82 65.1621 590.59 64.6338 cv
590.359 64.1055 590.244 62.9941 590.244 61.2988 cv
590.244 51.7109 li
588.182 51.7109 li
588.182 49.5234 li
590.244 49.5234 li
590.244 45.4141 li
593.057 43.7266 li
593.057 49.5234 li
595.932 49.5234 li
595.932 51.7109 li
593.057 51.7109 li
593.057 61.4141 li
593.057 62.2168 593.105 62.7324 593.207 62.9609 cv
593.307 63.1904 593.471 63.373 593.699 63.5078 cv
593.926 63.6436 594.252 63.7109 594.676 63.7109 cv
594.994 63.7109 595.412 63.6934 595.932 63.6582 cv
cp
f
600.635 56.2891 mo
610.135 56.2891 li
610.006 54.8799 609.643 53.8223 609.045 53.1172 cv
608.127 52.0234 606.936 51.4766 605.473 51.4766 cv
604.148 51.4766 603.035 51.9131 602.133 52.7861 cv
601.23 53.6592 600.73 54.8271 600.635 56.2891 cv
cp
610.102 60.7891 mo
612.918 61.1641 li
612.459 62.8672 611.609 64.1895 610.367 65.1289 cv
609.127 66.0693 607.541 66.5391 605.613 66.5391 cv
603.182 66.5391 601.256 65.791 599.832 64.293 cv
598.408 62.7959 597.697 60.6953 597.697 57.9922 cv
597.697 55.1963 598.416 53.0264 599.855 51.4814 cv
601.295 49.9365 603.16 49.1641 605.455 49.1641 cv
607.676 49.1641 609.49 49.9238 610.898 51.4414 cv
612.305 52.959 613.01 55.0947 613.01 57.8477 cv
613.01 58.0156 613.004 58.2666 612.994 58.6016 cv
600.572 58.6016 li
600.678 60.4199 601.199 61.8115 602.141 62.7773 cv
603.082 63.7441 604.256 64.2266 605.662 64.2266 cv
606.709 64.2266 607.602 63.9541 608.342 63.4072 cv
609.082 62.8604 609.668 61.9883 610.102 60.7891 cv
cp
f
632.236 66.1641 mo
623.385 43.2266 li
626.637 43.2266 li
632.59 59.8799 li
633.068 61.2148 633.471 62.4658 633.793 63.6328 cv
634.146 62.3828 634.557 61.1318 635.025 59.8799 cv
641.199 43.2266 li
644.305 43.2266 li
635.369 66.1641 li
632.236 66.1641 li
cp
f
646.9 56.2891 mo
656.4 56.2891 li
656.271 54.8799 655.908 53.8223 655.311 53.1172 cv
654.393 52.0234 653.201 51.4766 651.738 51.4766 cv
650.414 51.4766 649.301 51.9131 648.398 52.7861 cv
647.496 53.6592 646.996 54.8271 646.9 56.2891 cv
cp
656.367 60.7891 mo
659.184 61.1641 li
658.725 62.8672 657.875 64.1895 656.633 65.1289 cv
655.393 66.0693 653.807 66.5391 651.879 66.5391 cv
649.447 66.5391 647.521 65.791 646.098 64.293 cv
644.674 62.7959 643.963 60.6953 643.963 57.9922 cv
643.963 55.1963 644.682 53.0264 646.121 51.4814 cv
647.561 49.9365 649.426 49.1641 651.721 49.1641 cv
653.941 49.1641 655.756 49.9238 657.164 51.4414 cv
658.57 52.959 659.275 55.0947 659.275 57.8477 cv
659.275 58.0156 659.27 58.2666 659.26 58.6016 cv
646.838 58.6016 li
646.943 60.4199 647.465 61.8115 648.406 62.7773 cv
649.348 63.7441 650.521 64.2266 651.928 64.2266 cv
652.975 64.2266 653.867 63.9541 654.607 63.4072 cv
655.348 62.8604 655.934 61.9883 656.367 60.7891 cv
cp
f
662.635 66.1641 mo
662.635 49.5391 li
665.135 49.5391 li
665.135 52.0859 li
665.781 50.8965 666.379 50.1113 666.928 49.7324 cv
667.475 49.3535 668.078 49.1641 668.736 49.1641 cv
669.686 49.1641 670.652 49.4688 671.635 50.0771 cv
670.643 52.6553 li
669.963 52.2861 669.281 52.1016 668.602 52.1016 cv
667.992 52.1016 667.445 52.2871 666.961 52.6563 cv
666.477 53.0264 666.129 53.5391 665.92 54.1953 cv
665.604 55.1953 665.447 56.2891 665.447 57.4766 cv
665.447 66.1641 li
662.635 66.1641 li
cp
f
673.354 66.1641 mo
673.354 49.5391 li
675.854 49.5391 li
675.854 51.8682 li
676.375 51.0557 677.07 50.4023 677.938 49.9072 cv
678.805 49.4121 679.793 49.1641 680.9 49.1641 cv
682.133 49.1641 683.145 49.4199 683.934 49.9307 cv
684.723 50.4414 685.279 51.1553 685.604 52.0713 cv
686.924 50.1338 688.643 49.1641 690.76 49.1641 cv
692.414 49.1641 693.688 49.6211 694.578 50.5342 cv
695.469 51.4473 695.916 52.8535 695.916 54.7529 cv
695.916 66.1641 li
693.104 66.1641 li
693.104 55.6885 li
693.104 54.5615 693.012 53.75 692.828 53.2539 cv
692.645 52.7578 692.311 52.3584 691.828 52.0557 cv
691.346 51.7529 690.779 51.6016 690.131 51.6016 cv
688.955 51.6016 687.98 51.9912 687.205 52.7686 cv
686.428 53.5459 686.041 54.791 686.041 56.5029 cv
686.041 66.1641 li
683.229 66.1641 li
683.229 55.3594 li
683.229 54.1074 682.998 53.168 682.539 52.541 cv
682.08 51.915 681.328 51.6016 680.283 51.6016 cv
679.49 51.6016 678.758 51.8105 678.084 52.2285 cv
677.41 52.6465 676.922 53.2568 676.619 54.0605 cv
676.316 54.8643 676.166 56.0225 676.166 57.5361 cv
676.166 66.1641 li
673.354 66.1641 li
cp
f
702.01 56.2891 mo
711.51 56.2891 li
711.381 54.8799 711.018 53.8223 710.42 53.1172 cv
709.502 52.0234 708.311 51.4766 706.848 51.4766 cv
705.523 51.4766 704.41 51.9131 703.508 52.7861 cv
702.605 53.6592 702.105 54.8271 702.01 56.2891 cv
cp
711.477 60.7891 mo
714.293 61.1641 li
713.834 62.8672 712.984 64.1895 711.742 65.1289 cv
710.502 66.0693 708.916 66.5391 706.988 66.5391 cv
704.557 66.5391 702.631 65.791 701.207 64.293 cv
699.783 62.7959 699.072 60.6953 699.072 57.9922 cv
699.072 55.1963 699.791 53.0264 701.23 51.4814 cv
702.67 49.9365 704.535 49.1641 706.83 49.1641 cv
709.051 49.1641 710.865 49.9238 712.273 51.4414 cv
713.68 52.959 714.385 55.0947 714.385 57.8477 cv
714.385 58.0156 714.379 58.2666 714.369 58.6016 cv
701.947 58.6016 li
702.053 60.4199 702.574 61.8115 703.516 62.7773 cv
704.457 63.7441 705.631 64.2266 707.037 64.2266 cv
708.084 64.2266 708.977 63.9541 709.717 63.4072 cv
710.457 62.8604 711.043 61.9883 711.477 60.7891 cv
cp
f
717.744 66.1641 mo
717.744 43.2266 li
720.557 43.2266 li
720.557 66.1641 li
717.744 66.1641 li
cp
f
724.916 66.1641 mo
724.916 43.2266 li
727.729 43.2266 li
727.729 51.46 li
729.039 49.9297 730.691 49.1641 732.689 49.1641 cv
733.916 49.1641 734.982 49.4072 735.889 49.8926 cv
736.793 50.3779 737.439 51.0488 737.83 51.9043 cv
738.221 52.7598 738.416 54.002 738.416 55.6289 cv
738.416 66.1641 li
735.604 66.1641 li
735.604 55.6367 li
735.604 54.2295 735.299 53.2051 734.691 52.5635 cv
734.082 51.9229 733.223 51.6016 732.109 51.6016 cv
731.277 51.6016 730.496 51.8184 729.764 52.251 cv
729.029 52.6836 728.508 53.2705 728.195 54.0107 cv
727.883 54.751 727.729 55.7734 727.729 57.0762 cv
727.729 66.1641 li
724.916 66.1641 li
cp
f
744.525 57.8438 mo
744.525 59.9766 744.99 61.5742 745.922 62.6348 cv
746.854 63.6963 748.025 64.2266 749.439 64.2266 cv
750.842 64.2266 752.008 63.6934 752.939 62.627 cv
753.871 61.5605 754.338 59.9355 754.338 57.75 cv
754.338 55.6904 753.869 54.1299 752.932 53.0684 cv
751.994 52.0078 750.83 51.4766 749.439 51.4766 cv
748.025 51.4766 746.854 52.0049 745.922 53.0605 cv
744.99 54.1172 744.525 55.7109 744.525 57.8438 cv
cp
741.65 57.8516 mo
741.65 54.7734 742.504 52.4932 744.215 51.0107 cv
745.643 49.7803 747.385 49.1641 749.439 49.1641 cv
751.723 49.1641 753.59 49.9131 755.039 51.4102 cv
756.488 52.9082 757.213 54.9766 757.213 57.6172 cv
757.213 59.7559 756.891 61.4385 756.25 62.665 cv
755.609 63.8916 754.676 64.8438 753.451 65.5215 cv
752.225 66.1992 750.889 66.5391 749.439 66.5391 cv
747.113 66.5391 745.234 65.793 743.801 64.3008 cv
742.367 62.8086 741.65 60.6592 741.65 57.8516 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 16.0.0%%For: (S\616bastien) ()%%Title: (IFRC_logo_Portuguese_P485.eps)%%CreationDate: 2/27/13 5:17 PM%%Canvassize: 16383%AI9_DataStream%Gb"-6$[X,-OY6S1Jc628B@k79f;9MCkaQWrMkoDnOmP.bNjIDTNXnY>bV2DH>"\?sJ,P/30"<a-'K)IAhHd+Q)6)#;6D74(;um0\%^%WkC]Ck9+rG&Y6m\A/7FZ1f)@T7RIaAumGhL!"C5$Qh7@+oVWFtE^7KrNg(h0*:,PV,H\DHqe:2VVKl>qOX::UcgO`QcYLZeB56%4rR-ro8>Q\HRGFd?_8oOMmL\%C486"At1*n'OOZ(QE/3Tn#ftJ[N@NB"d7'4.Jk3)k-#OBNTb:+2d_&\j\h['DJpP0%XB+\42&8:%h-=[!:S+/*roFrgT8m_lNMaI0E7</4o_SpVUQHGUUO6<HmamYds1Fg'k[0E47ZpE7XR6jo84d=Wrg!=goZ;:U]mahS^HBXrHN*((%32`Ofd'rE)gN=pBF8mY:2W)4dL#NNi7@tR;(,r_*[)HLV-rJL(!!4ADPKiAj5;a1*VnA&.S!tZRC*=\6fZr*P('/"'<.qR%9jJA<%H#C76%^6S%Ljh[TI/Z_=`WkN9^pA_BcW4:f,_*5WX;8;!1pP\\6ojd"q=Cr3X6%UnG(.'YXT.i!&WZ8@qT?(e[IXXC<0"q'2_GGA%O.)daQYfecEOOnbTtai;?*ED"$PMPVY=GGd0#%S,#pp%kaie[$<n7SU)4.apnAa+#=kEeM3OZB#S0^`'ig]&hgQ+h=?-Fr<>8Hjp%mHsN,IlYV.f&f!mcX3:"XVTYUXI$DVFMcP4Ujoh`>c^+-'gDZNC/+h*NsYhB^mFZ[X2V4,VOQ*V)"Z.ReIl+_3hLo:5T_DbJ1n&A%lRt2(&X=H&eob4r[\LjRY2!,\e$868`Q3&&F-K_maL&m3a%]KuScY\eF"ooePZh,:1p/!o]&*8%G55m`rlD@M(`?peoCXKcj^mYa%<UIp[\ksFF`P&O9rcS'uX5Q$YHb45s253(-T1+V[++O!SMu*"Pdj=>Ud]q78%W=(RG+(BF>0l??F2sTlebZb5mm`N0D\k@cHb'#&%9Di/KpqQ.as)b9?AVo;UM6CKIY@Yg_cd%WAF4E.@l5FS`%B-iB<*c,e.F,'u9\0<BF$Ib%Fb&a<5iFBo&#e_,:t$k6:8dkBSH@s?%$t%?+l5I4ZcLCf!N:SaB9J=l4-1Y-ueF05t%K$_be-Z-W$?adcni,&(rrWH__Z-RDEe<nW:A>oLW"K"6-KYtO7ZHn%lAa[l7@d7%%F-FcP'^CDP!HWF=1i4=2c9,\k17.JpkN&'foh7Hr`he<.D'Obm+$cNKp`Gm5"hE4^NEZh+!JUAa$StjD0C">mnV5b;qr<1'*%CY)%:oGK8k>l+B@D6dX-rFOUPcO^qRk]?8F[.\=PV69_VB1sX?!K!lf(NPYr;d=AVilnj+ZJ#A^S62P+&FNGW#tVaoAY88TQ]"8.bWO"%QucL69=N'Jb)/e1-tc+[=jVVkD9@6=lBpmB0(TO:CPul^R!(`/l&;2)o6:1Bb.2/j1io-BD]$A0rNQ3ShTgDPpU%DaSu$fAZHpt$%EZa?Q\Ut<):CjS/>Rp-$MNj=G*OqfM._T"<j5lfNjRe)^X;-`m'Ersm^\J,p)LfPArlO#t.S^;bq57s%4oFH7[cR7leZrET3B?%O%iA^d1-N"p6o2#):CrRp_2ufD>npC/V5Ipf&I?(bRs4jdTY&F6meZZ2U></j/e!'\/EN\HrUciG<B!)Q/'7]*WrbX]AfAAC^`a=F>%Ii6+DEmarSP=Y\2;pOU9U%e,REM^mZU7%QoPi)GL[o<*LQ=Dah)>?]1\?iNm13HTBdPe#EmrEc"Kr2=?jAm89JA8.:0M)bOTqPXd%c"DQ[7&#?u%c<D+n+-4P@WXS7/PmOdX#l_KdmCT'm3^;bS4l_;_JhXTO8IP&>l<D=f7[$p]P$[6VCFkTQ)ejF55`lRj?Ti0)r+k(%WF$P$MFKR28e,2X@r]&kn>9R"VJ&&nBfeaXF,SOkk2&/?)YMAhDHg1oX)ZMiCe?R+JD6=;:^5O@;mag0*)$b'@gpLO^`n!<WO_9n%'!9.d5UDt@H&<'g+YB.8F)t[-+1F&e]B^eDGG;c^icJfpF5Mcmme`E=__[T>PuErKIKsF8CKeK76_X#\;QmV4-VjI8e5>'W['k4@%*R;u/XZTTcrf)5FWod@grEi_Ls7/bL>1u.;qo#/@gK@VS\q<@+;c7n=B="V8['OK2nl4QiGW9[a:Brp2iRt<(Y_7S2-Y>,VYZ'*o%:>SU-V]5mu/8N`nQ1dq<ka7.*[tqZ&Hn+$LLJ#mbR9\3l?i*QJ-Tj<ZFHl1hHJ\IDK-sTVpa7Nl%XZ7`bO)<HU[>2N^j8fLNqQrD%^?VTB[b=BI_k8YM5?Ic?.@*-(LUMDWi-&!IUTuDmH)>TtabuPocWptffB1e1-SWd"\6ao]&,jCoM#0!O2+Ae:X-f;*U"?Qn5]3FU%MI*>S#G^,acb5aRS7o^Fp*"Y,'[V`[Xe7%D&*gd8F/!)=nVspYNEmB*)NneQeYYI/U=Dofn;9M%-1,3D^PSR>E^CF<$dO(#DZeUb%S$_$57M3:n%'BLTS2a7/!M6bYk]>jq_Q+BB6on[7-9UJ*aJ8Ie^IC_85:2u$QK*:4]BBOF2#*;-^S^H:h-Fo:M4C+cp62h56$4`>%c@Z'1r;uYP0unQkFr7(XRaq5lVs@!#i;D2KF+sFR)thIJDE"W@/,n]2VD$6<^UrW2#C?FHo8SB/Y2T4iT@9/#l_gdFpZ[n/k3i)p%oug)'jQ(@Q@PR^oEH/VD0)o^,3VqaS?ermY7Sd\-EV/@9Ic1jJG7QL$0<]kF&Dc#S^0Q]mUWZ64qYU9IZc1,4p*sV9eC4(LMq-rN%6L.S4lc[ZtkM,>";*S@2fCSBcdQQaajYuVNgi4h%%V\EU?#4G^*HNV:Jb0:/!"aQ>U7h>Lld97N=C9p0h#*TRc>!%5H[^OFU?uX"%]t8PQqJroFH*lf`O'Rnt(%=GI17hBuobVCUcu)DVcnFWoHi'!W`BirG_0u51A"V%JX6$DLr;-*W@]4g.n%L(Hp(5(:rp%I7[Cj$W%ne@o_SSrG5(TYOHmr*([=%>4;kk&o[Ph_jJHk>H9\+A@4fB:<ng\H$'38",T!&'])9.0V_n!:G@^nAs&2&;EGcX5#%(K?CKf4P6^%g`ro7G,dc-mN6gq5jOnK1g*?+5M==8QYo(a#V.V#M`:*crqIBWAEiD.+1[>sfq5TXAT"/]`mNK3CiX]>et'3]buoHqS_:@?X>i"K%q<?Ssl07PVH9+&L3UKSre)n#$X\S7tH!6`,;s1"':1podF>fPXbdprH\UhJd<AQ]eB>r*1e=E1+B@H*e68JZ0[$fLoC20;F;bYHc%RF.5IM6k8NPKCqBS$\Ak;GX<LSWo=I@O?B_SA!C8RBm#C-R[u<1ahrfF^e.hPN'NNjP<s_g<D\A'mD>LgTKf+Y3N)E*fJ<cc>IPr%iCLBj2bJ:2S$bsp[oI4uZ7T8/3]D`Y[qRX4:7A>"S#30SWj,:O'THhtqQ)l_BD&X'e0fB?[rkX$F]I2-XGbf^GugJ9Vq%l;<g2ge%)<Yke<-;2@(8bMO.VHlX;`h<a40^0AZd*Ts[B6O<V(JdRH$NG^Q8<1L:<JdKGpHPGP]^,o[OfUr1hC!`'rT$PQkknFV!&.uit\sX%+)Ojj7:D)/S=*;31K-(a-`/]%BhW@n@ngYE@n`KUXs%l<(=(BL%*MqIo/_)KjUQKpWNP,hq<5Mq-X.r3][Tf>.ebHkeE>M3?h[GG%2jjt$*\'a&0U%n@C6d%PELji#DQY+\nqYCpZ\[a=80,<W@Tc-9j.B5@JfZ.4cAuK")6oI!)*LoD-CNodKXcFs*9X5bVkL#SVilg.%e";45,>Xnr3?HdIB@Ku[biG2?1QgigSrTCCSq`h?Sgrb<"KkrP`T`V^CN;Nt5HaPP3Mg@8c]k#X4=?P\N"_A7N[0:M7\6'?8fhOj%f1nr%C!`BBr!Y?'7WNWDZGk-hSd@P-noXH0oJH-goMkD69Uh&FWO:1V8OsrreYBhkIJ'YbMgYHHHI&tm9Qm!@IF9_\Sp':2H;E@D%Ua'Hb7tj-lp9!fu4&>mseN5R4GbkAYcY;j9oq#mtaeY\dkG7io4&=UXReY!P^Q+qdpXn>$mQB5%Ml`f],(76k:)"*I>u#4U7H:oG%A7M7u^TH^4qdf`cU)t'HX,L,LjO%-e&!T/u2<La@R[L@=U<PRS(=`W?L1bK;1%@r%Ke7RP%TP\mDX36,=s[I$!;?oh3o#k)MeUf'%%On0:DbuWpEVcFt)\7$GEULk5*YigVj:P>2:E<6/)%Ec1f]qBf6a7FUm:T[mrpZ;X,J9'39h#>;RKI:GYd#mELFn@N4DJMje`#Un%R9='"4#L.4LWp\lD+L:]+;E>p'fC)+%6L8,4Jd3We4s\JRMqqGk"gie@'Ll8>2iqR&^.tg.IlMYpeXf#;;6gTG=%Q\(!_WrJg^b-%N>)?;Fb>P:%Pu]gc8$c$L=S5`lSGs740@g9-a#*s?(X0[cCB8#f5.:a;<@X[j8*-GqVfAP75HkLSN45<Y!G]><`O%]C,._mF`%b[%\A<"D#.667d`/\:km"cB%=1b'\e4GMNJ(4h,+c5U:=P8eJ^TODPoDS"2gTXb'V2b]FQQ'CZcr(Cj+O1L_enLih$13[==A=0n]VHc%B<H:m-T%Y=Y:DPL2fAQ]gc.K;j8$oYlY!BL(ai%S)t,:9mPgOi!&,!HE<a8')$X301eu7eB/!<1E+ijcZQ`/72)3)8lKlaf1ZQEW%F;@C./<@eR+J#i,-I*g'3QpJ76O/9T3g7N;baC,e<mHqL76@j<o^#7?+nlluBS2r_;@PlShfo"FjaCdfU7SO$>l(pOma/('QO]S>%G@^-Ykes1lL5qaHg!Em$S,,=;p.jk;R<6X!-)iEkSs]5ed/26t8%jmD>NU:$p9KFEQDD):abFV!\u-h4ODuZ0G_jbk+^W62,+h_^%X[r"+q[LY3H9b!6!;um\@7n36r;k4^onm!*K7\D>amMh,4;)qg:hN(<l);dudnIVL@FRGe1k6YW?uH#YM,PU>6DX1idbW@#aKscT%NniekrT=:>o45XZ*cddMcX]2R\OcY\r@[]'_b>]42Wueq"4$IfX$#GkB0F9Xo`/H:5IKlW,<dm8Z^uG+j;ngla*V+PXCigi\]%<M%<)`]TSsS]!JVb8234ZjV%ub',@5\9X[F3[,Me7A161ja&phN'X^B]nH*nbF]9&'$4bRg!NW,_&hFE_>mG/$1NAr7eQhj;.Nj=Qrm%V4bX<1.<O#Nkcd*O\t,^&j4[r/7/Q`-m`"FYZ!$W<FDpcA?e+`,m,c[nY0Yg#0`$b(h^kH+Xpm*/]a_:afL&%;iu&%o;3ZE`u-lT%&U$LLc@kO)=?JCFHCWfDLP1k<6U<V,8Tp3W+jCGtc5r^XKi+).NjMb[\0tBs7aEOM,Wm@Dgs6>5R7acS?o_4t4k2>p)+N+GQP%,1%aI&EX5rI2c2&KA=W&&Gf/]c!_aj@=Ue@KW0#$4/]QSZ6/n/gpWV)j40;o1s8DeF=I+(EEJN&%[aa>BZSRgcZYN&51EA_`AXXV&Il%Ag>0C/(e`S[oouf)R7de`'tF+9O+g=)e<]@F^fqs=[em-]1WSc27:rT;Y00QbUOiTN`o=q6]q&+M7p).^Y8U#orHoPQ9X(%@M+GK%jGb9;IkpNp`!c'`J9h:^$`H"Wrd]:tl4\tT&GuV&%+I44mm-gRoaoVC&21ls$0is=R5bT>/uZ[,9)[1_T0^-poc)D%:u=RPLGBMJ%6<sk>,/fJ.S39VJ52'c!i^tsgdfuXn7#KPup3jrB40E-"bjI/Dq!B6B*:JQ,Ij>,dmRu8tmZ<ca"YjXq.ZqZN@;-8a]h:^.l/I^;%F"9kO1k;NBEkPSKB-dEZo`.*j5d@%pm/4br%?D5d2Y)sQTnGP4@#1d<)/i'2aXG)^-BCl;R?9C?Z=P$9+!05t.#Z+<Bq*KUaCAXQ%&!)fgNUsY/2QVk8D"dD'_-CEc)>b\S+dn+3[NJb"Gl/nJ.AJqnqE3?8H-@$(>Egs&J_:q6l5B9].J<*8p$`X[jW-j7;K$KPa4Ji,%/*cqrH@JL)THGiESd`blXAp/@\M;(A+f:@8oDWa)6\G0Q3];Z=_0AaXS_u1gpb<uQBqo@/L^/g+UZS+JiAm\?[E+;[.uY6P]Po)"%e5J^Xoc5bP#E<u\i!H9D]Vp_cE?.(!YsV!A9[('l)F3:*,Rbkq[GALO<f"^q73bBn798,Am'AL9QVtH>b3W(ZelX:u<,.)Wb!Zt=%<FoWb=g>NM]d9PARTZOt?l>BI;T#N#=fbZ*WC\G#=Yht1`.TUN:<QcIO$hgbckfJVjR;kV+2\!idEtb`p0%DR#`J\Gm3_e9k=7o'%=(&mUk2T(Ss-Ao[lM_#>#I,:[dY'1crZS2BUS46V`&jB"mqbH<1J^1)X<>j?nMD/0lE/^,C^ST-5@ob1boXkWS*LtN$6&I_CU+U'%Sii9`9qH@caZuDpj(SNPAD,OEH]SZEN6NiL^(K_;acC'1H1=/^ApN*p-T#t:PpZTHrW2%t7K^Vg#)ao>(_[fEpgF@]q2Cqqa@59K%?Wl+4F]FWf"icab4P.Dm3*XOAcAKT_Ata19\\mJaIf@1C#S6g_]heTg-^4@mj.H&7PO0W<%sh"I:UZaW4Hg"5cDo"3V@Ro`pHMgQ%Er*Ran0b!!Y/mM`hBs=t;:G=E\Jb$U%g.rDgX570Aa7<*1Wk%FA4!j[[=A8gH/J@OGf`aJlSn9nrj5e02W'Bf4E=3f?ukTYs)\K.%RG?!Bc#C_s?9d6.;!?6!7kKLIpn4>D6+4p'bcuS>-n6/ob0*IEr1*+9h9OKH:Zc:*ihtXYWh%2u4>[_69mtftT9LaMdhD8X'-tST%.IQ].M>NEHHfE5/HmZIFBSW1.N7u(2m1!DAIel?I4&7aKmC)32%=fB'M*'KeNpSB[r9rqupN;7<]pN6Eh`CkXo6i[oV"7>BkG7]D%3nL2!9IB?hU=tB$D\[HP)ItqVMAKU'fdA-(9Y>B=a1I;44#-$%puMYuET3J6`+1qA9<AdJ?+ol^D)(b61ND!r>uufp')S\:P=iK2%p"S#<=5R;sGNZ_RikVT&+.RRuj+AQu>knqU(qb.ak;-76T?6B/3q]a^+$92$CEGY4inbp$q_W<^]o/LP.B1?+a!nu)8g-N8)HOV9%oe.6ZZ=F9Co2/$uJTU%0_86EteIl]J8XRm^)@tY[(kRW%S>_],U.K84XG@)$G^/j%+g6B,d3';;PPp'<5?.%\QJrosZK0P*F-o>o%iF*6One&4\8_i>N50-C@;E$=TM1$&ad]*I(?4>S<HQg=Tb6pN,.X\=7Cq^@--c;&VK59IHP9sTT)?0OV_s_Ji]ir'5HFC=_6P"@t%5\`"Mo#GIks+SppYuNdTc`)E>U=b8aMNH15M'@hBd!,kdq4J$'S>`4P$(]L_AR`FGOVB0?4GCdSd$)_kO"AsQ:1DjB&9_+L&1rkK%P;PE.^W<,dN&lj7ctEhn5j3Sl`^pl5U#?m<&>YF[SAo9!f'pilGnd`]Yo=j86Xr)l'Zo=*/=KYmSLbWKn.W:DkA<:aZIhZBm:05r%]j:DMH>n&+$boCHc45!U\*:`^Te?7$4ZGOQL#8a4B8=(f;%"8(E:4-Z?eF*6Z1!O!2V8O`qa8dbP,J&<`B@e*a6`MiILdpV^6D&l%.dg7tSa4)X?8=[1m?s_2@\W8"fs9H0Y60tlrG<@_ZST5b1IErTaW+#%iUF7a9ICJLhOg_!SZ1;5X/XGZqWef2O.&5OW*a<.c._r<%RqsGR/$)^g`b<#PSh=(9N6s26\I'i&4)5T6#3jF="e2;jcR.IR]?#3?dX?j!$qHf4(oI2!#="DDCARX9*8N[JO_6EIn\.A13eLc]%@Z!@=0@qkur7&KuB'Dg<o7*CK\S&E-EE"p+7/l[YkB,-4qr,`"W=mC'pbHWb]!<ElbaL#_m"[7#VQ6fO%prpCpQK0@)p8#?E6QWi%$[6i._$%f\!Xq9Wguq,V+SIp#Z8;615#0>.ULoJr5<Cs3%mH%_>*$S?5_S](H*Qop3p0#hLRaP?&KOpAW%B'uKf:V/&'Kq*D.a^`%7U,S4l#!d0@eZ(&o#lrgk;q/8`ehP#IN)^[CjRO1V4Vum,#'\9-XijD`*;$'2e2U*6i=X\[u84?1mr9Q`u"_MG$mFUbK"K<S`09%%KKft*3e[N`;uN/YA,Vie4miI*]q'bM6RbMi_^as8R7j*SS>I5rKE?"5C"9#fM0UpX*d-J6AXc1eGSGk]a7[L;jH!g4j&h]h]CdQZ%O.u-58'Bn33-hk^*_#&8Z?R?a*\E:?;0]H!*f#qLbMlA5*\E;jiT-moS32\GUF86.(6?ATULisD$BLLlj)FR&=ZhSYhp/P&o7Ngn%G#QG,?9L!'.E8f3p?-JR.ud0Cq]GC'MBc)D^(4g,m'o\\m!l2C#q[W.]4+!uHa8p]iVL+R_dqcEU&+0$BY21TX+hRfaq**B:U^+k%p8dpF6[_c-mEO;=dsfP\6T"PEhk"ZO4mgkhCPMPSp=l(A6i.mcl[2Jub4g*]a`DRR(*@`TqUp[##S3&%HTnr[MJt1;Y1HnBk]1q&%mI1r+NAB2&0"#30RDG"441%q'E2:$WXN:t@<BE%gW85``l!ELsVfTK]3o22(DkcqEX>;X2_\6t;NjirIS%HSXms&'Hlkn(4=4gCl%hb+iN*.Hn<lsZ6mhZ9AFZfAt!naS(!nQGGA4F)6r[K+@R?AqR*aj&*Y3K9o9A>ek0D8X6kDq0X<+IRdEP^Wmdkg;G<[*H=X^9<Cf%mblpYb1+_i5XY!Yl@&L`C@/+Sgj9t;^jb-HRqG52N4#kJ#>`@^r+Z*sNPE7(p[.C>A:$aQT+L?*"5;k+%1'hR./;9boVB/mAkkt/%a[)!?M\"J+A/6I2Y?/kOMTPR_Y",D.1icp.Q#i+JbcVpF>VG]Hl]lMIEA"./c][>]3]YEoQ6V@anD\E&hPm#D4N[L=H`\8[*)>1^%aV^G+3L/@i_EiP=;0u>]_D=*rA:EZ?m_#%19m<]Z4&a>!G,8GTQcjKqWE`[eOmD:9RC9(N\XK[clf`B"KMKkNS&gS1XkY^6-)^5M%\Ou9h:=u)p[*3J)?R,<`=ZPfqoOiC/"H4,:h_rSaQ(G*9#V`Va/%M`nG^%aA#=,t'k5CG!2C#]5*W59H[?#t!j'^NkJ9i`R?5-[7%GO=)I`k>!j:R>:))S$NZPoFc=Ur8HJ\qP(^&+\8We^Q_3,Ds>e[<fU#?=TrnBA-$3n^.HiC]?6=Kmg(./#KfLKq%rdd0[^4W*:U8%q"]jGA7Q&!q3gHb?Ted!%gghIKCrX2"tca^r3^RJ:?O;-$Q&e:r5$GJ*cdV7S8agbDAV+8=R@)F2gDE0QCM`g"@NLKl!a5Y05E].%S@2*,2BKT>Z0/3sm(hW#dE<JXFi03Uf`N$MmQIg,gKEN\p``4KC0Pl21<7cM*IL9B9WhAYic#"YCH,8&hDKVlc#YA$7niiW&Na#h%eiQh*<3Ci*GH10#\\^MQ-]:Zj^@>^o\qY1<n78`qPFOBJc5@Z]JE#%4_g0.J$V4#5cK':Y4a;5(#b&i*^#AnJd'*[\aX^H_cE]Tf%:b<LNQMu3d*E,K=q/3%^\`%DV1PS:4KSbU2R]D6W.#+q0)n<[94*6,2T'P\P?=&uc]=fi.]^A'ef4>&.f<n+U>W6V=?0:UXP?[A0%qU.Db0g&+tXF%aJFaGaBbE<h1*ga,12qiu@lu-km`5BorqN2?'K-Rn_id$jr&)Q%6eisJXjE@dGGAc^&kn3OBc-nK2\\%0R6F^ga%hmT%D(G7Z-f'=;Z37u\%3A9ZjUaZ@.i\OiS**p?29+TGJ>.B;I>f7Vb@\/[IQK(2@`m)jU8"%bl+()^\QZ#Xm?G<u=qG#BjHpXbr%,F$\OmP!L/AJ7fHh7\E(1f&K*B,9CA)''m3mi'J*KpQ,ag#tkpEm?glpRYFcEDAE>^tFIq>ANpq.n84(dI#oXdd17RG?+(Co:J8:%KYo@hmr'#A[QdS?Hb2hVrIJ_:gI8.0%oga//lHP9TN_&4O_XaqeZuZB<8/LnQ:4)tJ((ZTIXXW$j]`o+C"k?95N.^L0U20?l#"n-%IAk$ToAJ7!Qbh3laM],"^1_r@9m(#4E!RfG8Wm!iab;)SMZ"ZQ-IH,9f:R!4:UeO?m;i0jK+F]ep%UoJq),mNr8m2@p3*]HIl)Il%ZJBE42<//Y\\%fZ\c,%+P<tLuh:VD;:4Er+:?__-qpt_WMb\J;8`/"_n(aObFc#"9m-(e'TDt(8/igs.=Y7.Xhhq9c^%I7SdL<f,%q7S+Sc\QX:,o=[^9=dm\pB:4Pj=SCmjfMbq3U+$dI"cE,76Yn#k)8FNQ/gGT_$L$l$DXuk$sIbD#6dF!;E71B8Ll(J9J_,V>qscO%;ib-]<24@U(fQHSXkEbRN%7ujk^+cK&(rD@S82kR\&0eCZb0P]m7?]>(%%(1Lit32D44;2)Y%$n7I5K+9l1,=]%q5fG,M1+SVB=o%m??r.im!JC\,7s9j-os)V>U&tpadhsjDR?o6@Ba1c,bg"ranoT6(E[]Be0!to]@0%J*G_8N'<@Z^/\F6%^.uMHIX>E5[B>>_&a`[%rB(.\>a*/MnfEG9eqld65ib'/EEs^giV+1b[,X8e!f4M0+GK-s0o3K_+Js5@eH&(p'9L(n(PD4(;JAX,"Mq8K^hesS97MM87Hb:j%;[gV5!i24!Kc#X'HU+N?%)hTt+OhP=iqFK*Is.&U9bC7jR]CPiQr4tkEIpHPUdn7Od">e2,:H=N5r#VV'IWOGKNL#g>n^'G0ekiN%,9T`hTTo-UL_EZ/Telah64+uk"s?Z3JXB2C04M@W1<Vl9,:H:uW0Ho[MA(;49PO^L#sB]621jh@*g@4?:g4(f/#mV^Hit]]6pN3g%&Wk(1![O!7+;(:M8-fYi,!cNs'7T,B8`E`@:rQ!O3>"nl,U%oYd$DI<64Dn!<[BG_&B""X!5a3d@[0hB%1n`iWb7ebeIe=KUi8q>%JCB_s:5KF!RZbMo`;rXF(ogXFmK6<47*p7F#[ihB!u"9.QmD=>R$%HgmfM"69_:qFRWRI/Bb?l4Ui=2q#Yn;r3$C;6e!(Q,M2o@s%_'FG'BGTDFeH1.O<Y\;L"K0\>_?nI!S4\/9-T">4.eP51'-2X\i)bcH':RbH>#fDU<s/;qfo_I8:m4dBTfND-U_HYHNWD!d"_>J[%3([P_<Ea>Q5"XspkclK%o_!f1>5<f!#NMiN4B)'H]h@NS:m3c.(6bO'\IW6#_Ir$#1U:Ws5IO"j>^"=l?dUhCbPQSW%OJ8(BqD"T%c1`uf89%o%Tj5>CV<RI?!IS(2Q5u=PBp@LH>mA_dS:,e$HtSa:[Is:E4Y2GJo6H,>U:`.S(+OL<#VO0IiVhD<qR*'1;-!+gXf1L_%pR'Gis"Q)<\$G-88irn=@f!6:qU,QbPgFm8?M=08]e8:%_0Yk1i8oL-`B>ctlhg*Hg-$(MF=[9l[P0eKdXR=O'=sAkCD+5T)Ic3H%7"Xd[7oG1Fr\*.Q8R'Oe+^FM'1mW`",m\fkhJ:UXrK+7]9kjn(*>3<uYsd)>(A&J$UacUl9#'uj"aET$m*R+6%<7R]Xs!fc'%DA9%'&"QRmrsLM%u9?g;HhddM'>Mk_eqKJpO0qJbj.W=9iSoi:*4/)QNOIsS0Ts/;KtP9I%]hS8nLV>$k8gr_r!X(1GfXP.Ib&<l*nLC%JZ)@;gb+FE)]D6Opc;A5P]O3_[opINgtjYlip!'HHrmUpR[n_,j6m0nFHcZ26SCcRV6>iI#`f@O&k`1Ae(8"%RF/'ZO$:d"k36\o%NnHu/>g(n5ZGFS[K4EDjc)C<":cWY"d'O:W%Nl2q?8j;EAZY/nPT;j#`ORYA6r4o$"\h6^L\D(<b@iJ=$o=MUT;Hp6<hZmhV`r:g%,c@-S!)is(F"\/`:cVIm5cu0*9Ls2hG<(Wl>cL/oW&R:6*pQd\GE8[F0"&E22&=JB'=hI.9ZND,ep1LHHs)nN2JiH#XpLU+iS$5o%AMTnt2qF!/H&W9)<o_OE4*#dZm:W6,U)d7oVW\(uc+%P(#?@*:e(.>'Nk7CT18)j6@AV0[M$gb=g8G(<F8g1fEQBY"<Z.l^b`3#U%'dGMP)K?H3V2bcG'#OR,C\k?S1f\7cQHcpY[<2%aOZV5U/ekHa?nI+X#1'i$fk_O%\='p[TX4l`]Tpr8VW@mg!rYRUHtmc-_TGQF%j*X/!:]ZuJLE,moNn6%5L!B@olV(Si7GY!nZ0]glmB,u29:)P)!f1XJQ7>uobUhBF3+J\*$.6VB,69uM=o6W^FN_$EUW#QLVs`+_%!cLW<:o**EN`u(JE`\W<MD)'(:2(=`a$rR]n\SO/)qSdCQdg4'-u54<\>u?0@[N$.eQl'X7IjP^!NMjsPH^^WlF7n.Ut<PL*`\2V%1gpNP<j7\I*sJD5T&M7k`<K%IPfgLb"fk>WM(4>R?IQF&[Yf&>S^\r4h14fk:le('Dm,G"Z%Aiq#rSnB2Q9*TTt2TX77oU??'hk4%WQ,joaarca9ooJ8[4)@GJsWYTO4,&.C>2*d=K<t""cZSpSH@?()Sb:kO^M+m@m+^>iA=ZZ:/Ef>h+C53fo^7s%l+,@a!Z*H"V+LS%(s`S-UBH>%Boi@2UP&o:!F)oj9?#Ski@Kt!Y)4Qj[klT;i]n(n);mbWoa-DD<&*K*81agtHr5o[Kid'Mr4A:/nC"_WDnD$$C=Dln%]hKVDfBsI^Qmj-1W7QTgAZ?,?kT`qZ?'Gon9r".O0S(NU6<$D%)@1Q3Am7n48CPRT[VTo3N3Te-[Baljl#J0'=H5cKP[UraUmVm%%k3tW"iD[pq[2WpSl_G+;ZNkQ^g'6rnG-up1:r(`47&>KkK)0NR9=:')ZA?N8OrMMYd$u&S9_m*4mNb7j%Co%=)/@8G+G(>Bdai#q%=sd9Kh=&U2_a^)M5p%Y8<%kfu5prToZ^e6s)c[3RMMg00G]#fu@'(tU\Ac$-kUS&sZt/Q+>K(((<j?smd_oE9&MZ2"Jmr67?50@s%C*ZCooP1hsH3:!Z.T.9gr(`faNL.4YQAV'+kWi^rG[k<(o0WY>>f^>_.b(E%2mUg;;YukO[`DQ0TEKic.iF+n=4#]0S9:CAoY6Be%1D&tJ*7q5A0id$8$mX''N>41A`mShhNP/5jg`%\>/4Cm'ANRA%_KHR%^igWpb#I?NWH1uHpboSDg(ZoG:!+uuldsXca's65Q9'.W%b^_'M;]ipDWdQVqSbpsDp7#[8gim_:^$iaGK3q;oLSJLW4*N&1d`)--/o/f4G5*6`>RYBQQ<MiL.Q4E^BEmG#ea/0Pc"=7YA(;`7%5iMl,nT(7mkS?mpEeeO5,\*0_[8$d\g^$b;q\s$R)d#CPYRI78dH5#(Lk0X.J=V)&.onP"?H8V(@8%#;,D]j-6tS)QkKEN"nT)hG%H@brnGEOe;Y%V("q"MB+mYZY\J<Hh;dUJBHIHt9s6$;b`1it)YbFG?#;*\\aP,L<1!0jeilZstuq+c4WV)c*NWcf`rZ#kpeL>&+r%6kq.[Ya7PaV#dnQ3d&[sF;IY5O4%K@/-7u(h4t+iXV9_E._$KoMb868A6L6*S%IFhjDY_WLFL^GUu1=*8.Qr*7*%dhWeZaH0#]K!%6qQRX4M)^Z&s5bK@uO2FO4"<I9NtD9X5*P1#Y:LC`B[=[3gLMD"^0c[#4tLME>$$k+-jR%PdG/p6YQSc>7-.=jn;UsV,I=Q8u3S&%4'nn^P$gf6_lodk1fr5LC(;N)$mfW5o)WZA6edasn@005"Ef<:+A$UF%q'a'HS4J_S+S(Z,Q+1hJo:'mCRWl>XEc`F>?Xj"1AtoA%8_W%j#fO775!1$Bk;r#Fgcqp.5a6;2H(=JR#F@2'VtkVUV>6dC]IRd;QhqN;*/[hHc95D]Bgn7e-ZCKRR7jc'A!BN)KZ&t:e0YHJ%)83sKH`!f@)C`q>#qWt/$-I^'cO+=]aT6t+:?3A_.Xj2C@(W5%TuMO!Z-!294Z&,p_C"IJGg&Bc\Bl)lZW#j;7H=:eg6XHQP7Jul%1BOH]<1X'';scWFVlPk7Gu@BsK@;_&B74lMXsiYe0K4__$<UPR+'XeKE?PE8)p0a?E?RJUJ\MP6[DUXJ/1/1NF$)pUYd`<QlA:>K%pPXI'#VEX.b,]sD#C=uuD]dC7"0M6:QbQUKEY%E+!OXVS49c_N98$%4>?ZfU2XbFXT'gpG#kcrkGOnlTCuj$Zguoqd0oRoti0:\3%%j.FFpU[HaAEr2QiY2hi[R7Z):bl9Ner;,=X$\l7.6C_W`<qqQ;>9rY!BW6OEjhQ\r@s(Z_ITZ1VlAoaVSB>X<VR9dG)i[R2;`ZZ%E@(muI%>U8;1`T[WjZoEU`^r<-qt/qTA-eEPM`?ldK1XY9qaSm_tOH.:/ODR).s:F-n,nTGhZjAjsZ-Kk)XB"#"Dq7mTb2DX[[FJ%R"ui9-VC?i9m&k7d^"1@oiNKD?8B&V0.`cpNU+2LoknJ3;3EFZ-#'V"ZX:/BdhX`ARqg\9(*cBW@O)g90d8',AAlD8,"GM5[&>$K%Qij^DWeBUK<DbP+<LiN*ODYi!-p_MRH.$_Z%G0VSZ*]?J786_!"c,E4Q'UPW``/XGRQ*_=.a"$BeY=X+Q%2?*g6H(i/(@cg,5f&!%$<<>4`%X>lfsm*jj<2\a7bs1gIU<Q;^8;P!+@A:8M%XpaZ)RT]V1%LkJC`@Q/90;!V[WD/,O&l#8lcs*`q)CC4]OSl2^"`tq!8Zm%?(hXNDo+cg@o\.EV4CW#?A3!O3%`D1f.RGG'N(+e>Y?[FSA8/*lS&ND`3OMfr1]W1ROF$fgb4[V-gJDBo[f+\$hQ-5nG\Mpg@P-r%G-UUZ[)jgYi^N04*k#>Fn*D&Uiej2C.kN)>41%eWWlWb2rA!i]0eH8O/5o^9[^1/4)/FZSH(8K;%oE*&6-_QV(?Kt4;Gcpj$&%*`%1_\?g7IX[lf2G@!DJ`$mU+D`G"^%iWpid]Zi(W&:jH6fa>Z[4LA9B<85X-F?&5._">?C?oQ>9,f,+<:,0oaN>\mjK;*i$@pKk_M3%"#>Y*/;S0p`:W@RboUIgMeqXRDXpC5\g=4,\^AS42pFE<X?C/KFMJh%=?2`qREf:N7uJHWVkZ-A>1]9lRWdu%[QAC/Im/Bm^W<s0%XJZqZgoab*l4.ls[?J+``7C<9A>$6R42^3Z]_&C@HNYS%f(ubJ)4,2M#t;m#=I/-%SZ0Ua(FP(:j`?\"\>r`jU1%J%$C99OY.Gpj%$QtK'L)*Q)ji+0"]=4"bR4F<Td&()IY_I4ZZ$hBG:,-+0Q_%NA$V\u:+;D_u&m)RdM1RB1*2hc):ro+30u?E0`)-6&ZmaP!`"h=f%3/8'-%Sa")]l$g<YRY3C'9??rdO^L/G_kMKE(YnLXi@qlpk$MiguK/5;I_CJ$s5rE\?n8u,1In9=Pn9B6WBRKCF-+1NoQq0QIY[A%;U[[qkj/h5RlKYP-.\0q$?IpM\T&p\]E$AhU;L-BLb2'2C5EeVUi+Y;#B#'9kQ:2fFI_NbM7J.RKCF/R#n>[\cL\iFJ6^,WE($%8%j`s[bE>,Um.GplG!\!,_!sQ81jZ1[3auqEYTsDZ`ocLYgjf@hu8!IpqV<L/E5gW;8P+!U,[]$Ru'T(gkK%/V!qZ`ou>ks!(@t!`M%He>?9[/*TO(3)]=of:::eOR*BYu@Z`nDB,_;lTUQ8u=)\\GDTIWrU97GCs,K5p\5fd[D1kI>*VAJM9B:JT=&gJS.@"%m1f,,Bu+;%:Pef(HU>XUh\/*sUaIQ8ZmR7Lih#(2+^IBZTm`V9`<Y_c`Vc4Ebm,ob/)7]L^QDr]n."!,D<D1RV^lkJOY-79N&YDKg5]tpe((!'%_pppZpQWfn(9SOlZ4YY\%BQm@k2]bKU6CISd?5=\/RAuop/T+@\cs>He2a$Z>1]O0`nqF!H8YPbE>B`:aebZD\oDB)C$_?020=_0%X-rQ2-t7l1%K0F."FjR70s[REQF8t%@_HfZ!("2?"N=9[$GpGG5%r_jd3<8Li\V<-Pd,>AY6^q=`g@]7'P0e!jqL`^U5lR#XMUE`%/E.YiFjs/U8OXO#ZT+]t@=4W=KjfRpfWLtUY0ISh=4:uhBun@\j;ib&mbAq]BH!=EW&ffClJUB+MOK<hVGPcf71gMV/qHh=h,I6W%bEC)3c?bp`MG)4aR9.rgi16V%8:dI5.a?`rD;O6`j\`8!7(<'Dd8GUrUkZ9e)(E`Er[X3>gM!be]>ePW[a&(6+Ac:j#TTp>mR`8>%ZAu#2`r^k3=W0ERiZ'Bq\!i;'MRY4jVT7c-85I8\""c?Ck7fG#@U#A;eN2/E]^812&Q/U7djWqCMGEusZtS8V*[.i"D&(bY,on\g%fO,"%]a<:R/5=iaHLcoh_6BpFEJXl-S43p#aVka@Xs6Wm2M$s0bN>V!0PE_%@Q-jZ]kApZ*GQ%=hq=a,cGDW\mc?9E5o<GOMO2k$%ddaR[psuZ_\Eo1g/T@"b@LCi^@<3>"6>opo8nXZ5gY,O7GFY4XY1V)0;sgUChJttU!7k=HCF#dPc\TQ5^^KEpeo6^Rc:)-JKk9:*%XbAY]EVu8h1"R0]'BL-<lA6W?;Z*=#lC@S,[?pq?@6qMjbW_'AE*mYoUW,,"-nnb3E?2'>#sc9Hn[-6i#_i$s-I.T-Y1JmP_Gj_D%D8o">$[OCaeqD,koW7([*CKBZ>(H;KdAU57+1m7O3A)g,J;1u-+P<"6!Wu[nHY!O&S7RM[S@YMFknK/Y[@ocd3_m%5c0e#*O-V[W%3A_`o2hi=dS8234d>!dU+D]\W"*qh<lF>et0LrM.$p)at?][6.?9slZ2s#`M0Se/6MEmB6'^/bpDE6*qD&kab=&uHs`$rlr&Y9]d%+cL[;*EgNu-48XB?q`?WZY;rjOC#)h@1AW`j;4b.+XXMV=FBE%d*c;ZWekRcA9\rf_fa7n;P;G]`,(eTHs.W:Oui'8i-l2:Ro9Z/%%2*C_>0[RS6H9);nY.V"&kG7$f9Y0Q+tkMgCI@\8Y.U3+9qNlRZFNo@'[I!$#[3+t5`p8ACj^,f?a_49aqVd0[Ou\J"jpn\rC#Kr%]N/Rp8)7E35<:OM#b5V2'<[.KVe"Kr>?fr(gTgh[Kl:[\J9:r+`gVdl2dubAa_b_pY6kkjkU%?j0d*,\%#1!u"r8Vd&m[iE*JF/s%gpT?53&.*X3auU#WX:ue2&,n(.itMr*A?(a9#M:#8F">.g.b:-H<!=RnXZLrZHVPES>)fET;#i(=SPZK1;^W=2@HDjh64,\dgs'F%=+3SLd=H?r,%71u&J49p(0f3`kMDm.YkOt+B^B.UBigA]1=f?2"L_@<["Y@92.Nn7/-LVVK(p@aZ\Sit5m;AK*F!S"/`MJ@`@Z\m%&`AUqL>KM)l<3;O'X0+98HNWROlTbCj&A<uokEEJo+b@Z@Cho[e^/D[$T9-7R2;NpV*s'GSfMje9oH[i/U_PCj'1C:a,M_d2gdSg%K4Xk5[V2D3Bb!.Apr*Tt,fOaQ-^$3-6<9Z&X.YGsWE40ZTPG0ToJ81o-BW.Kg3&*C1@-OW$F38CYfkI6!JA=0n9mm*N,tD7$XuEB%OQJquMg:IeR[5?u>(n;Ib-`.E6U>>m_C*8s08qb'`EeBI)7D8uNei7@*l&1&aZ0h.C>HH&/WK_[+gF"fP\@APXI)CD:qrA9Not@+%5o/%RTa,fW,3Kt=gAb/#Lm?onAigYf"dTBDnHpgAlc!`Bg;W;lnI)Sa_UVg0K*oYuf!/^]=W/R)1VfRrdu&'?_-JU$k5bBuo#c:a%*B+&1#M;gL#'1JAWPtR'l6'&.+fa'[+9D3`1gG^6T[c*n&O<b/WcBRk:M&l<<4#q3Hj!CU6Hrg<ef&+1&flXr;LE(+qulB+C`;s[%.ZAXAlmGcb?IPmGJBaU<;*Uah0ec+8JkILcV/Cm3,Dg%lJMr:0Wd1?r'SX%'Fj=9T*<k/h*1RsM?J)=,W2!1!dU2s+\tULdaA8bf%XqO##^njmm!H2i7.+Dpg7NDY6FAj,u'IlXJ)g_pb'-e9>$D7_9$%!$3.V,"#;lF+s'^@-s1]aGE!qo=LFmLR,Y_&s&$4\#.9K\"I%>;/1H@7hpjMj4J^hXXiu"_,1>6Js@jdrak+<*6%HeQI^</^=F_STj'G<%s4kFVj8DMVWsn#-UmJ!P?DD>2=nTP,(MFJeKk0L%l$8%.'6Kn!M@:8&9jhbE)<UM5\#HfV5g3O1#QRB?-lu?TkR>V3"4Hkid,_-1#TQrgo/7i]@IdJg!KG&N!#3_J3?D&,p!.HV2,BF>^k<"%SXRFb(gMYYS-HM4mKEt!lnZ'eSZcLhTttPD.kX36CZt+?6kllKJ-75eln[(0((,%!lA#.CE#Ir0X9`teYdN3X"`b2!8:Gb6^^rdq%6XA-6#4+/(Pe*lQHj11&p)1)9X^mb!>Hf?-!IOLT+S$?h7LX<Rh;^rd/D4O3H/gZ,$r3Z-Y^eh?Cc3(-_CgI3-+aR\l=ud3"kH3j%ZHl>j9!D6lTk_]C(T2hmeCiJg^d/IsH,+-5F[9(BVa3@Tj>;B94?EqK!VAa.fP*SS\i0*t>XHtEoc!=3$M>>$W!I=B_eZ1[M2lfi%@!6&1CT&sig":)=Z,>"if78QuB-)o]J?plN3qaJ*F+(#oK6sB(;t_-""P>>M)Xt9de7l_D\u&K2Tl+SNCudJ349P;Li&*IpL;"D+%U#Grl_/!`Z4DaO+J?5ikCV\B43\ThI86=1tfL^7NG4hHYcre`/Ol,);5m*#%d'+Z1q$hFj8?%%?p9`@>r<>[akWBsa%?8S/Z/:),%;7]f19:Tpp_ZbAs%9.,<SjSD<-!D>0gL;]P>s*lX]*Qr,BJ!G=4D;@9Y4fam*/CsJF'foB(<0aaN^J^.6PDNk/J\@:FW=RXO[%hb%Zqq2iFr]5)FM'RC/[j\?l8Z.gm+84)2FLbkaAs;dpQg$"3"A2*P9]'HTHZl'"qV5FKDYpDF"8<,p^QXINm/?c!?$f!4U6a%2g+II%[)garkMW"A'8YfO?<0ee3B6GpVGl*?jUKu*3k,r@W]G;D>..&BFhes9,'G!&r?L3n_=m.hI0Yq$:7VX&7IEE.d[''e3Y)\\TMakQ%RlmOl`Ha^@;lTB8=OM3K4CG@*TEM"<d"8Vc!8.*MPj1@rb)8#u*jAAF0%>/[YZb'']Oc&[fQh-;g0)ST",8HmXW$%`N@@1I:@K;C%_j)M9Tj]<<]S@gP@+]lmDe)?LmK5FHFQu(IE/=Hl3rB4ZAkM_<^`R&UW?tI?E9u<&e'71&Huup0`Qjt:KgU=#0psP/p+CuG]!5US%DL6=!=(?&(\BEoLd"4F\9JrKF=0Bq5>1lf+=X?#X(2?t5Qmcf46iW4aBE%4KL2<BMcgTMc0C\T]+>;BC.:=9d&OZGVoZ%,pk)CWB%-3=[r?)[9`.@:I%#fMC\;M]HccGG&7$Mg6MO:;%GE-W?VX/89o'P&]h02Eq09%fFP,0NpM1/_M9e_U$)9bqoCiEr>cK)`LAi=L2J%a>Z%+(-WDH!;qFc'NqUo,L$oFpeQM%ZM5)CjZK5Y,rtJ_b.hq+'#W^4L?:/!cZ9//L@YQA&K141XXZ=4pUq,W1&QSpB6[3Q8uS'X%H0%M,*"bT#""BTNQlsKr0A:mG8klAZ$P5TBKJ!+Y9B84/F=$aTs,^+UBW!R>;=C;F&LF6RfJ%d=SMLu@P&"[u#GLAfl70ja]lR["%]&6Y(/no@W#kYUAOGIjVO4;?m</0fW,KTAPco8*A$30RLZ5OGR[6r"cYAA3DL$ii[<LA(r&[`3pKRCeUr?K1_[&X6<>qBI8O5@j9%<<3]X6CV6U2lSC=XUWFfVqa[.#-j%Nk`p3%;#t6h90@G1'>8dJZ%N:cpY+''%GW->"TOn2Bu%n,QcA#c,W,'NnkVF;I=^t3OPCOI%Hh3k5+-t$o+/0^9#bYf?^G7pF%U".q)hu#++*5LbC&fT?(mOUAha&\53EEd,:,7(PjGu8W+(m<QQ3Kt]?A$;'KA/aEhe2QRjlU<"%Z.rZe(9i77$(-pnN:"-obatNM+"W+Yn)3!PJG@:%'64R%$ACq;%"I-W^Ddu(i!lp,S=%If]$ts4TJ[DsB4MAmS2;cNehie:`@3B7%g-]er?1-oA9=QOum:tC<*%ckF`3Eo39i3`LZbbm!1inZ`;!3J=]NBuX97l<*C2@O^GU9PjJdf)&3/<@R.uHqrk<+Ao&fE]*i6t`^%KP1AC#V?KS6,OeBW]8UoVfWN-!.$21cF,#0Ok6%<,NW?KPu;XkY:s($DTKMd\I-d)[d_'H/+(C]>7dW!b>X]ieXBeUUa\/M/IaL)%8&o(=SLdsRUQfGo8m.-b7rBs<iMa;\NQDV_^S"S?AX+#:>'e#2"An#)^RE6@5U0)qMmA&5eV:Bjpo;1\FMk63Ekkc$/Qu"V<CuT6%$'Q@PWDRnX+,@%&>#?e1#V.*&X+FnBRT[L19<tH_f!7B\1"O!hNP3dH?n"h*Y\4&)CT',FQPB-o,FFY(h\NK@:g=IO$na-,6ft<m%*e$agCoO6`&e@@1A/$cOe[usL+e4*uh^XB8WXZ(nX+6mDMG=<`Xb+o9&gqN2a;UtL<Jjg'%'9RbQ8!.j?ss@WH20iRN).K*!V<F&%<5>G4N!^E08j]ng8kft9"m/TA'eig:i=oI@jrpC3rL4siEl$+c6:$-b2s7i*S)4L_):q%QT`S*BFpE/Z'[9e("EWf^UFqAGBmK8I%pMF;u`pt<"a&A1dZo#AR9Y[n,%?%dgMG=>W2702&_3P(aQB)Rl:=GFbofkJCWh`'"R]baS`KGOW/R@&+E#`9%HOhhCn(t:EOqR/_%@OOc<<jcMY!-?_)9LIAq8Q\@7pg!>(#OiV)c>"J:_Zrj['GM1uqi?[ZGqrP:9Z84(X"?>rM*kiHg:EO#]MqoL^UK&TooA(`$noY"%^j\VWY=_N['3\DC0eFH.g8Bp&/Tkki'FbXN-&7@+V`Rcbct[BNF;1MO7?6:YdQslgBm144kp%Q'Z(,qV5:64:bK8cCOBN2'ZR1sr%:t$"H$.W@;'f;R!FLipc0W/:jpWKJFQF*ZN0Y+(RDfkR-"iEq6jBZgFIl;0j0B2M37A'pA_M4"p+)d_b.lhI*f.,Vr*nRXugB=Ro%dO]`4X$mkB/&W%./PUV&A__9#L[EgBns2*LL"RU^'3"?6[B0<=(-kVbG@Hu,:0jd:Y0p,YD2D97[UTs^[Y66<e&+*`k@h91jIOZ_%>60Z47#"en'KQ7C=;0'6AF-eT>F[`hHln.$KXkOVicL%n@eqML_I[Un=@_D2m4&HG-ER]9D%L<Q$GE3R`sXN6[2bN)Tbpm;@*9pk%1`FgnbA':B/u!V`9d))d:u@IP&GaT:77lJ3f">&62;tu0j^O@qIr:FNbms"c.@RT3"LI?n>iMXj$Fdl<n`-L@S1oS1>)/hkDM22:%5ps+N]k]/LQ'V?BMNeUf$%o?gGX<GZ),*:cnaRo\>W)l`e\SPdY)Z$TUgh0>j`&t1:+o)LC1>',LS:Y'RY%c`]]=<4'>5j$1o8WL%Qckhlm7)uFp=uC@e4NZDM^7B6[t$Q9jF!RFjXh/$l/7>93Bj7pW:`nO^9FKFbIK_pD7HI!.uKiGkY)'BY)!n0d@qUaLB'UC(U_c%%EB73uNZDTg&8bBeOFs5<g<.iY,4,r>YbaB/!fV::<'e\b=ST]Ma+i)qV`?M'>/"iQc>\B;h-dXjA.u/hC$j&^KI"bApSPhAqM+<N%#]?XkmKr(HgQq+*,L4`glWR^/(LH3&%q'9'Stfb%"L\OUb8e(tYCg7t*J'7dKhP@f:IK9"U`dXZDN3;\,qfj1I$$%G#4CG#aX6DR%F&YT48R(IA<M;<"\s7UeS$X?BYDh!M7(k)'P-1btJB)Ite'?o%BXVmK+AWoLF!3f,6fTAjA&G;VU'7U?egai;_-g6Ld-(!Q(+jY+%U/oZn?"L-qQ=1`RM\]pGE6:%rQ=0kf6jm$qhSl2mbahVYU;25YU(rgWCXH"\VX;D&FK_]^q1;,NQ+Ws:Os*ta;9+Q/lQlo^bln_@%*dePA9oH>gZQbKt%_WY)dO?Q6^i!i#Kk"pF#=WaaYMlC7SrQfkXJk\2ObQE&3^a*d-&?O\$,@LK$q8<X!^sS1O3Yh)c#r6:G=0E3%9/aruV]0Up`Lt!^W4^T?AXomhi@O!j3Lc*Cd2CEY,,,D\%H$u4&(l+W-'V_\;l-EA4F1^J*n_6O)#-qHZM*2I,]CDL4&="b]I(Ic%%XmQd9uhU.]GX&J3'6fo>+T_$Lbf4$j!@bSY[N`iV*-Wudb"ZOYlE@;'8Y#%_HS7,=&Vhr*,Tu!d=j_M%[teM%HjluNpl.07c4DY%k<Mc`@mm]U<JGSur'd`F+cE?O\13HBjCiBt"dXkGMICN:^;>46?rk)gk3Iq6=2?AL!l9tY!fO$-3W$Z6<J@<R&>%X$1RQsfNiE-_%\>)c</H\L2qc7EM)?<KLFT-A@o$!&dq1>Uuq0_NqUHif`W6@[S>1M&]XGZbeFa:fi&+C9h+ZC=EL'$1M/9"8%&dA6sA*g_'.o,m-%W_/gb6k84dZOi0-bUlPJ75RO+,rCNXq+1e7%2atI=!>E0:W8M+2>,oX9JY*[oi(B+6cDtgQJ7V$5S,B<nl=/g%q`h%157OVK>G3d%)%b#.Bqoc,ogA=m*"m-L%RVKt&FD>n6.9qK:(K?5BH#4J6kAFg4,TdVq-lcmHhlroRYo%aj#mI0GgN_%BS19c2"=++#J6lk7?m:7%bBjYL=]o`-+C(]M8iDq/')Fk5A7Jb7XOV733S9#oToqBpe,GbZ\@@@?Z1$1YU@=J+'KmGZL?d0D&]HPX7NF)-DoHt=85Ibi&r^A3%nbi;5(kZq=mCM*D">/;T8o`>tFfMo)3t_+NGke#BkQHfGDt3ahW3))k\nE\jHE#JITb+SsiH\GS>)$Wp,HW7J)PXWI-3UH9OrS0f%17Ee6aHLQ_F_fVYX(acOON1E!fkSG(>c!o9TmJ@EDt<gqp"#;bkr3RNn;sNB>6G:B9c<(5R;nO)Ym[.MX4S_X.J9-e]1V2JgIptk%("#m!n#jdk/?*\lhVg#rDcc:E9%TqDQSQ,99.IJ^Qb;:BqfP36)jEIkl&EcI]624#0M/Gph`.=ZpB@/50P[LQ$9QH"F@QjY/X&pt%DmfEPnd]i)KMoNVn#*/[Dt+k3*:o&+;MfH04e+r=U?$)7S8E"/)*Sr<8qqe2L_u=A7nnk+C].I.TsoW^G"MtVG;0puEaMKMg=%u-%h^ZDX0d_=DS'j9KopBRF;/nN`c,6QM9:5A7>rFR.N,:"fj05RnBS3P:=d>#!^G4fVjS"su0@$8;<kQu'CF;MROu>fM1/N1*=r=^0%0Mb`Jj+ONV-'.;FSW]l/JWGc*M!3L^j"#t<e]MK)a]9qjYEg&CM.qUm9(-M\aji@e@92s.o!N3)@i8o0HT93Y5gC^P7!*`@n)V2-%UXB3L7.6C9hUt4M'Tjs9e6UOjO_2JmGeo^O_8:@mrmXD_j@/U\/!m*#b(-[Sja1gda@EH[Y5D$f;IZlZhnb]C=#T\2Mg,4IR)(jl%Ol_MHU+CGEXc<bJ/E.KLg*1Q3l5%b*#Eh@8E2[45?drt[">T4&T32#M2)k`+'DMJk)<WOI=Ne3Ja_,(aW@MAu?kINZdWS9r($#Gd%5&^F!>Y0r=Jne\$Zn^P/_S`WF'[>QEWu+>AE&4^u*/P#r@4otN)!&=2Z##l8r[;L(6)6]KCYNWc@Vf%g'XVR+;B6T@]]S.sLS?bI%LdA+$BP:DR6//>;CW(<a@M,RJ9,BPVHc['.8^g*k>Mc1+HmbqAh\#rB<);!e6_.Vb6P5T`C;H.7LQX<KOi]'k.(NQBCYr@:FjuJm%[J"QjV@tc*-E%&bDL+/@g;I)e^b4!1@Ykg#%$-E,9/SIj$Y1i4H/KGa\qGsLKJ^=XhcSTI;AS-_+jJTcbR90PQF>._*!0,_ZtZZK%$T0q]^oJs!SJbQLRdl04A1;Jk.Dd&29UHUi.A0j)PliN_,s!rN/FWJab?M2*K8AP^]sZhT/L?s'K'`TkT2TtrLaFf:50_!QBh;;*%)eeo5p?OPDFh=?#]],2HA?@<I)eKb%3@gmTFG1]'@FVZOKKV=q9D2geFDQEq(,oOSP;u0*JZZcD,%&L-R69+GQ>V^4G`O66j]u>Q%]CK`VYVCC_,^h>/]L<od80O0mo!Skm2HeqDb`>SgP#cHGU#:Z5FT+^%P6<4%nhH\e26)DkGGms#YNfW"i\Dfe)e2SmE-1Tsk'E_V%d=o>*gsrYqMc;2enQkhuK(!hI0oD2k.npCDd]=G*D#@W[B#GKFkB)7%n*0`<gg>OO@D\0;TYn"lE.n[-/(1)0(0]FkcsdXp_J$3#%Ch6,L>_Nr)V&bpW#&.!FHosE5'>([JdU_$(nXN=B3%nMH$l<$8TT^do;PHF]&j):ji2@#^qWtj$\s$hLXb.7^^Q!0#5VsQ_m^$@*%XS<?\%_!rtQDEXhWuCu>7t@]g[E%9"N)=`U*QQHEhed';(e/+7GYJ"E(o+sTJo,7_e#@&)Zu%?i\E'O[\FqU67KnFro&u[S*'dPH%%@p>CcmE.cWBQ)1BcD<oHtP7DKinNe^b@:C_8Z'BEbp5OIPL".55Bh#3!_f;Apk/Uf6-2\H3`DU&aCll(#4,bEE$25,alqV*,,Nt%?bQFt-t;Z<le'$SV8^8%USUaYP$\JXP@aQEO0V8#V&snijNje:`60j=5P)I_fq,kJ--2Q,hUL29/kJ[2B($<peT%.3nCtH*QuRf-%OX(p15kf1PU&(dsl$p]mYI7-h9C((P%-PLZegfJsJ#F7/fqRsI9!TZ)<C(Dd2QqcW[X$dgS0cDS$K_,a($g:&9nNiB,kF9p4*4o.%/[(FUO$?SPP:q%WS3SdIRQmp)<_M,dkfQ<i1eh]&&OTijP$Gp\W"97CGX=k!<\\,gNJ\kkf@WK"k`hVDU8E3n"[g$/rL0toR&">_%VD:.WAT>['+;%d3ioP*\(eL'.[:7:T*n0,+BppDO0_?mBmpg@V[$,3mMS0YZlNV?)o,n@<)(`KtU38GsK&V`iWSL:t4SaT(?_(MY%Mef:T:=HQ\.-\E/&U-;?d=.uAL.^?s:jS_a5]OfOe@t*SKR,r3X%^8Wj5-\.WG.s%d^f3:Nn`"",Rc+,qaeIDBj5=:;k.i7e@*j`%:VYiOf;I5dEAb-U29dpWWmGC!gmAGDNN"mlMVfRS)H3]039+ag@sSt8?VpB0doSMD'Z:>Kdr_gk.@['8mc*21+EU_Pr379:)Q0IC%i_hX/NFQNm5=XpRXDp'k.96lU)YD!*Y*k0HVYPdI#k*[I1:SinW`?1W5l#gH<D9e1MDME5MQ*I%rJI@WT:VFiePn9R1d?pl(&HpR%%.s[s@]DDBMVfRS`)Ne139+bRR!KSr?W$H1UQmsqT\li:Qd9U5>P4/+$%+ZW%`C2`rdG*LICS*3:t,Eh[$W-+hXcA>b)0N?KgTT(%<]%:+XXCubZ2RVYS0lj</!7B4UDfRr0;$,hC=OVLKSRlI,(,VEk<3t#ibJ60l@Nrg+gb73Jg$SpD%h#a;CR`+kucfB8Z5#G?,>,Y%;^Lua!L(+7aRGI5]C9A5M+pS5?kgF-pQ)/0>@e?"kln%0hiN;NjPZu:QB'X3l?@U;1h#I5PdlZ3jj9!kF<JEV6Ok/t4WJVFBrq63%dmc"4`"=VE6aMfIEOpbI%Dr;eH'X1[F@OWLiT@?Rn+>rp17.]l+cNpCQpQ"X+Wus;aC3^@R6kHk%%Y'C,m`MMNia(WFm24!4Pq;b%X,)C)0n[[qan-/c>8p+"GS$M-Ua/g=@i&'/&Th$9_O)R:YTX&Q!sK#CGu2Ke'R&9N>XT]lNL?/3XS!,C0upDoJMW9F'MNH0AfB\D%`W[qHpQu8HJ;Hi+mm804A0VEn$(MQ_Y_bheIU\TE6jc]2eOj5MSu&aoZ"tV8[lL(^M,OGS@1e8hnLd<"d'aoG&Z$0UDd=NnW:kuL%+I!KmL!l4GaI+H1:V!=-,St(VCSn"c0k9HE%VALNes_C/8'N2T*&4(^3(a`2N`nfG3,i5X3$_&(Mjd#E?"aa7)mtIn\u7biH@>hn%6P_T/>E)4:o*g9e3&+/]^(D\RO=oL380H<9DU*+Q<j/aTL8=ssq^$R.o):U<.=>t\MK`-ekt@\2jqt.TTELgO@6$H$APTZsi>A4i%_C4b%8hdNWR92^683;uq"MGWM7*r.:>6t(CkDWW$bG-ELBM2B**nEo?2D.eZ.On4lU:P()KpnfKV<um#FMK9mPHV3B'Ff>bpO_o)%/o%PdVPr\L4uTT^R:-5!`SD]S,RfT-$,[rle-0*J,&4';<!e-(@$IjQ)beEK<$ao`eUN4FCNm"2RIr.eX6_3H3?2Pq]^2]oW#e/4%'n=/`oJ5a%%9M4Yb%s&Wb'>EC]8_OS'+YIco7@&0chN(>0;>-`7c>;R'q+^aX.ZmF4g8^@e!O,]]j>ekU`*.\>2\qRbBA0U$X<0<%Fou4;X7MhqSg>tD\*O@30eqrDI2D6<H;\(6@\\V5HWW.[H]s4P,"bul`h=W'gfB>3,k-DUcfHAe4?Z+5d"E6l[T)?#(/9U9>i2de%K&5M527CKE"_g:3j:<FY#^T."m<U`K+U5fXE.FUjKZpl+@82Q/R^-"'9i.Km7I84bEjGHe\rX+_5W:GZb]MQc/Q]g$hsY0gKe^c@%$fg>TR[0578Z)(r6P)+8#A'.s>KS?9/W*Xu2q*;7?:iOtP]X'"F@g\:/&ER2V2^kS8I4_P9HX^a]Xp`IqNhds73IL@RAk/a]l!jp%5FQ[8,nUU:/u<8[7H[g"&eH_G9BfpH0i9h?<RBPq<pr]#VRs"YUiW/-,SW4!EE)3g&djjj@hel,;M>&2E"a"o[Sl#t!JrD53FA[f%jH@uiGr"Woiq/4RkI"1Gh/JgIeYf?<=q?t"e6t8=W;*M58iuc]gfS%Y&Wq0*lY[?k3g-r'?s6OHr^JGYA;/<r@k0k,PKlNne7'O9%fTVYf!^([!YEROqn\t^^H:OP1/*S,'`q-4hrQ:t/>?!<+\=^cD=+cJuP"(!*#+%3GeDd]4Zn1Xr>^:lO8G]?J&i00c1HW.n;cmig%a%ju&4$!tt@X$ErTb++(2%V'fN/ISMRTZN'druS"RZD0Z^SEI<JR2C$=5cReRKTPCT;M@K7PFZ2Z7r?0Qn<aXkceJ3;3d-]fh70C%Qo'0f[]=b%kc]@;.TT8DW5VM(9#CY&!tpjXp;Ip"7KNBO;G+e+S\+a(O56/$.`N^j8a$a?7-?f?9Q5d8N+f4PPW+[<PH[^A*d1#/%6M&a%Ll,:Aqaip`L+%I@2uOuWB6eR'h9c+daX^X/<m[\%Q/N)cC-"142t,aTi<8sV8DsX&D2F10;^Buj%\C&N)NcLP2G!=E%HcKc%^IuHsSag]?<@(?64hW`g3=7X<2_1DsDagC/T=9PnM4fbJE$JE>;P[u0-C,`h>YReV?I\ln@bhli.'!*?^F#kBpT_Af$S@l`UXC^/%E8Q@:JU%9_Lgt;+#=3NnZuh@'bt$=CmXgnr=m0Pr&@On`L9?d1;49IM`5\(9bG'AqE)9$a.t_,s>uDQ`nZYn/*2[5R0%`@'P.Fbc%Ti,W2/>!.oFhss33j&k!L3C9`-"";6FhrUZBN6[\.Tk'`P,cmZ]tPsUr[@M@TpAKSK(#86$9EX2<P]r2Xl??gd2r%LE)l,MbYkKn%!tj6>Xp\hb$==U>#Z68d37ZQ_$"&NTHdk*a+pp?AWM>I#7743)aNZW/DJ%!P?21W!+t[&"747oXG--en,IVu%""pi$k_bGA0JjT#%H&db?Or;!)Z)!pnPsj!YKWU\P5B,'WY+k//,.Oik[%$ZL&NHuZJuQc`?pre&C-#Gt#C>n0>BD>!G4tdM")t;0<V+bB#`:<XY73qM%PtWCs6,LH^GmHVahIK"Oi6.J^[PQkI$>Bn0LJ74E5B+D*@q0sq6XJ@n5HnLlW0JHhBOZ_SCmD;&L*0=';1;X61aup`+;UZWaq+4N%AASnh,,'r5;Xr9k_N:dpMd)Pl[@uh-@0l(If3MKi#VJ(b<'Hb:mTp7uJ;?'C?&aGMk!F3XiF!k"%T47+$Ea+nY'*Koal!@RU5Y.W%/2>=>"Cf7b:/V'd[',fKA8;nsLYZA2++)793cV[)2$`JaOlN;!:,QjSBdo2c=#X-,M\o3*W;)gIP.^B]69e_)!nXD*MLEl&@A-7"%^;ghLE#bC&LlblE+!morSUa+t%.(K<PoEY&Mf%F`+bq`Y2^io6Ad=>l-p9ZUlibWE*9CR;Fs(+^@g<r:T+NY'r4n_LA\nrt?YMVe%E8j7Nq*@M6,lF=a"[,(h4@AN3JaG[I_@N.n`2BUMI)nZbPog9X0U;.fJp"-U]9U2CbdCJPq15K#QlW!=37aiJH'cE-9LY;-)@k!O%m>&2'R?T3B<e(H&;4#q$NCdH"\G58q/BXd+]W,g0Qaq!+^9!mn'IkRn1(5,IWLQ`LJI>.#qP3)_5Of&,p'pESJG1AE`*/0j`SN)_%W>LX0X8"_r-Ef$/^Kh1U4f2^-%'9go'p!(*E'X]DMN.]>(T]huXQ,4Das(F!NMXc#%'t>I14IV)gr)mZ@9T'a,Ih@fNUR5fkfs\m%!N2f<NA:Ni3OB)+E-=TQ.MF?C"`KV3Q&K:u"L;eoh7<Y7O<#N=+="ip9HY9DR6]noB*-*06k[R%;C91uZCV@[T?.^#JIF2C!nh+U%$"U@g9W0JI]*q!V[H@UWAZ@BF!j2a.4;SpML0M0<]8'&pMo(#ocO0,JJ%f&Mh(I<gbOqnH52]s,jPpd(kLXX;U#RdRgY:o#hldeS%fn[=LDn]N+bNP_fae*4(Qh.i>m9b;sqXF+PeRJ0"p>PW)eb*[N+>C7Ca`3%n%,nG4.WGfM>lo$P0[]Q3Qe@-ikDm("0=0&]Y#tFf%#]qp2jP=%\Vt8HUnW/KNqLUE]H1L-2md&-bG(.'YXBf[J\MmYU21'Z.F1`CgH>HdCaHPklo?h4=hk/]=hu>`u5+CBS-MILfF%dT!%E@HD6Fe,0C"":?^W!^VG"K7OR.=p[_iJR1[L?9:7$pK+5lXC.B,0[)[!A+=A,pIXh?n8U90eSIM_CpVD*#rAcKKfR3*Vk0nBRQR4%n%glT=Ft:2bAH5HGoU'f.7]PiNl7E6Eq5iHF3)OK)?6\+?rug=A9GACch&S$;@1UEJrDnHcG,Fupmlt?D*ir)r[%ZbCI$Wp/DQH2%eoapqUVE'L%E3ZLRr@2C+p,ZoYCn#[gM@Zb[uRE+6?+>D>^RG-qW*jbl;E/sc\T?Hi,uH?\Ok/f.?UD>oG?9XqNV[D08pSpP@:%7%ZqUBD/K^GRa]HZFdf9Fn07]M(a9o.qIduS!d2u^KDlF`EL.6X`s-$NEW6$;XJHLqslg<j"rnIPjnkkt8p[)rSEss!A0MC7Eak'A>%K=HYW"ftLdCKJ\D/QSps[fSFu([5>)#j:$pN=kW?>T5-Ar?qpA"H:[^f^Rl+/.*265/1AS<hmcaHZ.a@.CiH<:L4,8$,Yn=+E6sh%I^tuPm_q/IAIp_#f)]o%*K,AB[_kNfT-%<+ROtaFAUrn-rK2ul;0%+>1C^K7>Gp5G,DS_D&!uTh,l%01F+jHEU[-_u.3`)OGR,3o%`W21DG'WW?k,@&:9%g)F(WU,$:sQLP^NA&No!jVc9Nc!]<p.[!!n8mTlc&QG'K_`ZW+9?8@Am^^^5)";<p8^T7*GDVApnqE90Ft?%rU&UVq5_b[Ju#W8nU,ep?*#*_c6Pc9icm@.).F:MZS.&G":L[]IlUl<N^FAo'8$"b`?Xro(H!C`s0e@@;"S\=+Z/0IM.85m@k3XD%2qoF:;`Eo=[bb&VA$Yj;!tcI.c>cNqh>kE\,`M#eC_D,LN;]]B,P(RRCD&Ho=1u'M$mb'Mdh+Rf,q:Ydahf?&nEJ'X?[hP@km5ZQ%e$#WXoCZ&4FNq(Rk-DEUVH>7D/%5f-9lg_O+WO9*hYU8"o-(:0\apABIsT/G-%NJpiD%UiSpu7_@^?-)s%eduU0ch#j?i0KF)cE3%=PqEd\+At"Y<UN\kN:fAGl\.o^AWNM]rX^G5$Q64UF4[b94t$7:[;I3:,X&XF>^gY_b!=]DQYq-4fJ0kH,E3J1&CB<=7DEslfFLt%.S72'XL=Yi9BVgn3]ag`h)MIr`_#Id^D8tkNXa"m*i[/Kp#b7nPNgJqmH3j5+R&B.Z^Nu)mDWhF^3"bV!U`G/oBXA=FL/Wk>ES*p%+A+U9DOiY+F$8D5eed5U17+=;>"LO_gjFJG@PcnJNa1Bu;RrgCWDi\%7YRW(DK-rc/,$`<K&&&TmHP$5^3_"t7)6L/&HVXCH3.>1%D+bD=Z8eDY^R<tAO80X#hc&^E0"0Xg7UId^],dGK/oTo+QE0-7pV-S3h/p9>51qRN-Vf9.&O[^%F)O5ng:iMADbbsjl,T/)'8^Rp%I+7)/*U3f(2m.Y@AEUJXXVTYE[`_aqF\9SgH#pZfJ,bpXb5&pg76W2M1&CAMlfH+JEWKI[IPlEa8i#,HSt8'nhElE,eYB:b^;N&V%iRq]5jlREs:ZOXogal;]qH@k;%udJA$/8VWs06j/G!bSR69MMM=Scs.SU^(m5YUO?g>?2<eh6=lr-/&:[8^o5TiO#Lrls6AfTUg7%^A3[qfX5?g^\N<r!9^gDk6j5Kh<[%G9W\&@`*P$5kEer%rcb%.S,%4fGC&]Q!Z'SoktNQT%T;lYBBu%j?"#\,gf$g='[e'uc#MNs%TIsP(=-m.A:%I6iH2BZ\`S\$K?7]ee1Ij9T,KWg#g?1tENO\HuKlTs0f:2FsP2lD@S4S5Ck=;_F(Ar@l[D,'VgM+bO>aLLhk#dh!%h>5UL@NU$ipX3P"q4ZUKe[r?'\_UNhO&FI$LuT$Cr(_tAk2j(%F89rir/YUKGM<+uji.6*[7D$X^:E!)/1-iJRP"Kma]7"0#TIO/%3S?pPpO<En)KJ=XfB*0n.$AqWo%i2uCHT*V#cG5:-Ee6/=0MX)Nn'igBYb4\;d8#S^,g\S]Y&[kGGp[hqnO-G.>E9$H*Oo&A+KHT%jfQfSr9-#m-/g4,rZ37ERPl9PrqWn>jmqhSoPANR=kuY+:k,d)k*#Z/V_]djY"*+T"D4bP>FoB:*CVb>Q'Xs6BmmG"H0o5iBkf=O%9seK'jS7a&pA44NSijQU$eluqI(k&P2h/4P4l'?Rc"tt+Q_+-NqK=lfYEj6D-(IWa#k"UKmEP<UB#Qse/hatgL@4k/R(^ZR_+b+]%":%5bWTOpS2[K/sp&)\QhV%0:m+M;GEO(&$>20>l$17o)Hg1<?\bO_^`GBg@4'u?n!]"&A;si=:CN0l+#nEj(IXO?)Ds)T;9`)K5%2\T5a%^Y#KY2HAS=+V92qVA:B#7"YQSf#sX#[SN(r+rdoCa8a8,YJ7ZAE7(D,@lJc&fE.`_X&K_'oQb->+F`h+#F_q"+WlQ8kLn:%o:@GFI!N%p.G65le&?&ZFb\_SlBFYd@E,t4:ZcRS:A\kY^Pt_E-b-0mS4CKAS!-XomT(jg5[QMk:9NF)?+#kdC1hU3]3;?RUYEb3%rH4_qO>jZ'bo7ZrMEMF<V&r%qd0Gr:ebqYrf`J33h^jT0?d73GS(FfD;6Odf:5u`c`S2$7!8sUDqf%-m:KR/\!h>;Jc9ZkM3PJ\R%/:!'R$=ZN=1``P3XG7fh_j?kY\2k/P;utO&7f4*-h'd>ppLqEu(u9;!;KaUdd>]3ekHOaPl2#Gjh=JV)ApsKZ4D2k)brs%-0^Wf(%IG'!jhN\XsKKiQC4Jj,2BH!YeNYMR;)j11(k'ELDec8o0KKf1NiRhs:0BT;hnsV^6j'oF/*aNS9%J\am]6NF:d`p_jf=G"mq.?nF%`d5.eF)^f_fPE2WQb/RUkek_*\&mer-=p^\(8I'h&)!#CV1pjEQtRj$dJVF6>RSD-7>7X;iFi$;9V>aK6@Bn*e9i@fQX2s:@A/uQ%fKfE).rL\FY?_df07$=*T1`d<qXjURC]a)hHt&&T0oBE.j\uRFbUS?-N`Uh9a".nE)6>b_6:]3V#rrc1L]"ejkmT-B0Xta;rcRgA%I-ph8$+Q"Pg&XRO'J+D5lK6@^qLu!0RoJG@_6s_QPFD`sgE)*^fW8+['gC;ndJE>N8+;$IBpLI'-ntj4o^=[k5$bqYN548E(d1i\%Ms]X$V%^VqS*b]^M7<fU>*d`demTY:Z[F][I0@bQOb+U.\q+Lf\F,(JAq+;Fd.Q\`qu'c4R#?*:*::Z!\hPmr[FnJC-UOm0p&07L%\-'*F^Ue_I?ECCAG'OVJ%:Z])P"#N9-'Xb>LZEH\H+U`^rZ8Mf$ri3O0,H:8J>0TO]nF#/h-7FJmH46d&86uulO`f@D5440pD&R9%T,/1K\[NSH%5okHN`XMd3#_QMWmZ="gYhPMH_IY*gG_&?)+O[R16-mEa;F220A!\nbLP/*Ej;7C%!0+1\ab<o5-UNg(YTtSTf0K%%(&_aL3m`aCitk@e_h0)t`N+9?ZJ#D61!L1%2i"46E9g_3f098A1;GgB?L`"3hi)J[ceU"V35?g?/T+uOXrVAn@0X!5:sG)ns6b3'%R'L9e<2bH'DL5<31r2-Sq5Ot9#L;kaBuA]`HOn5"J7Hq&0VfZ=%Mjn8`d)$^m/c!I?Q@EB"E8FT`<kJnmNL&k^$P(;_VDur9T#>:%`s@9CH+1LI+=.F@p8ps04TbfJRBP3\.m%Rm&JPa9#6s.fER5_%r\/db*rU*K_HFn(bdnema-5\9r8Qsjr*o<C5k&1mc1Q5n7^cd9%-tbn!U7':m)"kZsY.d,.2b&=egXl2QNA$U,=7ba/DK4PN^oJDElfo=7W-To`]:6cUF"tM3pP5KFeVDfEm,/'#SOitJ:3ee-.p)tj%8G91VkoTXe2LuCpi0ZXYQOp%EqIlV+098TJP3d5uWoiX7]`J]].:%o$DV1\(E02Hsg0u.']Nf1E67oC2XV=nEVSGb4#D'RR:poCE%D[uq?AjVEnHL:fp-2!*.3bLBXNa@)tRVglZ]Y2?<F]]:L3+-LqfXDqNk2$,<RqVBi!4!ZuY1`ji7Go7g(mg/MjfA&>"TP.Lpd,$2%%UgWu84+GOS):Hi3nhtE4Bc$l[c>7@+s:up^YTqc&cq60*aW51ZnSH3kJ(lBbJj<9iaqCRT."gB<QC:R<ERh"])6HNHFhbC>UZ7'%bPD(u<b'B=SON77/uS:<djNoG-&<G`f9`ceHY<kS1L[';a<@HT["Y0F.4pBhD]W'rk;o=gA^/N#i-O6ej4s`]^%qB290_.&>]*k!%7SdZ0191UdF)ucQ;dnoijmP)\7UPY_B^Y9*a\jKM:7b6GrNr\=$V2^1g40(\B7KoI?iBNH5QBjChqnB=q6M_<R!cRFjQcD.YL`aC%]<d!3s2iTbbPCqqTB\Z=p9ah>O$<Q\-boK$rp*);s7,^,52P.%1hW`*BC1&cg4.?<S(V.]YMRV*l/Q.Mhsip\r2]RqDa(o2IIUb>%hT*Ans+d]XrU+k"lF6fVr8V/;`Ui?bf>"k`NQ485[8YTNje#e'c0Xf1O.(RujEC7K^J+"/J+3HZe`QeljO<;$YQ*]Cofq<(c0R[n%EUq`3ci9BG2g^tmm_p<SIqlQ]buar.ci8"Uj`LFNr^(,)O8e_?YMPfJjl;D>``N0qHiLdkZR;AM^<GFYAtAn8YJ7T:^&6%qS&ssU%e\?P)Eq9'MqRZKHPHa*IrG6XccN!Lr?iB<:s7lV8pRZ0B1s<c*&TA5SU1>SU'dSEhME-Tn(iBFJf_\s(p9B*Ih%P*hR:-ZXTC5t8%F"cmJktnpjX1E"00]ca)rq3u9^Xdk743p"9E^or8=usd,I+()\G+Zg;R/Sb1HE'-M8+F`keCiV,`Pf/`q&oWt.TY-HlBU3c=ZG;E%H/!^ml@.ZppJgOVogVI6\Qi2V]WXM8]\i0AQTo!7l^:'(G$JdQXSq/V'?/5P2_bqD2UCiLV=1>TY>ft#1T,]Xk20/r2gc31K;T_R%os)>;4[)kiLZ\XqFhO\ZLtqUAHR78Ir:9a\GUD5sJ#_lh\q6t`XB=0/>.LT.Fa47;fsss\$>QDeT@u>U^=a&==7/VgL$oj0W1YD;%&1'9XKlZgFE%7):&k^.dc1C*6a5=#c=**3"[<aZP4hso/HuMl-+g4:CguIsc7"2$@oe#4UejXG:^0XC_*b]3'Q*:@dHc`)kKj%ZY%DSP=nIP11qS'V*EmKk5B#t'2tA_@n(?7PDI'=b@r^rQ&epejm3D0!!gm1<)qHc'\l\Q8\mPtnC[;Uq,hhJ]ON?!f06O(Usec"a.Q%3dl>nQ.i97qk[4W"RMK)];l\Ak4uT3q63#j5X_U&6)OAuG%]NAG0i&XG1Ee1SCF,:4JCMI,#qau]V$+YSg1LDLJOJ-V9@\@EA2W!%P;`+f[L%[Fq0en9nri6:\Zao&60VW6$[37Z'X?:j,ds,`O5oou-XZ"ZjUM!__7e<H$Hckn\9U,=/tMEj`fm';@?Q2RM>57['\cAK%Nr<SI95Z_KO7cgB^@mbh]ICnQ[7>*b=mZY&Bs-(5Dd!gJi37aZC6Uck4JB3cbX3C2FY?tTq58Bbmo+mS-bj#8V8N3$I_G<XX)\'o%j)_p)r,kG]V[!\Mj\I1P@J?m_>5@K)o5l;IRR8>)ZfiE1)]u=+%!Aq2&k:qg2D4iiZZX%W"M`B[`m=4NY,=1S!uF?`GJO6X]FWm7%Pa7`,[ZFVEC"fWAltrhP!@Js:OM(9cq;(@BF3rNCOCKIsNO=q/;<RbUFRlY?c+W<#FkX[TH;c8`me:(HkGLDtH;-K4N5W/&>j^)D%a%n;C57m*qb/PacI&tqk5(;,-!=4=*G,\kU]30''Gg*@XN^&#Vm!D7Y-A]EZ8NhMqAkRJP-f:%',Jq^gS`6W[G$&JWT(3AVO^+s$%Ph,:D3oIMSmj+WGA/QM2^O*aontYNMJUMqFiQsF*f1Af5NIEI-qNM45*aJbU?`p75GsruS9./u`GNJf%kS]^&`E,g8H[F"2IB+\B%aAZ?eC\!t/I_&mFPs9K'/E5s7k"f"3ISWSTo>dBTDXJV<O8!95E@nb*',%A?'u!OZ(%G?+8=\"I]uQ+L4rphC>A]'bbkV]rPI0;@%AJC":nfdg-3GAdipbYd\[K`[<>FBY7g<.oF3E&'V3nHSRHt<[r1;8bX<GSNg^3!cW6V"u_S6Zi2aVV$32T[I/Rl6ZIR00MoqC0gk%i%jPKEDd(5;f(26S_9d"0&.Sd.=2Lrr\PaP4e=Wa8\WlrVdp\"2CRh53&q>bn(5f/$Nqg[T%5;obZ\iD'`q5O)A+SY6t.c:cu0It%G2HgJ"AV^2jN4Fg5=nr-a:3J+OdHfK"YZ#H6j]D>q.6[c%Vl#8C!;bp6BDAbgp0slPDYiAkurIcQ)?,YS7@-qDm($c54eoVMc1iT%$\WfW1+el034mgdcDG'#9:i^!2=P)H*CDOkX;5WP,qgJg8fk(>C!El!#nKY(F=hV:8()6V:c!.uU_a)Q^coW_lFYt#!6NY?esq^.%#sp&Y[]BMN*01ho:E5O)'`?NS<TQ@?!Wr:lB]qUmoNaM,H//S/Epq&F0M88+Hf+K?c[S>lNEDqX0TkB&A"/F<@U&NNkVQGtjP&!\%mJO8(Wj9hu@nn^YJ_Nh,hZHJ?a+0U3TRp+$CW>\uYj@X?FYNb,2nn.5\p<,3Qc+s8?/c)K(R-*R66rH$G<*'s8\[gH^$T0`*MqQU%Q&`UTc:TIZSZc4sQ&@_rIb'F'm)O2tNYAkm70hJU3W1NM<m#9d@1;Jeb5iIL5g]p[Y*:Y!eBOntj-"`#HX,AI,TjZ[.*9`GS^QB6%&_P4Fbg'Z>NT";a@$lBpV$q,92J`*ufjN\\fQ0=D_XnkQ1K?TMlg7\ZNeSplp\#&`c*cF9[C8S5q'O`3no]X11"I5J.28+<4m^A?%@D2O+U/Q@;VrTaC^1+9Rh^3W!8`;s8O.Z;/\VtAI).r6WkFLED:pSL%s.;C]-#(=#$J!a%@[djH,ShH::chpc]VVb\\bAF>_n_NN%:(CXl"3<Z1[iJn=@k8,D9`fb\<*[8t6&X1(6(H.er1&YP!i9t-!SYdon18DQheE$F'@f<nHPKZ0F/o5d.Ho=%Q21RMGYR+LL:$F;%p*cB>FZCn8`bOY?%nG0:ZW%%fFM0.LSnjPmM5Q4l5c95"IV\>gO0@(0rEXH??Mbd.#Vl9N1U+WZ?Hq;>l;MK-I+0dc>->RL$jV90%'e::FS=J33M.cF2:$hg9:Al"o[^juGj,`RP]42>fo`sEOnobu.8/3&6N_*At=hnEgYPbYt!n4m^@e8pj7U#6'+$r/+5Hk1igrAs;%-\k=T!24gX7m"NHo,)i%,?%8"J7[Q/lqqNp]_cISE2j[4pTBguI=-r6q`ZR%1nO^J?Le2lGS\g9%L<:0nZgG.P'\>_5`T]r%EAUn%q@O!5)!/I>?(;C?SKIj9\9YNSAV+HEr40K912d+BSXsu-@"=54Y'sRh@5cAh-(WimN(?YBXS6*".#,4f4>j[9m49OWMJP[8R"%+^%.BQSlV;B<nmU[_sh"qGC>Yh^k2sXK>>"BC2mZNbsL@Fc%DHdPDQ<Tn=!`-U)6.m8[ZcCC[il8gL%nf?^.a.MRM@ga0ilh8tp>;p]%bKZafch1W4X`seqn/N@1CK0n["MMn"W9/g)f3n]eR)ADQONN>gnJXZ@4KPBBapXuLCq;u3;H?kJ[Go3Fn,)6?oC95uEEQqdU(Wsl%meUE=7Psg>qFYIb^)>aD]ZJ./:EM_#riS2\]q<1X0di3NQF)6\6?Va=J(YlL4o]>hJth"+X`_/B]B[RRod(6OV>L/MP$BQoe=PBd%$(&256mc8N+!=DQATaA%3%pi2MTCNuAodHHn_t[dO%\m#gtg!I^%MLE^ISE4)"WK^UO3P"VNh8djn>e4fmLuR#8IT\?\%4hB^p<D%WFnF\>`DD1j3MM,Dk<kd2F'"LA#HBBR<lNL-X;`-a4?8YG@B`;SFStCr;"=F!53bb.tru#X5`9&c;-(;GRs<GDlVMg5O&%XH"H%3%q=/\"Q0V,/e$%BhQ(IPD3j!T$nu&pjEC0Nr]sr',oLTV68=0]5,5W&LVop#eRd,@dppBfX8K01tb'SSe=PTjq]#qI%fr,licF5Ck%:bhU#](Q&E;r)^[DO71-@5NQ1qirQX&+6A;hq`27c.i*90S0`ZAqA>&Pg-nldS'7Uj\A]4I^0\BLYe5<=2aCAc<bgF,eBJI`+lB+%e@ek/b[(6./T3[+m<!4<Uu#6W4+[($DJT"H7Sb963=4$OW:j=g`ZqaJrKMP*3^$c,3f%?oa6L*E7&^U#BMfphrd!fs+O-0tV/uqh%@WCQDjB+9f.U+Vp3a;QX<')\2qXLU=4d<]hO_)i4'iY<AFHmK,n+<SjSq.]$HG9>Tga`5,J?JhJk12Z+k`nB`8%W?sCAFs!^QmA;%Xjf&r*50:s[lDONc2kEs[6DcX9!OH2E#3#TYZt=9!>j]u\%C;N[HKn>ERc+qp9+1'B$gJ4_/o;F92Dm@(,3'S8GU/a='PZ%+l%Ql%P8R-'Ft]f09c`m+<F>CScg#$24f5\0#$^cKkP$_<LUu[QY`E"6)[DY`D09c8.n<;kiTMOcYOO:9qF9^ofgP$m*$kPu:<D*\KsD?g%OfLS"ce*pKq.qDY2L!1i9=*0^S`L2L9.'gYV8qu(HBB.h!9`7#ok6,*K+!$\hrk,\Nq`Tj\?.LAMTL*p3g]-2H>i4W'k>PF2Zj>T%p%Zg68Un?8=K,BVq^;'hNs*>]UA%h*bL_p%MhW)P^MF"1m,=5ZPEe`HrbE:Y1>.?D./;4o","S%n5;uNjKXu2Oq]RAe`+Ke3trsQ%)d(lLI8)BqN17BK*Ta(s((r9uSmCjO]?f[rn!3`fLIp'<$K>#Op85kH8GH6TrJ'Y?+KgB4pS;f`Lc+TWTU1]ooCAh[^B<g==,A@m%p*e<`<f6e)m,?\76a[(Dh6/1>Ba)^'.0cqCnWRcIDYE_#F(5SQff`hHb(_%IL&,D-fll:$BT,sG5L2"Upg-=#O\BH]k]R+OI$RMK%IpT(_-n*9Bjf`7_+(H`7Rm4Y7=5*M)N,g(ZFk+a3_fk9THmVN:'R<O2q0F-7g+%Tg$pU$R_gY;R[f?ms[Z1Atqp2AZDfhI,Kr4Tc%:US5l1Ge.+e$Y+G>5)H<\bq^r@hc:A@uU)cI;fL[IV8BA?(E]t2mH7[-ncT+@Pdff-MPf:WKE&4r&7`mXKRV5H=^eq##>IdD8mqN%YC+;HOJ(:\BDLH"G-SXMHo.kk`oD3s#2Q!M7]"H!(GUnaUU?Yk3V)STXRSmB[H1u9)J8>DjVd;8>rkT$5XR_`nZ4_,*KR_$S&UbP%+,mUXJb!ooEH(q;Y!:\L?V"\$[@)KgP#B"qB#Hq)3JBhZqmZ[gE#GjnXSo4KUV0O=hYGCX*2C1(VdBHD_kak`T/sgeTTgBK@cCSp%K0\^fV"ODpc<or"8m5^a_R'=tk]XP(`F7bH\[o7spKR$%h(RLg,<#RS"=j90#K4Z":>'kS>RUEdI]J*BeSNeuUUs45\DB;!*Imd4%=Y^,`g5(fXHhm&Eos?OS7_+tk^<4SR."^2tV=9tU).ZZq1:35kN[tcS8hWP=S)-V]/JX-(Ms>>JA/*s</*b5tJ#i+GHCqGeP8%e!%2q]g5B)'ipjn7_Zp#Tjd[R5Nq@dh<TR";M;'I'eAkT6@jr:9[jLkV$R.^3e^b@Hs?0=f:1$@mBcqsefBDiFsab.;$&(nI7b:?6bp%A3f]#B[tS,Z1IbpGer[E%6ON`poakerjm'%-P=?/(Ea6;\7(6K3r!+bW!KJPH$p':rbD!epB4gN?Fcl.GHf,qGF&O(K=m$\K.Uh'%f]B$ZiEijK42G",+N+qLl(j?*CJS$FS'C@)fI"/_5?O`<J$7[8^7A-Ga0's,r1KQ#hYa-jGM9(S])&jB7NZo_frmOf$+[^@8A)"\%4%H9l8G<]uMYm)>7]a=M?-?JeY@+r")$]sR_^W?Ih<k,W[20(A\&Gu2@eGr/Da&&djK!Ln="=]Qfo1h=#fQ`Zn!p]6JTt.>.m@UG%4.hdr;SVi:G@X&Yg8V0=g=PRQZ[PEg>J\gCp"Il>q&M>u>^JT8anB&SA)qD7%$fs2nW>VU)FB-Y]m+O]>4W$PDh-^>QS*])8)*]l%pmlrZE*M.X^2V<WN4qCJRlcDM@qF]klk.gsX-8A!h*V99bqR:`\Q:U3&hq+<L0:L]Z#UX1h+6*YWS2en#Hg^r8`0mII\@(=SZVjl%l=[Mo<W2T"!&JC_kUPE;oGO%VrtVWB7;"5XPoSsZME=en;=2N?FlINJoh"n-HMcaKdJM7&YN.5qS6f/SRK&-nK^ENf6dj*";tA:T%LA:>]W;HN%j8,[#RbaPFhS8PVih3k6`tV]n=dJLZ:']UIT:cf(Zd0!0KpAdO0V:dr=09'eYZ!\Bo;puMDnTRtWB9;qNS\tS7[j,#%&9#qjIN:'>mp#7-C"WA+b_th:0C=.9N_*AXJ$=T_]h@0)2VVr2js`[NV6_?0')m#sp7M>/l/r^Dl@1J[T&9&E)4GaCg3s"@ia-5i%oF_REIJODZ?Q/UBMl5F[4/iAN/q%pCKBJX)A3\tDkcmFkn^AFPDs+`)17RZKk\/iRTJ=Zns'cN=5$T"UJ)JRig#*!D':I5?e):0P%\F.FkI(_T]?1]3.+J#`]3Y&<GF->F-:t;iHl>c:C8^tIm[_&`V*NRUCB_[H^[0Aa1(3Qj7ZIf3hCO/H%$o:e@P#J4S6Vfdn2iHD&%/'Q5/pA<bG-ZVj['eiFE:j(qDHPWp3FBX=#5bNm=_.-lB2Q\Ao#djIoaoSog@1J2%Jfe=3<jBgWO2bK&I!D8m_9b\oH.V:@"IhWS%K-ou>WkEWJ,SSLE,tg^j3f,nF$Y9+KrP8`>0a(XI2W7TMMaOP!`J@f932NXk,REEK`W+S<i)Q,d1*9nT4l2eA,kmMm,6FV>4ZZ(!%K`M2%8uVD]3CcASb1uhI>qLZ>+N4qj9^-mHq'(d0UYb7iq!7I^qu.I,ntrbuq-Y1,AolS2PquZSdort<F:bt\O^B]PgZ5kP&"X+u%1mBXDrU4C]r.L0h12mOIHP%a!lO/s/Uq.&&B:i2CP``HZ9o.7#K5aP(:a,Kp6PmIL0910P2P/bmb"$8]bpIaQ9/2*1pHR%q$5Bfp%.r?R!?k$B*Z2[&IC)_TBC?HJ!eGIG$=]II^C3oHrCqsLsTYL^mWR=KlK&EE@]i`hpXl,82"1u==.Ok;&E#@o=oJGbrG"8\&IsQ`d%Q./aVNk\uCng://Wd>M,.aZ.tl0Wj_JZ7gAAoLW+(!;OObCh^E9fS=0A]i:kSoC"fng>tS1S7+Wm+E0#_QQp)IS`ttkDqVUQeG65%[bjOurXu$/UCGUsE+Jnk%lVDodo![PU,P9)/'%I'onC"-=AOWMr`FH(-H'L[R`VZR7q0kFiF=C,34RP7l*kk]o^J$'VT'Q&dIdEL%24ELt"YQ.VMNd#\BI.XD%>Eb)9Wn48D'(qU`3L_)b-ge_9o:Yr!5j9.2*8KD,W6JRnrKX>cbXL=:EL@Zk12u0hS5B%CP1AWY'OBg%3j%R<q'S@/;SS2g`7:V^-'LHGnQLh-Ep81]@S:(ID#sB(Xl3Zl3BW!]dQ:]/3haa$B/\9)UN>D.s09R,YOQ/a6bD*h*B2c*^9qs\%d"nieKbM*u5I.hner[8rc%#4qitK/@W]CBu*Sg&>*dJ:M;"*M*SboMOT_GJlX[pYnX?ENQ^=S0d&%WL8%u,IJi&tbC^Qk+=NMJ^N%,\@QK>Yjg$Hj5knina:.ReNK'eKn;[P5Ci'0%Z_\88M9h:)nM\Q)gN`<.+sN<atH[;TWk(#Hk=PI:a!^$72f_)k#^^c=?Rr'>V*W%\r&4UH[X]R??(&Yq+Ltr>(!D3EI%eQHme8%i38&0XCcCHr-fpqK1c(K;S(bcq[P***\NN?6#B5k_fc:ZCU%rQ60h=hpUVPp%QZ/s%M11(8!Fl"sX1n=3\!H'lF`hQZ2<\HG^rI)Xm@-2@6+OR5/(fKk-r-kHSt$<L]a'h*m^W+!o@S,\bOsh+lm$_'i\bBp`\l3)".utN%/*jn#ih=[jUUe51VnIt?-7?TU<)7D4`TTJoWr>Cqm^9LQns(rn<@7,P<&nZ@SC9c>[i]b59!=.Xl_Z"U%2t'4Q^b`Wojd)S+iCkr%h+nO;I0V?QF=JT/6#RCka[U2>"sob;:&s`oDYK`Ll&k/%-_9X!ha%cjS%E785uI2G2\kb.rDN4in8`;UI.I./XEb;%hW"FHK:Xr@%NDD<C,j)A_4mr5</G]ddSN+C!GURhIHEmF9oGSES1(N('PXZHQ!5=`.]>N*NpRhbHYQ$5U>=m.,mmbtT1+;FSagHT*;eq_KK@[TY%dI3CqTSLM)i2/?4\-@XaaKW(%)8uir=u1JE^pWC!h;qMOaY_b)n\pK@K;Ku_k&=lfEBjHf!*;@fjTk4]4sZ1jNBof$UeB1<EVftr%),s]k`1,%<Z\.6&mKsGmYm5t[$j"bu7W2@m3Xf13:5HdA^.nphNn;]3n4$(D_f\$(h.U<M!T(atC9s>cKi)71gnZ>\j"kFcm2la?%+1hau]Pf0V5rXh0cBU<6b-A?+18q^2enU=5E>6"8Q(+KFGgjYu\Hr6Xk\JA.USAhH<1&cmK@8fS=Xkb9Gs<lr+Hs"S>.;,8cc=l*%(:S@S)YlL$0C[e+Hc>;"@%a*O`lb>^I-N"dRZH?`>$pC]q#oA%2rB'X<T`uHH_;G:2.bB<$iA2r8E1*0WqY+,CXM/#7IA1Zl"G-V%B6RqNrH++4Mo8euPW\YbY&k/2L%2b#e%M+AL3fH]I&\2lo;3iLdN/s8EN9j-1QtV"[Bo9qXl/em.t1gX\gY.]=qGJ7P8C9PpTi,s%c#fkXSDJQVh(R=YjV)+?qrtpOB]OZ\:+bT!r:8a336V[m:VVAUR?*s%rUfBXXW2O@oNMi^h'HtjlCRpbo6YAt6]\/$9-M'?<pP2G%lWkR]8'?ZNn#p*.]=7H_43O3k@i%Y]kOIcP[b'!E+Q#2:`5LY44H@aoPL"sRcJ_Xr$_L0"Tg>[L22pCo=$<19+#`-#fN.Wq4Iq!>%4O5C<`J\9YrjqT_f_Vj8^)nPp$@6dd+-Bl7o:]Hp>VjpR2.Je-BQA$TO/Atu(X_mN4nt;5kL4,B-8EMID=g%CdEGo%Cn]#_Q$ucT%pHN%D-Ufe^4`YFIqd'MOoQ!Wq*TABYCg"ZYjPKKh$*`obCZ+XAS8r\T/?J$h)8k-1mB\:PYTfh:hu0:pcK"3[#HRUP@AUoEs.IR.%qi(!:>eR3Yq@'C*J=#m[DKbAT*J7\S#7T=Bb5R#O)M9PU:f:i>%')6eI[0H*3G@I%$/dmg;!DMU"n,=YQl5OAD/I65'LpdR4?Kd&%FTE>YmDjQMl0?E@d,k*SkMStqYf(bT)&0_Tn/WSK#4;6sMUm$)g[JK!Yt06I7=4+>&%lV':hj8qf=J<N_CD/^>D!>[IMmr$(dEe%%mr5,didIFXQOi]8&FU(JSW=U4/TAt#[!^N^G-NZISW9VjrS[dRIeZo/qeq5i`e:G4nVtFrJFS*Bph-(+_D``(KRTb^5%aVi]a!J9%rMF&J]6de;M/Mqn5Omo8GLQnQ0B_2<eJS:l@L\E@Kt3.U&'X46asYC4lM-N5]<K7\ThpY%s+"Xem;4)0`Osu4q___8Q>=Gl@*79-%*/fr/O;JstL,$#%CB`6fiDFDH!+b$E3,?F(CT+e`8MV@G(]R&9?'B;'.JLQ^OXC*)Gg^gGl,=taGStn6A>qGX%Wq9f1$b$MXDaTc%CO*$8&n>!6rom`i]eF-[:Y\,uh4KG:oY*UEkRShr9s,%>]9s'3<d=O"n8OWFJ/-Ga\Nd>h@NihK"r?s=rd,NKZ>@+X+N@;[TC8qc%2eR`T+5Coq--m%ra'g[W,=0+cM4Ud?[p/LSDC[s<!7pG+U*gSCMN.KO?b778X=cnZ!&jQ%%&;%1.r2VLUVQ[:fq-35DV1WJ"RKme%619)UD1A]^pb#9Gh:uejZo"ZrUS,>,R1AL>b!UUkiHj>*RCt)9`Z2$OXH?M.Mp\TtO&JbH=ce\tWSLU]%LHXMTnCY$?9>d][+/;9%'cOQr">!S9q/:e/fna#4C$?k#B[R;8VZJo[A8aeVk1pbkSKe>CGSL!l^?[D\IREU10\6n/maeM,HuPLVV<L2KY4upRZ?R(M^!MV%%OqXPaO!+Zu&DMgq]$'u`05]e,qPh,C?A+J#IXPfTr!MP$IFih.l#PRs$?Mu\Z'SGbd!f4JJZmB(J[.28k\6\Qem>QW.&L]:UOs>S%)c!BTW23%$7f7^Kj4UO^Dr-8k5=U9VL$QoVSW^],TI]F*KJ;Xu]XJWj.2<<K%uW_\PKj`FSah$!c0rI+1m9OSrW\[g&ktuiVmGRZ%DCp*>O]^8]VYM5uo5a2SPKs)>IeH4a<o!g"k*35o6Hgn+AqlZbfeNh--sp:lS;q@u=f"$gF_oBh`;+C:UV[_e_&0Q9EpU3uCL0M?%'*bnSXjD0:icB)#CK%_^QhP*2Pj*)R,UQ%90cN$*-U'V6_Rk3r)oK+SJ52m<'fM$/Z^/JT((,Ng&ctcn/tQi&e5Gk-attOYAg2-I%nkUs-`qJO_9HP-'WJ%1,.UR@pfmIhOV.kXn*B>AU)e>01QjmoQX/">Pn-NjrclLu_%-#0[6,3q6p75),2UeK$-ibe:@p&0Vc@Q0!%XD_rVJ)>HugD`Z[_'"el"F>3$gBsY6)%K<2NV*U%_`*$!6j4!E`Io2/IL2$WqYB4PG.8?;q'lMq7]'\"3XX'i^2B"j,pBMR3Ipe?%MN!>gaMm'ca8"J1#d8T$FD9@Oi-l9$TND9JafE7an[77%+sc15"pPF33Q3..ZFdRDDGp&l@1qcJ*]CZ^P2BIMm7sVA5D1u0G.HK!%j!#--M+NA+d-`k]N%Qk38gge,^J\1Lpk"3YdM^7A"7_<$!-J.u2,6bUjJF0Mi&%8b248NSdX,k1g'R[J/;,`pi*bSYjc?W%m4gXD%s#m>qQEUI75C6-_-oud]R2"W"d/s)Sc`I<L5j'(V;=]t>=8k&q/T.3"`"3<6"B5/g9BlCH!;u3"-n]rB2o#P$$R:k8cGu5>kbtiP%+j61Jp6\e/-/p@drW]Ihng'UkK"9/uaWQ9"hOhUAHcEJUM-\N5nLElV(PZ9FN<R@,Yqp9(R9UnUX>lf8<XI=Y<$&Bd2n^<2,<<YX%lof@:ceKL2HF\1=lku3R90Y5t4iZCRkfgS)30Ottljj_gI.HZJ.C!_e3t,XAfqiZe*-f<1qJH*(n+$2k&XTC=6-5LdOdMJbDFq42%LI=4n?)%-`8:WW7+OPocmbR0t(;*.MrgQ*KXphjnKUiG@>=oWL&PeYTjo$tgM=q225FYrQH,VC,5P%OTZc2:EP(#I+>A$C-2`f+o%nqm-2[LO;`gZ3`FBZJ\t[uFkMQGunT_#Z/6>tJ=1'-BR%>[<ru3muurj8kfX6Iq%0cR*7tZWVr4iI,&fHhB1Ap4Jj&?e0_'88N/G%"]Gn/i?ZXsIb]\59XB;XR/P7"!^V/&Zihb#hP^)-cT/]d\`[i3l"nA<?]Zm6)mKdK2S>Et^3:.Qm4Zk@o6G`I@80U,Q5lBs%AC*^%m\?s<FEeSJg"\<K$=KgA3klHBQp%8,WPpLPZ0r^H(qOZ=/U$)ahg>#/M,!@bPVrs$Kr0Of0(02>BLA+=`0BbuXUC+c-?<JmP`CEt%^\#s.[]X/)VsH5K?X!NmFmnXV3^?9H1,r`ocGC9R15)K>b%0]e'LRVZFJ141>#ZYAeiFuJ*=Ics.P6'3U<AXG*jg8$XFTiGiQ$Y5%Pb4OBkFRhqP>Y!__-Sb5Pk@jG=2&Fk2kKB:Ql_"`:7=u@R_QUejj'^s"(_c#!`-IVq%;s4KhZin5Zb^<e\^6UVVN3XC_W=oVa;q.%4P=Xc^kkXYA4QK5?tVYM7O=N38A57b^^O4q-?:7V'bhDn?nP(s)_iJi@%^*M*ojM<Zc%o+eS+gHh[*?'[A"Nje+'H2Mo6B06Piun%2c2=%`u;PI$9IIcc<ipT>X90*/N?B4?#Tt<ZWcke20?YLFHP3bC?U7"kZlYiJ$,IQY+U]k(/mR:>X:lc3u1X[(]5>RITeuG?#Trf%)hjcZL+]ufcEP?df?cMkP5QoTI_;cL^`7V!8tb249N1M?oX<?Udh9.]O7<eS;N0-bB4c"-D+[92pdd'RWBEm,\c3^XHegp8CaM,9%<nU/YRO(<:K;Cm;;4Mu\!M-(M?6?F[VcV/t?XIsp^Oug&CGTW"Pl*$RVhDkfVDMF2LXFKeMrqmuR]A9_erJOWfa=Zi8-P^"n!=H'%?X(b2*6fMs/1-g&Bn<.nQ$"mjfZffj3Eon<e1^D_N6Pfjmqj#QQSc,&m8'](:2(#b$/!j@?.5cj#^0cZ1JkbL@qX($/FZd].Hc^c%h;siI<'H&$=l&2_i"QF9l&@[J0UtCAh7(IIV@lh&N\>2Tj)j1mm^8D+fOO?rg%<'gC,/KRh!cd9qV.%\LZVsrmo9N\EYWuf^huWX%k/8fnI)/;hK[-oNDYRf\ZT2*1d)s*[XYAJcopJ^..I@k$LIq=)^g!`FKg1!.=q:H=FaW)_B+:rd:rbN&-H;Yp*&YAuB.)SpTe(QR%_nRs<QHl"(APS';:@VM"JscR=aNTQ!,hcTKjp_0fK8E!o;.8[oa8Y9f]JcZ'0H.%\)n-6SQZGe-^CG(2j'2>(b0tj;E;+$m21uVV%$01AHKQ[Hf4eFMSK_![ag,rYK)4%2P_KrCDVL;jhQHK.<6^'SVr]ZBmM;*./T+2A2/OgQ0qZ;C1=(*",Jh37#n<#*LBd_m+8E"I]%R!%,F44C3=BuNnVXcHWLo0#b!@_u,#/Z$5a3=i+L?P2CRJNqgt0Vqn(Y_?YLq8-h[&'M,lATmC%.?b)H-hf6RP6B):]20b,XYS1G%9!3JN/8(G$+qlXVEAfBa<+-Rq+u:f44[`.P^m*VeGAQl_6WZZF>h+>$piKpg1>D``o))X*]-/@RefN]_\)D+HSqr?sXoWuiIK$'g%6tGZNNppUnZU\OgWWi(Q^Es5m\=0?erEF^,/.ibl3'RIV>,H_hiZ*K.&rMjiAP!TV'8>Qf8($RHj'do.T=m\C,]97E_&3>`*"<g?%gKR?JLFg\#F4R=Q_j$kV'=0(.\b+(k?DuA-WT@Wme-3U%_.e%7ZfNrgAuP-Oc.<?+X0ZqR@&<Ab";+O:kC6#;9?H-jojHjGF][9X%[)IYRZDaLU9Kh9S&bU*"+(e,II-u<j^RRMHHTdmC(A+?eiTA9Z%:'K',suf@ol*;Gccq$ilJXj$"SL"Mr+eHc3uc>tr`a2%SB&18%f\(lBiBj%IY^h$Z"tsdbhh(1Q4FAlUD&nS2r,mY;<A.A`-D8^GOffp`rGB_33KXtX&qAs?Zh_f1;$_m"KUgal:hF\1*FA*QjZLjE%)p99IrQJJU:OAN%S%Wn$Vb=D'^jqe6hq?rd5W88eb/4k#i'JCg'3_mFGZT2CUa#)C'UdjO2`j+qk8YR(k0&LegT*Q'PIdi8JG0,t%nEOX0VZE!1K%McIpIb:MK+6L?J-kC$l\>,n^RsqBR[.l\20S+E@V4>.BP^``V`!H@;m$rQ[S8WUK,eX',5#CW're[W$`lmQc5'KD%HMb=)MH#%-?:74sGBlCnge5/7<9RsI\]N?ZKfW4El>/T=VcbNJ_]K!*]#<HNI=slf%S`KOaTt\lfncORfPi'!"VK_Q>"0s2Y8gb[%.3.&O;_r`iMu5pkS0)&Q>7*;jgbNt#gh_H$?VB?_B+T1is-6JAc`"^t9B#g.@j1e,d%=`7Ja<6pJAN[HK#DIQ_Ro3?X+_RmL';4%%pc/'8_%6WXm*'_dq&D<:j3W(mn8+R%c>)uD2A^*9-QmO4X8F;RFR1D!MORmM$:th'FOWZ@(_NDcH>B#u3Lclf\KFh!\Tq&QfCea!%@W#._eHYdD:B%Ws_+.t"Ec1WG]$f=rWG\V/:@nF>PQJT<D0U-8;STlH57?e2jXRYE8[t+D-_G`"],b^o[9-P86Zs*e@^hWoX#:p2%Eg2(h2C^XeI`62k^/\fj1ER]8@7RKNp)-h4_+V3)r/0=-<7q/*re'4<g:i4!V:r,%[9*`JKq59sXXsq)T["0(En.NSW4U[k0?F(`%X0@d#!>Te$okr?):p.OAeb0jpn)K<t#Ls'o@^f*/Z.l;<5A9(jjk:bti]b*/iVS)UDp[MEn/gqeq[NsRXB%E`40c@h%kKDa)7S:Y%PPJI^pV[F%HB7WTqb?K%\PW^]@qqc'WnFBcepJdS%8kkQ>5(jlQ(XZEW@>;o$PpN--_,NOeIW$^iC\IfY#@4?\b%EI..N.a/,r1@%VW<pFkBU1dlb[P&o=@H;o1YF[DN^JD$9)tgfq5;gqiM^SjW&8Q?=2V:E`;Q*(3GD'n+qG"I1)ID4*=.omhuH@oFS!dNjI77IXbUI%Id'Wi0Ae;92;A@WdiuK3=4@+*%Pq<HSX1F+8)Y4`:$5MLkC#P<4OnO[0gQ>!RBr@-X-RX`b/YC.Z$eFqs'/:]!fO\!H9p)'?<p8g%+_9_M3\RBpS49*HRa,]@L=)7oWi#BfV/u$_/>/HW/'d-:(N'i8FC)4qgO!4*2-n!X<su+,o;\X.k)M'gRa+Q?'C7BZRa,\@mZWXn%YGUp.?R.OnGoEEGc3o,nfhc`idnP!CohOI1<7CZtQA_iARgEPRY,7]T$I;USF>_l]+Z<O^SX5*H=a2fp<sPP0HD/l2?6)EL?;9Uj%>;D<C5BeuU="TutH_%p?cDu?:\MLOIC-&P%3k'R+^REFU(lm@V(/djCU699meT>-*F92.+c0kXMa/]=%!4qS7H_"VTKId[m]&<!r%2b1BpVpNkD=r3+2YKgoUJ_%f4m]-`&0#GG=lHQaI,.4*)XqT\!@9A1-Ja1</;"1T5p7BdpPX:4Y:q+Wm6r.,fU=gPK+mS=0_T=<j%,"TQR^o8-9HQAAV:63J+n+gbNW=h>AX90YfN#)$"k\c-D2=G>KSEF.21Wa:Ek0@>Nm"X.7%XZH+5UBLA6Fp!+Jd:Hd)].>T\Y.b5%5]#<:Q4V['Ko%5Gc@4T1DaZ><U:W+e8sQ&bm`aCo=n7)kUI*u6=_bokbqko3os;-33fEBbUJSq5do2K=BcHTQCO(C&6KMYVI9O1V%hM$&MXt,l7T6j$krrNPlVWRkI6<+m!-ZOgA8jgBB$V;Pso*tZ/.65T]>=:qUee>I+Hki4Hfhd.p4]nkQrPO<rmVJhc`FVE-/2A10%,\/g_Pf2_X='4US;Yc]IHRjdAid2Yi,W8jkIoCV&08]<W0*dYH>dE+f;L!M"([5a^@;Wdhm-__ol\K#)F.V"S_-/ntWIWW(AMfU)%kATs%B0rQ@E(5'IK(<8%klPFPqd'A`#di.qmL3iDF'm?P`=r!jTg"sfF:Yl1DdbRAU97a'`TDI'[ub#6hB.3"\nGc'jl9rn??;hr%GtRV!G,n2!Zdj-ngg`3]7.FVcjh<*^`f#(H$kcgd0]NWrg0VmX6AG0jWKenUfl4)5md0dBmlTt:`.epah#73.l</#7$a@Xm*I!F?%I&s1\FAq$1p'H.GhEpLjr9h(aGu^G+HV`-;Kt1l;jr<`ch"R8/N+#Gqi@aJrk*VsMOMWUp?,PQH%:<5l?1(CcKoLa=XR.W)HA2hp%32)AT`s!1.hYqh$\'KBG(%#YbBU76f&^\i*$>Zm_1XRZ((Rs9Bs1*)bC(552Ui.."`D#sl*ZY.=g_G6.A3AN6EpgFQF75Uu_(lKV%+@Hf?BAi?gS6B`D):LuB=?*d\_2GMWIQ;U-(;lE(Tu,;fMO6F,Qgaot^Cgo;_\Ot0G7%+Q/qE/r^L3YT0VfG_fs#$]Ta\h22WHP$%EKj(=MCo3L(gd"VL*Z4sef*02jdY^1%A%4`dhCG`/&J0n7:CCV.)anb2#]4[N*U]5-i[Yn9]U+ch-:5u>B'T-*Zp/*jb9^\ShAEn%!`,2(<BUT;\D#`]jm&Cqf6Cnq=g'RtD"BAbU3F2N?:A>Rlh].Got!%0QC>t\DP`kOW`7-O4\Xluq(WU[m*dsX,J)sIL[FHko>[gP%/eZ(][$uT(mZ'3Z/1EUEiDQ.@LOM[:nlmlX(%&=_fibQ@?i)ceY!;)s#Nb6KjWgrp,;FKT)d=WN*qUW>R_+O(%-jo,)[nZ'6RI!8%^?A>'Hu!TqeG_&?I7r#nis4GI#S/%I!5,`8`S<K:.`6>`Y30'S9i0s/Qf*\9\nh?BVl.7]Y-iRoc[LN?]EU7^IFA[d/q!cEeIHI8%5(dTEa5r$C6''*[N(.+sXD(@Yr%a-`2^YctrSFF?HUb0G3VI;?<0'qO:#@bVA4uGH3_dVrO$>#[IL;#I(VR1]:tfH;ShB3;`GDXu%2Ld8K2r@T*q[,ZG#`4%&dVmbed0b\[8^3J,j&aldEbn%@<B!q8`%#C.2FJgi^$\W]$\:@BRosX/Z_^\+'S*_iT)<q8g9_8_,7c[H%4nW+!q:FDnl7=BRe#)1O9b2[Z%J9-m=sT[Z<!qh2-_?H-!qN^UF?Yo!Ytf;(m8%P)?_s1f1;,3K_MP>j>1i5cJ/Bgt2f9e:`mkXt%$`Z\-Y:X.K#F9NpIsgUs[X`E<!U!cneh`n5rQ!!b4*S'?LdPj\"u'l,fMo$X47geH$54M&-&k"oI<X4XGI\I$k-,K\;&Ct/7h-+@%%N,\XqrZ,Mh1RK6f/\AhmsiuT=3-Ce/Eg7TE\`:mJY4are-3<Eip2Fc2Zf6(CkZERB_n8KTaT!1h<,d1fU]RmC7=\TLrPl^R]M!A%chDh53='&QZW!=6;jsHqcmeEH90$;@>ks]fc@nJQS],pS4L6_N37#2.r`l#U6HmVU>oV/DeB<>SJ_8KLIDRX8=<ti'77']=m;/M%%Gg\X[q;j80J733nh&5$u-kHdFHCCaHpiS=!lo7rR+CbB><Ieubq:,I#)6/1b!Xu6jR+N5P@hkYp<.$jQaZNZi%*`jg*ei6RWrO.g%$)dlpW3Pmsa#l<G0g>.MWW<!qjG]A6p+,BT-<B66Sn>^$Dl+K,rd6/eo<tb#etmb#;2)trauB8g[RFHD7t'Ik`PBUi;EhCM384me%J%1`h.gic\9DJYX7paiEHsuKISE!L27oTL:eWOfu-?XPKW\iAk<kh(n%>FQQ/YnPF@:qsPGH[W[C$rj85@iMphWkst(%S<.qU<-,%/uj$LlM&o:U"oD="\48o4n0EYp%-"]EN>_hfhf$3lPGGAkJ#P$3&?5E>g7Dp?\h=W"l/E6/%PSp\X%]4o3T2iV+ofRq6t_LJoC>Z%dg[E@p\G%Ha?)b3p3Za#d1gu.q&f%t$dLa'3=FOISZq3G^;WU$eMl*nI_go%m.)^c?GGE&rFS0Cb4f5W?rtr-$[Ur^rOfG5ls'GN%^5m152=KMmoaC2A@"/4Oq?:f90H&\fh<Pk^39sG(qPS]=]Jig6>Q%g91]7&T^WA;lp/XC6:[-3e.E9&M_87b_dTq@9f?\N1`\J^9%QSe`UI_c?BcAL,dhs9I(hjV(*DrR:f5Mk]B$paDR[X%?7$fn]OUuXu"lPI2q4MuSpF.D7K]T7"1\d.\.rFW7qn@mL-G`13=gNL#P%rIQVH>4XrX]mdf,qCSQoD-DBX,ds(erIXd5h,sl1^"4q4<kgZ_j-q2`,Nq>*\I[/oDY75TI=+tAkn'aO9]#(ob>ipB#rCJPIM9[9%Na)I`MP3'!os;`_o2`W@<2IiWk4mBWN;*/PR5qaki9r>[?GAqY]hZ>o03m?!]_D8*]nF$;rGVH,c'EG4ENe9WMrCdBr>bPVZb&gc%f/s5ml5+E^fhD/:q8b;.%%,CNJ%XAd372FaVY%oUrVXguUhLAJ?h:W:&''rVhs34j?hr<#r>^E)i`<g>Z3T'0rIQIB&i.Nim9[P8%_pI+/SF^(%i.>'8,L:S;?gt1H*qn6Yme$rCJuB-bLjT*;g+`-SlfZ3^qc:JIlIm-Doa=e1;lVfEhs2)[*"5IH[jn]tlCfL-9UY1"%ac$b^\PhFerfNt%T*anJ>teUK%SjZ\Q7]]/R$9dXmbY$*fKT;RL:i=M[Oq\+AHHHMPf<p>h&/U_&JgA`,f\5*DLF`"[e*SkV:KT>%&;I#pno\o9bJZ<i`/B&S,V,kQgJ4n9m]JKqR\&<K=hS.%mYhe+;Z/SaI!)W/XI`[u<+@$--a!'ugJ9./;bgN2*VJI'oih9<3-a3D%S`opdD=dN"K`B_P3I*]4s#b)Xp;c?e7O$^R<)SR&=7X,DYBF[PjX51V*"?@)nb'^`>`CB1Hi73.>CG7">dp<M;gN1C?MIh)C*E&d%^8ln&p-q-4]PHk(L%=28C@b"HEcl93^su46l<IhqJ&!oO&)IMCp[-14r)QoAY,;dOET'cid^&@H9BER6)am8^PeD(EF1!e@^@&-H%=!%&t"d4EQ;I<TENiL_(;QHBBje(li+R)%@lfI#6Dd\"ad`L7s.bMjqijWq>]f=Y;H**@7FSq5+9s2GfgT0&jB0"O,C$_ueSF#;_%I;N=_=iI(bVV>9DD6<a=Z:NN$bOqE"FRX_aP`,d9a.QTG#>T`JYjCrmqfKbWd@;oMX^uin[e=.gYcY&uJ8k@:<4aRYSelICA2U2V%O1B:*BGR:YJ%,2nG'Zu".Lub5?-[B?p!r*cb2)JXPH7_3?_qM%Xi[_<TlC[b?h%)Q*?3Vjc(,lhG/(9sM,iEE3?F=S?$lGCe[aJs%7n2]!T@7&JqjTkl^PWm@)>kBeB"n9gDP&Ln8[kR5?Wec%&=8TW"Si]R<p[_r)_(>*3OS,H(E/1,T69A&QR9JceZGs/H7*^=a1^7E%?]1DUkQ'bYa%eJ9I6UgEP3dfnm*U-0RD[7D1]H'RP[trLk$P1p*:k;Z](9Mt3(T-rnr;4@f4ms@QQn6]HK.3dA3J'hrA8s]3,HbU%.R?8VY[H^RD^m=>rtK/(O7tB0n"USFjme,H;`]poN.+n5@Ys.D0Lo:BdZ[SFIZ?C.CcqaI4=#Cph*,-%nAJ&[E`_p5DZAcbKVt_^%nl/..)\uONZfWZ@@TDHAc]_H_XXEOpS)!fh99NmI-M9&uhQ+icKPkk6:*Y\]Q=IMfF">/1eCitL.@`s7-2$[d:49CQOLRK2)O,Vl%,F#q=X^Pr4io7d$1a+T&r\/nBOg\+7<1A0?#qm]t$e=P`Sh`S(kti_AJ<Ht*B7eMl^:>V-0@UWjNq#beQ*C^bG1!iQ@ZT,D;QV-b%5/E('hfd#[7c+`598i5@"d[/]LX#"3efuVD425Uk=rs*>4Bt9)-t,%(f](r^BD+2cC-TD=Wd?hT'0BmFR7B>>XD$FYis[,10UKc2%Gc,0aHC(BH^F#IBA@CLOk)F3TWcm:%pI+&To<4<m2N_,+Y]>%kYC8)gQ&\XYf5$G8iW\W!/X.bGl71mb5>&U9lt`c[.5++bQ%)(`%s(1q2>u<(l"`Zhb<Q:\.HC*0IkAdVEf/UM"\3'&tM$,CX4pQ>mYgP)S\ErJBFmHZdpcQ=("fWDg9MHR:YYH@MasTh#fr\#:/Dfe6%bIII@;66':mtY09@l^$*?Z*&uXn+F0\9N11OJ\ORLKCW6,jn%\-FpCGaA(0L+?=^D$jGk,RC3ZV$f@JLE+tItd3>I$A4^#6`=[k(%RQ6u_Dj0e2r\9\GKi-g\/S9hr!=AX59Y!tF&j'ueo"n.^P99P--fjShKraWZof79YO9b-A*-b8A6]JND5&%/1j=9/U&0EML6Nns%%D'2JmL+H?NS!Abi;@eTG)'IZnk3\a35"p(Bjk@\LF$o34jl4)rg(fBJR>>e8G+sWa>!kE/65UKSjO(usr`bT`m'XL%D7NPJL(B>8%q!ttjpmrCY$+>KYHd1(AmO##Q;\,*(Yn5Nj7,(rjD9L+Vm=o&YjnhX#^'4B79U0qJmXXUTb;iW/OkAc,]4?'S*d;R(j-/1(KEQ&!%Ri,a`*XnWT)DOXN$IXY3RAFbE_[^FMgEG\=K%q5P"q^r_YX@W:&]3jrj8N\>fflJ>9p'"7E903l@,5#5>I&L9m$ahNj9=PXm!i6+%:#EcTV2"m*$:EV\]SrVoh&;Q52f#;49!8'B=,bg[SfKfMQLpV@!jQcTca"7SGM2)-B>d>/gG2.W_;s.uk'_jr"P)If"bKqt">J!\%pu]p)K'N]*'Ea#XJbWnc7*^=UErCB(JfpP&J:J?.*01@OqZ7qOaoGk^o%Rf`;9;6ae;>T*RO>'GPW1ro:-4jD!c\G/TV?c-@/rS1%o-*?@B+suM[%FB:B6O>JY&8%u`#i'ADgggl&SIaRgPS2IUu^9]q^f.nls4kt#.Q\o]Ze_kb*O?)q8(XI`lX0\/0j30!R$aZ?"EuF%$tb8R2t&L](K%_6b+Rh20)4?WVKS%r6t14XG<-V9K1IPtMg6UBRZ`m90h3$gZ'!=bSHGjnp7+Q0"?+3X;*8`<d+pm-G/02=,k`U[%8oldc-/j8r(VC8(6Lb8'+IF/t.tkIWPE(qJHPOSj\YT0NSn6Dp*Q2L%B+p)ppC,+UKkSk9&7BOPn`th`>h22NImHg^[)fIcbhWF]%mkP`B!VY/QKLS_(Bb#g9>dG"(j`nV$:/`C`cp`+)<q4VZK%hoFQ/`$DFq(:18Iuh'\K^epE^&jrjJ>o"%gOTii*:HtdaQT>b]&*n%@`InE0"D]@q00TDhI`9RIAhCFf[[\"Q0j'*5#94>$6N0"p*Y^;V2\$'Ho3T%5biRi(uj[Q,5RjbV^h:X&eok-WYi9FP;I=3?/GB#%bFjEto&U>5N,g4[ITFd_p3i-aSu(&r3b4[i/UIftOZp&P?$e$o5q?N#d.Z*'>5DR564eK(VfV[VN5Do0\+220YQHdIfJndnn\Ki7%qqtJ[_I*UOEhXG]UI?)jiL?5rH85^fNe/l[F8HdnNnD&f?W.6bUU1VV>?*V@88igh:S$1:9HG)0-tgKc[W`:!8%eB2d2D0_pQ>k6%>:U!J'V6R@K+('j,9^]j14TrLgVqDKd2ionYl+Heqo!2MZ;t+!2!\@qm+/p\#eE06jfNFDnu07UCYW32YGIHQl?hpp\W&.ab1i.3%gl:c\7R6h8?8MuU<+9?ZgZh]_Aqf\/7]>aRJcajSB<o;Vo_j#iB)2[L7VOKrel!T>M:O>:G#6rk_V"mrd9l(9:@KH7>@H<&cMGN,%Sa[cW>@FaOOaU()=>`Dm+9,km/_<VIkboAKTF8(*0iEb-!6-#mI1b'DLBuBkpugoDrL>s@r$#pe'A,8<?R9NP4@6hRonW.>8i<Fk%lLim1\Rrpad?i)M*]Fe='k#!'Y;)?@14-3?1kJ!S7K+c3RAtF7,!-?-'8e/%`[fm&N%)*/\1P$<0saWl;g:e?Wi@DNPC]>[qi3MK%5?E9E+X*p'UNa^q6A<?,g1_\0Xe"8EjX<dDoKBmM+qe*bh5p!iV/(nAk6H>GRd=PaK9+:d+1e*l/4k5%8C0[eAPRNs&.7YX5"e>3%)8:D4b1C:\#)O."*/n>2d9OO^!R>sRU_:pW*sN$i94eI3P,<)@]Fb"O6XR[6ikP'Inol,9(iRPO]5Lo@=]m3R=,<fD->2Ed:"E;=%^YJASZSsi`]YD110;Tn_O^)UUkKgl7qt37YGM;qDUMBgCr71Zc/T!'#8gfmp*DN^1T)-dH-$"Tqr1I47HeOjkZ$RtsD6$Ph;16h2%+3g)2I(/sh>nrb!?P5.cLs8&"\UpW6V@"DLdDWl/*_jD__kW!RCc"$+3/OO,0<<J/[kA<hoA+L&bF5@Yf?2_<<p$+4="cu03T]%R%_am?Bs&_nn*:+I8oO1%$DI$f=rG1Z12RpH_a9f@e[usS(jS!mmpYA98$VK:+a0:m%gV:pFqY\&3PJ=Vd`\ZF^>i.15ZPh#P`&=]C%m66t`s"$Pohab0'e5KDgQq<5CNt]P!NJ\XZ-gUi4A*9l(qK5Fi&(^>RZ5Kh5&8K@To(.$\Ip0]"RF(^D-gD=#HViTXBqQ<Le^3o'%V@B)Qr.hZ:bZZ+Nlo6nBfMC2]!\&$Y')*B,DjV%nOpmQ5DPd0%QtG@#GJa3"X'e,kB:0!`3WWQn+0`XA2TV1qJfVC!9TbZM'SIMh%G,(Y6_$U0)")6+qRCa;q6OoAlMT5O7NAH-A4Kd?XksbpF8d\os)cEHEPHj+%R+=T,V;9:WQXG>:0Ikht*$,U+)mSl*-1)KCjZ@5p%$`hs6\a-^l0F=LRpe=\T*bLC/#gI;]mLq7=2l1t*rmXt*L*R(?E>+gbjq`u#f#?0ZcE"]Nm-d*/E=>p?jYnZcZaJ&5b+$!:;`ZLY%P<C-r.,Q;dml*/qSh;VNHRd`m"H20X<n]lB(G+DoW7ApuC+nUEHO9PL]6mA^V@hl:`"^3ikfVLd'BT3.;'P(fJ_J.GRIH,CY()sQ%0tPP4>=09$iFRPu.X>M^+'j4dnr`,;CBsk!<O.PdRG$o\5-*`3mfP[KXu"U5GAD'Uom?Y=^/^Br\\dBo6?Qfa3n&S;as['#LXm56%NMDs_dH3.O;Nh$Zh<q0(04s(9=-9kXGm3PNPj>O8BD!Q/49`?5C\q!R4q63]1.[V(\?T?7*a9lOd.EP/P9RTQR["G+@&LaP.td2b%N7O_[XTJn&_)VkFC36k`D-:n#)^"E9e%\,&pg>&[kVF]DAi0=q1;M^,eK@bS=O1cn2.PO]33a2</q^D>HV)@n(3L2*-CGIeWLT(g%EDc%"o:sq)A.<70[L,RKZr:/jKPKWr7=;Cgg9PiV`-ia<(FD[Z>)&YpM';Y$hGr8"%QArenc7`$;Y&pLeg4SC>!]S[hiK:^4-lS3%(c>W+o/Uk:O-Q^^_#L27L,3DXa<iT!nlj4>Z9fa0&\n4]:,F^n5`DF*j,D5NPb<aOFMJbXQdW2:[SnM.cH;ir/Rh=@'<0Gu_8Q39%q:n1][cFuA(6]6.8*7hE+Q_=()[s0`:[Cm\[r\%a3]hR:S99uPHQQjEk-7Lf_JTum$bNQ96E[b>=L3/gO!Zq*1ED!gZ.</qZCE53%d%edD:$hM'!-fq8nMO8?.r2QSX>[jeqW&I[o)WuL\9R`$L:\[VrKiTcnTSq<`h$Sf5%!1#T">':pheAT7[n%;%MkHh+nhhIWA*l:%i+SYQCB<Cc"Tm@321TYjK"uNB!BNhJ&/^YU!hm5K?ir^-q;aF-+]L79dk^_k@7'EKF?n..nD:$2BfU=2f"=\D6LiWfP_++*BdNDD%]:`/dJK5m%:[-m(-NlpBFb#`EF"X4D#gkp\=5qaXo.?^rZD?ShQgs36<3?_THS$SUpl*L^4oj$qga9"I$F*aE]7&5%8N^B=J\-ip%TD9a+]AjZ(lqJV]+RqFYI1D9@X$XEWS;N<!4GH3"D<+.<Ya4e%p_a$n\]bEX6G"?4L.#/#BFi<t,O+L:mXT*@?TgCmG'.TJc4r->%Y("uES,mW[q6;'c1Q\F?EH5&MA$/C/p&9JK7gEs"(M%0UZ)\C2r!%B'K%TgBc=IDH70Zj1TnUM:GkmDAY\<CnEDDODI.KiUUQGYj%pi%I"ArZ``4dqGl++L2mX1q.'0g%J'Y$O$G3ZGf^F)!PfH.F[$f8=1_<t]M'0`GX"0i=,rIjJ65U#)Z.19sL=3).*80n#X:hfK3$%I_ZbH`DjtN?R*RCH)8H[2Y0O^jA5D/j$oUq\^R(eb70feNg>kn2rY^mi?Wo],bp9aZ]1*8Uq4I^bh/kF)?-N'Yrd+4Km\aag+a1m%67'N;k1D*W:6'HL2d]5?K0u5i_ASK%7c'.4hQnFc.V\#G1GVG>T@_L_n:>LV1e)pQr&5r_UuY=74GoBY0%t_tN7?X+SV5IT?p",*%`'hVN-]JfGOV/4MjY03"Flgg(<VZ0EVr9WS.;Iar<Yg/,Z.DKu;-,=g0G!:o1IZYl5_)A37u'*R=6Aquma!FiH-gL^8n(j`d^;QX%\DB<LmQB[-Ai/t>\$k`.FpIWFZXTfpG9nRka,np5+UuDQ&1QW#nLS;aro5<F5IP_JnEYff@Pa)>6:'K@!*>4edJWYgOY2U*i/cn,%NRhMI*;k(r#&HMA3,<I1j.9mmF%fF+j&on6gdf>DOaFkC)`)^5^6B2f<J6_q*,>N6%Yp&sm?l(\5q8XVNc4DUga)4Vk-&DZUA.-n%.Cb\k5A=Rjo'!`X9GBD8o??cSrF%pfdtIb/c;<VG)_%jm\5S@-,E:XKJ%IJomJM0kH1t[gJ@G.-8Q=Z`PQ>^c^QW`Zs%=7!CmOpI%0*C(VIj`o.,QiMjItbrj#gXN_n'o(Dfj23\/-[[R^!ZT[?][A2hWt&_X8AOG+MoeZs)INmIS!X>od)ninc.Nc%U3.uOZ7W18PC\C%J3uE/dU6%&Ii?#p^Uo-u/8\eDjaQN3Vn07?7,RCI]:2H5QjqYu\)C0c[gG2N_bPkh.`$V$rsOIGIc/gdKNk2NqhT42>i>F-i/_1=%nIM)fG=bul?b3f.QCdWqj+o6tFe0846qt`0]V7!+75BadjYU8LgKJci,R[b?[[Eb61bi@O6s=.//V"jE;^O:(HFsPF(\BogYPh:j%UG#AtgR&$obK68($VO`*f/R(KE?\PGPB9f.MRQ4`VhYMb,tX;e.LDKas7;!tcT-QG&XBHCC$Ll"F'4VA&\%fl$8nTX`A@m!Q4l+'%Apro]du?7_jW/1N9NfjZC_O`<Y=kU6)tPXudu62Fi)ta\;,k3_aHU8Xna/`6BX@g2Qo7g.TM:R$3IA0=hn#M:`.TN@@cn=QZ4;rF%X<d9r5h9Z_J5fNN[3/up7:).M)jOKUSAhQX5W;`];ackV$CS0lNgeK5Kf02TFFkW7@!NBt.Wb*S&qNP8YOg,:AJILpQ:*p[MnDO;%/a8u:jI9.0k3o2R%k&2QM0UBtbG"tr(V)(M0Rpul6rDFl)lngZi"u#uG(O\n2+]OCZ2TI]nH;`j$d;V6733@Td]0D-H6aA!=k*,G%U]J8>4^(m:V*PcrLWBDUX9MKH%D8?9J2@4[WDV$2%2S.f!2C_o%46Cm!-ModI4:ai]"B`Yea]`BG8V!k"H,fs<[[4]J4<Lghj;k=%8H;%Y(^_i/9Xs<.-L8S#A7)I[OI7Yr\#'+aA0d1*$j)Z4nM$[=CUa:\7H+Q/V53XMW6*\.^1I:X^,3/iFD;NCWDKB.'T*T"0IFi!%6K)QR-jl&dUnRjO!P&=h<YM,lf0Rck,,cT2S)gZl&Mtn^<oZ3sZO*Rr=&j(b\?)e,29EXOUjN!VaX2)/T9HTOR?Ka#E9KPS0L<R\%P+^gO5W*+uM<@I"nN-0)U'Wpo6_^A,9>Dbj84[DjJLOQ<#s+5l%RmW(3`SW2!:GMaktH=nQ'[#N<CNW36,>GC!q_(baD?Bf?lkg]%^.FNcAL1>$S\Ta/Op2$2U_=ke5t$9ZA14/lK%W]sV_;b_Z#to)5SdarG(Z.s"<ph3-CD$Q@D3EIU'VOn3cp-%W<bCZc`/s!pdiTN%]Sa5Z6'B**@Ci0[U/hmTXC+URD8C+?,tV7$8NQGQb%3l5^$+Gg&NH:8O@f]YJA[ipR>`9+&&a>JK$_@0ncIa$B`V).!2,r.N])IK%"o=O8;\h[Gb+-krX!27TG`Yk./iB]pP%6MZYY!;dS\S(P'qHI6^f_$fA3!dtdW?=,e0rs<?)H6f@>TXg,a:>NDdZA7*.\sY,ggL[%DoA_0ncJCm^e55=dYXW)-_R:MM>XJq\mga:7u.0/&YD@AVBa@&j9,KOlNCXkYi_:PA6lKmlN.-\'T_]DRTe>Hh%3tHOe@p;("+*0%>tN$?5uB(\E]TbUCsY8:&Sqg](W+@q9(=CYeLSSP0H8ppcu#e>Hh%Z%#T$'b#Y#7(ZRh;k?nj.-6821M1)X4!$ACA%ZiR&)l(l/+%a<uo+3Ih,@W_DD?NKn-M)jj)-Oo7Bqg+4d.nN7>XTJHGfF"hB/ZO@*1*"n-;Po4K@1c`Yh5k'F3Q-'.!Op4o$-1VpIPu<L`M>@ka%c1;i""'L.uGYWo^#T<`?O%;G9HI<OCE(Hq7Tg@7d4iCtJ8X%dBOif<QRF)3Pi\ZY-V'uOK0Kq.iA2M[(&qR?c&2q?_?'QjrM(=+_%e-O#dLc=BI)<;-%Tc@(Fp_aE1_X<:6i06&#a/26i3%Cj4)6q#1JOh=Hq^m?5/C9E5/]3527/79q,Us37B<WR0?-qe;_A6.e=VEk'%)^Lq:V(ktKM<(npCurY-3,_O_DR9#Z,WW7@Aj^6&eFWn%b<S*qC`?0(0ngKK[/tqGf*R"A]LHH?HmT\,<!Aj#(QcK@JYNQoDMo!X%)97X:.pij&Y^2^c$c+/.@S2u3![9n-9ZQ/rh1,bY&ig*3(tMF>B$Hj0H&ZYQWDobP)/ZTS1n.$3Jts&Xic$bc4<e]0oRh]d4p+_L%_+>eeE>7.i;'i)Q5Ut/<[Y8`@V%WYW!0=-VYlg_--I>^\6)WFi'<.i/HWVNX:8J.!K,9c]K"Nps4dR!OQ,4cq)!_2d#):]3lN,aJ%*kH2Pn0"'J=@Cnmi":L.`3TXNp`EXE_KhUd":q'?7!(o,&=p!4%LE9AlaeFLDZL&AShVI7[.YfoP@[8R![1+k2C(O>UGNNu97gl_%9F7T@YU)h9<"Bqf";t"s-.\O#=TQKV[Q-WcXqCiSjE[,M^c!<;d,!\]js:TG=qN<D!hlSk!jbQ-_ue.U@;H;CM;T1[;qN\19u488%RtA$*]IfTS>Bl_s.<ofp77psR9n@0";7)8hJf%hQD6!_BFBOl3ZN@t;l'cME'g0nR7B">XK'"mIn2%GG,b92e6-$%3D-J-B;'g'`%(YD2/2Uf<(!/!&SD>Re*p.YXA//%RhCLQ]H:eY)O["1rr(`?iuRIk2q).Y'$Vm0h<Y(:VIBkQ?b<?gBQ)1Y[R4FK[s+:o6DPnXL)%RHJEkK)f7FV/'9S"@\Itg#`LA:o5h!]eR'0\"nPRC,4h7HnfK:(TE>1j%nPjr'9=bdKThMr!uV<U4AaY@2qS2/-(80?mgeq+Ab"3%&n(g_FQ$)L.O'<gTuLN+/@]8C7U.j@j!:l&6q(VC6Bd/&H*E.@UuT:$[T3K',FFWbOGRFB"s+mC=%lbjJ_eMs!B!`If]/)kY_AEh%h/8obQU*C5Dh0X;/!QZ7kpgD0GsO.(is=s9)eXI0<"d"c'TJlNT1VUeO]8*06Rhat+O&#lB#lfnI'>;1-iT3YA#;]%W6B!dm"5W2%gC>X8J0[rK_sG<a!G0>!4Tie5!;IjH##-b/&iE("0Z8NT62.-C%P:)l_:UMH%5QHDRKE1'0;ErpYkg\@+,]?j=Cnr`$ID;?(9$@]%P>)66VlC$<J]7pI<B&PF3=B>f8-CctL>b1&+P8:8ZG]Zk1ttF*):9RZSd^;Dj:AJ=F_\dn<&6h0VTVAnM@u="3h?CqikQn6/NOJ@%.&M-T-r=$#X=;Zf<Di;H;?_b.'+/&&C1JFuT"58\5WKmS^c\IK/1LW(KUTjN'_fE+)M+t@$M5>BLkL/R)Xp6(6';7:8sD^E8`2!M%+hBtLX/*_a'\K;)L+A9l`!5$'C4[,>4'P*UONl*bRn@NUC_<YD!kHP`F98+JW1g$hQ]YG91mElf7(#-R(UY/5aU"+Vl\7'*;RVNb%N2j.$8VS5l/`6fs"IP&r;9Kk/@buV^-cqOfQ)L5S$"1\J#>UO\UEWkI(SLY6$6@s0^(a4Q5at@tGMm(.UP-`&!JVgK"R$ibg5u9%%0aHR&]>PTT%?(R9+Vf^$.YqX']IqPHOR@ei@"i]/-npK),^<B-nVFEt("Skjmf3A,)[8U,b7],YfTQM16>Q[p:l-bKZQN!te18p,%#T11n(8H*&A5Id]1mtcXe3nj7bsV\Z"@tiZFBtaq+AZRs@bB9d2e's>PMu:HYQNtqZqsPQ84$Rbh1DB>TKK8LT^H<JB`gg09%W9n%MEp2;Wh@_qAIY2YZsH/cG<q^m)g7,f.4TVd#`-R#pi,LF(/4Nq+m&@,5"Q\`kR,'m[fU!>OmiGG/ngK5SFY7:>ASa$/ScE4L=R5!%E?+heKN/`(dKAB`&;2[2'8EeaQ=Y\b<,-j^Q%AO#LeCfGJ;Zf[n>(c:(Z'0uEQ^m#4n7aP:ps1'J[PiAVN;Qj2Sr?7fgOj^:04EW%:Ae=a[fn>'ko/#;HoY=aGet*E.^=bk$`W"1aSl??$t^n[1#+jX\#:e]r!_7,Lk]XeJH>t2-q^f$6?SLNnQ9_/G"3Ma<a`:+12VU<%n><E6FA+NK8/Xu638/s'-&=LO-QO@g)3Ri07(RhR',4L6o$iD'>*,:'[nfgcbA"qpRVBD'QEJe`PH?eo'nI/X:dpW>[B(\u00foQ%KER7AU"k76.+t8R#A&nTX"&!hdBJ_J@h;07a$a!rE%nIfBGrt^[gGMMb&"jb`P".bFSEjs@5ph5g]L<HH:KjB*1H]Agf>-<.7SNB%YeS^4dV(dmB=5iPGf[1@64LD<5ZB8T-IAEc'(u8aT'ho\'LYBeIQ>b/G-2e,(p-p4[W(5h.T%^ZUXZF:7dM-I:#+jHohr]R'!A6F%\2B3N#1*Z=cW[b,g3\R2/F,hfJ-:kI#poZD-8pLV"7eG#9gDGWj=*-f)bpFFiIH$qFEgOQ#^mSDT\qj;+[@!e8^ql*2E9!uE#eos%kh+lW2;QpLcucQ,8*2F]e,Ye2=/[nNJi]ZR<A[*cd@m76csWBb^;ScA&O^`bTnUs?)GV#l)X%3p;d1;1+h2TNLf*D?5hfucgONT^%7m=96GT&9TNbHcH/NCQ`9dI_4L6Zl*^aBTNOPl>>)u+N.Z&m%@B\diD&HiI#ds_Z)X_LhO(pHDr,Z0H]N6a0lbgDf4U<427,.3T]%QloYrk%g\)&9u-k'6"VC,MWc-V/*LkH(6Es#A9O),"Mk>?7iG_E5lJ;#/WeS=>fgO;8!hE/eX3Z`\]gqBEP9"8K/3"N%EG6nc<[%%G[h]>.\c5eRQ/I"fT/A;"L!IB.FR`D%ES]U9J0>%_%3=25jW/Z!E&)"8e,O-NY_\H)J3T>_54)Cm?]fM[q8hI%cPNY`Yh&T_2ag)%dE!0q_)>bs6OUD5FQNemd=9+E$F>GD5ts[G@D<!>L.DT.m)SF60qq59#*`!dKDGs7PbH?PMe(-@8<mgl0IWp"`ckIQ+h]-X1)/.\%U\.:Vk/l0o:Mh!G*CmIFZtUAkJ4XI>=9uOeC!%^L%4ETl$C&)88.E[+j`Q.[7FqqL27_I5Z?@&d(u%l3N2*A1#%0#Q;o]"E:1P>=%*IT>F'\JGCNfXl1`mN:X;jWk4#^9uR\:r=0)Npc/C+;q96]QnrW?F/*:Y:])-DI+\0oi,CnY,2\g+Bb.Bsh*(-F=W[*L,lW!l8R\%7oMcrPdl@CV[4$rM:Smn9b"3d??LL]YR\5VC3c8P<YCS&*)0/4]gL8te5UMdbOdVK$rN3*R-A>E#+2&6%Smb"64mUORQ=2tKL\^3%;`@,Vj(VsAopQ=c;`AFCnhf#8e'k\Y9MZ>2p8DD7HC@As\gTU%:#,,8AXW'F@G]"Y]r@`Fb>`Zil83TZ-"c$GJ\lKJB@P>Y0G)A7%%S%05/.!N\BPOIh'U`qt&M'jnnhhF^9scdel"Fh+*N#Qk-FA;H()]V@6O[t?_pJTJTQ@R^9aufhW%j;ZVPIlN]utRU29hMTj_,jl%7?Oih&6(K9J?a-:_:UZMhZBfIs3>dEFegr@1hSk<3j9RLCQ,"p/Oo3+UP\5(eFKmb9k[Eu6r6C;loYY<j(R_NH-FbI_pO,an/F4(%dDQK+U'rSCdr)E29tSYn1p&[ZdDQf'(E#^VGI1@ME]BLKg$;NQ7oRI[29*tl9dDEA-@j&PcLs&6LRsTmj_*jZ<6b%k-c@UA.5\@i%8YcFWMmNMjdHARJ&<;p46r^<7B?<UW;D$!C_*G(o"-b3,.<\N9Wg"eT'O;QF2;(GES%<3i_-A6TC;4>uf!$6angMQ%Zt!K<fp"E`%E(^Nm0F6JH1BF@DK;$Y$m)mC]#b2/#5uH=EE-G?YUN$9=._-8SA6^'$;-\rkma;td`b-P#!ZG#U%4,\\fd`?m``]6<.<&9CZO#;"%7AjKj1Bc/@'Osm[q\A^CM!W&f\4DT`j;FQa$:\bVR?MN]c4F7_g,ut&633oUK\NW<bb,+'$$E(^DURNhL1CK6#WgBfZr,jP6TN:d%,2b&4.P%g\6KJE:N:pHmKG6rZ7hQ7#(aC5mOhPp31\D6_T1E)?&?(1SP&_hc]YG:,(/7t\nt9?*Vq]c7G4\0=NSR2WHpZo/a@&f\%%!;r@,C4rE7Pl0$7Sb^&8)Zi_H@h>*JSc`_U7$bA'gI6bM'b6NnIoTpAOUa[:Ggj4PO.dq-JN,7%A-`S9_cPD1W(T]V::qh_C*F!%Je@H,_^Cmf6lE-%$&X2J8H#3D&Ig[FGU?HX9eJ^C"Qh:dV;2dkTE%8uOrugf.*."OOh+!a.*,%,M9?=#?j;d^IR%aEU+nWY$)#r%%KGd%[>O2@4";*Tq-pTi/f.r>`&Kgh,D$+="4gQDQ\/VMJj$H28<8`je34doL!6'YCW3F1;n?!+;!H&Wq02')K'7n\on/]gm=Z"]6%Qk#f^1c.k6!<lddia/;-1eo4IYrmcUN?eRf_c1/Q2Re/M.S?*E["`\o4/37m4[9K]'\*K/WF.6=(61F*R]2tah@0%LF"7W/;A+!3%;9,UZRCD.b@)fN(P-7],)tl?JT*7oj;+8Le[\7/7joVDIk\O]/_O'VIO:W$q1]`ep1s64RCZBYLhZc$30ri0"PG=VDP;kK'Y)$)?%)M95:ckkHT)^'hM<AhF3"]Lq1@Oc#,ONSo4KsOiKh+3OA"9a9$d-u4_J6B5o;BVVE'IGU?M1_f01[,5I8s>%OBKAQk81u/TE)*\_%'&;tWTGAgndt273k]^'s9Z(YQ-SsV^.68K1Ag_&&%.WH$XAkbY]V$-:-I0enKkrEg[\GDkfIrY#,3`=EcG1&__j*>QCl%,AOGFdU%aOL-Z5b2u.>7bno"LPYMm5@%o8jEDQ!92O@)dJU*flBM(3CU$sp;ODlgZS^M%_ccsOp!ibgPGYu1bhdIP6;2%0aa,[.S+4QZB>F-%L>1@@<*6@V5^4.!Z6YA/*Yp*adHqsB2nma7])nB,Cb,U26V4!Z7O;&?,qUnBP-AsmQg&_*OXD=kkuiV^d@>\!8`[_c`>4:WBineG%Cm,$RU0#c/UQ?87-W5)YD*ajcEX1qh)[EkoeR9H(D4#6/WeHfeL":udMm[cNA,ZJ::a&M;2.?c!S"Znm0,$XO)HisfVVYg8Oj'ld%I\((X66TM0k]TQR6<(BP3/PV.(^,JA[p/>`cn]4mR.1qA<$TI6LaW`E8Mh:edqs>e#rC:q;[;N[d]f6V"nd`.!lgKrFJ[g5d.mer%1N\YH>Ef@H%7S/a"Djj=<KLp(*<9=&9N_Xe,f\3I2aZPo[V/4nfKu]7ZN]m")>_U,$[liVl3U``WJXoNA/edhgjP%-'60q/m5iVK%=O:FY=YPLR9.FXQGpCT[CIH=dki8W(4rd0ggbkg70U-.#b-pN$Ch.p*=<0jV!*1XT_T8L3,b9gGZ`S./gOO^Oc[_*2;HZu*Wdnfi%^U5cTe],nRr77oCcmQjK&;U;hP"1>.'t4[W7AO'))NA?+Ue)a6)=aH+JNE"^c@q8a[V17bNDPn8?\(2%NAPc\'a6o8+u.<HKh-Gk%2\LJ^Q7#"&L1iL&_AtG<X)7+E#r8ngK7FPQOkL"oM]gpfM54&0gQWhj7m\tUc#cMX6f=\)/0nL6]:t].G.OK"_,_I$1t!ZRN0(%Z%'8$uugnj'2^Ui96B9ji6%X`m*%VJ_UBV@bGs8,[qH@Q#++>#Dem=`>VTkAnYmQkt_K&0gBAgEq0H1(*J4HZ$Qr^/&m7P`qeGV*Tq%A.Fk*\$OU,_3TJGecI:U/QiY0-542JOp,9=nLohQR3]V79JU*Nnsc)s@DPh#mk"nI)-[`K;H2,uOr1\;jg]=XW$E6;_R+h5OC9A-%e0)0Sk`V=jBD^?-M(XWbGgr!8*U/_hX1Og,,@*&rJhHk^OY/(SQ.JO;,UK:Ecf<`'\G(IIP)q8HW.ml`B`t[[?a:)bJj0lPP1.:h%T<fi9=7ZT<6P''%?chrXaFVCXQCfXVSiRQ290PG`Lgl,j=UrAgA4]<C9u+i5?Q24'i"<,(E$b>L9D4RTkM@ol&%If#&`/11Q%\(e%#/D-W''%N!E2k2?kSf9[M2?J;le?AH>]u,AD8_[q_`0MoOYH0UD%9L-Mpn"d$Q8tH5Y6n`q>J;TVW3!*[/E`W40iD.!KR+GfjRL=%"jjn&U1=:X5n2a?8P$3)%TBY53NeZ:5c,eP>O\('UW8XdY"aZ\fEEj]o+W@#4.)07.:,2Y@nQ<cCH-E1VBilj3Lbq#8P&98.$,93%F%WKaN#3p`!mX/((:)Fjng*bB9?BK9PD$$GX!Sj?%'a(@d7Q&In5114^%FCirMP>`W:O']le#5t8HL;%Z=Nr^XaMsSG-Ut(ZnFb3%p&Mn@5EmHMIm6C0,O/_"!tN%#M4d&8lh,kalf7J@j<gI2!;IGVQ:?=Or8]</*(KpKA0.N4Y/eV5X=*4rEf>B:`(N6_I_EP$0Jet`%4sZD]?>egknlQ!<2Y&"13j3/V6Xk+E7XgMROagnS"n4^Vh1$OT,<q%/aQGr>$,DLI89>W-OUkTg[WEad;gKB[T2n-$"seqgO2VFN%)m+KY/BZoE47])5Cn@a+]oL-@:JCrL_obJuSKC#(nom%f`N9"#D^>I=Q%(("aq%Y/k$M?gD"EO?o3/=Gm5'G'Z::)Pfu$][&Z)Tg%!\<XQV0s-<3Ia1\C$Q3MFX6:NhRH$ec1Xt&8p\[.U5Hmi3_u!K!^uA9'r?>#bbIj4MUFh3c&na-8J4nS,P*<8,gY;@-nYFCmYb/2%(-bU/6pt`4iBE;N/]N0pHlc-ga9\#!PdV5%;m_feg.I<9]qVlqNE&oA(=P_T0;>h@>/F2e8rH-c!a([&.ljc(U9n$@`h$(mQ84Ft%;-F7fFf-YT94CcP,dSmN,gCBXFgODnn9`0L[#dGj@#EBAHeg"<Lp3**Q0\O!$3BTMo0XX/Q/q(8hY8<E8B^hr/Hojn"@M6f$ds&m%GR.'+QFff%,_ECbXYNe9(>FB2)F7Otem2TJ>&4;#h1N*07HQBqO;?ke$n2?onV.sK#ALU2,MsB[&*,_!XT9m\Qqllp!/FV_dUK>#%`(lE&(<^HO+Dh9(7,Mkd0dKHO4$d&+[P%c9Zk\Opb>UqCUkPT_b,?./,fD,V7LKN8-XsGS&i&)cM\tiDH&S&P=]11o&hX!;d6^=4%4^td`aZ&sNd6aK`3&+U\PPn`7=ibK/]u=Y>_aH4'7f0<(h(DK9.ABsMZa!Fc9BX7+(dt]L:7g4^ne;e__PUI_V.^Vigg^r@_Ib%$%S>'.K.+/hGc,(fUSFmT@Jtrk43"aEp<k^-TRtn3fou^t!Odp)cP$'W"LJYI?U05,E<(/..=WI4e;`'DFUtmJgKepTU:5WXlU3c2Q%5;gnK?.;kIF-r\)=9EDNO(Rp&XOi;@@Hlut75RY-X/9Q2d^g4=8s5!BI;a^]1omo]N0_kpC.+/\LrVshY-(WR$s]8Vnq%9TWND+5%D.MR^@os.@,8n!XfB[PR^!,6/VPjqf#O5BNmSnM'Hi=:/E!;iim@5%5\7/I)@7g)>/)B.V,KRYj&7"-<1+FulVJP'ocmJO7XgVQe%.8ptNH';V;@mI\]SHt0/G>I5L^;eRQM$@4c+-=jLR#^a_`8IGVX6-=A3G%)9)K9i>.+*RM8Cn8*/IlKI_.gH9U]Ft>Ddu`A[7G^\%7^,G!&D_OFekPlO,@K.P8AIp*55\at\sXiPrbk6`V6,u/K6J@14$s6/6;DHFWgpO@71drCHq`\2&V)Uh<Jo!+^fZXT/JWT>oQSZ3%O3#tgpm/4@,'B^]<r]?ks/jdr6hhcW`NtR7]AVM$gE^`m1GH#$T,Q$t/mTniMZVQAr>22FRFc!L@PsU5@UoFe*TI5m4DUU67(h]W%cZqnjZ$J#PdiH2ffgl),qqIc=6?q;>o3?OEl0EdA9=Nd@[jB?%.<Ktf(X?LY8S57%MWCbk\F,<h5?_7@Sl4pgp?-(W\[[U3=/8:P%4(X43rn<-AK[4L"B`?MkA]I4*]cp7O%;fp>^":Ze,.?/$o:'-2llQgd:QgOI-^hs1+ebKbfK6gZFTI;9G<J;qpIMR`$I!Z.b>Odo%iu[$N2\pbD83<dd*MHD2Q+`@ZXdGBLYn;V]ME4O5Gt/Hoa!t>\Vfsrl?5\j2+tsG>Vrb;DqtHh?L"!r,nDJX+=n'*[-#SU>5jtTD%B'rM!h_G%E6js&VVB^M_,TntXp,UNf*9snUC7m=X>:5kiBg*G'd<D\2"`kf\mu[1m[*4KC-V6_`PK]ciqPI\H^PKVqpT!>)>P+J]%\o'/pZ*gSgeO.U$lQp*^PAm,aM=U05REZCo5BH8OpTuOgIfETa2hkMV;XMK*<'lm-aLmSco-HJ#=U!d!mXDCG$IJ[mkBJ2QHbWAR%ZrKdq4Zg'>C(j]-2aSAU$S4ZN'TB="Q7Xdtn!Uts"WkCE82RPeiBF_s6NYFH$5m)8Op%(&$tYEb3V(7_dk4Tl@$t*-4CHj)*3^u)%#oJ$Ga3<FJa:;<q6k5Mk,.+-UQ;'%j]4]4m/:/^?l7tJJ9W=OF#KrM)1(=pUY\Y4&npk;m#3d_U@$TCn.g=&b\RrJ94QUIMK4W[U%iIr4Q<i9La(g)O-]:4KWbE=-dZ6N"$g=KY+<uPbdT3rP0]/Nh]_WM:XgJ&H$#0T:#I"Q"B(eP?SH/D6Lai\t`KV#*WkBhbk/D9^t%Q8(JZ"dYkHj;TX3Ooq#(/AO%3&03;(^$uae>?4VdJ7T!t]YQ@C7,MAiU()%F$k\=4=LPY)rY[9AE3`eX)&TSrYRKmW:U"Xo>6"oO%5X0aNAHZa4^bWu;?lAe!0<d!#*%X0,#Kr^2gMa=_OgIog%".%n=9e'b$S2CRq#`/MmI^pS4gVNQ?l96AT3rQ!pC3F>)YsZ]YUH,O%)7(;H^bURohI%5rZ>ZrU[,=`a%".%n=LQXX,-Yl$M'7L_gVK-TbIHgjYRFL\:U"XoEtHVqi9\1nZ>G\##0Z^>AH%*jHhk-4=S>;Z%#?Z]l_&FqP,kDJ2D0L+(/DE].c!X\d0&7lUQ6f+QAP!YFfo\9s7`c#hKB3"3b93i=YRH\d_(l;I-WmgDs4gJWHTDr*?l?6rhI,$'%Z40b'S>?=RD/sVP=N5EF_(qgTI=c#Y#P\MHp1;$JJ7YD"ItD5^J9;+?<nsS_Q7\=Aq#JUBPquONekrUPb<hB-Z6OFp%#=<UQJl$B%"NrLg2ctejncm:%5O\m#O>HD2bFZ8WhI%4!;EhoPk!Qes10fhmYRI?fhd@=_edF#j>1^Tr,<9/bf-Y`pAZ0fXg<1`Nd;bZ129ePg%Q0`>>YAZKe`nGO<a8_H:;;4qugdQ1jC0Rbrm.WJO>O)7DpAE3Y]q27<nuD)5eB;PnZdOk-riAIoBmAG[SkXGj9Mlg2HVMI"OiOIE%RoafeUfc"M(3_lmW9ngt<n`[C_k6GHN_HON#B`X#1AS?3[:NC@q931!;)u`k>RE"KLt=#W'#bk_(;)Hd?D-HZK&oP&=hWmoXO(lb%GD&@RjJhQ<\%R'<JBR6E&X)_MN]c/6h_k'<U9pt9r;phr/FBgJmGo-<bel#eM5dlB&`!pb'b>XnAOfF]Yg68$&Q;`4"<._1dd:s5%f,alfnDQ@RG[(IMH"n5NAT]$8/hD_h=C"EjL+.IjPBa<KfX*c%+K@IDOVN#gfA(CB0&[B=!2NZGOX%G#[XRH]=&!!UcU:G"P>7N(%a*FU(B:9UJ''me@\!i>ImFIeH0U2n1ULm*<Y=3ebcD^WRQdr/lO+J=Hp\T1Lb*8C9TjW29TZD(#R"%PcfGt=[9N_A<Pt+2nCo/95%F/YM2Z\j>&`M7,W"`)ULRUQa18NNX%a._E:BZhr6erYPPEFeK6OAXT*mq$+Z!]^aE#\J-!LP"[QlMEOT[%1_TLI7a;\aSQTnAl)L%9[KQ-nQ)`mQ?a04r98C87tGr\r?!'ae*ZG!fqX?;6h`"5P0^1pj&'3tkM.qA'U3=!ngGp=c*9a,SOm937?X'/!K"@sk#!snK:"I2%'MP@@R5;Z!8GBU$o,TC-k6%"JQ7!_4UF7R;k3dm6QC5Dmc>E/fI,q53*hPB(Jd]HoJ"-i4/;%-NR=NMA[5enJ8,$>E'c8[*622(?%cXhB,\r+S"2t!5Q?3%fgo^#6/oe\5o,pL%ng`K(;j=o%7K49Hi(!fhMg`Q/7=R+ek-M&N%nh"aSkg>`1-o7`=2dZWL^?/2)7-h=M%'^eUZ;RXP]kY"0M@<QiA+R6fIh3mK*VD2:q-B@.H'1[59M3*EI!Qc2#Qfto\HL`@Y$gR<<1AVW^O&fK-NeTr[E1@5.Pl9CJ1#"TV%et!+<m"R3,i`ja?1Qd\p3"oQ(;<MpGFACCJh?;;.]9QSXDZZs\3![,'88cmgF=(\0#d"AFK!;$"`-iUrK=K-ni!,K/'@$aTZL0r`%7+ud*/%pca3Sm/eR5Z9^`XMUrghP9oP;f3!AM1p?;c53/7^ET&`->MF9ebg6#_"nddl1Q$ak>"7H%LQ\O(hhO]a8#(`<tP(2%%3g%B'ms7i8J\aG$/;a;n0;h]HISoid2>d3"runhrIoBcR&Ys014aicTnok@uD#EDQGQn/8-e`Z=,Ol=m`%9\:a$S1iF6U8?1o#73<K6%nd-s3#2(]kk</BQ8mTT\Y(kn"g,XNo\fW#H8_)la1:dXGJY#La2b@BcYQ2q1iTd:!0tIDYi#hI2*6jTn5khi++.9dP8nEYAK5P6s%-H!l[MpMTX@SnN_1D#e_kETp[*(0?XPgnJ>8SU\gkY#>6LE6"W7_92q6A?XadOC;1,cJ5ro>IO<mN.Nc`#Kp,^g(+88>[M@IElBH%7Z23Eab.jFmIsZQSA1d5kef,J,h6>>*f9*.3/`u8F.-YAAH;AtGM@2)K5C8bOsP3oD/:]?MQHM7=UWqhXC2+^DA^g3liMuY$Ai'_%a(<7C2_ABKLf=#IT+`:\b?Z\IH4Ab;,/B?0NWg@s^4?pOfGnC9PlCOSfQ>RNN.9W:_g)p2q$D>-Gu-2Q0&l%<FQ.`aK<DX^)DI1;%[>^H4:09V.c,f;(D/W\8!Ce)0kcmu[4@8d,!jQm]m3C+Hj`JF>.)\aH*qiIq;?RU!TJ_Xm=oPrX*XF#LE[3oo/-'-cQ@1;p79?Sd%,aa7mZ/,:4%M!_<Q`_^sC3?:^f*br9h'.nrW-ACL:/;?7`m)rM#+E#/E'b!b+DWMJRDXZYFQ7"8))\@n.EA*L^)u<H2$4r?E4uT5%i,(o<5ta2g9E60#=2T\4?Eb[@6+@&'X1-;VL[2bQoT=qTJ4jtD.mnms^WK_)8[duKAqH<pK\^b-=C89je'Lu2_e6_dIk6O`lEIKT%H^B=`=10aHQ.2K-"=?f_?WXQd_?Ii)o)4`HL1M2XdBTpK]WULsEVikbkGU8C1PT3OK"Ds\XA%>nT/YME:`JDgDXY,MKS!7Jl=X3)%\#jBL!ULV?p/QP8?&E8Q<\q<uLobc>K.JD>('G-+g7pJ6d2g(/crga2f4@]g>Pd,3`^[3hd86h'[L8=WTe-N"b>B!>5J&5rlRBbD%L=HK=!OYGH)k)L0K\T@fIPJX:'W`pe<@k>l_.1N=O.s+aQaS+g*]6_?jiL##0^'-+k)KRf*j`spZ43A)D]54\#6,.I-SN$q^[SdG%n2sPobU*RD.ksN,jk)0,MGI0eiH*)e._6ebd\?0YD31>Gpf\__KA.mAF#f84j?,\l/4F,9+K>1e:5o!`EltXiUd&9knoFu:K?A2u%QC5a5lH)kTXN6G9>)\WBo$Hk:m^\E%M41%C#q-9Vh^jBbl.GW](BVX!T"BdZ^N5GH)7W%9!X:5YXZ8;PRaFB_=\`91-KH@!J^X0,%p=V2&*Xu-,Q3p?t7,-/X=at0*V7(Za9Z4(*;sh$$V?mW<Lt=h`GL7=`)86A'lF4BP4:O9]8.8ld_j<b1Z/,m,Wr/i1*YqHWh/BAQ%A[tH&1fMK>UFq!$W`c#<KlNCj80Dl(W^!'(._Qe+QnAFUO!P[5aJ5Y>@m-8<O$nb0[f1QPM[J1*8[bEXL)/BCPusne[0%-(K-$2L%;_=kc,UdRdX)1au_(NT<Z'BUOiK*Sp/-eeg;sW-th,HHY1a]]8iJ`l#P)tZGf!O1'0Z9L:L<bu.K)6DOJ8U3:;Q23sA!G)N2q&Jh%3j;KWFpP9".)H+3/SD1a-_;*b[_W_"(,dpk/97!9rtL\faoYN+pfPTi4%8ogE=oYT*A!0sA\E3BpTPYBn"5n#g5ANX<;D@X<O\hM%e2sK04ZfT@<O\BCb[;V2dD0ioU2\T:2*Zd=8_0"hBIGVm);ZqhRqfWp"h]L4JtbV2$)<e=]+7&q#a,nGZ`=7Y.-,q0PCX?M*73AG%Qfttf40naZ0nU[<A4D]76mP7"89SP<$0VYPA4Pe=0Es<^P+C]:ZBbG,Gj^-<Q/C!^W9(0`*=]-l"*090B87f!ULk4^N\Wu2V/(-2%oR")ZC_Xu:$&W8V=h"^"HJ:!6,2$,'aNX]NA6gL>m#&hm@8sNNN$J-XeUenS71sMTCJEm$ZOL_Dqrl8HfghFArW:&#Z6b9/EXWFd%'uKq`71r7ih.I/<[$o!rr*FG7U@<R4#(e"d7&G2`N-<CCTYH;*(FC1+8IW=,X%u9<jC=rLl6Q-%9.q<)!iDj9_"=Pmqa?^[_)nt[%X?O3-,dCd0LeS*V&d-L>+IOK@OA%DS8Eu\WE>JnDr4R"$RRWD"W(r:aF%n6N@/ec'^#Pr[8N9NA6odR(biU'>`frPL19HH(,JTQ4%*TcP0cEK!hJik(&@(?c5\,h_S?S-8m]?5rJNF!jQ-k\I"m)sjU`/W'r"F'DN3l6.DiQ`K7'QC_Y39")SV8SA=XJYl[\C$E>,EU(]%2]ttZlgf2R-gGiBT%O\nUJ1`>""`(8]f9VLR$*QQF7dB[$n.rh@)UNuFJWh:]9J(*!0E4DW@p,bae0H7e6m9TiB4M2Y&%ekS`.`b%9&%,o)'-rL2B]7M9M=-U_A;J(j*Qn?`JfhVZjhgBQ-cU%N*n,?@qcmDLb9FA)]ZBJ-Lh$r+PU$4A:aJT$mH\rpnMuo,D5,lr[+-h%9ViHp8_q18\$/5]\q(UdN#Z`_pcDA4Nl]l'r"f#2RC^dKU\oS;DK&#9?T`JkXCZ&n7!&*MV/C5VG-C_@V+TL)\q-7pJ`3DB?i_m$%qK_s[lKg$tDL<JcFI-(<7O*'9La(j9aU<Rh9p.&*2nm!8G]X3%dH!D+K^/2P^Q>"jak+!BaSX?c*iP.:3??p3(eQfBF#s.^8V:.(%*(VUdD2!'#?'at#Kl_RD.D6[SF#r;HdUB;:3bfhfp<m'Cig"JGhRWl[XDgpiA(ReuV%q;?n80/jO]k+Sk&O6;r`G=OiLD1"_E%Ok%i%tMkjmNX/Ipn%P0IU???9!]BT/e@%,>mIL'LU0"*(YPd?!K!l+sO>I!B=HCB24/%0^%T$>N$R'<@"W,:QZo"39MS4PtI2d*1hk*%-t0(4'[FNF*sbDkF7@=WgaJ]1Q+=?)3Yp$*#`e107Hp?!Mub#sF1OE+VmG-1S9ReRa8+J6I]AdujL'%OR:\*Uko<BprL0"s_=!9;%%VB^0n,9K:n;^t)7-tsXrK@,T9_O('cJah+.q>:]Z\NlD[<"%YmTCU4SV+DQ/QZ6=Y$kL1dc?5\pY:(VPM/]obCFMkeO8dEXq,pd%YFPd;/W&$'q0q?7]*A3/ID7YfOTkE[cg.+qkO$Y9B&uY`Nt_3L?/JB9qWJ-,SYn`JpI^FTH@VJ[j6mr]XcN&9g\T2,60r9)FcC4T%%^1'fe2N19F5$uSF^j2C2^J&J8V6i*A4D%.(XY]knf*(<#N:d%0IHV=:4@g`aL75g3ZDg:#t?/S@02<dDC"rcF7`nK!'F?Tjlhsa%/\UL5[DH`(orX9l-f\%\Y\K'd3V<goOiWOYL;c(D&DX`>933*K<fQcf=h9g22O'E_YcJUW%JF"h)>t#.-KNG9DjW:i>mC6:1?5VW%rseS0?O<Bm1XSjZeeuZirHN&b,7=PmVT=qAK)g\9.`EmY;n#"),:?J@8V.#1AB'2\2r.M-P7.]qT!o.?"ce6#O[#_nXtODnD^U-)%dNa_*j\fBO-hGZC"P6.,1`RaVEMIhXgT>O#cFA^PJ$7^a,%8`rqF[jR_"7q_3t8>+:0f<RVD$6s4$:$5N"oVS`e3U#<I/<k`$__C%(BgAB4lJ>k\icE6*aG>lBn!mNlR4?oCJ(\mkc1J]Z[?a[&j3ZKEul;H*]j=PYN9&]G]8`^$?&$d%S2]uj2"#*i:$0nn/faHF<4[o%$4?:B`/?-0HmiqSR(VboUVL<\/-oYu3)$C2JjY+LJge&\$63)D(;!N'Yh!8k*=<ct)PJQu&f:sF$J\9`'Y#DE$61=Wnn8^s%%u5L%PuQ44Z9BSb@,/)"T4rEKa6A+*k7!r;l:K26&FdnJM^YcBE1Ggr;c4&M_P!D(f@AgFPuPXQi+YSs>9NgG>898TAft4tHR9=7>JOLN%+MqOp(uN_sE0)L;k<q:g6/7MgK]=!YjYnA'=.P@T>UDuIj#GMQK<"Nbh9Jsbga4;`@BFXa%M>igAYH5j<!.u*]3CTUNP?UQ5npa@%M/\P)53#$j8G:=k\;nX3cicU.JL#hGjM<-6nDKH\G]6184?,t,9M%+')"\Y5362N.0d7S_ma@1%f6@0aT[>mTc^i5mGkg)m;GE3'%($ED]/)%4FcWLSr*7rDK;<5R`S>;Ynm"Q+3ElEXJSh^5ZZ/BRN`h"WWVDFM1h2[Z]7&n+;E',Kq4:7$m7?O^F_/Ui,!XXjLFWJ_!%7-R5P$SKP["kOVE*%.Y=2ZbSs_h,eA73cjh*$c`)35:H1_K.<biaZfIki_Zh8DeMd<=S,,#7HQlatm_PK&aQ.A3I0T+L&)YZ/Bl4%]!YOK1b^@aUVS6Jd,;Y4^mbNe0$hEqp3r0Y]g&ZE2;%fdC3lG\=U46_ebaLh%Wl,U`89ri,eYe5>6fM)YGaA<k!"YN1)i+;IH4Cc%>3bh\*gZDGm/?<;`%^ruG+[IE&&C!p6fcf^^..'&\+]>r=+-pV5W0XSQF2dXlfokJ"`MD<cIpq/T&/Df5,Lk53S19u8EC7#h)hcS%A;KhV413%@mghgE<e$sW5UJ>.m<u(2Oh5bC+P>6]^eSa&Nb(FO-LCor3jPNb^:.$CqZo'*RZSKb+`^eZ;s(J3B^7krB"ZQro`nA/%Y@Qp.%P;:*7Qfg0jNh?$A&cGC3)=Za#L1\P@#M?0QMt:5Xeeu5]V?",[bqaNSUX%>k4<@VjY/ce5N\WEg%cVM]Q;d%K2IF-l/Kt-%GbG:cI;P#9d,dmNXo.RQ7'cA<gS,IqPogCn7fMSF]l!\`W8'!i&u[cDFXfB_T]2W=ZSL,pGQX%fV=G0r`)gfq,7gY2$7IWG*)(>d%B:=M-.CYLtNnV%q8&TZ-_tC![M?=U4MY.63:iY:4Z(qgh:@QCk`?Yad1!'i'j>ZmV'3+&]3IB+<7?2+e0mSA.*4b:fIa6?#;cs>q%)\?,t7578OXNj)M;4Kgh5fLQE0C*IF7g/-5*"D#T9p,Jk?SYfgOq8-[:m%e2].6-8]Ui!P"&sqI-DQ3NOA(]l&la6X^ZC\%:_=AY%U)a7a%YUpjUjei=(&EC,WLk^?,WOOWeX6/m.RLGA!Sdl0%doiM&$1R9(+S[TiqMkb_i&F^P#T5SG^@)75BVF2D)e]>?YPgO79ks"%C"=WYE(,^f#K(OM]P$uo)<h-;S=)J7@M\L[OeP=8f34]=>Go`[\Q]7hEhaCCp*?jJM1lEJ=T!X2%p`$c-i+&)I_^5o)\maIaK.e&%na/iBCcUC%<2ZPrh]<u<b;eC.+>i7Y$8"DQ:b]c>+F*@DY7=gpA?%ZI*g4=)N,LpaPSl3U`8EfFPZ,4fOp'\AaII1pDc-qSna.L1%,,\=636!XE@b_L"Oa:Kl&(6BjMfCt+Y#f)f@kq&=eJS%Nn&tTFM/ba^:2M&lrNerlSG;gQ;l7RngCJlSGN.A<)JMg`[ni1FgF&EZ%mJ0Ja-,)Mf><2Dn\&T=0CdQ!!,U1\uhgWqtRkMK=pRLj0l&Ke6bs](^?Lj<u,MYYnk":;R9W]W@\e<$Ai8pM/2551MB9-K[2G$\>%\EEjsVF!b^`tm;k-=R#Yl&+LnK_keYRh=D7E"A(r?noM],XLZ<X?9ZJ*jUo.n8j^0iRV:m,#1V;a#I/XM/^eI1A6WFYDkOUiLY+`%Dg/<^k<U7s2ao10o2IXj_[6(T[p('3A+f207_"5l7P;Q+&d71m,pVN,gV?f-$29O'#QB^%ch"KU6obPIgb$aoGJa;$$FX;pHYssh%a,Ft5p#M':Jo=UaZb-S<KB-.\;T5=N/Z_)[ggb+fOW>\%6RKRs$2<-m1D0&c'3]_pmNJnTfLEB+,Vk$D\3H-D\5+k)h"."7Ku+,i%(kJ^>*l:'N[GQg[5FRr2E5FaqUhF4'\Au6aWE1>";j"ECAJfi_:VL0k%ClmYjJSI:"H@@rj]<ufqWPBTL':m#!it<kV#0WHm9G.i%Rb>!(P&@uYZ8Cp?^S-/"eQM2%a$`'Ve=?Z6J5K)<K_#Iurs^R*f9MpF#X>(,LU"?$&:0Y6'mY[AlS27)63Vk7CN2kQbuu>#c&\PF%*@NF9kuWqK52mt@6:1kn*t<o)G85Pl#b"@Hnj=aU]D8tep_G\LLse$%'&aKceBkE(#M5fs`;Ce.#lk2@=$",t+Gk'"j\_(UI1S'!%FcZ@7GSZ5%=Q7X_FbQBp?1:PDA&ka<7-o8P3tOR>i(Qr=lJXB4pC8Oq/Sm$>*H7k<Y^T(bF*@Pb(@:BN8Pf2=[Wd:k)qW+..oGYo%J,8"WmREt.8gu[MEhe\oa=>+bTd_]sm"Q=9kgA`tp-qe6@SE!)m'abP#k=TG$+:&YKt^(@KGaj:gV0aOR@\,;o<,Yan=Z\%"]:g/%3m]8fLX$/Vi<?Q"c8/d9`(//oP<0s25L2[c>>V>7)\.C*HF>O%c]Im[dBHP"p<R5#9GfFeXtO9g:=OI.!hLUj$N:G^>6r:.9Ahk;%n'C]r:9oqHH7`PZ;Bi@K;i);tbOd]I;4hUVA.QZ!^pNQIn?e>j%(\8Vos43/,%CVbf@9Vf$B/ss2^K_)0;*)N,I#a&<Y<+HL+fSX%M&,qJ?E3)Zp_lBLlUJeU$AY=GrF=Z!eT(1'Co!W,[=BDc75Dj!Np%6T[\2ir(*.lu<ni<8;'ZPMlWt3d!fdO./hU2Y>8erb@$QQ]%N.S17/h*%p[\'B^YMR)FDd?JiRd,.@3_#!ZO\X1g?<rCS>_Aor7]_Z^kb5&_OkJUt/)2WDet+Au=ZCco,BQp?VTHXX"qT*bg(SFf%3G`T%.99jmR$DVY>K6sd)26t[(#ECd"tZqCniIPnihYM(f`u7(]g7$A,9,[[V1/,$C.lCoE="sHQ[OT*aJ*=D_pfFo@ZK$fDdNcr%@3[C*=$sZokB(24\Z_^gV/*Vg[a'c@GfmtO>7MLZbigJO@Wj@jgRr?7WDpBcrQK1p?eumWo'H<r=a:u4PAI5]X[j8'c1"8se`"De%@<^/s:lt&2G4#S$:UWiUB2BnKl9c:P/nc\>;cWVMo-%p/)r60CJXrPh0&fag*b7LH9-qZOcQIGK<s]B&AobPe^ObkilDKV=X`dsu%B0*4">afU6RFu(Mkt'8d!aPTU<$A9QMgm)$V3EqF#*(''T"u?%beoaHmttm(1ZUme/o1uM[J!Kc0aJ']DO^.*[5]u=V/s-)Y]A@R%A'j#pD_nEsKGhMRUB<%0Hj$U(ja#&_ME9a"h#1H/)Z_P/ebW1?^nl8kYH(m%JT)Ci<">4OX)_AZ/(mQ9fk&I3g\*cu+-6_,=@s-b%kB#/CNl.lG.ZhW`=hLSA,HPn7+t9d"E%-`g7$h:BS17eRRotYbWm`!s3U4=hmEKMAj=R4ZWcU/$/#__oPMfR^5ROP4dD"(r+F8`,%-CSo%85Sd_dt(4Ch-YFi2ED1c[#akdD-bB\@*0NDF\XO2A3>(qd?R.#;i[M#C[CfaKmlOoDP2MX1eiq7^\r<XU=HA^2os>.3Tb%U%ltV4fHR$BcBP\Q_k%<,HBrg-N8KTm!i_ahK6He46\V8HnEGs^q4sl_(Y4oWZP4h"\%lI;Hoa3tSB%"lL%8-[%T7`?92$>*E2f^0]%<VKu+mRI(!\d(=4L&2)=D//(7]-&Mj[NR5o,fXQGa!d^o`Nhfcg%?0/KuZRCc`-pr1*rr[&t5,pOsTU,gh,G=<?K$2oaYO#>,q4H%cTS:!C3PS*G2I8riTXZ<RDj"!lpg@T/4-bi>N[Fh3*6u<$S]>`_Z2gbJsXRgG7u=aq[HskfERB]O&:$SBWtXhk8f#h,f[`]+;rsm%k:C'E0t"!"*q%`0a05d:VCo(J"t?MR_+'@tE3@3pf[1IS+.-Y!bII'OVlj:m+L^WY$0I,!Dt6gcM(SRuB*GiBBX(tG7$@$oO9Q:U%\,[Ogj5FBbQq`-+8CUTP2l9d;@KAu+\nG5$RTn/mB+j9hAFY?-I[(28R%MV3ah5jUm1\r8K1_qDkI,ehr7Wc/8*gl+AudmlkQGjY%QXeo2Q@k/aF^M<>#,_V$kgKDp.fEYSkB]\'"K417<doo4lS;]eisJG)m@dIufD(mE?E?gV39Sp.f3iIO@Rp#_pDhre"p37I!LTo0%12So5,rXr]6^a3:P`.Lben9P.Fk8(KQq%mYe6VG[VWFT(PE7r=p6O)-ORYdcO?FW?Y(:*s0KI/!9q8TIkp_dKQAd5F!q587qChoW%T%$+a`\%jhISsdUku&M[AmmC)n!C3MS%4=?4q\8E+cSYV;lF\5oJsqXprXg4;'p0i@`C2X=d<5?!1\1F.n^g+d&FWj.@g,oV\gHB%Br46#_*AAn)Z,41$V?D3)R<l*I'<O[[;PW:Y5JM*-/"TqI\mS9r)JJu.L6!A!`UU"ku-c44(.7:Bj2#PcVohi/GBXHD17+*N[EWT%+CVJ6F/VhuFWEUM%o7=jUSJ:-Su%4<lcMNuh:1W/T@A^Em*%s'1dBj,=j\8hB%"+l1;)4WArS`">72dr9uN/Z&@B<!8XTFdm;m%.%R19YZ]upTSQLRS#)t9"nT/0*4_e"RBW,\aX-Yc_r+tE3.BnfaKN':RFeLX4$'9[@'6Eq?F?@tj[lW)4X#l_4QCDQ719\K@hfs`mJ%\;d&O!r^7e$dGO:%fU^^_SceR5XpifA(o6>@g>/he#4(tW9Gq48QMgp+FDlVTmDYY@5A*=6^U)0RaB@;Ig]DNo0-%Er;NND+-3TM%OH.AkFGK#=EF]=t/DeD\nLl%F7P8r`XJ7I_.m@T54`4-.RW\eE3S4-6Sej\8,WUW,qjD$Y7:u9eqH#GZl?ZJ8T1)M$<O(eFQj@6I%:Z1f.Y8]`?]+$OEBE@:4_pEA9J_OPV0Xi_^IT"1fbC4'VRH(Jr9QLVt83kIg@rPn"L'!CJiUW!)'!X41ck0Fe<(jZD)h*Tlgn7P^%gN_%"hlLCn[9YH&p,D>96'E,&XuB!W'VU0*]gfj+f0$h?qetR?,2`!J$>e(M0hsNIdr]uNEp<jVK*b]BR!@M)R%]jtQ1fSk<TAPM%rZJjZQn<[L7'g#5^5Mr2V)-XoreB-p>)L-sni%ut8OjR6d-.O%1jQXbs/i2sn<.YPXs%B?0uG%Kco-l']eC\n^2;go"mdo!*:Oiu%=8>CG>(b.TbYlXS9a2-\<Qa376T`"a06rLkFeS>h^#Up=?BXu3pD[s['*FG+p2`>QL$eGhcq5AI_:nTuek.!38G>rnJ.rm&<Oj_^%ngA7D,YbYThg^!p8.O`"mk,`fZ'@F-U8@%c"89.P@Q\0c.=:DQD,#UCQi]0Dk,lHpo(OFYMi1uVjDV\"[1ghlo'!X:bV\GTj[SGk%KC+@e+8=%kTuhPa4."4Qf`SMC7]P$5r[.2Gqj#FeiBm1=bDi@P^\<2!PJ<E9)T+"0Ge1V"5:Ls)WXqst;uR,B,#C>R:7dJQ(OBf'%+pohf9^,j2,Onekao[L^Y$pMXK3)O)C@s``Vna2jVUa?q*g9s2nAoJFjKV?lo)hm%5P])_(P%XSTD[;&J+SqS*5)7_^^F;V(J:s2%c*(\eeO)5JHXg7PKe/BfN`?Sr2FK=c9/3n'N;>k!FA)BT,j)S.'8KEPIBWQJOjW>]I6fTK@;)YYomCG?\Sal"^5BKGN-\#%4.a'p%?;rXeB;<0pnUBStfWFZba/J/?Y?A/.?W_EFXJC\D-+"F,dZ35c[9g.9?cWo;lWEhAe7fL@Y&TVX<I\QB%f'H0FGI)adorrGiNg*(%5^<'6g#_?j@GqrZ.?8&gIR(45&?a8OK*%rb<9[\`WteYh13`2%cc_H^Z4`+%Piqt%K,--@f_58+Kp"5r"-nm^h&SbZH'Y?VNAm;:%<6tf6?*C+M9*cUPL+WPQ`ogaND$00td1m?\*cn4[o]#Dg1JCoX/S"@40nA>7%?mp+*Y/BN=o$$;@&tKch2FeN<$79T[^Wb*8V0!f%Fkar#h)P<THa*NJ"t1R@R$S5a&oIhSg=/\e"9Ad?YL5sYP\k?ka4<EZ4p=6O6aK;.6[9+=B;XcdF)0]D+G/msE:B7.H$(\@Y:W9t%!HM&p!40C%Eil5XE71n]UGiG"c+"lce6"""b:!2l7h5enA+<<`4W5Y;1/tad+*1SR41L>)pGpDni!Md!QY\,4(44U4kH031O;Qhu%3L7^VIJ%3=_i:Qj&$!)9dO8=3qno=dm$c>n;jS[/S7Db=+F2J@J/V=HTI`AR[,3+qZB4adDHg`Ph-7@]Z-(EYp5EIP&7?['o@EgK%eDa"3`'8CDKe04&03+7de?#fBO/Y3ra%;;j$]`-7C,0oD;nia/QDof)D8U$5DX,MfJ-D@P'0<6@,eP6er3!52F;\upT;S.Ij(%?u%s0n<j13M"7o3+;F\cZi^@0SK0O5u\>8*6[$^?N'CRk>QU?LR2kl=*_3]T9%MOc(@A.LC3dhI!NUbeism=hd_!\;%B>eck_W)Zo?6%mUXZqRC[H!K&NTpOW7:Yb@Km)E`o^jRC\UD&)5:Y*JWQd>8LGYen%S-!2e\cH89W2W.+3%WB7nP0s!a>m[1_]DT-'0N:J0Y@%qnA%c;U+Ab@6"-FXQuTpWM-Y^rF$6(iA)3*8#47pM9AUXc&Mk+H^JG4T1HAUo[mt,[2)"d`P=nmNdRj]PLkmC0X!Heg7rH2cm?=R&hd)%CgHP%g7%i:ER]n_?'a`XpWM.,)V&UL>8O:0P.7Xkp!+YfmbCS73>RUtZN#oc=CEN5ZE0A+^+ZH3"P5ianrUQ!G7/3b[1'-dG/Pra%R_rqAjt`4HZCfh',\Z)mAe:=PX^q<\[%h1uJ*aRp#rFsc]A_[XbAAg*-BF!_`+>EM^+B\hY`qfYNSf5d(INLleN]K;2nVhG,t;R2%9[ADQZ?0Mm1U2BXj(GRm/ON>E8pmtg[<<(;13d;e(Em$Yk$MO2d231NZGHu)&SJ$-&T,I$[Q*b:jGDB&L$U!:N:R#ZBON`":-oo2%Za"nk>9>s]0-Q0Hr]&,eP.L_@_.9N=@U\H8I@C\$42Wu^l!kj0-:rEmfTE#tqR%VJX&-_m]m6<V[OTEJXs":.H<i=m]-JP<X!2G-%DZMmggo:YCFsCdc](K`SD`DNV@:cr*hkA[,<cofR2%IPn[>GORjCK;FY);H)G.`X568&K.Y5';5>Xrg:>Y/Na/kFP3_N^Wn65-b%%``4_'+FD>d'Stq6mU9C"QV"'\1lT\52lYoE0FOA(ns>?YKi_n]K>ckt<1EROFtsj\9s*KIbuMF[@\Rp`8\-d_,8uJR-%"B.UC4-I%AD0H9U9%T\R(,m;Ya^3>Y*[(/>tJY8/kG3c#-SC:kY?Ra@McJ9C)T(<$fbhn"2>\WO(rP-p;$PTI3]lF]\0ZU].e0'BlM^1SDS$m%/a6Q&d,b[b(F3Nu-%ZrBJG)Mf]HCuVEK/r]M0Z5Cn\Q&TY/%/8k_0op7<XuGk8KXJi&!(q5pZsMd>KZ&4%G3W6F#`*C#CH]1Ss1%%U\HR[.VWjnC6kLSCbI?)8fA\\=1sBS1iU/F,kgV;0\(MR8V:Du6.C<'(n.G5Vh2OE%*:Ct:n4_8>AJa3I6k_$aC'EB8^P27/9kMn%B#H>pOE);a01`J8L\_/l9,[s-$^+pL(371TD/56S?^MT,gsN?nc_[g(qA1Eq]Rp1VX_FP+kW)8O!99LkrA#d/4=4fV8Hp#T"%sOX%$5iJqqSPB"%#9Gfa$BcZKI%'?$]N+oR_i`G4=5#KK*TD+ZE)2^@tJ\J=6n/R,A9.cW*h98EP[g^aC(*Gh)JkrnOi"<PR4+;@Gkn,%l$P0U#X8IHMgAiCrg0c6;Cp6p-%-H]K\i"uP#u/B<;!hP">,QK@lM[nPrdjiDNOJ?9J*QG5qp3>c8B?=Op!`1HOmd2@C=4b9$V>I%b&thZXb7H@GY;\Y[\i1[iU#,re`o:X]+nk3gNjsjfraX>lJoF>M;u!F^.,6iglNSWC9S;aD?]+D4aDG2MC`iD'B/7XG,qu0"F])O%$"#X5bh'fm0rlsT?2blQBcg]KULJo]pN8K8k3.JaAB+K003u`sXY]3CXFgl)R]hY&<0*1%lXJ.B`BBaIg:D3JF*<`mSDBN*s(GFW%3h0JJW1/gRMq:o!puC^AcZK_9(D<$Y%r_3QA9E9\ZWjJqX9`IJK!(j`2)gg?Tc5`.SD@A*j!P)!)p#[!qRVq$*:;q5f<&jt=PN@g%0u9ra)ntaledoHN=4EWE=1<M;bN.qTAie:D?2dB3a4'-0W^.uol/DkGNmg-s]HfRTKFnj]WQA*?pSR@pcX9M]>;[F,:4-b%41a4B%jke&*XfQD\n)NV\^[^(+X^`db0fbjt(26ndD.:G0r_\dueOMg@BK:1JWAkV%L9t%A.Eh8Se>t\`O\\nnf!CNqE(Tp\3NJn5cSV#I%fi]':oWYLE9$`*F[DjCTX.ir:^YBL0OsDfiP0?h2peA*q4@cGq96a3'=r<JT:.s$P\78s0V1k6lgFL^Z0EZG9NJr-dQmHn9#^l_e%@^R#(LA=hNeFOBkeK+l]Xqk&LBE40r<=,?mBea48@;RYBi:HpghLPL!CF**`%2FhcALu>,=gi+[p62Cj@=jg&=-g1XA<sU!=Yk4H%ZaMQ#g--m$$aW=+54Z-9CM\<>ZjCJ^AgN+k=lIWtcqppt8DV.Il-_Z(>BhT_kD\IR87LNJ)il8m\!"u+\+i[u$%lUe(OqM#r+'bd%<5eim98e3Lk%69E7R9V*N8g<PSjNF`Fg%^d%7s[LQH$lm[imJc/$4]jEIG%HLDH;;%[h2]5lr3u_B(2c>RP\[l=$74R^qG!#fV$`%L\2P&0!7nGnj]XapQsKq9d^',91f\Sd4SkJ$O-l2SLI#'ZGNSUGL(S(oJGVr?cV3g:m.W$8V&-;C:_G9Oba65ZdY'>R!6lYA3L[p%[S(+=OtmU_h.JMP,6i8R)5u4U"[At'#!t#=Y3P_aCKI-nXFm.U,=VPn2:[OS`YNB3,\M#$Ims7T9!Lu0?O?`%=j1=kc0']!%6GrH%0)pQp*fd&KFNu0lO%5_?H>_9ak!UrF#*JO5Ps4SO[EUmJpUouUiQI+GUo2T(WTW"<I8fo$rn>r/4OZ$N-&Zq6ZC7]V8c'T$P7rMn%L!7^)l'mEun7<THMfoP*3#Q*@Q-'X,Li9Dnr-:N>B:#58DKBb<nnHN8KU`"cjn8[YRdh\.jXeP2.-+mo5+6bl`IXM?Q=tmLho2*P%b;2GVHg+VX1MOh^;Fd<M]9iC(O_<)B&e&2mX@WGZW3'T*1q9i?Xk;cR9&N70)qbb7_]m>.klTR\-d@=d!S\#`26oVj^hmW0Yit=^%S2:mcj0Vl>c%K0^?9]XWj9QsO`'oeu_J`i`,gS1WNMS/7_K&?>:F4S=NX5o,GI$=t0K"H)ISPn0r^gZ?3@:+=PlUFB&PT#=WKC]-%$,>qtT:/fBc#ZR_E2q?-E_N^M/9g#$-B6!"/-A6K`lbF+Fsk1\>JQ119/(ofV)LNQ"9VKJ>#-hd@!V"],JaKbmt.2`_5%[S,(=1(%,;%9Za=kB2R!7^(>uj0E&kqe`ZLB'Q"AdKJNr5%eYdXOer"AqZJa/J,_H.T"1sf@9PaSG9*._ah*/Pu.5er8%O^+WS'k(=Um/Uqj%'A4ZK1lL<_Fp[#aE72i\BjS_1Z:c)iO=TLW?liHE.qP&T[b8&74k3]0a-'(6lWPl;>qNSi95DGRoF`]>ftrkXnuZn0pVtW]@4(e$%+\U</2-0WB=V0!5(1UR""W7n#DRGFs@s(85$*)#<0d[gNKsA=\1XR=jgZ^3!pr3S9BVb):Ht*sA(,ib:To)q/5>3mt`2=+ZNRa/h%EA6[SZ6o=S&/,kJ2+R*sAWg`fWe#>bo'5(,7,o64gTt&4(5sPIa#qu\,a\4/<01DjJfQ$R$OI.o2^4[tMTp>BdNf,Cg6!Bdj*UG0%m`"n^66ua+@X%W+?=[ZhF<N^/`E):5GW=o`&s)'AAk!:t`IAm"@Lp><'2Ho'O./1;<<NN/6tU&'S(/.>RE]`kocc2uQB"WY6bQ;1%Vn1o^IZ$)BJ;/@rRA!sb-I,erS2]J"W#%q"53.`MYr;-pgc2s=4NOk&g$g[s'#EWHlsHidUJL1V]eJWNE>G2`en$gk:F@V`!q^f\%'Q0S>,Vh/%B$Y^_aD+_Q'BZ,,Ddsd2M[MoEh(^Q`@\Rm(TGONf^(Qi:`Lg?Y1NOf-Q[+Ic2sa8'*jWLE!I@&;kOg#TF5PeK^@,l_%0Fadud-H&I]1pQe(YBP&(S?/uIT"1C@tAsr=+F]^m"LS+BR>?E0Oe%5FkDUX0j232%95<_PkQ!F/.7B\=n>RY@i0rIC%C^/R@-^t%G9Sha)'q#mlhd5;/D=FS<kIB!5u6H$:Z0RVe5F!EqNBB^Y3YYFScPhXrA6bW$`<OPXY0iZQ1aqK1A<P)I`U-_gB6pV_[Ye&U?[7+%,.5*;mbqt>TX4(C_esBM0I)uW+GR7=#]@VUoI1TU7jl#_>:.,/:NSj8o%f&0]J":UR$j\OpU=C27#0:arfZ<aOIPVL1j!>#AUEaD%m\W"h)0W^^p1eQN]^("?:n<lRmhR'IXS\06or8>WH%0Mn#J`m'g>8k^SaZo.]m##N<r,e%W2"YqpSs,4@"W:m/[flDrq)6F9n4O5%EDspT-C]eA^H14qa8Ln\=]u2Kj_%`g'JlJHa07;Jo6slRCY/gIoR:!8EE#<&dG:-h*=MPp[sJKQ8L#TtjsVmK;LRfHIQ7s;Ob%>n%cFr#_:tPU,p/8.2U8.TFD%>(0ITY*KWU"t6k>QA7fc>HndHdCF:n'a?dCn^k2+M_W;`T_XSqUaMQM3fk/,EE*o);[Ha6W<QkEjjo%Y&2PG7_[9t8UXb!NUtZ,/iTF4W8TmI1!?ZahXKD!F^0$F2HS@_bs\2rpZ:f17j)`%qk79+-(.hW]-!&//`@QCR+N%uG3X68l%ef?%=0qe'm[ta9>I/[O%.Hs+aMbf,j#.U%c0d5@qDX=o/N`IR(fj?sc0hWYI?6mnB(sP)o<&k+>(9tWXCFTqdadH3\$VU[%gsEl7'L:t%j$]\CU3;J\T;m4n]>,?%l;Q1(FOOthLM;(F&9YSQl8C/h>^_\KD5Ue&D0<F.V?Baf8"K(Kl=q!(n4r]aChr<XJ$XObZ1+FDkBPa4%>_8F0B5e6'PXI*"fZDt]W).-O+=%[Yl-rD$r1KL>qV?YVB^^-=de(Kr>NcI]W1<Uq7VsW,N5.?n8HAr?/9U4%S+lY"CoK5sI!`N)%SCr`]^l_15D%:&-V9(uJ5=4f$W?Tta7PPDA1o-Ej/njaZjiqV[D+C@3Ccb-U+P[R9n5Md9D&()l&8Ek,(eC=%G!N[NF@)i3_j;2<%"T?moCR(-VKsb@Rm]1d66p\rlkj6>cE8Seqn+<?e8O(P_J;6@CM61B:?^lJZDejEC'knQYF>jKb<^R`UjOK4iX88g]BN8,UlO!dA%&q;(a28CIH\d![$0<`'B;ItrW;Qjiaa`26o1sr?mru]#TUdCu';bW(7+EM/m@c$H?/uuZJ6d]^MpVl<Q>\/X?O;\,@m8t_/B`-[#%,1D>8icY`jcRd*c][3Mh^K("^$sIL/0d9(i'HMc?iCeGI1b<2eo4>t9hbgq!IVKamNjuhuAE]p49-Va1&idBjZg1:@NTBCNVaJ0C%E#$**^[*4Yh\Sqr%,I9=M]8XafdS9XToWJdY4!D\Y!Ual@IS>e_$)#"OA7h$.pXr@\U[tP;)RJ3,5b*^6ZRTVkIEXFn*704EdU5n%r8&!qgUdlR4)Q^#bHlZQm:GgBCF6M,=;aana'jY3lN('OZJYajR1b*Sg55-HcLSBMnoB)^RB*S6eXqQZNC=HCp*NA@]e:8ZhX4K?%\@n+4loT[bE\?0fH\&lrSp.X[Mc*GZ"+&>KX`qEabfXM_,d3Q)V)u:HfE3Y9\G0;beU!hPC3X^Q?I2is:JG^[A+F[e[s&(Rbh_-Z%D'*XK#R&&dXR>e"6dN*nMZRs1onD/D\E?J#%ud;Y@rf.RZhqT!jS"2WlSu(i)P*\s@]!V[)#?s&?%RNcgIhV$)DARD/bcp5m9S;c%qma=Hn,1Rn%_Um>T_>i>9/%gkLY"bVR4nK%S]CWuN*1=9\h*%_B7c]>a7XIBd/;Z=rHP>7e^,2%3!8*a'rt8HA[VEk&#k/OXs#MJ%Zfl;npG`s59f[UHprkSSfc,qP%V$F/HT"K0D^GPd1,7F#-,O2h6nfqP<23CdOg'd`o?Y,4q3`arjNAXd[X*YB6j=i#ij\Z4OUK"m%4/&>I[9ClIXq*-BB@QZ'Tm+_l8#+)a_:V)Q4uI4r3+Z3pn;=.t+>KI+,WB,!D:A8Yf/b26$!/.:_a:%Fp3q'L&OO$GD/:]5Tc,\F%[_iPMOtJ`ZpYV"ti5"5S3OO-E1A!0;60@1afM7s5cM9TJhbQE`F\+B\4hlck@u#T$c:0@NpIpEIN3a76HE-cML0QoX0eNeM]EW0q%F`>*RQ$e7ecR/*Is5:CECK+*3GV(e$01sq5KbZ`m+3@6p'p_'8O!B3?Ui(6+$Ej8%[[agoo<2\)1!?3bZbMYt2-g""-K_?$I75lV%,YOc#*YJ:7/<(r>q^l;Gq;ZZ:csl0["`HuJ@!DEaJ.Q=kX&C9)MJ2[laPuP"^C4&;Ojo<<@f`];rioJ8<<f'qD;"AT;RIu4C1$ta%ANpF:O"HMX24_Tm4G</tRX2-Gim.-Mk"o2QaE/8?OGU=.``rb\oX54HM\4i81bW!QS]j]ePd=/2h9Ntq40@-!1u,=tcrs`QU%;6C%fKG5)N_UROItTP3md^QlRPfjQoeHp2S4f$LkE=$t3e!8?OjKc]mgVq'14ua978L[Z6-"Pk]W:I[+7cg=pP7FWM.4ul/NPd^-cC<^%3jqYqc#o7>f:(F8*fKGWN^]:GZKN]NGI$ET&I'0i?*D5NLbS'9lf*/V8]R+,]H/s-PbTt5d]LB`K8^UNfQ8.i;FWG+\.N>MhV_m:%boP52gG?=_V!HS5/m39-frpf4LC#:`+tU=o]cWdb8^qW>>BG8h-2Yg?]sC#F+//;c"s!pm@X]/9SR!T)I13^4m.HrP3SZLY;go.d%cAi]VjJSFiS8Q\nl<DO,*7q)kJhuf)?Hn95Hg^cj5O:BADjfdRm((uT&(dLiG/0Q@\/uTMXrjX-'tZu"BPXHGqJ[0`[B(J^X<+dN%d$C.qc+K?BB25t9Ct,ag$hU$>$6<MkDs$RD'u-mF(oQ"+q;VF#kB-6tA\'MYc$d4ME:bKid[H_7FGOJ'k3,P;UV54?ZJ4iHc..gR%)[[0Wh:LBfNcq&X.CQP,:,(DX?J!p<`g$+^g71>(Iqd.=*2OMsf9uE"SXj0f<dd'G*7;u*0LoDUg(:2kI6594JTkE'And4a"LE7@%Hoo/H!8:"7AKin;?;C!P*0lq';OQ8nZ(j)KD)(j^1<D%p3Pk&8gp7ZQ.?Fl'$586JrH<cI.fi[A@BSU*l+1h6Yskt<"@Mhs+QhOK%fa7)%hK`)_!CpC+1A`Ua_;F!2<$krBIQPAj]&%?Q(c#^&*1b2Pdb+rh8BTZn`e`/q1N_ad/t$KBm$dWkK%YmjA1*c9H=nUmZ[]ZZ%@.)Gn42H//_^Jf)I_G?.dbO5J58:Ein,`gh@p/;V+FE^8fJ)m8+(BlS&,m-O;82inl3j*W6\?8=DuS+&^G\5ThY\NRbl$N4nY$Km%&AIGK++iFq+(Cki&,m-\q;MqT?!dFP[BtARLELs8LELm6L\dTLr#p6KIIW*hSfdm(,ROIsOeqC(C\?$HJ]=JH,9%t?Bc!GGl25$o%'XAW&Uiu-G<\&bi*N?]5(&Q$0bN/?1MdUDY^,+\0%d*0@P/Mu8cKi/"DHRkA+nJ[.O;0%A"iZ6/SAAC_75D:2!uA0n%*C\D8CT]n%'XC'[`/&i7&_c8>g(*`30?'B\VEpO17mEU1(6e8L<c$RUJS;)o2-?,[=i:;(0dOr5!B$!$Osjj`A7ra3.J/(eW>sS?A<g\+a9n]O%Uao(aAUd`iqkoSlAG#&uOqe*g&@5BB@e\%1N@n2PMChPn8]0M.!`uPM"Nb5#7Wu=NhSn3.LJXJh6fb=Z"UY2Z<O0L<M2pYnXK]j5%%V;K<OsEY&*EeiE]72(dBA"_FQ"3q<$Cb(!#%#FZ&p?l@V6&$LQ68PZZ=:ROa7S`#MZAJo2g76#n^ODl_-Y4j-]kl'WKJ!,&WEIE%3/DJf>@mfe`TiLN<]odWK3Qk.81_PnKrgF_$<\D&;,cAP.&eZ&Md,4q%Qp)2<Jrh;mV$FfQ-]Q=UJq#`>IjM]!ia;c7J"'5Q\5jQ%l!_]MCpl.Tl\,hQH/U7t`86%\imi4(dj&ZUXB]q[gc<s'2KEhWc-B%H0Q`N&/7!XeV8I3>R;#DsZ?/)T#H__)Eo?N?>U@qA6TU)4%53'`80.'<@.5Q*$^\=`]F9&AWI,?W#\Q2>Q2cDY,_UO"Upf<X+[;]'2&uE0oWJagn0R@P@[Po3QT`]$Hfb->rVLWIiSW$iJ%+CW^%fN!:EjS*/]hV#X.I]7.pGR>CG>LmXsoJ:$@mkJr>Sb?i2lEYtNY6c6EhYY]<\5l*u_UQQRm3VX$=g:"JZul*g,0$"HbCS1/Kat'A%A4btbqgM/8RgmPHe)q)Z^kB+abIDRj?+82/jj`0/YeRiEB3.ic)7ko3QAQQkhf&G?Cq(VlW4aZRKe.N&chY'4ZbMT5Sb2T'8LK(R%oX\W6G%@fF[4]80Q:2OhJKf6J"0@C1!;#[pD&pO*J`]=W`7U6PDiZD`bq?\eeJQ,!Lb`!5M5ushk-0fp5g)7/a/t:8"Juj,N7B%d%jOui2NYM[$:g+m?,`+Q_8!\&9iC<7=A>bGfP$&eU8;`CXVE/$DE\4DP'de[^>ElCEjK9fJFYKN@rN6;aOBJVHb'9pG:XR<e4m%Z)%_5WG0(U+f&N`l:Apb$1sX$O="(RN#P5R0l+og_udMTl`5XHFj/=<1PuY$YBgD:e$:for_1A<sP_5Z,,;118DmR,cL7.B?rR[sBW;%FataD>J;KcV6l;S8hd*Cr)E];b#]Un1j&pF?Zj/.kI'XOWe9t>1gt,9*.l744X*O"*DG(qN*1aC<Ci(A)p,+4V6`:rVm,i-`&a-b%MBT$>f?%&6/&M5hB8fhA$RcDcT9*kQb`ng#VpGFM=iC@Rk6>[B3q6P0K30CWDcjSc>"Hh<rEep%24at79FGI6-BY.+6F)mRB.9ku%RB/^#=<01Qh^r=Qmj$aHDSbqqkH;bYABspWA&*3g7@6kNAiU0uK2!F>eWR1F/<,kOpch7[l)I6afrFt=BiZdk<V9i3(+NOR,EcE5%CfQKuRaCN1Zbau4kO3nlni;SLeME8KXdUTkZ;oA*=M!eLWnGAcJ,cs,r#bt,a++&;If&p_J,@]EpqQZTqhK\#mm$jC^]+*(J,ete%qpV2:o3_LeYQ*_QJ,0-Dl*#U:m2uB$0E:(95Q:6"s84PMp6U:+li7"_c]<SRqd9Brhu;a+J,So@s6m`#:Iq(<pu?l#dm*c.s7<`"%%0tNtT)~>%AI9_PrivateDataEnd