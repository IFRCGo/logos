%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: IFRC_logo_Arabic_P485.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: SŽbastien
%%CreationDate: 2/27/13
%%BoundingBox: 0 0 550 72
%%HiResBoundingBox: 0 0 549.7608 71.2667
%%CropBox: 0 0 549.7608 71.2667
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 20 8%%BeginData: 4226 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD65FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF%CAFD47FF7E7DFD06FF7D59A8FD05FF7EA8FD04FFA852A8FF7D7DA8FFFF9A%C3A0C3A0C3A0C3A0C3A0C3A0C3A0C3A0C3A0C3A1C3A0C3A0C39AFD46FF7D%7DFD04FFA8FF7D527DFD04FFA859A8FD04FF7D7DF8A87D7D7DFFFFC3FD06%FFCACFCAFD0AFFCACAFD04FFC3CAFD45FFA87DFFA87DFF7D52A8537DFD04%FF5253A8FF2784FFFFA87D527DA87DA8FFA0FD05FF9AB58DBCCAFD07FFA1%BC8DB093C3CAFFA0CAFD45FFA8A8FF8420FFA87DA87D7DFD04FF7D52A8A8%5220A8FF7DA8A852FF7DFFFFC3FD05FFC28DB093FD07FF9AB08DB0C2C9C3%CAFFC9CAFD40FFA8A8FF7D525252FF7D275252272752A8FFFFA852277D27%525227F85227A85228FF7DA8FFA0FD05FF9AB08DBBFD06FFA0B08CB5CAFD%05FFA0CFFD40FF7DA8FFF8527DA8FFFF28A87DA87DA8A8FFFFFFFD04A87D%A8A8A87DA8FF7D7DFFA8FFFFC3FD05FFC28DB093FD05FFCFB58DB0C9FD06%FFC3CAFD40FF52527D277DFFA87D277DFD1AFFA0FFA1BC99BC93B08CB599%BC93C9FFC98CB093FD07FFA0CAFD41FF52277DFFFFFFA8A8FD1BFFC9FFC9%8DB08DB08DB58DB08DB0C2FFC2B08DC3FD07FFC3CAFD42FF7DFD21FFA0FF%A1B08CB08DB08CB08DB08CC3FFC38CB0A0FD07FFA0CAFD0AFFA87DFD25FF%7DFD32FFC3FFC98DB593B58DB08DB593B0A0FFC3B08DBCFD07FFC9CAFD0A%FF59FFA8A87DFD05FF7D7DA8FF7DFD04FFA952A8A8FD0FFFA87DFFA87D84%FD0AFF7D7DFD06FF7D7DA8FD07FF7DA8FD0CFFA852FFFFA0FFCACFCAFF99%B08DB5A8FFCAFFFFFF8DB08CCAFD06FFA0CAFD0AFF527DA8527DA8FD04FF%7E2752A87DA8FFFFFFA85252FD11FF27FF7D7D52FD0AFF7D52FD06FF7D27%A8FD04FF7D52FFA87DFD0CFFA852FFFFC3FD05FFC38DB093FD06FFC38DB0%B5FD06FFC9CAFFFFA8FFFFA8FF7D7DFF7D5252A852A8FD04FFA87D525252%A8FF7D84FF7D53A8FFA87DA8FD07FFA8FF52A8FF7D2E7DA852A8FFFFA8FF%FFFFA9FFFFA87DFFFFFFA852FF7D527DFFFFFFA8A87DFF7DA8FFA87D7DA8%FFA8A8A8527DFFFF7DFFFFA0FD05FF9AB08DB5FD07FFBC8CB093C3CACAC3%FFA0CFFFFF7DA8A827A852277DFFA852FF7D7DFFFFFFA8FF7DFF7D27A8FF%F8A8FF8452A8FF7EF8A8FD04FF7DFF5252A852F8A8FF7E52FF52FFFFFF7D%FFFFFF52FF52FF7DA8A8A852277DA8527DFFFF7DA8FFFF7D527DFF7D52F8%A8FF7D27A852277DFF7DFFFFC3FD05FFC28DB093FD08FFC393B08DB59ACF%FFC3CAFFFF7D27F8272752F8277D7DF8A87DA8FFFF7DFFFF7DFF7D275227%272852287D7DFF7D277DFD04FF7D2727F8525227F8FF5227FF7DA8FFA852%28525227525227522727F827F827277D7DFFFFA827522727522827522727%2752F8272752F8272727A8FFA0FD05FFCACAA7CFFD0AFFA1CACAFFFFFFA1%CAFFFF7D52A8A87E7DA87DFF5252A8FFA8FFFF7D7D7D527E7DFF7D52207D%7DA87EFFFFFF27A8FD04FF527DA8A87D847DA8A85252FFA8FFFFFFA8FD05%7D59A87DA87DA87DA87DA8A8A8FFFFFFA87DA87DFF7D7D527DA8A87DA97D%A87D7D7D847DFFFFC3C3C9C3C9C3CAC3CAC9C9C3C9C3C9C3C9C3C9C3CAC9%CAC3C9C3C2CA595227FD09FFA8FD05FF7D2727A8A8FFFFFF7D277DFFFFFF%A87D2852FFFFA87D277DFD08FFA8FD08FF7DA8FF527DFD14FF7D52A8FD06%FFA87DFD05FFA7C9C3C9A1CAC3C9A1CAC3C9A1CAC3C9A1CAC3C9A1CAC3C9%A1C9C9FFFF7DFD11FFA8FD07FF7DFD05FFA87EA8FFFFFFA8A8FD12FFA8FF%FFA8A8FD14FFA8A8FD07FFA8FDA1FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Magenta Yellow Black
%%DocumentCustomColors: (PANTONE 485 CVC)
%%CMYKCustomColor: 0 1 0.9100 0 (PANTONE 485 CVC)
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                    
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="ï»¿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS6 (Macintosh)</xmp:CreatorTool>
         <xmp:CreateDate>2013-02-27T17:20:37+01:00</xmp:CreateDate>
         <xmp:ModifyDate>2013-02-27T17:20:37+01:00</xmp:ModifyDate>
         <xmp:MetadataDate>2013-02-27T17:20:37+01:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>36</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAJAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYqx2S/1pPzDg08zxjRbjSZbiO2KfvGuYLmNHdZK/ZVJ0BFO4xVEnzd&#xA;oso1uLT511C/0BC2oWNueUqP6bSJHQA/E/AgU77dRirBdS/MPW21jSdY0y5jbylq9ppUywPEPXT6&#xA;zqMdtM9ancLdIrjftSh6lXqeBXn/AJV/Mhda1/UpJG+q6Pa6b68tvMvGW1uLO7uYLv1DSpqqIR7D&#xA;oDWqqaaP+YGleb/Lt/feRLy21K/twUihuvVgVZf2RMpUSqrdjx3+/FWB3f5redNH0zXV1tbSaNob&#xA;uLy35l06JzavqNukifUpYpCzCX1oWVOVA5HfkMVeg+UtY1251XVtM1v0vrtjFYTFYARGpubYeqEq&#xA;WJX6xFLxqemKqOh6fruqaZFfy+ZdQhecyExRRadwUCRlAXnZu1AB3Y5ThJlEEl2+pzYsUzAYYGq5&#xA;nJfLyyBL/OOpx+UbGG+1jzXrKwXEvoxmK30xzz4ltx9SHZcck+Hv+xyezsB1kzDFgxWBe8so/wCn&#xA;in5M1u384Q3U2jea9ZZLRlSYzW+mR7uCRT/Qz4Y48nF3/Yy7S0x0ZAy4MXq5VLKf+njI/wDDmsf9&#xA;TVqn/IrS/wDsiyyj3ut/OYv9Rx/PL/1USLzTqmn+V4Fl1rzxqNs0gJigEWmPK9P5Y1sS1PfpkJzE&#xA;eZc/Q4J6o1i02OXneSh8fEY3pH5o+WdTnMS+b9et0HWeez04RD/WdLKTj82oMqGoj1sfJ2Wo7Dz4&#xA;hZwYT5CeS/kcgv4MzZdUsdU8vSxeYbvU7HU7t4ZI5ksTE8Rsbm4R0e3toX+3CpBDUpl/du6UHHkx&#xA;5QcUYShG9uOweOEf4pkciejLMm6h2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KvF/M35j+Z7f&#xA;S/MGh2drqlp55uL2VdNUWUtzALYScYTasoeKjW0YqxoPUZmPsVT3y55N836A9n5k1jWdR80ahBat&#xA;HLpLeghi+scGm9GpQOyGMChYcvntirH/ACp+XGu6prXmvXLa61fyhFqt9HNYNKYlvGo9xLcc4lqo&#xA;haS6+BXLHavZaBU90T8kjp8ym88y3uqW8UK29va3KII4o/rtveyCMJx4mRrQL7Vr2xVnvmHSJdX0&#xA;e406K+udMknC8b6yf054yrh6o3vxofEbYqwSP8k/SSKS2826za6kjXH1jUoJY0muEuJBLxnPAhuL&#xA;Lsfc4qltv/zjrbW2rS6xa+cddttUnFLi8gmiikkFeVJGSNeYqN+XXFUw1b8mr+58taZ5csfM1zb2&#xA;FtfTajqc08STz3kss3rrzKmIDjIS1fGh6gYqz200SC313UNYViZ9RhtoJFoKBLUylKH3M7YqxlPO&#xA;OleUvIVlquqJM9qZWhpAquwZ5JCDRmTb4cxMWQQxi/xzd5/J2TV6uWPHXFV7+4PI/wA5fzW8secd&#xA;BsrHSUuUnt7oTyfWI1ReHpuuxV33q2QyZRLo9j7Odg59HmlPJw0Y1sfMeSG/Jf8AM7y55MsdUh1d&#xA;Lh3vJYni+rorgBFYHlyZP5sGLJwE7NntJ2Jn1s4HHw+kHmf2PdPLn5i6F5h8tah5h0+OdbHTjMsy&#xA;zKqOTBEszcQGcU4uO+ZQygxMu54PWdj5dPnjhnXFOqrzNfofOvk/Tb78zvzKMmsSu8cxe7vypPw2&#xA;8ZAESfyrVlQeGYkYmRfSO0c0ey9DWIbj0x956n7S+qNM0vTtLs47LTraO0tIhRIYlCqKCnbqffM6&#xA;MQBQfJ82eeWRlMmUj1KV+YgBq/lUAUA1SSg/7dd7iejl6P8Au83/AAsf9NcafZJ17sVYl5883RaB&#xA;e+XYJr9NLt9U1BYJruWL1UZVQt6FagR+q1B6h+yK/MKrLX8ybG41+LRjZTwSyardaR68wCxGS1tm&#xA;uecbb8g6qAOm9fpVZhirA7P84/LLeaJfLeqQ3Gk3v16fTrKe6WltcywFaenKOhcSLQMB1pU4qyby&#xA;95lsNb0U6vDWC1WW5if1SFKfVJ5IHL1+zvETiqR+fPzKtvJ9xZrc6dcXlrd215ctdwUMcX1SNZAH&#xA;9nUncVptsa4qzFWVlDKQVIqCNwQcVbxV2KuxV5/e/mNYaX5i85w3F69zN5esI71NBEIjf0Y7f15J&#xA;oZi1JQ5lCvUfBT71WReWvN1trt9qlpFby276abUlZhxcpeWsdyhK/skeoUI8VOKp9irsVYtoF5on&#xA;mbWNQ1CfRFi1Ty5fz6XBfXMUbSfu1DepbyEclV1l7eOKspxVhvkv8yrXzPql1pn6OuNOvLVJZHS4&#xA;p8Qgu5bNwtP5Xh+LwJp7lVlGqapp2lafPqOpXCWtjbLznuJDREUdycVSP/HumXFhoeo6XFLf6frd&#xA;8LCO5CtEIqiUeqyyBWK84eHTevXFWTYq7FXYqkWg+ZZ9U1zzBpctjJajRLmGCOdyCs6zW6TBlp0p&#xA;z6eFO9QFWN3/AJJTzl+XVlo73hsl9czmZY/UPwSSDjxLJ/NmHjx8eMb/AI3ehw9pnRa2WUR4tqq6&#xA;5gPG/wA0fyft/JGj2moR6o981zcC3MbQiIKODPyqHev2chPEY9XtewvaKWuyygYcPDG+d9QO5Q/K&#xA;v8p4PPNpqE8mpPYGxkjQKsQl5eopNd2SlOODHjMid+TZ292/LQyiBDj4getcvg928nflnF5a8nap&#xA;5aW/N2mptO5uGj9Mp68CQ04hmrThXrmUMREDG+bwPaPbR1WphnMeHg4drvlInu83gv5a62/kD8yD&#xA;Hram2jHqafqJIr6auwIf3UOitUfs5iwnwm30DtrTDtDQ3i9R2nHz8vfRPxfVsE8FxCk8EiywyANH&#xA;KhDKynoVYbEZngg8nyWUTE0RRCSeY/8AjseVf+2pL/3S73AeYc7R/wB1m/4WP+muNh/n/wA/fWLr&#xA;y7ZeRdQh1bzJLefWodLt5laGa1W3mSQ3ToaRxjlUcj9oDwqJOvYnJ5O/PueTXE1uKw1my8wJEZrW&#xA;LUbi0S2aMllWEoFZeHLiVFVanxct6lVfyj5S/NDRfJWu6F5t0i18zaNFbvJommTTC5uDMWAWH1Co&#xA;+EAlg3GoP2aYqmv5eeTfNbeSvKSa3YtZ6xpmtyajePLIGlMRjuF9RzydiXWRY+PXoT3OKs18++ct&#xA;O8rJpFzqd22n6Zc3vpXl4IzIqosEkio1FcqJJEVa0+7rgV59Df6V50tPOK6Z5bufMWkazeJJpMks&#xA;Ytbdp0s4oJbhLicoYlDRLRkHKoNBhVhn5lw/mp5M/Lify3eR2U2jajfSC51uKcxyzPdF7uWNkZk9&#xA;NHYMvX4h8P7VMCso/R35mecfKujC40KwTQxpk7Wk8N20lxNBd6VNbwoVlVaFmmjfcihXCqJ/PbVA&#xA;n5ZJo1nrdvDrOny2qajZfWTFdTcISAkaL+9dmlaN12oaeGKvWLfUoNM0Gxn1u6S0f0oIria5kVB6&#xA;7qF4s7GnJn267nAryvU/Mn5heZ/MnmW0/LS8trvRnS2tZ9YuZGWC0u0RxMlmycvULJ6fJ1B4np2O&#xA;KsZ1b8tPzv1PQtIsrm3g/TOgr6ena9DqsyS8BJyXlEQUbYKOVAx4ipwqmn5kaD+Z+q+U/LcV35Xt&#xA;tW83mSWPVNRs3WMJbRkJ6LvyT4buKVg4rxG9ANqBXrGk6Fd2vnbzDrDLxs9Tt9Oii+IEtLaicSNx&#xA;B2+GVF+jFWMebtQ/MjyzrOs63p1tpd55enjglNzqF3JbG1WGMI0ZBBTiXq4K/wA2FWF+ZNc/Nm3t&#xA;764vzo+nQeYmtH05/wBLABJITGqtaVX4lkPpl6V61qK4qndvafn9Be6jdWmlaRaLfX0epXEDXkjB&#xA;zHbxW7QIVTYSeirtX38cVYveeSf+ckb7zTZ+ZLx7Nr2yuFmgiivGigSIU5W6RCqcHFQ5YMx8cCs9&#xA;8geU/N1p5vOva9Zw2ctxBqazxW83rRKbu6tbiJVY7n4knY7bV98Kpl56svzFXW4b/wArWWnaraS2&#xA;bWl1ZalI6KhMnNmULRWEg4hq/wAowKxTUNF/PXWL4atd2WmWl3p4tpLCyiuZGt5pILkSH1ASSpMb&#xA;OK19sKsO1+y/Nr8xtc1DTrS80uzvbJLeHUY9N1Kf04Ggkn4GQJz+P95IrKD2FRtirIde8t/85Haz&#xA;5bstIgbTdGTTBAVktrqX6xcmAAR85KMPhK82BoGP3YFSDUNA/N4fmRZ6lp8Ok6T5xkia6ubaLUJp&#xA;Pr1sG4t60MrOvAGoATjTt0FCr138vbTz/wDpjXdT832VlYPfLZrbRWErSqzQiVZHbkSQeJjH0YFR&#xA;HlzzJZado8Fld2mppcwGRZFXS9RkWvqMdnjt2RhQ9QcowbQALudXop5MhlGWPhNf5TGOncZWlH5h&#xA;Wvljzrpltp94dZtUtp/rCvDo+pEk8GSh5Wx/mw5I8X9jmdkTz6HIZx8KXEK3y4/+LUfy70zyt5It&#xA;72CyfWrtb10dzNo+ogqYwQKcbYfzYMUOG/1M+2M2o10omXhR4e7Lj/4tl/8AjXR/+WfVP+4Rqn/Z&#xA;NlvEHT/yZl78f/K3F/xbEvOuh/l15wpLqdhq0V8g4pf22lamk3EdFatqysP9ZT7ZVOEZbu37M1Ot&#xA;0e2OWIx/mnLjI/3e3wSPyz5J8vaGzpHrnms2TdbKCw1W2jb/AFvTt69P5aHK44a6n4CnP1vaWbPu&#xA;cem4v5xnikftn99s1bULC81TyxZ6XZ36Q2F7JJIZ7C+t444Rp11EC0txDGv25FXdqknLwAKAdGMM&#xA;4Y80skoXOAG04SJPiQPKMj0B6Jtpn+CP0/e/ov8ARn+IOP8AuR+q/V/rnGv+7+H72lf5ssdKnmKu&#xA;xV2KqN79S+qyfXvS+q0/e+vx9Olf2uXw9cVVIvT9NPS4+lxHp8aceNNqU2pTFUu8y/4c/Ql1/iT6&#xA;r+heI+ufXuH1fjyFOfqfD9qlPfFUda/VfqsP1Th9V4L9X9Knp+nQcOHHbjTpTFUl1n/AP6e0/wDT&#xA;X6K/xBUfor659W+uV5bfV/U/e/a/k74qnGofUPqU/wCkPS+o8D9Z+scfS4d+fP4ePzxVB+W/8Mfo&#xA;mL/DP1L9EVPo/o30vq1a/Fx9D4OvWmKpnirsVdiqE1f9E/oy5/TH1f8ARfpn659b4fV/T/a9X1Pg&#xA;4+PLbFUDqH+D/rumfpD6h9do36H9f0vUpReX1flvT7P2fb2xVOcVdirsVdirsVQGk/oCk/6I+q09&#xA;R/rP1T06erzbnz9P9rny5V3rXFUfiqHb9H/pBOXo/pH0W9OvH1vR5Lzp+3w58a9q0xVEYq7FXYq7&#xA;FXYq7FXYq7FX/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:D091BFB1082068118083A94F05CE3472</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:D091BFB1082068118083A94F05CE3472</xmpMM:InstanceID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:EE7A3AE49B82DE118C88F17499155EAC</stRef:instanceID>
            <stRef:documentID>uuid:ED7A3AE49B82DE118C88F17499155EAC</stRef:documentID>
            <stRef:originalDocumentID>uuid:ED7A3AE49B82DE118C88F17499155EAC</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:D091BFB1082068118083A94F05CE3472</stEvt:instanceID>
                  <stEvt:when>2013-02-27T17:20:37+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:OriginalDocumentID>uuid:ED7A3AE49B82DE118C88F17499155EAC</xmpMM:OriginalDocumentID>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>792.000000</stDim:w>
            <stDim:h>612.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
               <rdf:li>PANTONE 485 CVC</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>[Registration]</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>100.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>100.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=10 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>10.000002</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=50 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=50 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=55 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>55.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=90 Y=10 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>90.000000</xmpG:magenta>
                           <xmpG:yellow>10.000002</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=15 M=100 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>14.999998</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=45 M=90 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>45.000000</xmpG:cyan>
                           <xmpG:magenta>90.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=40 Y=30 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>39.999996</xmpG:magenta>
                           <xmpG:yellow>30.000002</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=85 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>85.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=75 M=5 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>75.000000</xmpG:cyan>
                           <xmpG:magenta>5.000001</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=75 M=90 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>75.000000</xmpG:cyan>
                           <xmpG:magenta>90.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=80 M=5 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>80.000000</xmpG:cyan>
                           <xmpG:magenta>5.000001</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 485 CVC</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>91.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -71.2666 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 71.2666 li
549.761 71.2666 li
549.761 0 li
cp
clp
549.761 69.6802 mo
549.761 0 li
427.669 0 li
427.669 69.6802 li
549.761 69.6802 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
418.434 3.89893 mo
418.434 3.89893 419.992 12.2813 420.243 14.8574 cv
420.494 17.4341 420.597 17.98 420.586 19.0986 cv
420.464 20.0381 420.252 21.813 419.854 23.2231 cv
419.372 24.9434 419.062 25.1401 419.062 25.1401 cv
418.235 24.5625 li
418.235 24.5625 418.948 22.7476 418.523 17.5986 cv
418.311 16.0508 417.887 12.9561 417.887 12.9561 cv
417.887 12.9561 417.063 9.32764 417.089 7.73242 cv
417.105 6.59375 418.434 3.89893 418.434 3.89893 cv
cp
0 0 0 1 cmyk
f
333.784 4.02441 mo
334.495 4.30713 li
334.495 4.30713 334.648 5.32471 334.908 5.6001 cv
335.465 6.00391 336.341 6.53467 336.898 6.93506 cv
336.659 6.52637 336.067 10.0649 336.067 10.0649 cv
336.067 10.0649 335.411 10.3447 335.445 10.5605 cv
335.59 11.4917 335.705 12.4614 335.8 12.9561 cv
336.134 14.7749 336.47 16.6206 336.796 18.3647 cv
337.135 20.1948 337.115 22.3628 337.115 24.3857 cv
333.639 24.3857 330.163 24.3857 326.684 24.3857 cv
325.154 24.3857 322.959 24.6016 321.542 24.3115 cv
321.2 24.2402 320.891 24.0249 320.661 23.7461 cv
319.872 22.7837 320.399 20.6816 320.399 19.4839 cv
320.564 19.4839 320.524 19.5239 320.524 19.3584 cv
320.607 19.3584 320.694 19.3584 320.775 19.3584 cv
321.047 19.9272 321.647 20.2969 322.201 20.4932 cv
322.799 20.7017 327.079 20.7017 327.638 20.4893 cv
327.843 20.4072 327.925 20.2773 328.015 20.0928 cv
328.431 19.2056 327.111 16.5342 326.515 15.8779 cv
326.105 15.4312 325.21 14.7871 324.923 14.2368 cv
324.856 14.1108 325.685 9.4292 325.74 9.4292 cv
326.219 10.0303 327.142 11.0083 327.621 11.605 cv
328.875 13.6753 329.401 16.2983 329.444 18.9814 cv
329.448 19.2368 329.365 20.2388 329.573 20.2388 cv
329.573 20.2817 329.573 20.3242 329.573 20.3638 cv
330.075 20.4307 330.579 20.4971 331.078 20.5635 cv
331.416 20.5088 331.753 20.4546 332.088 20.3989 cv
332.838 20.3242 334.802 20.5444 335.226 20.1084 cv
335.387 19.9355 335.423 19.6255 335.414 19.3584 cv
335.24 18.4307 335.072 17.5088 334.899 16.5811 cv
334.482 14.2876 334.283 11.9189 333.658 9.6958 cv
333.497 9.11865 332.409 8.32129 332.347 8.21533 cv
332.406 8.31445 333.784 4.02441 333.784 4.02441 cv
cp
f
368.158 4.15088 mo
368.685 4.43311 368.866 5.12402 369.054 5.65088 cv
369.431 6.71143 369.816 8.25928 369.891 9.4292 cv
370.06 12.1357 369.588 17.5557 370.484 19.189 cv
370.725 19.6294 371.092 19.9868 371.583 20.1318 cv
372.57 20.415 373.979 20.2188 375.072 20.2388 cv
377.879 20.2388 380.688 20.2388 383.492 20.2388 cv
383.721 20.0381 384.121 19.8613 384.121 19.4839 cv
384.03 19.4097 383.94 19.3345 383.845 19.2568 cv
382.059 17.6855 378.995 15.3364 377.192 16.145 cv
377.016 16.2163 376.603 16.5581 376.081 16.4907 cv
375.913 16.3931 375.739 15.5405 378.63 13.314 cv
381.5 11.0947 385.021 15.4341 386.938 17.4146 cv
387.698 18.2002 388.783 19.3784 389.436 19.5269 cv
391.827 20.0688 398.681 19.916 397.93 19.9126 cv
399.518 19.9126 396.862 17.1826 396.792 16.5269 cv
396.697 15.6475 397.77 12.4141 397.77 12.9482 cv
397.828 12.8501 398.068 13.3018 398.15 13.3018 cv
400.237 16.4248 399.706 16.3813 399.706 24.0083 cv
391.862 24.0083 384.18 24.1348 376.454 24.1348 cv
374.698 24.1348 371.242 24.5112 369.977 23.6675 cv
368.155 22.4497 368.158 16.5186 368.158 14.0796 cv
368.158 12.2612 368.335 10.1914 367.558 8.78076 cv
367.452 8.59229 366.729 7.54443 366.902 7.54443 cv
367.3 6.42383 367.92 5.38379 368.158 4.15088 cv
cp
f
300.038 4.27637 mo
300.588 4.53516 li
300.588 4.53516 300.69 5.21582 300.87 5.46973 cv
301.219 5.97266 302.478 6.91504 303.054 6.91504 cv
302.992 7.86621 302.579 10.5605 301.421 10.5605 cv
301.974 13.8833 302.731 17.2729 303.133 20.7446 cv
303.148 22.002 303.164 23.2583 303.18 24.5112 cv
301.594 24.5112 293.223 24.2324 292.516 24.7905 cv
292.257 24.9907 292.276 25.3755 292.552 25.5479 cv
292.839 25.729 293.298 25.8979 293.463 26.2241 cv
293.815 26.9307 292.831 29.3745 292.539 29.9985 cv
291.39 32.4219 284.071 33.1211 281.315 32.7598 cv
279.668 32.5435 277.348 31.6445 276.773 29.8726 cv
276.539 29.1499 276.565 27.5552 276.747 26.7969 cv
276.959 26.1772 277.171 25.5562 277.379 24.9316 cv
277.725 24.1494 280.203 19.4839 280.996 19.4839 cv
281.067 19.6797 281.598 19.7544 281.526 19.9751 cv
281.374 20.4106 280.737 21.1528 280.494 21.5347 cv
279.668 22.7983 278.856 24.0913 278.62 25.6543 cv
278.103 29.04 282.56 29.6997 285.081 29.6611 cv
286.035 29.645 286.79 29.4131 287.72 29.4131 cv
288.102 29.1851 288.738 29.1616 289.229 29.1616 cv
289.681 28.8477 292.048 28.4663 291.656 27.4961 cv
291.343 26.7305 287.972 27.2217 287.183 26.6479 cv
286.451 26.1138 288.29 22.6768 288.903 22.1899 cv
291.659 19.9785 296.256 20.6147 300.163 20.6147 cv
301.09 20.6147 300.791 20.4893 301.671 20.4893 cv
301.594 17.9761 300.725 15.5645 300.336 13.188 cv
300.16 12.1157 299.566 9.32764 299.566 9.32764 cv
298.608 8.67188 li
300.038 4.27637 li
cp
f
339.754 4.40186 mo
339.754 4.40186 340.166 6.22803 340.316 7.02588 cv
341.066 11.0664 342.13 15.7451 341.997 20.1084 cv
341.949 21.6133 341.589 22.9287 341.058 24.1538 cv
340.924 24.4531 340.579 25.5913 340.579 25.5913 cv
339.829 25.144 li
339.829 25.144 340.159 23.1133 340.221 22.3711 cv
340.28 21.6016 340.174 20.73 340.119 19.9868 cv
339.971 18.1055 339.699 16.0986 339.452 14.209 cv
339.522 14.4688 339.023 12.0332 338.827 10.5649 cv
338.701 9.81055 338.462 7.9209 338.462 7.9209 cv
339.754 4.40186 li
cp
f
362.378 9.55518 mo
363.077 9.8374 363.626 10.7207 364.063 11.2759 cv
365.939 13.6558 365.896 16.5342 365.88 17.8501 cv
365.937 21.4834 365.943 24.2881 365.943 24.2881 cv
365.943 24.2881 358.175 24.6919 357.429 23.7729 cv
356.636 22.7915 356.607 20.8511 356.815 19.7231 cv
357.114 18.0229 357.417 20.2729 359.094 20.2539 cv
359.985 20.2388 363.568 20.3916 364.219 20.1709 cv
364.423 20.1001 364.564 19.9126 364.621 19.6968 cv
364.914 18.4546 363.458 16.1382 362.703 15.2544 cv
362.382 14.877 361.47 14.1426 361.47 14.1426 cv
361.47 14.1426 361.671 12.9644 362.378 9.55518 cv
cp
f
316.376 20.4893 mo
316.376 20.71 315.815 20.6074 315.623 20.6074 cv
313.34 20.5684 312.591 18.7729 314.365 17.4727 cv
315.918 17.7202 316.451 18.9692 316.503 20.4893 cv
316.463 20.4893 316.42 20.4893 316.376 20.4893 cv
cp
318.011 21.2441 mo
318.011 18.5649 318.069 13.8833 314.868 13.5767 cv
314.303 13.9697 313.616 14.292 313.191 14.8926 cv
311.829 16.7939 310.403 22.2056 313.046 23.7803 cv
313.843 24.2559 315.001 24.1348 316 24.1348 cv
316 25.0098 314.885 25.9492 314.279 26.4517 cv
311.679 28.604 309.401 29.4326 306.106 27.9526 cv
305.689 27.7632 304.457 26.7109 304.457 26.7109 cv
303.746 27.5283 li
303.746 27.5283 307.571 30.2139 308.204 30.5518 cv
309.22 31.0903 310.524 31.6558 311.84 31.4873 cv
314.767 31.1021 317.048 27.936 317.795 25.3599 cv
318.133 24.186 318.011 22.6025 318.011 21.2441 cv
cp
f
408.818 21.9937 mo
408.323 22.0718 407.675 22.2925 407.365 21.8804 cv
407.294 21.8838 407.789 21.499 408.476 20.8979 cv
409.223 20.1436 409.561 19.8696 409.384 19.7354 cv
409.823 20.0381 410.204 20.6465 410.39 21.1182 cv
410.39 21.1182 410.094 21.644 408.818 21.9937 cv
cp
411.948 6.2168 mo
411.362 5.80469 411.296 4.88477 411.296 4.88477 cv
410.767 4.77881 li
409.98 8.67188 li
409.98 8.67188 410.81 9.5 410.938 10.0737 cv
411.257 11.5063 410.645 15.6108 409.662 16.4395 cv
409.662 16.4326 409.233 15.3877 405.695 11.0947 cv
403.178 8.06689 400.083 6.09912 400.083 6.09912 cv
399.328 6.97852 li
396.965 5.58057 li
395.421 8.25928 li
393.295 6.91504 li
391.788 9.68115 li
394.176 11.314 li
395.711 8.80078 li
397.935 10.1284 li
397.935 10.1284 399.396 7.70117 399.396 7.79883 cv
399.334 10.1401 399.91 10.9302 400.118 11.4282 cv
400.626 12.6616 402.215 13.5063 403.35 13.9541 cv
403.35 13.7065 404.015 13.2974 404.23 13.1992 cv
404.23 13.1992 408.559 18.0703 408.755 18.2266 cv
408.724 18.333 408.688 18.4355 408.652 18.542 cv
408.166 19.3584 407.231 20.2773 406.45 20.8076 cv
406.017 21.0981 404.789 21.6206 404.579 22.0845 cv
404.273 22.7559 404.38 26.1689 404.38 26.1689 cv
404.38 26.1689 410.169 26.6479 411.591 24.8804 cv
412.141 24.186 412.063 21.1528 411.682 20.3438 cv
411.392 19.731 410.641 18.8442 410.641 18.1021 cv
410.641 17.7363 410.914 17.2886 411.053 16.9858 cv
411.376 16.2632 411.662 15.4976 411.854 14.6963 cv
411.983 14.0283 412.239 12.6929 412.239 12.6929 cv
412.239 12.6929 412.251 11.2676 412.499 10.7334 cv
412.511 10.7178 412.525 10.6865 412.525 10.6865 cv
413.677 10.8984 li
414.151 7.1626 li
414.151 7.1626 412.565 6.53076 411.948 6.2168 cv
cp
f
48.4639 39.1533 mo
48.3926 39.0874 49.1787 40.5361 48.1655 40.3477 cv
47.6348 40.1396 45.8789 39.916 46.2139 41.0313 cv
46.3857 41.6172 47.4424 42.1978 48.3149 42.123 cv
48.7305 42.0645 49.0054 42.04 49.4224 41.9819 cv
49.4224 42.1382 49.5396 42.2173 49.3232 42.2959 cv
47.7134 42.9722 46.6172 43.3799 45.4155 43.8047 cv
45.1177 43.9097 44.8184 44.0166 44.52 44.1182 cv
44.52 44.0352 44.4697 44.0718 44.4697 43.9844 cv
44.5127 43.9844 44.6069 43.8672 44.646 43.8672 cv
44.9014 43.5918 45.4077 43.3286 45.502 42.9478 cv
45.6353 42.3853 45.1177 42.0249 45.1294 41.4785 cv
45.1406 40.6353 46.4526 39.0444 47.5366 38.9658 cv
48.0352 38.9463 48.2637 38.9849 48.4639 39.1533 cv
cp
f
335.48 52.4136 mo
335.528 52.4458 336.263 52.834 336.274 52.834 cv
335.771 54.0557 334.849 55.4731 335.182 57.0439 cv
335.639 59.2358 337.044 58.98 338.988 58.98 cv
338.996 58.98 352.275 58.9497 352.271 58.98 cv
352.314 58.8472 352.264 58.8311 352.303 58.6938 cv
352.318 57.6328 350.704 55.8423 350.704 55.8423 cv
352.028 52.4966 li
352.028 52.4966 353.162 54.5933 353.387 55.6924 cv
353.858 58.0186 353.706 60.6621 353.706 63.2231 cv
347.585 63.2231 339.173 63.23 338.199 63.2231 cv
337.044 63.2231 336.298 63.0566 335.485 62.4609 cv
333.458 60.9678 333.467 57.4922 334.188 55.21 cv
334.495 54.2363 335.029 53.3125 335.48 52.4136 cv
cp
f
296.235 59.2002 mo
295.556 58.98 299.594 56.8174 301.044 56.3408 cv
303.054 55.6816 305.049 56.8174 305.038 57.8188 cv
305.006 59.853 297.92 59.7349 296.235 59.2002 cv
cp
314.608 57.3311 mo
314.048 53.9487 313.297 49.3779 313.297 49.3779 cv
313.898 49.4722 li
314.782 45.8584 li
314.782 45.8584 313.662 45.2925 312.567 44.6846 cv
312.175 44.3149 312.131 43.2817 312.131 43.2817 cv
311.569 43.019 li
309.869 47.3745 li
309.869 47.3745 311.2 48.2505 311.369 48.7998 cv
312.053 52.5669 312.991 58.5098 312.858 59.2002 cv
311.766 59.2002 309.295 59.2002 307.391 59.2002 cv
306.84 59.1973 307.162 57.0049 307.111 56.3408 cv
306.962 54.4521 305.999 52.4009 303.922 52.0952 cv
302.996 51.9575 302.033 52.1787 301.334 52.6055 cv
299.535 53.9023 297.731 55.1978 295.934 56.4946 cv
294.417 57.626 292.639 59.0269 290.792 59.4282 cv
287.407 60.167 288.475 55.3037 288.475 55.3037 cv
287.594 55.1782 li
287.594 55.1782 287.496 55.8657 287.44 56.0552 cv
286.428 58.98 284.862 59.7822 282.453 59.3335 cv
282.159 59.2788 281.927 59.1768 281.864 58.8789 cv
281.279 56.0615 280.27 49.479 280.27 49.479 cv
280.91 49.4956 li
280.91 49.4956 281.664 46.9536 281.836 46.1016 cv
280.558 45.7607 279.829 45.1709 279.328 44.4556 cv
279.347 44.4946 279.173 43.3647 279.173 43.3647 cv
278.722 43.2148 li
278.722 43.2148 277.375 45.6538 277.107 47.7324 cv
277.033 48.3174 277.9 48.1528 278.153 48.5952 cv
278.863 51.7183 278.935 53.293 280.033 58.6592 cv
280.191 59.3262 279.763 59.3145 279.763 59.3145 cv
274.614 59.3188 li
274.614 59.3188 274.331 59.2275 274.314 59.0752 cv
274.264 58.5332 274.123 57.1743 273.951 55.9834 cv
273.684 54.189 272.159 52.4253 272.159 52.4253 cv
271.11 56.2515 li
271.11 56.2515 272.002 57.4531 272.347 57.9233 cv
272.643 58.3994 273.188 59.2983 272.323 59.3262 cv
272.144 59.3262 266.021 59.3262 265.77 59.3262 cv
265.77 59.3535 265.471 59.3262 265.474 58.98 cv
265.482 58.4072 265.396 57.2764 265.31 56.5103 cv
264.982 53.8589 263.589 52.8296 263.589 52.8296 cv
262.321 56.314 li
262.321 56.314 263.584 57.7007 263.966 58.4819 cv
264.092 58.7402 264.241 59.3218 263.923 59.3262 cv
262.945 59.3262 251.802 59.3262 250.748 59.3262 cv
248.539 59.3262 245.29 58.98 248.204 53.4819 cv
247.815 53.0537 247.449 52.6421 247.353 52.5317 cv
246.889 53.1123 246.642 53.3999 245.887 55.1548 cv
245.514 55.9912 245.164 58.0029 245.194 58.98 cv
245.23 60.1157 245.819 61.1021 246.486 61.9023 cv
247.081 62.6216 247.972 63.2739 249.43 63.2231 cv
249.52 63.2188 256.158 63.2231 266.516 63.2231 cv
269.771 63.2231 284.275 63.2231 284.747 63.2231 cv
286.255 63.2231 287.312 61.4795 287.312 61.4795 cv
287.312 61.4795 287.736 63.1758 289.7 63.1758 cv
291.663 63.1758 315.058 63.2231 315.058 63.2231 cv
315.058 63.2231 315.316 59.6758 314.608 57.3311 cv
cp
f
392.761 58.9497 mo
392.196 58.9497 389.957 58.3564 389.808 57.7754 cv
389.647 57.1621 390.362 56.6318 390.751 56.2471 cv
392.069 56.7148 393.183 57.6289 392.761 58.9497 cv
cp
420.46 58.4268 mo
419.992 55.5835 419.12 52.3032 418.842 49.3931 cv
418.842 49.0669 li
418.872 48.6392 419.218 48.9448 419.54 48.7915 cv
419.623 48.5015 420.157 46.1807 420.318 45.3755 cv
419.804 45.3755 417.899 43.7925 417.899 43.7925 cv
417.985 42.7358 li
417.274 42.3594 li
415.604 46.8242 li
416.779 47.6846 li
416.779 47.6846 418.806 58.0029 418.81 58.0771 cv
418.817 58.3877 418.869 58.918 418.217 58.918 cv
417.564 58.918 411.988 59.1846 411.488 58.7402 cv
409.108 56.6162 404.423 49.4399 400.452 52.2793 cv
397.613 54.2988 397.872 55.3276 397.872 55.3276 cv
397.872 55.3276 399.298 54.8213 400.197 54.9902 cv
404.054 55.7285 406.116 58.9961 406.116 58.9961 cv
395.504 58.9927 li
395.504 58.9927 395.346 56.9106 395.111 56.1797 cv
394.815 55.2842 393.469 52.5669 392.235 52.7192 cv
390.82 52.8921 389.393 54.9194 388.787 56.0664 cv
388.449 56.6982 388.187 57.3188 387.718 57.9004 cv
386.765 59.0713 386.409 58.9961 386.409 58.9961 cv
378.944 58.9961 li
378.944 58.9961 378.481 58.9688 378.516 58.1948 cv
378.527 57.6055 379.065 57.0439 379.341 56.5571 cv
379.949 55.457 380.134 53.6865 379.195 52.7471 cv
377.77 51.3213 373.791 51.0942 372.365 52.7163 cv
370.774 54.5146 371.427 57.0015 371.427 57.0015 cv
371.427 57.0015 371.836 55.9878 372.753 56.3491 cv
373.418 56.6001 374.493 57.7866 374.047 58.4736 cv
373.807 58.835 373.029 58.98 373.029 58.98 cv
370.398 58.9565 li
370.398 58.9565 369.993 55.8823 369.832 55.1436 cv
369.338 52.9004 368.1 52.1304 368.1 52.1304 cv
367.126 55.4341 li
367.126 55.4341 368.289 57.4834 368.764 58.3008 cv
369.086 58.9448 368.552 59.0269 368.552 59.0269 cv
358.803 58.98 li
358.803 58.98 357.2 58.98 357.421 47.645 cv
357.495 43.7686 355.81 42.9873 355.81 42.9873 cv
354.196 46.9468 li
354.196 46.9468 355.362 47.4292 355.669 49.5269 cv
355.681 50.0845 354.702 60.5166 357.091 62.5273 cv
357.908 63.2231 358.607 63.1992 358.607 63.1992 cv
372.408 63.2231 li
372.408 63.2231 373.523 63.3125 374.396 62.6255 cv
374.97 62.1665 376.046 61.2935 376.046 61.2935 cv
376.046 61.2935 377.118 62.3545 377.569 62.6172 cv
378.316 63.0498 379.134 63.2026 380.099 63.2188 cv
382.012 63.2466 384.349 63.4028 385.99 62.916 cv
386.469 62.771 386.988 62.5122 387.389 62.2178 cv
387.75 61.9463 388.645 61.2188 388.645 61.2188 cv
388.645 61.2188 389.897 62.0361 390.418 62.2285 cv
393.183 63.2612 395.432 63.1953 395.432 63.1953 cv
420.538 63.2231 li
420.538 63.2231 420.487 59.9355 420.46 58.4268 cv
cp
f
190.661 58.6978 mo
190.315 59.2632 189.25 58.6938 187.703 57.9233 cv
187.263 57.6968 188.591 56.2979 188.649 56.2471 cv
189.745 56.4946 191.006 58.1323 190.661 58.6978 cv
cp
209.007 58.2856 mo
206.54 56.2002 204.997 53.7012 202.078 52.2451 cv
201.335 51.8716 200.048 51.1841 198.516 52.0679 cv
197.569 52.6182 196.63 53.4512 195.876 55.5239 cv
196.461 55.4683 196.752 55.2764 197.938 55.293 cv
199.238 55.2959 203.759 57.3701 203.742 58.98 cv
203.739 59.3262 203.449 59.3262 203.449 59.3262 cv
193.893 59.3262 li
193.893 59.3262 193.492 59.3218 193.473 58.98 cv
193.343 56.9619 191.94 53.0308 190.527 52.708 cv
189.266 52.418 187.495 54.7549 186.945 55.6924 cv
186.422 56.5723 185.979 57.6177 185.103 58.2773 cv
184.282 58.8901 183.398 59.3262 182.239 59.3262 cv
181.627 59.3262 180.712 59.2954 180.221 59.0356 cv
179.597 58.7021 179.847 57.5786 179.628 56.1958 cv
179.408 54.8125 177.903 53.0737 177.903 53.0737 cv
177.903 53.0737 177.523 54.228 177.04 57.2842 cv
178.002 58.3286 179.529 60.1821 178.846 61.5771 cv
177.593 64.063 173.348 67.8535 170.708 67.8726 cv
168.94 67.8848 167.083 66.1479 167.083 66.1479 cv
166.435 67.2446 li
166.435 67.2446 171.034 70.8779 173.96 70.4419 cv
177.047 69.9814 178.363 67.5742 179.455 65.6968 cv
179.812 65.0762 180.637 63.2231 180.637 63.2231 cv
180.637 63.2231 181.293 63.4111 182.079 63.4111 cv
185.912 63.4111 186.198 61.2314 186.198 61.2314 cv
186.198 61.2314 187.562 62.1343 188.182 62.3584 cv
189.588 62.8608 191.697 63.1992 193.206 63.1992 cv
193.292 63.1992 210.959 63.2231 210.959 63.2231 cv
210.959 59.0117 li
210.959 59.0117 209.831 58.98 209.007 58.2856 cv
cp
f
219.91 60.8857 mo
219.034 61.1099 218.783 61.2383 218.247 61.0859 cv
218.876 60.2847 219.717 59.7271 220.291 58.98 cv
221.736 60.4893 220.687 60.4927 219.91 60.8857 cv
cp
222.431 45.0649 mo
222.384 44.0786 li
221.484 43.5527 li
221.484 43.5527 220.754 46.9814 220.73 48.3882 cv
220.726 48.4502 221.799 48.9063 221.794 48.9644 cv
221.677 50.4263 221.021 55.5435 220.542 55.5752 cv
220.313 55.5947 219.604 54.3774 219.477 54.2007 cv
217.723 51.7417 215.498 47.9517 211.929 45.752 cv
212.27 45.9653 210.911 44.9512 210.538 45.3828 cv
210.106 45.8735 210.73 51.0981 210.628 50.147 cv
211.163 52.0952 214.269 53.1357 214.269 53.1357 cv
214.269 53.1357 214.944 52.2363 214.973 52.2764 cv
216.497 53.9766 218.652 56.3765 219.344 57.4253 cv
219.533 57.7075 217.098 59.978 215.263 61.0225 cv
215.278 62.3115 215.263 62.8301 215.294 65.2646 cv
217.521 65.2646 221.061 65.0718 222.882 63.9922 cv
222.766 64.0669 223.106 60.5 223.091 60.3755 cv
222.93 59.4712 221.523 57.2764 221.504 57.0718 cv
221.517 57.2095 222.168 55.8657 222.859 53.6387 cv
223.237 52.2598 223.397 50.6572 223.464 49.4912 cv
223.464 49.4873 224.375 49.7734 224.375 49.7734 cv
224.839 46.1138 li
222.431 45.0649 li
cp
f
119.935 67.1699 mo
119.628 67.6016 118.494 67.5464 117.222 66.5254 cv
116.109 65.6421 115.359 64.0117 115.532 63.7998 cv
115.697 63.5879 117.378 63.9922 118.541 64.7939 cv
119.613 65.5352 120.289 66.6597 119.935 67.1699 cv
cp
118.148 54.7192 mo
118.65 54.4673 119.731 55.8701 119.193 56.7891 cv
118.831 57.3984 116.981 58.561 116.416 58.2344 cv
115.93 57.9355 117.629 54.9746 118.148 54.7192 cv
cp
131.496 49.1885 mo
131.673 49.1899 132.272 49.519 132.272 49.519 cv
133.328 45.9141 li
133.328 45.9141 131.321 44.7783 130.937 44.4287 cv
130.449 43.9922 130.803 43.207 130.803 43.207 cv
130.061 42.752 li
130.061 42.752 128.827 46.0864 128.227 47.7324 cv
128.325 47.7324 129.641 48.4307 129.641 48.4307 cv
129.641 48.4307 130.862 55.4023 131.16 57.2095 cv
131.459 59.0161 131.393 59.3262 131.393 59.3262 cv
119.22 59.3262 li
119.22 59.3262 119.955 58.7915 120.332 58.4863 cv
121.419 57.5435 121.726 56.4243 121.734 54.7036 cv
121.734 53.042 121.659 50.4653 120.017 49.9668 cv
118.47 49.4956 116.424 53.6001 115.815 55.5283 cv
115.305 57.1035 114.986 58.4146 114.582 58.98 cv
114.307 59.3496 112.516 59.3262 111.106 59.3262 cv
108.596 59.3262 108.12 59.2827 108.01 58.9497 cv
107.394 57.1938 107.595 54.7939 107.354 50.4814 cv
107.237 48.376 106.494 43.856 106.105 43.4697 cv
106.188 43.4697 104.338 47.1309 104.338 47.1309 cv
104.338 47.1309 105.218 52.1191 105.061 54.3384 cv
104.554 58.8628 100.198 62.0171 97.8857 63.1045 cv
95.1714 64.3931 93.1602 63.9878 93.1602 63.9878 cv
93.1602 63.9878 93.4346 63.0459 93.2466 60.1235 cv
93.0576 57.2012 91.1494 49.6919 91.1494 49.6919 cv
91.1494 49.6919 91.5264 50.1396 91.5806 50.0142 cv
91.876 49.2593 92.4258 47.0522 92.6572 46.6758 cv
92.8262 46.7188 92.9917 46.7573 93.1602 46.8013 cv
93.1602 47.6958 93.3608 48.9258 93.6943 49.6753 cv
94.0752 50.5439 96.1685 52.6729 97.2759 53.0503 cv
97.3037 53.0576 97.9365 52.123 98.0615 51.8589 cv
100.174 51.9854 102.37 55.4063 102.901 57.1694 cv
102.987 57.1694 103.132 57.1377 103.215 57.1377 cv
103.215 55.9287 103.498 54.5933 103.007 53.3682 cv
101.942 50.7402 96.3921 45.8115 93.6318 45.6382 cv
93.1289 45.6494 92.9717 46.2041 92.9717 46.2041 cv
90.5366 44.6992 li
90.355 43.5806 li
89.7666 43.1563 li
88.1797 47.9165 li
89.3232 48.7017 li
89.3232 48.7017 89.8335 51.9419 90.1831 53.7056 cv
90.6235 56.0703 92.0132 61.0396 90.5757 62.959 cv
89.8525 63.917 88.8042 64.4785 87.7202 64.8057 cv
88.3218 64.6318 84.6997 66.1797 82.1587 64.9468 cv
80.0024 63.8975 80.2153 60.9482 81.0361 59.02 cv
81.5225 58.0771 82.6816 56.3491 82.6816 56.3491 cv
82.0059 55.7241 li
82.0059 55.7241 81.0869 56.8599 80.395 58.1475 cv
79.7041 59.436 78.7573 62.6172 78.9146 64.5464 cv
79.2134 68.2734 82.4653 69.8687 86.0117 69.1104 cv
89.8569 68.2778 91.3613 67.0635 92.9321 64.9902 cv
94.2515 65.0522 95.3867 65.1318 96.3608 65.1035 cv
98.4937 65.0376 100.576 64.3296 102.202 63.2495 cv
103.455 62.4097 104.256 61.0933 104.935 59.8403 cv
105.159 59.3892 105.379 58.9331 105.603 58.4819 cv
106.267 57.8018 106.188 58.4146 106.216 58.8936 cv
106.482 63.2188 107.649 63.2231 108.431 63.2231 cv
110.804 63.2231 113.144 63.2231 113.144 63.2231 cv
113.144 63.2231 113.674 63.2495 113.812 63.9365 cv
113.977 64.7578 114.119 66.4507 114.331 67.2046 cv
114.754 68.7246 116.18 70.5317 117.81 70.9995 cv
118.478 71.1875 119.602 71.2539 120.167 70.8223 cv
120.874 70.272 122.425 68.3481 122.347 65.1782 cv
122.323 64.0669 120.517 63.2231 120.517 63.2231 cv
133.254 63.2231 li
133.254 63.2231 133.368 59.9663 133.097 58.2695 cv
132.622 55.0552 131.59 49.6592 131.496 49.1885 cv
cp
f
282.064 35.6548 mo
283.487 34.02 li
285.245 34.9434 li
286.547 33.7256 li
288.307 34.8174 li
286.966 36.3252 li
285.208 35.5718 li
283.949 36.8677 li
282.064 35.6548 li
cp
f
340.045 51.0703 mo
341.679 48.2231 li
343.891 49.4678 li
345.323 46.7891 li
348.006 48.3052 li
346.353 51.4473 li
344.153 50.1899 li
342.727 52.6216 li
340.045 51.0703 li
cp
f
362.208 69.1299 mo
363.717 66.3208 li
365.811 67.3267 li
367.405 64.7705 li
370.126 66.2783 li
368.368 69.3813 li
366.187 68.2891 li
364.848 70.7202 li
362.208 69.1299 li
cp
f
403.477 65.1895 mo
406.827 66.9072 li
405.023 70.2607 li
401.8 68.4575 li
403.477 65.1895 li
cp
f
255.86 65.6738 mo
259.189 67.5581 li
257.431 70.8267 li
254.037 68.9414 li
255.86 65.6738 li
cp
f
271.307 65.3828 mo
274.021 66.9307 li
272.575 69.8833 li
270.25 68.6265 li
268.868 71.2666 li
266.102 69.5068 li
267.686 66.5767 li
270.011 67.8848 li
271.307 65.3828 li
cp
f
317.571 43.207 mo
315.905 47.3232 li
315.905 47.3232 317.79 57.6606 317.885 59.7651 cv
318.004 62.335 317.351 64.3228 317.351 64.3228 cv
318.199 64.9502 li
318.199 64.9502 319.582 62.7832 319.738 61.1167 cv
319.896 59.4517 319.834 55.3354 319.267 51.7539 cv
318.702 48.1724 317.571 43.207 317.571 43.207 cv
cp
f
229.387 42.5474 mo
227.721 46.6631 li
227.721 46.6631 229.606 57.0015 229.701 59.106 cv
229.819 61.6758 229.167 63.6621 229.167 63.6621 cv
230.016 64.291 li
230.016 64.291 231.398 62.1221 231.555 60.4575 cv
231.712 58.7915 231.648 54.6763 231.083 51.0942 cv
230.519 47.5117 229.387 42.5474 229.387 42.5474 cv
cp
f
24.2256 58.7808 mo
23.8804 59.3462 22.8159 58.7769 21.2686 58.0063 cv
20.8286 57.7788 22.1563 56.3799 22.2148 56.3286 cv
23.3105 56.5762 24.5713 58.2148 24.2256 58.7808 cv
cp
42.5718 58.3052 mo
40.1055 56.2197 38.5615 53.7217 35.644 52.2646 cv
34.9009 51.8906 33.6128 51.2031 32.0811 52.0874 cv
31.1348 52.6372 30.1963 53.4707 29.4419 55.5435 cv
30.0269 55.4888 30.3174 55.2959 31.5039 55.3125 cv
32.8037 55.3164 37.3247 57.3901 37.3086 59.0005 cv
37.3052 59.3462 37.0142 59.3462 37.0142 59.3462 cv
27.459 59.3462 li
27.459 59.3462 27.0571 59.3423 27.0386 59.0005 cv
26.9092 56.9814 25.5059 53.0503 24.0923 52.7275 cv
22.8315 52.4375 21.0605 54.7744 20.5103 55.7129 cv
19.9883 56.5928 19.5449 57.6372 18.668 58.2969 cv
17.8477 58.9097 16.9639 59.3462 15.8047 59.3462 cv
15.1919 59.3462 14.2773 59.3145 13.7866 59.0547 cv
13.1621 58.7212 13.4131 57.5981 13.1934 56.2153 cv
12.9731 54.8325 11.4688 53.0933 11.4688 53.0933 cv
11.4688 53.0933 11.0884 54.2476 10.605 57.3037 cv
11.5679 58.3481 13.0947 60.2026 12.4116 61.5962 cv
11.1587 64.0825 6.91309 67.8726 4.27295 67.8921 cv
2.50635 67.9043 .647949 66.1685 .647949 66.1685 cv
0 67.2642 li
0 67.2642 4.59912 70.897 7.52588 70.4619 cv
10.6128 70.0015 11.9282 67.5947 13.02 65.7163 cv
13.3774 65.0952 14.2026 63.2417 14.2026 63.2417 cv
14.2026 63.2417 14.8584 63.4307 15.6436 63.4307 cv
19.4771 63.4307 19.7642 61.2505 19.7642 61.2505 cv
19.7642 61.2505 21.1274 62.1538 21.7476 62.3779 cv
23.1538 62.8813 25.2627 63.2188 26.7715 63.2188 cv
27.1719 63.2188 44.5244 63.2417 44.5244 63.2417 cv
44.5361 58.98 li
44.5361 58.98 43.291 58.9097 42.5718 58.3052 cv
cp
f
53.4756 60.9678 mo
52.5991 61.1919 52.3481 61.3213 51.8135 61.168 cv
52.4419 60.3667 53.2827 59.8101 53.856 59.063 cv
55.3018 60.5713 54.2529 60.5747 53.4756 60.9678 cv
cp
55.9971 45.1475 mo
55.9497 44.1616 li
55.0503 43.6353 li
55.0503 43.6353 54.3193 47.0645 54.2959 48.4707 cv
54.293 48.5327 55.3638 48.9878 55.3608 49.0474 cv
55.2422 50.5093 54.5864 55.6265 54.1074 55.6582 cv
53.8794 55.6777 53.1689 54.4604 53.043 54.2832 cv
51.2871 51.8247 49.0645 48.0337 45.4941 45.835 cv
45.8359 46.0469 44.4766 45.0342 44.1045 45.4653 cv
43.6714 45.9565 44.2959 51.1802 44.1938 50.2305 cv
44.729 52.1787 47.835 53.2183 47.835 53.2183 cv
47.835 53.2183 48.5112 52.3193 48.5376 52.3579 cv
50.062 54.0591 52.2183 56.459 52.9092 57.5073 cv
53.0981 57.7905 50.6631 60.0601 48.8286 61.1055 cv
48.8442 62.3931 48.8286 62.9121 48.8599 65.3477 cv
51.0874 65.3477 54.626 65.1548 56.4482 64.0752 cv
56.3301 64.1499 56.6724 60.5825 56.6563 60.4575 cv
56.4956 59.5542 55.0894 57.3584 55.0698 57.1548 cv
55.0811 57.2915 55.7334 55.9482 56.4248 53.7217 cv
56.8018 52.3433 56.9629 50.7402 57.0293 49.5747 cv
57.0293 49.5698 57.9404 49.8564 57.9404 49.8564 cv
58.4048 46.1958 li
55.9971 45.1475 li
cp
f
62.9521 42.6294 mo
61.2881 46.7461 li
61.2881 46.7461 63.1729 57.0835 63.2666 59.189 cv
63.3848 61.7573 62.7329 63.7441 62.7329 63.7441 cv
63.5811 64.3735 li
63.5811 64.3735 64.9634 62.2051 65.1211 60.54 cv
65.2778 58.875 65.2153 54.7578 64.6499 51.1763 cv
64.0835 47.5938 62.9521 42.6294 62.9521 42.6294 cv
cp
f
214.776 38.4746 mo
214.706 38.4067 215.491 39.8564 214.478 39.668 cv
213.947 39.46 212.192 39.2363 212.524 40.3511 cv
212.698 40.9365 213.754 41.5186 214.627 41.4443 cv
215.043 41.3843 215.318 41.3613 215.734 41.3027 cv
215.734 41.459 215.853 41.5376 215.636 41.6172 cv
214.026 42.2915 212.93 42.7007 211.728 43.1245 cv
211.43 43.231 211.131 43.3369 210.833 43.439 cv
210.833 43.3564 210.782 43.3916 210.782 43.3057 cv
210.825 43.3057 210.919 43.188 210.959 43.188 cv
211.213 42.9126 211.721 42.6499 211.814 42.2681 cv
211.947 41.7065 211.43 41.3457 211.441 40.7998 cv
211.454 39.9541 212.765 38.3643 213.85 38.2852 cv
214.348 38.2661 214.576 38.3057 214.776 38.4746 cv
cp
f
153.497 58.98 mo
153.395 59.3262 152.216 59.6953 151.388 58.98 cv
150.559 58.2661 150.488 57.4365 150.971 56.9854 cv
151.454 56.5332 152.181 56.6357 152.459 56.8433 cv
153.135 57.3472 153.6 58.6343 153.497 58.98 cv
cp
152.323 52.4136 mo
150.174 52.4136 149.134 54.77 148.615 57.5039 cv
148.097 60.2368 148.874 62.2603 149.962 62.9438 cv
151.038 63.627 153.085 63.0103 153.085 63.0103 cv
153.085 63.0103 151.27 66.3569 148.3 67.1934 cv
143.968 68.415 141.588 65.5322 141.588 65.5322 cv
140.897 66.2583 li
140.897 66.2583 145.3 70.9629 148.512 70.8267 cv
152.531 70.6538 155.245 66.0498 155.543 61.7695 cv
155.83 57.5313 155.575 52.4136 152.323 52.4136 cv
cp
f
136.002 43.1128 mo
134.338 47.229 li
134.338 47.229 136.223 57.5664 136.317 59.6714 cv
136.435 62.2407 135.783 64.2285 135.783 64.2285 cv
136.631 64.8564 li
136.631 64.8564 138.014 62.688 138.171 61.0225 cv
138.328 59.3579 138.266 55.2417 137.7 51.6602 cv
137.134 48.0781 136.002 43.1128 136.002 43.1128 cv
cp
f
457.494 42.2446 mo
441.492 42.2446 li
441.492 28.5288 li
457.494 28.5288 li
457.493 28.52 li
457.493 12.519 li
471.208 12.519 li
471.208 28.52 li
471.208 28.5269 li
487.209 28.5269 li
487.209 42.2417 li
471.208 42.2417 li
471.208 42.2397 li
471.208 58.2407 li
457.493 58.2407 li
457.493 42.2397 li
457.494 42.2446 li
cp
0 1 1 0 cmyk
f
1 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
457.494 42.2446 mo
441.492 42.2446 li
441.492 28.5288 li
457.494 28.5288 li
457.493 28.52 li
457.493 12.519 li
471.208 12.519 li
471.208 28.52 li
471.208 28.5269 li
487.209 28.5269 li
487.209 42.2417 li
471.208 42.2417 li
471.208 42.2397 li
471.208 58.2407 li
457.493 58.2407 li
457.493 42.2397 li
457.494 42.2446 li
cp
/0 
<<
/Name (PANTONE 485 CVC)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 1 .91 0 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
@
508.429 35.1353 mo
508.429 24.479 517.067 15.8394 527.724 15.8394 cv
530.097 15.8394 532.369 16.269 534.468 17.0522 cv
530.521 13.9292 525.534 12.064 520.11 12.064 cv
507.323 12.064 496.956 22.4302 496.956 35.2183 cv
496.956 48.0063 507.323 58.3716 520.11 58.3716 cv
525.715 58.3716 530.855 56.3813 534.86 53.0679 cv
532.652 53.9468 530.245 54.4312 527.724 54.4312 cv
517.067 54.4312 508.429 45.7915 508.429 35.1353 cv
cp
0 1 1 0 cmyk
f
508.429 35.1353 mo
508.429 24.479 517.067 15.8394 527.724 15.8394 cv
530.097 15.8394 532.369 16.269 534.468 17.0522 cv
530.521 13.9292 525.534 12.064 520.11 12.064 cv
507.323 12.064 496.956 22.4302 496.956 35.2183 cv
496.956 48.0063 507.323 58.3716 520.11 58.3716 cv
525.715 58.3716 530.855 56.3813 534.86 53.0679 cv
532.652 53.9468 530.245 54.4312 527.724 54.4312 cv
517.067 54.4312 508.429 45.7915 508.429 35.1353 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
2 lw
544.355 65.5845 mo
544.355 5.16064 li
431.687 5.16064 li
431.687 65.5845 li
544.355 65.5845 li
cp
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 16.0.0%%For: (S\616bastien) ()%%Title: (IFRC_logo_Arabic_P485.eps)%%CreationDate: 2/27/13 5:20 PM%%Canvassize: 16383%AI9_DataStream%Gb"-6kBc.1Z2f2XJ9Sd0B4L&]$j\lVSAp2@Cbs(]$#ApNIb\SN<Ront8:\a%c9CuMgR8-gQ+B:`li=S$Z.WnlCQ6qTo3][Dc,aY"%RFQ.!X34BfQeS[6HCYmD?Ij3=iUXEllN"$LD95V\\n't=acPI9Vto-Fn/C-CG4XDQF@sf(Ze\d0*`QJ)@O6B]ea(JpZc.7Pq)sol%m-'LJXmWaEp.(sKQ0#Z3(M2^5fW3Q'LV8`rYJ$G`/-R]-O4;lP#MNA,dV$4/543g6Pr#Vu"\Jf^'I'=%lZAU<Jr5uV_Vt=<@6(Ak%HF@ouRK^d\_9H9l$6IO9=Xe:,9.G=V\RbbRa3<A=pKHm)gQcZYfm&nG1q/sVO%T9icnF*N(B0_bK)aNkF75l(YB2pjYUUN94U\"'%fAJH?"@3XLU+@a=_h(p"=TTF=f(,,@gE7k(Y?R16i.IWjri16n05%c-9%@]5W>F:EZeBn[(hHF*,kfCKSG)5Sqk?sR!l7:"c,>(X%XEo#<M4SqW'p:HqEq%3Oc7A9`Y6ui0XS5O2b?7JGJ8X2Hr8V4@a:,m^bA3V,08W<Oar?'9>cDaM<E20i4Co8PY^o@$asmV;)Uqbf%<?Jb&?5Wr`%pK]\9^&rqd#k)HmBtMI?8S?18S-&NeZMmSh(b1r`En@e]G:9]MuS`Li4n%>)Oq,\g!W/W#Gq@7)+/BB#&;qle3J8a%!XqV&$cjcKW\g5<[fU`L!)qY/^Tth.\m?bJPMf5:n^T>_e[G"U<"`7u.Or0l>uekUWljb@/j@OO1(8g;;&]4e:kjNtL>f_<:"r,S%gI<#!rpXXV7O["\./\b%#ZW>t<2kOHQ:cD"<'hGR`Oi9g)#1K(idKEicS14o]o4"eOkmu(`I/JI"()WIH,<X96Cn=XllL2#Y6]b#%i@FIN,f-'@T(!K@O<].lQC+1EbK(:0,2`0U=-4lKae[&J,8B^&Y6a1"GYRf@;U/gsUr]?bYO"j#3MW1nc=g_?O`Ji>!eU@o'_7$_%fFmL9`\kBKH48[C$Mb>ubbW+I7K2ckc]C6>s7j_ba"-qB:rj`mZ<h'F_W8l/,=\@/8@d(hd:\D%-?XuNEYEJ%S29GmE^gk_b?>\[%`?<)@_B=%h1QabHRW6U?,(KBF:e\Wd5:.';/A<;:EgOlSbndb*,f_Smm1q`6F@Bj^;U.+Ql%6,IdAK\+N&i;.L6p!k.2P,kG[n**%PebRJB@!p]m#P#h/<ad(lZ4Bleq-PE9Rd.[B?t+/_HI&b&on>$T4td]q`t2Nks1#WV$F[bU`B"/;C!NE:C#;ZZjM*_?Ig`U&u$?D%iB-Xg1B18eFshNIIi-/o06h,ZR@LFd/&==E1JN$6]X'iG@cs%'E*N7D:geL!GP5)hZLd"FrFL#0_la.2m&sZ+kJ97WPPdZ-c`us.%Q1ZXh(ME(Tpf"P_VRqk^KB*AHq[Y_fE#m2F?*e?.Xs64cR#Z&#/GQ=,<ViN%DSaa9p^D@@#N)5Y$LkE+O@K!u#G5kO7p%N,_FSMW%<[B`g'PIoICDACJLJOih.agmL<@B",N^V[L-OoMX:HGq::U!o:+50^4%X_G]F;6M\VPR_5#_t7p4'jR29Eo[6W*<$%7.#W&$4uif%-+G/P.cCHM!$a[ABo9j_@rr)ROFi(<4f1c/B0=c\r8_pR]r80d)*YhhiH\!Dfd2o0b_8iK;%a_ND*7<O@cAcS`-9d2LdNoe%cYLS%/mY1:S;mliLp+n,Tch0SWMh%*cq'_;FW#)"#o8^C@T"bn25?*/J:"p1.?RW7KQL@817/3Yn]W;i9-r?]DcLb9>Tc8*J*E.A;dWoC%'uA53J!JEArX7%Ek^.-UildY^S;]&*esO*HqrAqfj8Vd_l/;San[YG<`V@!^>N>@\rcAjB;$23h6jIMDIkP45;=U/%mo+km9KMJf%3^/Oq</%-$e,oliQ_4CEj7@5Vc:aZ?S$bY1DDR;D&,!_iI;?0W?G`*L[M]ITKW*ijD"u<h%fWHGoS_cWq)7K#b_\[)Kidc)F']Eh%-2;$i`:\qb!kuiOK8"1t4FkP9A[GW1%A#?ol'&q7!-Klt3[)g'XhN)[^<RVU$n0a'\]lN=FsQ^Gfc0[Bgh-p4,ht#pO5S+"E%Y6G%>KAIM;9FjdTRH/]lkA">$c0CB,CLSDP_f&''0a[B9L,o8Qu2/J'(B?ViPj`J3).uk$K&dM"Lg0V6U1Zf*TbNpkMD8@=*C^=(RWHF%)pDfWYr1)K//k`gi[Vi!Y_W$_Z4aI9rj@F'_t9i&<7FFg<k80Z^A>R_ASnpmo:G^u`#jP3]J<9@\d$OB8VM%9DoDFjQ<[(-?05dO%?:/R,pg*F4Se+j,H"11eYHIYm&N?I@G\=]5H5q:?@%t[g^EQUHAGmm^=;""KZcmg+kUWA$/G=\.b<k3G`8W^>_ce:d`&"`/k!;Cg%@lEQ:%8_dTA!@eW,)@-<S=kUHkH,M9(/#KELkG@V*&dh(T`;HMDFa,'(16!48u\K<e0g8e$ee"`"gj(f__Nj%35XkSd7:M;o6s)=%)3+"'IM'U%?OT(bFA]f3n;aaVq;OG+ShTZS]M4<i[W!Kj!oLkuB]9^"85;H_]]I:q.ZR6-:Sm1YN[&\bW5Wbg=`;$[Hi@ZhF67Ul%/N*`!kDtBmJ?CbK:aC*QGHAjFH4On1[@=k\:?/1=R42+):L<bCHgWfH[K#ftfqYHPE&*oRTn0oDH+WVU%D]LbPHWJ>ZNH\<l]noF%AN/R>3Yh,$T6@l6B)<ftS6[^*rpo@!<iB1$8u5D0?<,^]iCtEG.ud._9@s-.pM58pSI.n;BKN^^6DIl!dfSLT,6SWH0E<5;CBR%j%mT[,%pDVSBh_mQU'$dWhDt!$1#LV8Y@_:6;bFUY^FhcVn/\cFWRB@b3rsg$hoK_H8_$&8KM$([N(#%LDF]\W)*<Y*phqWOW;Qn\Y%gQg>om5YJ=_L3L>]D!&ZqWHn<=g)s3!dtD]3Nfa$[HG,Fp.qUPI>lslflFJ):+jME#K!#0?0OPfmFRr`Q$1CkBRSM60==7aFT8FD%l[",4RNF,OoZ<]<<E^HKd=$'Bo#u#KIg"@FG4(9H"2)@6/N,r)\([*^%H>KMG(ulF(:%"[83nSKR[(0N[TLf0AQCSuPfg.]`LpFS%D9/ADf5Pk6F&c:]AQL@nj`9$'Qcd9fTkp'tZ<9*.H<Dc!AYgrE,m]B>a)O^Hd4%&`@q?cq0HAor*7[n+)/Fh%\`AuIV';`E<llm1%-,$*OEZg^EU0B/bTs-!^MhRm2[#/JC.-a7'W"tXB'R#mr>:::-8?7W%63/j1Jlsc7H9j'["f3=X+K_lk[KAh-BGYL>[VXDNCu*ZY%eQ-M>L316]>E2^hM@bkdbK<qaAQZO?=fS<#Z3:gY'/-\&(<qGFS!IcWL8gZ2WBuUhRo$""A]$5p7aWV$[UC%#cCu/ETc/e3)cB.L%os4#L,oqjtaEB,je.#^82-kp[9\(A$e&n,SQ*d8dctj.h.a?=^:"*'9d:>sL?+$apOC/gR![Q&l7Q"15eQ#=D<CN0Q8TC$$i[@V4%.g<o3oMdOfkL1,F;&!/qA61D,Na.a*E^@-F9/^?Ken%QVAOVnr.3h,K9$e@e(:,+r$+Q.K0F?I!E"$\K,@tqW`AZo_S+\SB3kS%+%odl;RN*S#Y13.?QLPf==R%iX,[*['.FY1;7RieT-qu]'!0GTj<8O6ScM+f;%Ys4Kq$6:ld,^+]/>nSYL*'-^i-tY`m7?VhF,gHmX%+!r!45BM?.CuS6a6fs/g;'e>tT3UY3Fu]CJd8AspJKHcj(-eb%J6lfBSl&UpbIHTr`)nR43?AepT_$i6VSh@_M2icE$5q3L!bmEa%)SuuJ*sN`H5D1^.G8qPD+-tP&\YrFZkuF-nM]F*m'^7%8_rc_CLWL'Z%\4\F7W]XaV;P)k,UNDM^\X#+ir3[Mj/[S&E+2<dFqjh6%JiKJO&fas0@E&d%G&Tgkp_FUs<7J@.6g6\lJ&$7tQ@abD?hc%i%OZFai^\_BC2akrLY[/VZ,6tl);hU7LE8OafV/!Z_YfZmbR]C)%!W)t!OBLcK[E0pG80)ds:%s-=oeU<ns)lj&'>0cBdr>3r>Vd6'km47C=UJ"^iJUGCh,RuK.QU[R4AuKf-GC&eN#t9O*X_i[H>@%^%UP5QQ$Xf8D9SXLK0JR!^bTM1QniKgr&3B>/65p;S3^6"PA5Q4B8/<pKr"S\.PbIRrJuo<m'T.<m&pD:!M*Dd)7>)Hhhonmu+OU:Q%*jB1Ka:FS.3;a>5#%\gh?410k)<+C:/E2_e1R-UT59iTnW8i$cBT"p[8GuYfIZpb'Y]gN@%%DoW,%77&AWiu]&i;Bi1)*]EjPl=B%']L(B22SjF0nV$e7'],n,$cOo^C=dO"ESOt/DLYITo@HH5dq5H@tO[3?q3Yi-O9"\"oX[ZgJm*%#J2e.rbSgV,/bZ1@Zh+F.mo)l%&?Bo/=_7kiQOQ6^#f4`9T]UhubL"]f"?RWUSnV==!=KGF9+V]YQ4']FK+=gk/Tll<-:CWKU1b.5W<6#Jc%$8ETH#G7>91R5%PcZs%K+-_kJ["KmEQFe0.`?*CijK0`gP.[oKQuoM>^+"tAC)Y<ik5hAhon=e?pc,7KS7-l`4uOlP!R>l8/QG>*)+D)/><-t6j]c^*>e'9%#5(n<j3St@0HgP'+VQ:k7cH[Fib$O;;)9A,!J.d@BPg*d"/mBF.D)`Z"j-KEJN!l45h#mtjnjcSR(RA(R?46Q/*HWNNB8i[^n_'B%p'mFX0H+q=^4G649f=\+1/m("UXmPh1;h?l0M+#gh\)\"(g(.plH%\HZ"8;U'38_n@?FUFUtM^$W8/cJE7AmSE]cn>9L9(84K*X^%lr>FX8)6*qs3UmaZ3%B8["K&p"53hu/m3nH1BW?46Y5@Q#2A*0P"[VH1`)WT#*#Js6jd(]BE(PRs-!H[#r%KD+u5'E.Qa#@>BH81%82$W'j`<o@cNC31@RB=L<&g)dA7B\f&uhAL9BN%%R=]o8Z!PupMWKLh3N5j#`!V-1"VAuQUUbe0M%:p!R94d,<$!D%a/PnT-C,r*%Q,TCL_Gf6Da(9'5@:09l(-=LuK?5l#aHdQEiCeB;4#Gr\"qc2g$f@54SrZ0*7uoJgJP+1I6chnr15F#Qrc7,7&ZPbV?Q#7mXje7b%c+dmIrhj.?l9F/#5MhcS@l\@Y=FkocIugJqRIB>-dI]TnrVSgI^1Y0P^IQcIbkL`'B_n=rIf:B_h_U,bHX%4Rq2:;P$og!ED_#0Z%15V@p#A$@g16L&\B[:T:RE.Y7G7ROA9Yr4.=-((HYCX`D7^)h*/jcm]_En*4f]PK:5(;.G"20fqj":8j/],W+*6caPd<[,p9:p0a%.\t^>.o[Yahr6MYUmQ>tSe7s&'(>]t>Ni@.>9FKj`N%&DAL4eS+F8s;OJA-e16@"#hW*@hVm8h[9&nIFT#.$j*Ql-])h:?`<\!m^%[_eS**I?M;-Th!_>L+RZ"/@pN7+\"J<"^Ifp*%^E1UnhMjP30r`;[oA_[.?[cqt2lL!X7d,=A%X36]`XKFU.eB`=][%R)_7Tf7Jj%-o0Zu-9:jB6:]-^MW2^=^D;SF3ip\:qM,Y&iQU75DDb$e[Ss8^DXgRC?"]Y/;]J=H^`XTmb*"X95gL3-ZP@\o=KPkUI`GH'oM.$X%<8\i1<1qk/^Yu:2EcH'_+$/53O2'W4hcVOXOM-"&Z;pV:.@7pW]gIGLn:B:.T-X7Unb3695/LA@1<Nf^J'#ESZ)&95HqOBUMmrF>%>r/Rp-J9`R"HSDg3h.tq)ff8ID#Z[\g\5XP=s!E2MYlBi!76Ze6kD]cLsl>h[I],`B`^PiL&_p\$18'!IMr273Y:DZ^s@VeZ3<)L%4q$@,"9;>bFM@ir)PR4&1'.g9RCJ5#!s]d-UjiilV9"3I8NaErJb?3d=OA`-_U]p8rj<Rongm9Rq3;d:Z6i4j"Ob%#K,$N4C>K/M%)W;'MdBka,O0:7=\0bVDI"c"J[5]_t+q2Sr`8Lh0@7YAi%P)c(S<1?Qq'+Y#qtUT:qU[]CS?FWJIk:lJ\-PIm.ks$"6Q"7d(5!>a%?qX+n^JO+DK`2=rMJE8Oc;ti`>`6KT0#E_:8fUUq&;CnNiikTW''mS/Ike4Hfa<B.h8MY>>_PKBhMQo*(.*PaZ_Chkr?4G@YG.[t%C9h]VipoV'P2l_=hEl2p"qm7(+A`-i2Y8\b\.eqbB&3`u#QooVTpF?UE'ruejGR*d.!d:82fbpP=;7Qc@Jssr=@$pDf"VuQ'nh?N%rG1qH)$?"5q'?Lgk=jN-QntG2IJje1("_HL^>qYci`[=&F?g+r?P8H?C5$:.;_'t!SD#ZucTqt?a?0ms.p*3\E"Rit\W+)A:*\#(%B'lMt$SFgu$?LrVXD7^(Kjhs.33;$^$nJL"@0IHU=E1IH>t0:==a!A%`]5j:]ZkL0T36,FAqGVg5^csKTRqq1W6]2e<3Qo8of8#@%b#ep.b5(+KobdO]cLPajotJM3=fRHC$!F!nR!P*fN>MM--!YaL5%ZZGHQhj0p.PQQRl[-O^7C:>)ZC;GXDO7o)i5A1s'1JR"rY%C%IJrc^#ALgb8`RXX)-I&l\`Ym@0ghXUd8tKtc<<CXKZAlKQr]eX6%G>Ugb>KgoUp()W3j2E(\G?[dL-]iBi^RQVMsFqe.OmBC%NMK%!M<LhO4.WM<B\-P%B4k58eO*^21SQ/@E"%#KZqP1(^TnueHea^4FRO'(.cOQSdM.n&u:%:2)t=L;FjEGc^Ot.Wt&D<DjhY(*sAqK%[T)l)#54R'"^i6jJLtC38qtR^aNg7n;utnl6:m^Sc,l'Fj\<W.UtH)#j`se0"5:QSU&Is\L8m#_9^9I,/_OQN"dCI5:Dj_#$ilo'%L]L&UF\+rCOEB'@/p#=Uim<f58Ds'9aU!M,(=8_j"X@DR#KHit2Qt8n9/EaOQft4H-<1_TJ;Kn5l:bet4Xt^S]VYl=5on?)JHdX+%1tBj`/jg7bju#5n?\)2$7KZRW@]//,&pW+?)?YE';@/00GVILL`W]j=2]%jJW>`RHc"Mls!s:Bi^]4L`f-1EA;\cGJ.T'kM2ZoL6%h7uTTUuEA`JS#e-AX28@ct5$l/#)Mgkn^!-m?""k0dm?iJP^`)$5oZ[!<OuRfT61e[<1@VHm#_c&/6rfFGER*q]uZGdmJj16)To1%)L;C[dfh`U!e],+$P9*Q,a9-GVB#/[+fHfA$CWZ)>QE/sbjd.C@KTCO$S''l.ElAG5#DZL*pX`SB^+Ka'V"\,-='*?l[aDIL$+Hg%14$%;e%u:869X$8C6WPT2*m(^NipZfM?)FA(^0I2Ct9$e!8H%u&hjm3(2+``%1Bp>1tn&8]Xf4hTm3CP;'7+E`]k;d]V%^DNqmZH%XIR(BX=5sBRu1AtpZXXq*p<TQ,Gfn+G>Tahh$E#N_YPY^_q\t!".C":&8Fd+Ym>FiU!o_VVbn]A(?GO'?`_XG!_Ol_5RAibS8csk%4\RkBLh6Xcnqrk^&UlDQo?VhJ6!6P#qgE*5P,r?s>(05^]?]\7&nHAf$X"JW;iUVTVXu$3OmUMLODW.WZgj>X,^+hhS[:6s*4ekN%1eL#,.h"jRN=.=QL4HUL`!K[KaHqNclYO(0k$_5uGrJ6@)73mN&M*)s>X?G1<"62H,I7mb:K]%<O(B73%"eW$*]&HaM,;9Z/K_$j%Z&VdMnP<_ejEj^[FcmZ.LZP!=:FZe&Rn+_j4_Y-1@2::^H^hQF23Kg7EGII+QDF=1BS20Too%0A.TN*-=J0K[7s[R,MU)&hp8*HQ%"NLhFLpWO&$N(W"CGp@7LS1#(L"mnd'/PW(MQqg_E,<b).n\;1R<^"sD-.4*Ef#>[\r'b5#<O:X_b<!=;I'Tee=t@8Yi')P#<+k8%@$6Fo(eGGNqD)]GXeHCqo4NqsTk%Fu8l0NF:'SHCRaMg!8Bu#jOu!gc.O@D@Uc;c43_ra!!b2k@YoG8>"9[?[PnV92.Th^"8jnTk%c,!NKPjPF%8`9`U;kR$`%bHLP2bHDRUW#hE-)n2,b"D!'CQ)rGU@f<R7^Nkl'.OSG>%>YPDP&<R:k$BhIFCk^pAln8mfQZOiTDXN%Zk:L/U"fr%krep!Ou8PT6[PL0S0ukf(<ro].\'\KU_sILB?br^S2O<+)Km,`%>`MaTO'C5oI47L8L?5l,-d&q)VP=T>rk^l5Y#%0%.*)q!JZ<D9kGfCs""<67FfPC(R&cp%,Ab:,7ZN(6+c'!N7/"=:?X>+lQusqPH?M1[^HeP7=<<o-2+"-thp._eP;AK*8K*2:To!#I%T=pJ.k#*Apmg4u$Uc'tJ3KAs;=bk@+.\C:$B>&*G-@M;k/b-(p-sp!P3cWM50HN22'fo>PYaeA[OJ;&!FH`Lf\Hf[3.@F#+W@D.@%^S7),%OJKI&lX8W$9%shFG]?jeP%b,.Omg@6?pDf`bZ#.^`Up7$sn3^_Pdd\.]GB_D^me^SS!CP@M3/>#G=+WFI\PV_'Zt&9"'`c%,fA!ue5g*!:2tOj_'9(X4Q\4iU3S8`*#ObL*L<.%O<>FjmLo-'3jqQcM+K;Q#%l$k8/b2i1CU@-AP$;5_'L$`%s3@*(/L?pN]D]&%ncW!gf`6g1#(&T;%Y.[Z`dd>;%7`m!(!eI#;DC#dg*^unM@%RZ,D!(nTURcLn1HtlMGpg"XrA:=7Y=djaGoHd%qlgT&ST0B1a64,%=ULu=/'tp0c2l3J?'j4hC0nd6OE&VJjb[:]8HEI9@*K5V0qNqX"0]c@#Al1IRb0;OK/-I8A<2d"n-FhP2H>[\0hLDR8Gse)DM)8n%3H-*00gNEk<'l:_+<@rIZ"GcMRi7EMSk$a`2H1k8]bTDE;$a6jO`[a2Wb*,nNUC660$?(YUM=U[!V\rYplmV<?fDu;U8cR7V/-u>%.ce('q^XL7",`+k_>FmNBB0^F=G*Rc8Y2BiF%'/4B*m!OCJ<N1K,k<4JaHXBdm8dJR3M9O\8tWnjtm-*)[,?+g0eDmo%IJV$I0uc%1-=[C-lD<tTOm>6Rq`!4n)7%ii06HrgD6F_1U*R63#2csBG+"D+Qp%Q;IJ1rm\BuUDHk?Gd6jjod@dR,,LO]-"ToKQTJ<?C&e58,%1j0gOB.F:m\lQTf0FGo/otIN%nY6I9B8#pr`\:@&KpUi@'nd:CjN=Z)OfE1HlPm@2a9MY7!)l*cb5b[#`(rh,piIF;%=*S80NA4<%A]P]&S3&*2-c)P`+ka/dja)[_(K5r!,sd]1Yr6<(&jrLIA:\"4[99Gi@B)#2Ze-Qs_I7*qh'1t9,[8O#B_DrbB"`f\+V(CN/_DQX%CD+NHqJ5SuP,(Mf&=7@':Vsq/E]"t)VUWu5\75q`$!C^J#TYh-`6_X?P4MMsU$@A#g1m\D]pP1Oci`Lu'HO*>dG(Wo=UZ3l+WW'&%Ur?4;>fP_qMpF;6Fl>EDC#KS$a<5fNjt+^>6.&>?k^RR]Mp8cjm=X&.bnSEdP63bG0KNdLHj%BAH$nO>Tg91<At^*\JAO.-lip#_%X&[N=_0+KVVI\2Z&lVY5@kJH));igjaAhh9pho)10VRZGJE*:6#1k]">S2Z+`.lD8I4h5X!G-`$_Lb._QiUUV8*:e+?D=7@7\>2_%it'M`,:3YL<70Wuf//t)0_$ElW=sU4YZQt0gg[N\+qoaENh_4,9+ILUCLWF.$IUKI+@T6U7_U=n<.Rug@="o@A:b^h6[HaarX/4=%XDoph5`UAfVLbuVS28/oYT=6H-_DFKD3-#9W_/.`iQSXH$m*%0PUR$?Z;<7!^]UnWV^?K6EIT52&-OXk^PU7"Hn-jJFW;>jLFQ_\%%"t?;i#J5tA0G4/'q,JrA/r,"0!WJDK>(b3BB^mSU[4e@iDUH+$9CRs1mg^a7BiI0bStY9YmLl2oE_6ePdGs;'nXg%Q\Q]R88Oqg%d;[24d%^#cYHu.SSM]J"5Si4n0Sm]5Ahi%p:ar/odj*55d";UVCS#7]5Z]A]ZbTGd0V)t4]UEBEK*@jc#dI?6jFkfaUGbpU2!SJr%0KM3'rWn2['ciZ0FfhNk9#J2VisZ#HO&H^ZZg]?8O0N\iVma1VP#Bh>^'<k!"8r=2OgnWG0se_WItM=.d"\OYr&]-X8RXF;FJ#Hc%oF+oS9gMu@C$N^X"b##+\jd^1%!lclG:`1Xi#:Ap(epn'.a:ADiOfdBJ<1o&_K-0Md1WX2F>bVEC1-HhI:T\W<@[-HfEU'8aqIlD%K:H*\/)3EhE)t)dl!..0WMW9m%lB)`K?NiU)Pn*4.RcQQ/29WK&B.?ZUsYg_,N9UgC-%JhBP;b23DRt!b+S6irC:C%h-k#&81$+t%b'eE&dK0/r0iIWTEi/%1*m1@264FA98#e-0FeZL!$AtOk$4mL'(FS$U)Npjp`,C6?K_uELOf1CN_4RH.OlKLsotp.9#q9*mL1/st%KPi9*`CA`YVSARO63E!rec[<d@1:mi7!M.9[Y[<!T[=pRV-mg>3bbk9M\g9!D!d2$@QPpsMG-nOfrNf9*tnPZGc0I&>&WF!%p$):%d70E&\t`B/C4jGDrPBk-N)a^M?e?Qd$c\;s*5'(_:8(T_BqE5BXDl(n5h(-;#HZ^b370>O#aK97oA9B_WnjmO^d+XbU]I\dG&<@i%TE$gm*A(3cnPm6M3&`=j`EX[Kg1+MVVU,=i_ciKPaos?TY\ld_BsJA3L.*sL"K7((6B4=m;&5_(M:QLJ.Lqf)i6RelFt2NkG$Pbe%.^;#E?jn#AVATF4`Aa7X,mpW96`19[/BT^tjj8q.2Uto/b%[5+b;=30V&ZENjWtlWQ#`g83id8"PganLLF"X?Ei;oc;Jo>\Vdh[N%1eBs/*,)fJm)Z8m_pLgC^q;4n;@Y6E_Sf1T>fW[e&uc*25TOVbeZXD#PQO^V=XMB'@k9r:KBA26"%tXj!Z`<M:Wcm\.$eTiS\==r%obmTkXQ4nP?/g,79n&`e!qj,kUBm)],Gh83UOuOJ!?.]&Wu=uYkZK`2B4L`[B_%!,/!hsHj'4$6G.`uHf5QO3UB*a+)DR>p'PFD,%6`_b5r)JS"_*FEk1!`LH*(DT](M-Xg;-01b1K;G(G8eu2`B"u2H"NPS)X/*X@OA6f`WpAi9V1N/*+;mq]kOR.UN<"hJ=E2m:;c4*%HA7qFkT*d>6&l3936W4=?(dlP%]A2TXX$rgiA`[u3/&)fG[KG.O)@<rK@?!;X7uC&%$%$SWPuPJW1)1H*8]bO*.6b2I%at)Hm5,9%Es$H2;9uM!a^fBZ`kDGA0S3bp@DRmIT<qdTH[$MV_+]F>P"l1NL+_*Yo2OC87Z%C0Tn5il/*KsVAT3MHeJl#[i=;Am[Z/7jN(&YU%En:b,T,CHs;Ob+KUItrsdk`Zi<+otLRRNSn1`2ch6Gl+$!>f>*pM7PH2Z)l4*EA,t2`Ld`d7cMO+>[,`\5!/7$&qHUci`9ja?A0`%$Vl1]=ouR,/;gGcZG[fWg/(n6c;J<)IM9*5@.#('/>efI.('eq%ia,ETHhHi#Sr/W$I_oD*k'2H^Wf(n^dIdS6YZt=/a+uaM(o(j%1))QEme_!)>LS#>[j\-ZPpV5fqdCk4Mn$!K!XK]9_O`-i!8#U=OgZr2njdU0L6teW_$_!01r;Y]%h6r8%I6F@'6mB0$As5[=:#7.%[4,8.0tkIJ(g?Woj(FZ$ME2`N^oUP`W.\$PPefon<"LU#-qBP*e\Na`k2ps9UiV6&E>kD.fEP*[aI6HsR\iDM0[TJlM(1J=JM<HI%@G-Jp29pfBVPo(le:(@B*)B#GW!WB18VQFf?s?,Y10%HgVW"TYJC(NUCbnd?,h@%(.UeHn"t'djCmscGE!0+5(%SBDf4e+.Qn3;6%Yj*tGAhZ[TN2@a:&hg\.ie.b`VTI+PIY#^VZ>Z,i'V,m8"D60J`(N-JDi:MeU84PQ1pZD5FL59Vlm>ud!R[!H.\`fX2.\6a/A.i9%840dU9kRj+?mpIu#<n0D/o!G"qr2Ql#;A38$G<ApAX4*fZHbj\j-cR=lV&9'f47b1iT-6Jaul]i9T>kPiOTM,TEpb[\dk0*JuT;.%,=)m'WX^1;1npqdoo+X!pf3lais:5TWTm/NoPDLMl:dBNV22,]="T<g6BUIVN5fTfWp=W(a>!Ru%adOC7ERZT-iB^?1NA@NP5VZr%70on5.I5o\BdnpHf:e0$U(3:K[\QBM3g8->."50/in09jpf/=ePZ0YOU8g#smT%N8l9HXi6WX,b%VL>INsJg0L<VK';:QQJ!"I2V%l@]Y$X#ccS[8fq#Ff9JP.f33dSjT0.<-=kJ3qS^dl9O;c*@MS$SUo']Ll>DXGRYC<(Nfol_DBe>7@f!`Z4[kt6l:qX8O6?h@$,):%IT;.R+DcU`<HYh,MtlC6*Ae.<JJL)9?m213W]HY*e:XJ*UTLN=ISkmZ;@c`jME4+6r:??ef5H13qDB;%W2eg>%b\1U^10`i!g?TK%QZTb(^u3bB.-Y\rK8';VQZNFXAR3U$rK-MEUJ>j$Fka<if9snYT-.TPc3Kp]a,I9N+KLXo7uri\2e`ck92h?h"<ZWnj.ON5#hI?;%/T`.ZcDEbX<_N'.7*luec?Y$XCP+o\o"Yfgjj4;tH,ad^U(X(B":uBd5WB?/8YK2'KeO(8*WZD7Kl<_]7M(Ca@3>hCTf2*c6ED2C%6X0m!Tp$!0kU]&t'k:?N#QoW&MD?_8#bVl#qsn@W00`jN48:Vdh1+]r-aU23B`?h\PO*=%k0EL'._U0&@5b`>=S_Hl$^mitg./43%#nWURQakndB2ErnO'V3c+r[#Rc_Sgq2u:+S=^o,s[$&N`!Es^q!eI+s]V.G/=6^jJO,,cEb,#!u3Khn6o_fF!n[&86HfEk3e!\XQ%PWaQs2t2<89a]^BqesZ@&!3.R1d;5-&I(1JLDn;#;(R#8R_0\Y7?=o%Zd%Ys&DdLC4TWbRU*=P7CG*Dia7MFBRSK+AOcBp*m<@`D%RP%bO6QqQ2^J'a)F@<,PQl:ad6;.rX($>TK$3?t7TS[>\i'Pq]M:>\00d"Q$G[gbNnL:5DqgJetplY=/]0hIZcs=V"lrR\K2M0iM%)#1K59b797cke)?I*ho97J<NRi8P\6P4gaQ6eY62=q<k1rn7DC4?MstNBLfV!g4T3G"[ha>d2BY+&,p71o,]tRNu^h&)8BlmtZ6F%7C"&K3HJFb4?kkXB5sHFFBQJhrfu`[MGG6/I8;10elUZ!5'Wp.Dsh\2"RnMC5aL%Sp&e1Ebl>R66US,:.?/CPS`Xu(Iu]Tg52YC`%3/<THB=2AoWg39BM<@^q/tI<RH?Q/cWE*XTl<n),<,=JOdRU/*c7[5u;Q&(3`h4gS>)-C8KPtQ0&C4<[[62'so.//3HCJ2Caj(TD%Z@uVo$/40c!*oCS0@h>'6-`L7)t/dKo6[gqc+^Jj[2K$KlSRpmY*XRR+.K$4#`Jf=fiFs2[BlFX8$>\8L4KWI&H]gGUXQ6M]uKY.%J?r8[BL/@4Juc8j:X)MDRK_Q:S2pKO,qB]WWrQ]oDa_t([c]M;KPc(KmgL4PY>e%Q7)2XG&-5.,I0*qHL!i:Q$=,2_)LkaJB43fT%qX:r]FhIET?M<1O=-nBYXR]>kf=M"WrC>+tg<EZlm8XMcdtI)E;PDpL,ceA7A#E8`jDm?%r/,8@/O6_Z@?;3D2f&3M0TY/aHZcN?%e?710_1d_bC7SD=o$9UubtV\;1nI\iFh;>:Ssr^j*EV8Y3tl"bKq05#:-!2_9-GJ`Lek_\H1R7D,pJA=SJlN:G89i$,!:HQNr#+o%XA7ChVj?D`AU&X-IgAH+e83Fn^HUol\@.2Hh1&UuMsQVb/:@K$MQ]u8'>bT!P@5EE7,n0Q&cb7-hQB$7\mD;LQc$bah^%p5lW1%D%2ZNeBlX,p#XTFOMbj0Gd9Q,RsAKW9T;iT'I+R?,)?jRL#f=t)*B[R8S4hoP4e[BEdr'i&Sp2B5Rs43cdW_jIo8*C4$$)h;#k't$&%_T;Toaq,U5bsiVn@K,PR"(6r\+6Q?@r\pn3^VS"fHLfh'/9`R'TRhsbs#r*Er7A^,O!3YhRLQRsh!9'O+9/7ooFQ0ChX*P-bak*8%s4d2_E;Z?nh*9Wpp"K$;$+EHaS2GZ\B<R+U[/AhH(H'aegGlU`X-#65rqSM:;c5V2KH#Oq+rS8A^]#7nnRZ<OhAMZZ%q4VFX1c7G%G?%^s3"h%^aHhj-Lq&"M#[`)5Wnk.6"'Zc6(V0)A(Xgr]C3Ca[ms?]n0oGHbc<3@<s%<F`+JM6`#:.@%"0YnoI:Q-e::&g;F%Yt2%()fX4a#tTTm'X-:*N/WM?CMBWFgIdH(gRd.LkAh8?K]QTMkiYT&2s68.Rfpgl?-=EmZ;',Ih\uV\G]%[[9%YHZH(3jd[6noIIYF_%1qL)2V-^4l?4)`nE[FWh-bTisR:Z-+^UuV*=tpJM6Q^[B:<TDpZ`SDQqKRn;]G6Cp8V>rYM1^P>TVnMd$=oY4GLWWTq]gKW4qQ;I%4F;e%CY]p6NOg/9[SlA"XEf;JjIBDO>A63@Gl1&&XG%UZ@O$KpVpDphIumD"K]*G)<s2rG!XI9<mHNl2P??!-lM>ZZ!#C8$#1[BY%8MY=qhJBVf=trR##WC%gTqEWD#/N_b6SWPn96.)S=GU#6Z7U>%BN0fn!00;m3RogS6WeY[l$,Nf;RO!pea"O&!5$,2$j$jWdZno0%\!u<HRZ6]2jIX3d`H`mHNnt.*DQd@_*pOBl!54-!rGG16\YWoA>H]osCtJPcHq#LfZI<YLhn>BnMj&PVLKH";W(YPmM`UNM*p52;%jEt*Ee2hN`<QHXA>Rb<(SrdA4Tob<#Q%k(b%9q%AhagOJeiGZHAV"_Blq0ru\17m>3H)@CUlXf!Jd.)Ho>>D^-FA=5NRC:Z!)6Z>%9n6mk?^"hNag0BoHN-%tSst`)f:HttmEQ8"U`/LRPkLKjcM'BODrs"UepkE;CJEUP3D.n4'1k?fLJjA@_6ter=o8YrBXY6CQ$Nu_%dqnrm?>F,ERlJ(TYADs?"V9$!r'X1OqDJ<Dg+AiIp;[erS`aUsl;d]pj6Y3&ZQ$HGOs,QX6R>sh)3bV#'/,lG`f-sK)4*RC*1jC1%p.EDFM)0MtB"/BDM#4rnYlBp8T[%t8C'HJs%#!`39:)_eMW'#HA"Z=HTamEPS1PhTN@lO\*[2u_ib3pQYX9]O"\TUGK,IBa]Y0]:%+q"Snbs4Y&[0A'?:9Z(1D>i0+Lj1AI[[)A"TCOR)s(P>+Pc-c"`*94m#=EXjCTSslnNH0cia?W%%GDg5a_MEAHu@O$^9=$jYINT]%@R7dG3"h8T6\p+E!"+%]q6\UqBkC5R,7-DfOlpmFrrVK[enk@&pNS,`/O!_e9BP5Ac1YrPD$1\>TJ&s;:`V(i6sE%;r^uW1#1TY;%s-#'X#4pW+#Kf#"(P5n*d7amsTL/<DCUb?Dg]6&4Y934YYCZ:LeKIa0>\l9\2A/!=)L8<1jVcFiDQW5kB=P<3JMdM2H8"K46:48B%KEH-[R<rg1>=1[&>L^G2L4H[!lY)%s`K`M\Q$-e*56`)a?XE;G80^S.mY4g^#29X1'-e7gUXFV[7*-8HfI(/3fFSol<qOi(k,\.c%:n`!Q172,>V&9aiM-un2PH[P7WK0*UW'?H/fSc<u;[qRA5`g`p=p^KfV#XptK5f]cX>L:8kgFkW!1:?VX]>9C2S&iLq9E1JU6%<!%8dOL#0k5#"D19MN[MFQPPPk?n>5:]=9;Ek"[G.sK4BYI2I#ULj^k(:V)g6j33D$se3*%F<L4lch&1*>T<[+MG$=L454M\!/5\E?C%'0ru"Q-n=<j,J#4g"/E`'V42;JtQFrNTU=G_I.V;.l:g.@%_-^NJ:R-R[hY8'FQo'K()8on/X;$q6PJBb'S`a(t,L#p3u/jlKJ"l%2Z$Rm.`,:DX`cLVCe?H4aJ$8n^gnXJW5+uhrY^eVL&d_![paRB;m#poBdK.cYSb/&.n96_@IPQ9U5en.T$r'>ii-8qL%a70&i\mf%*p&rTV4;u/3o)i/"kY$\[mEhWoEuc$n:;I9nk?*Ab#E;<9N8&REoTiWr?i4`F/qH'i=UfSkK13(S5B;l.$MM$'hEl_cToXP:pghT%PsSUTI]M*4?p@<2/c:oi_8)a$_8:V:6bpU.3WhtZH"/`/oM=%P6W@q6a\/=mLjMfd[:A2h#7=+B5Z>qS=S73a@UT.P"/0BWrEtCX%ofBM47`&($`3Soi09@%#+p!E\j?U4ILO#t`$f/YHlFGcs&'b^u6A5/8F&8$UOT*>='CKSo!]&6i[q6S/gb^;"BMDbDd%RI#4Lh*j%Z]rM<IsL]sYPmGe5g_1\PtkD^+l@9+q2q$bA`HSGQWCGX7[6cR%[p:,&+/DM%Q$okd9_@u6W$Nno]E3QfMa$Q&u+W[`+r?3;mq)s%Dp?&+COWWD<1?Zip=OB\W#F6UbuU/?KggbHGFMC],BbRop9mr%M1L`)=_VNhdN&k+'Q7_*7oOX'X&j)c/!]FS?$5FGZ+/KDqKQ4n%D2dkn@gb*AV-52&R5?P)bJqKkk/GpJJ[VhrIm8@cg$V"mDHT!(EjDQ:85dM(jh*3:PFF'enoL;$$a%]dB2;[Qj>L*5a4`^RDf`>C%I!"rAZo;?.g-=_$0<=t946qm]_U&%#A"r-Ig>l9(=+0q\nN%VXFnYX9=#f+)bt$LBm1s'<:\Fh4WqL_M\bb_XCbBr&+7mcEY34)H%<F:PHB5d8*VY#&@2J1Rsk"A<V5Gt#DA*_8h^$OT%+jK'\+<SdlMZ2\to@'m_M+sH4bAs`G]Xa&OX-hI0o=.oKD<C!(Qe0uGS[7`'%E&p#H3q$">DQ.;FOk_`QGAM.?=*j0P&b.Zr]".e(m*<hbp2TNnRaE6N9,6LXio+pgp1(Q=c#-3.[bpA`V:U!@@Iru;noAeoA,:Vf%1jOO%*@eV5jk'0P<N=>L[IWn^-1jCZT)D[[V@Ln[H:pcgKuW`Va8FXtAR]_gepZC[3WE*K?U$`B-#a(dU-@*/I/1#rqpI0ACTkbR%im"T'*a:0J]euf)`r1&Ar?.;F?G,jXk2l6Z](7-%1dJ,Mh6#9';dj`id2[@RVb>@WjD=@bHhV.-)R&n^9rjnUT,Z)tEJertG]s'"%S*^LLDjntpfqPeC[/=NJE^fAAfA18Ph_):tK<#G\W]NkW[>ja/4gttN)DkLO_fcGNIGbChL@d=:UG7l'US:MUQnDiH/+[Pi)<_m7%/f,i&fX.L2/ZHbD=Z;q@+KXujkXi6"Zma8%Sa*jVG?#=?Mn;1L*ut'e4bhS6[Ej6&5lEGs;6$b#560;"V=O4P>BdNef3Rai#0P4>%S=We#+KXjFq<-%j=$/OH^)'Q1qA"iBUq0(ep:[Z/mqu9W;%%#kX^lI8gmjPO[g@!)a7i8"CioF'DN!7^onS@%b>kpMp#>kMZ,lkJ%MG8Pe3,k05X&JH=r,"O8)XnB+D+G;6,>&@*T+"K*;0KaY>YF\S>C3\!A(gKS@!/=BlgRF/c+K=nbu4.'crV2[<43>9*T:^S9cklH%O*u'&#<D/dNG6b+fr*iOk1s;4,koYS6KX+9@J`oA33S7H)m&d0eB_`8n*55If@;YBTgsD-'(kd?]2\Z=/:k1Y$1,c^BBS^\;g8?"%"(3e7#PPd=Vh`tig7R,@S_<:*!Y&AQ]((+0c5tS=aNX_,-SpD6:m1nm>glRSS@![J]W3U/`+<sE2L>t4-`b5_AmL[.QEQ`#Y'q9Z%n'K5-S=>`!mssrfJWI0<StGm;"[;a&n+spR[uT@TEa--o=O-2eB]A^!r$8E05qJ._hW@>=41-k6iW,f9>]=>f9@]b[]=8E01k=Kt%g3^&\bY50Y^An%ASPMs%Cu*Dsq$?'14,WmQplqrM8oNG0acO:3mlK"qh;)[iijp(g)RJO<]hor0A9*MM".JG=B@]8M[^sbf#9pPE%dG43c]fP8f'Zt@>DL:ea6<K\/Ye/F:0:Y81JWE%+6=/NO-g0+5%$g5sc5&;WV-<8^lKhL%`Xq>R6J;(,]3<cuq;'Z5"p7%RfZY)r%]2IL2=hM?S*2.(`eE4-_bGQZXGl-DUPEVVf>SP\eZ,s:,48GWsDjC#Tn^BO6qO6J./T8]<1SkQ\g3WAt#"R;7[&>r'Y9eLR:5uT.%jb.&F@o!I8-+m8hN>5J1>uP*P:6ilS<Z+2(#oHGY+&rn=%YIe!(;r]PA9*,4Rm-B.r\H&-K_-5t;*MSq7L1ckfL:s"3p1a)Kpi?Y%TdJbC&gYM[d])-`=]CXX`!Y?I2DtV6!\X\:j=rYQ?<9mL+e4ZWI4VE*?+3#%A!m<Q\SlZpHNJm9ZqY@uP_a\;0*K!Y>Qq%TR#cMC%JVMEKPmb0V:bc:./n$$S-bi*)1j]!U[:&sM'Ec2GIBEW_q3%u5(oLn)65XJLOaXAEr$Y.<0h_0C\<aoU8Rsj8^d]XeV5G"i:%r-g%#ro0$:gZZfF?RuRY%&l:6@u2<pbX&hmXqJfh&n.EZQfaEomYOZ%+H+,3_@_;HTfLL&So*pY/e4eU*@Uh,d8FXiMg8-ZUaYE$/apq%1bSAQR)<2-;L)6H$]W$fbNg3[4*rP-.Sa:DEH^].HhkjuL:\nX(fMMB-Mi\[B;9%5GEQ0Q+1p]WRk)qW=JX;GSBU'&$BMeSj_Ni1%,TaB0-Nc?7?(:b[*;jWOJjdn+#?fA*X+IR)M:=iRb3coI:u<XEbq#_XU(#:F.;1S_-*t7on=hpi)kY+?oD@]MkZN=Tl,),FBhT67%DU'0ME[E1%=72(Aan?UU-fufK#VT#9@RV5G2k2--T3`OVY.PjUj#DbB00gbYC<&Dt&3Xaa=[Ee'A=d/#=Lhm_U"K!4j0Zmkl;mmp%IcIa).>e>1&ekd;\,<qF!?4+QUA(V9/`0TAhGF$6-22jeV;T,bF4GE3$3FPJ;[70PFa=((WT=<E0N_^NapV_)0?i#Uk=T;D-7=q.%)b%h`mdknQTDqhM5;m,B(D#Aoo5`8>?`G^!QF'lq/2<_rAc+0[L^Eh!84?3[_ABb,SeGH!mK_=M3o=-:l-?s.jU9N%q(915<Ufq9%>>[BiXt7G!qb]I@nQV0hpJc9.eW1Ztp_Y/R,C;q@>Au^^C/9+n:etH#/I!PP'hAWdb3HY:o5WT0MYf@$$"V&6O%_1"W!G8mZI<O%%P\QbXJN54Tc&&!."Bj_T$dr=kC-DTYG2Fh)b0Q?`A%X<D=$Ps_3n.H,N=W=rF)uD6mq*OHjk!;CpQom<ii$h)<W*(^[anJ;0?.g?%+:FB+GAAut`@Ghu:VEtOW9i<W=S7&g)rlu".HgP^)ciboQ(Q$Ait=-+9$ZB1D=8fQ3,02;Md!;4aU8n*he!u$V)REEFKAlRln/(C%fI-aT?iOi/kB!6%]03k0o$5S1:rdK`L+&@<HSirO+lej&Er/$tHFk8'L4]$lQ<L/j$Yhc<=+!6"LJ$_(7>plUO5ddW2AY*;bAkMk%`_I#%Fg!3[C1DJ:i)#=ZN\pR/L161;f>f\XQ'^@tYJU*(jTbR%\M!MpHdOLRibg)"lIYK:A09)5_=f'PidPAL>?q17AoTY5HCMYu%/_/G(QFS6N>#U%jB_5&:c^gJ=c%7WEhokWgH$<D:Rc%[*MG]b884$?;G[qr8<I^uto.UtrO]hM2Hd;4uG8sTo_eunG^S2`<S)'.X%q;[s+kAJVfT2laeQOeSZqu6?F(j?pq_Z&6<-gAHVla'`8QEF:II;aBgm4H"s5CS@,l]dB3W,52]jlY[soS7,(g[bN\JD5+q\:;1q%dkN"BMB>@STo`#1G,Q.:HKm)(a_@Y85A.W^*-^<Jco-j)M,.o.q<G;po!85d]"*4Uk!JkEoB32M\"BTe?X:/r[W0e8g(*4?*)`4S%5O7-<kiph:a(l^_YK\UNGfI\92M'HoBCGb+4@!gkf([M,4)[fY+/Qu0o5a93PS]bn4\08oGF;_3q7&U-9<@p(g2$*s*2Pf9G*WUk%$g7DVBK>cq5Okd1S*`YV=#`BLH<@?KY[2!F-5^G&@O8P;S\+j2JpDiqiBFEW/]Ei%l^o8l%'O1"iE,a>FK](8[9hNo0Y7P3@%C)B%0"Ni5HT%(Gh3+E(GEea,IkVU/5$TYi5GT+BXS5q/IJN)=F/<HkrN(_3E;4f5PL+S`T]Kq]l*DJmG0uH=gM+.X)=N9#V]lrCeq>=u%$_K:IS5/?SF*NFlIOq?bj6lmOj<;sPrMr)0*R/L)O9S-$A'JjqKElh5n>?ZVg!hVa#i1f=?67^]GaWe0kh?V0L#^;<,NkbD1XV9F%@&@n?4`4+1r=)GC$YL-Lh*PUumaGHaT6[#EnG>&H`-Z1T:D2pa5187+45qtZKd*W5@rEn65$r/3/h90\+bt(2*mRd4KG-?SDAPK5%)^kH+,G.!+!96-)/N+BirB,slY<%Tec46^39?"L&Xo8<E41B;<V9ms"Up^pl`;R^ROs>2\QRU@@Z`1L)YA;apjI?m8WDV?:<P\uI%]DsF*2VQ.&hMFi`+MN*oo-GK72RXt?etP8Ia]ujB"l2<"'3ON5cMWiJ%"@eW+\>>Ncg=X^1o;WTMLA/m!L@(^:t5]1f(mhVRJSru%Fl9pbjZHL$q:PnInh#1LW]Ybf4^Y:[58FLYr]6p7HVbLNh#'F]=.?75G;`^/`LAp#VJa7jb6/WYkjP.?_m96Id!RpDRpYX>g3s\b%0sii[14)q^3Sll'W_G%J"t;Q`\<$;/"%6kQ2pLYir:XE3X4&XQ>/.l7ln2V1jGT)EMRP_@!F28BI`IKe[jRGX:su4/fnJ#f!Z[,=%brKDcoSc"IJV4r]Vehtkr&f$d"#oP"ZefsB_SjP)"TP5in/HF3X?01D(LL4toGFVZ%1;AG$1m`KmJsW]8qHnKocQB(/$RrVq/lGC%2uX'iR>4[aB%HJ3-gS@oXa7l8C@B\&9at]TQFTlH0"p(@a._nkpu^juqSV"@>9,A32s65n&$EF-WUf2o_aPS9S*/0h5&]Q<gNU,+%G\Q\>-;N!H40qkrL03,s]cMCkG1?h:5/gRP/,`p;'mt?!;c[p]SPj=li/OR+)ohPOl*,9?&S$Vm3k*-P<gMV7cdTbqq;u<V=O'8P%E7JDdGe]O)+ZAd,i0Za<=.T3%hWGr/9T1tbB0Vl9V)CN:A#aQKBWUYZP>&-X?XDn'8'U4_IIONf(QOg)H^cP)ej=\!L.$Eq?p7O#%_3f^)6/96J\l1>q_pEE6);^DnAhTieI:Qt2p@5(krYPYZGV><-$`8@KMDN_BW02KNSOQZcSc&!BQ8W)G[jTegSV"QI?:Y8Lbl-8.%4Q!,KEpfsV]al'S0ej.UQhS(*[G$\<2skT2hF(M7SYNo&nU;ImNPI";A!&$g[f`XWn1h[qDJa<@hQGW:m_c#QPWOSo;XoF;UGac4%c?l7n'CoAb>P=u*bR8e6Pl9U^r7#c:V:>Hc[kD,=gIFD>qa[RE/3LK)e_/(""jVrl(ldXbILlS0]RIUI^9>U6:^h"t8BK2E+E;3b%"X:X-"Pj@rl/="Wk1JO&Hf@QIH"j_YM4WTWSnu-dQ?H:VXt^Ykqp"<?"M;6T`O.dQrMt[eqp!etcZr>gg'3W3Qa`NAm8pK1Nc07+%^2Vf9A>(,#&?'Y+Z^0HS\Un"3lW<%9/jcAIgj%^]?#NGjD,GsbYmTReei\F5Sn<#_c$jQ:<'JjD_6>-EHI(dFcISJofcF)4_H#Uc%eGS%_igU*n/So:[>3GYAVt7cjo;YU:@`IMF`-kIs#^^$X`,1=h$W\[cL#^G/nj02*N)&Y81cTWL99j^6Y.!t=Y,Z':I/C3J%ZMl+%6AF!l0TZ4=Gdeu">9N5r\!L?t=2=(K?RO24du07@-lda>5G&)_=^C);<.>1j;7I_Sq%h&@"Wc')h5,.7fm.`27rPGj]B9jqk-T@#%bO2*Dg>)^BXFJO0LW2GR`gPUcEI)cB]^Sb98R(:$eiBc=^&&^134J39?$iKg?bb1$[r*6k5M_a@/__p-muuic3X6qM8(SkkXtI:!%38D.)]M*6;JL!F;@A6M/\epW3NJli^'$J.4ndLcC-`7?tmb!F3)&kaW00e?=5E1Sr]3eYbPQ(!^pXmSH+M\@214Xg/m`ouWRcS0l%<\GN<cIU4ZcH1J6n2\Z:Vnk2;Dp+%ten\-p;AUdfnM)?2KGRsg&F%CVT6li_[<or`J_Y9GNoKZbR9Nm@>(0h:<Wo*sW6B@,5!EN*%7I\F52YpRoe)ng0&U4UriAs7;5-"!%lY*2t-Y0G)I*7;K.lE,l$dDo//^u9mCaD>W@,H-#79/Heik2"ph&e<3Bm4W*L2>X+h%%I#%5ujF&GNO9h`k8=Bhb^udM<Nq.ebbQjjTXCC@ZVo5k/5ktSsc;LQnuuH9@r?"9Eiep@%m,6nQ^2`C77)Kg`-GdiD+7W\)n&3BU+I]%UE1i/jP@-&N?,4eA#21'SCD`&SXWp3+G[S#hcsHc2K4AeR^T:IVipt^<"';.*9IXWY'[]-m;>.lqt]%K3VrC`:O1:I+Ad1Qq2O&B%Rm*s(r-Z)H0-AEm&>G&s+@Bi82F#f?s6mP6">dWlc_7P4V2Zt7[m%0?2[jhpoYoHqQ+sta?G0QYe\+:k"6K"]P5T0AEB3*bj$(o>%pu7Amogg5-T62ZD.c=$.\gj.3Dq@2BS!"$D0oM-t+5UIm9#,_adV96F%O0UXi?#J&^W.p[.0B2:!09b;\QCXOF8k<E]POG3A\2ke%Q7mO0G4;!m)m>h!heugGgSt+)CHO,,lqY7NUFgf:FqtlCB.G"8*%V[:?\"Be??E,;G`=WT:U?C)e`!36,O8?FG_],%k$BRG#&[BM%+^2qg1B5`+:nR,5Z&**H>GGKKQ#+/)%t;V]8@DiOB&@:Okrld)Grmu2;L<6`bqNrC&5Wn9CVBr8CRo:FnW#hNOrq?(>'))JrS4Q`%#4J5uP'8FImZmO"hqU#&5Fi;@eJD6#g7TJ9!qauhN@K'#jDj;3g[TK)%ROO^47L%_`<MU3UAW]h.R&-*?V^r+RAj,adUHS"?5":M%P'>*+Q4B@CjtlsTL''Tb^?.;eSiUjihWWiZ0utTEn)K#S?oH&AG8*[-\-]/t?siOShbu=%ITu3^5G_cR,l\(OJK#\$rq<SW4bjWi%Q7hGg6mm--?;5h79&eDPhac+d%i:f@2>t/?ILepW75or5Hk-)fM/&gZ8?d)Sa:8ZQ&H)9UrX%p6Bod,`pn/G?^H!DI<;3`U'+1Je%kal8PN?SAPQ'(iSIZB9C4S2Pd_o![O$ejfa*nnUu:jl3\Q*,?1f)'],<,2*B.PJFlp]pfCB7Y17j#giuJZ]IULCj\#*_P1R+&=o"%_V]VrRaNn%/2\Bsd!%d7phWJRU\S5\8g8`erAEsV7.u59aU2mAM*%.<^=[C$?W/&2BWk;]f&'ilkSquer$!?=$55trCT]&+'M%ZZ%l/,73%<Sr?.t^UN_>Sb8Vrh?]mF+a+X.:^CWS1!>ljt3&2%siiCVgGA5Q_maC1UXQn7SXh2VGUI#!X(r*.N.1Vau`_ULZTCkB?Hr%dbV,)j0_D3'g<o1pmiJsWsNX=d/=]/W\A%A]Ud%uUj=b*L(Y4dQoUK1'N3`P.jTaS$]P)U'N3&%OUASHM0g,75("Yr'ANGrrmRCp%\9qJCQKA\nju;/..Xk:&eWXRp^N&7_U)PWJ`d,&W]\$HWgCpK#'c`BBp[9U'CT#2,fW;Zt2R^+PI@A9;c*+mcNm/X%g1(M/27W>N%,sO<F><X!134O.O(8V+%>$AP++nYV5C%as\.%LG_c?\#"Nde.378(%I>N=aeFn)BaUm7%X?"s2`.qNbgpA3KA@A.hR]=DQueue>i%X1[3"eLo&4qch1QF`5R][DLY(4BF3U*/ck'11+4T3sC$/7N/mtTtIsT:X\<I$u!E)DQe0-!Qi3=[%s6I2?M#^QJ9)PIPfr[V!=1<%R#ci2gCI1p(#$*BoBTUj;oCZgMt<NIl<%8ZossW$::KNXoSjMQHJa02\3EPS\n1lfQZmo>'9W9]4P\9D@V>k>7W!&oQ]-$/Co6$N%F7!M6a7?o%Xt7m&82IdVD.e1R?nhhar\d]C^*tESeS_N9=.23A6osa:ND+6<4InW/i`1$FYFH<&`^K7iXADGTqGZ+:\@i00d\]e^%mFL:ZoZgD73`3]e^FBFXH9=>2'<f!qX]GfXki,N$g8?m&aUcP^+ekOpn(%?,[WYK9#GbP0:R-C1\uA6nqU'OH5T4;k6X+:)R*&^3%+Ea<9`jDEd,4-'ce23uU+L1(b9f&3hea]'QZoQZ36JCl+P]O/e)g;fa80uk?Y6RT!9=.bJcS!s&a[ih/#K_DH5#(*[h!M3(hNok@%P)s9rdagbR0SNS<@bQ1b4A+RSCoQ6)*D[m-\N]PT\8rVOk1B\W2-ZJRSC`1qGf,[#/C)1q)JAs9QOIU(rnWQQHFkWnhj*j[UmYJ#%I/C6[^/(79KJnk_@'3d.7Cr<o==U*h]pk;4QG!bO73.9mG]3,$YNd]]'9SkLDQKWX4hT\//LDW0c`c/iUs&"<.oF+Bq\-ZLf;GX6%M"G^pDPeVkfNR"/'@KQ,J_*'LZDDH9+PiEur,MD9OGNODj(U+P.JRFAqtO:W?DRr&?BZFjc=`?'*Zi#o\oq-;&s5A"o-]2*j%DV?%+33tOf4dc]l1*hU2&YZ+k%sptcmcqq!Z"+,rj?F8#h[iP]/l2M):HZPG:RDb)suM4SVB\uqi'ZN@V,7'n)G"]Z9#DENq<*gmW=U:%ICJBKO_.3H37J861;,lX*CZE8G@#J@&F!YS'X2N]Z(E,MT.jM8]%Q=hL%e<2+l/M70>tdj<cF+s):F<.nnpk.ZPW3`gM=EO"jemp%]>=r$dG1Aj"\@HU*,3$n1!>\3TB)c;DI4*!;lbRNh72+p-_uQPnN([Ad@]ie&ZO8-i'Vj+r476\"%\\@n(]NX2(n$4l>#nGU'3aV%k$n@>2t;@#1:A\"gs:1CmS9t/Q-SnfdTu&;G@<%(S947<P)%_>C)Eg0.HC@j[2IkNCPblRFLTXUNukb&fNl8d\%>p=?GA@]TAGtS%gH<%sT;:90Y3bQB:3;ZfmR[qWh#@5ahFkCt4<ACCpSLmWm_'SnS!T%iGHJbe=[Z/!+[KT7d\PceMu@jZWJeo)Gs19WlHEgRokH:+%f9b-=EUISI>q;d7]tNo;1=#?PmiE1u?Yd"5D"?E";i&N03fiCuPl'(I51Il@P&g<WZaol!=ikl+*fc6/as)0j6"1@GGJ87p5Q1A&%.K!Vkh9*.22SNS1BbL$?&)H[KOdH"<MtHKsrG-%.nS[d[Uj>$WG.<ZV\(tA;4NZ[6c'+P5]V"Z-Y7u2@:5U-<\'GAg$]cC#Z%m$@%nS[gYo#t?VFmLL3m?8CB?^mV@]UGl(:Tq6>='L-mf-2TMDJr>M,4?gps#_q0V4!`NRY<8MZ+7O_H#1;W]c(+bquLs%A+b4ck&.V_%T8p2U/<)7L4[LcCrGJp]f%6AZ5g@t/i<q=m*E\;8-qCIf<:!GHoWmbWSQMno4j?<J2dV5ZB.<+)gZ-HKg@6@?Fs`^;&A13#UANjH%@)^F?jQV"NmYB2)ZhN]Ta5%hqWCS>EBH3ik2("tgC8`YD!SRh-Ri_`oDN3oF8@Q%]2a1,EEY:iWD,5Nt]mG<PWu`#F6PueG2Am;!%al[:CBm"0*,!ZK;<pCKV!SWok;;59r8@=qVFJRsbWt_h]-sEVk;NO4&$+7ZL)U_5-;U!.iUubQ^.3hDQMYY=^RWoVMUb'-6o"$Ul%lW&32EXb?2T6NjGp8T@R*DLc5gJ<A?5?]!F!Nt7*I*[MZ"nM#,bFcBc1"1iS(M;ffc-@K]IeZmZr,7>n,:)SZr797EaS9.o^MHH7%i>W[W_R`WL3"=WknJ&LRl+7S+]5h'X6C42-XdSI"I+/GK(RNu@#8aO&'0_#YfJ"*`m/_P$*-n^^b=*P=2%d@3p%<>XoE(U=aLCt1%<XAJFl;N4PG5\ZR+BdFKF#eP4AV_$=S?aB3")!)]8_jj_0I6CpMdn`;_T:8s,CF#TksTZ'7)_^6FmKM._W8hYCT*L`<<*kNZ+7`#%Dn+0YjYU5+-h+Sgn*MLmQcXqAUmK63PLP4Ns/?s(k6Jp$DrH64$e@\DA,RAK[4?<NKf+2VD4NP7QS/Y\5\$/Fb+?_7T^IB8UmL>l%lVTMicmrI4@EiQ0Q-&:X01e?%mRr*XIp;J>S\]?m$kcUbp"V)Tii]2,?YY9,ptSAF:F8$-2h%"Qnj@'5DaI/6i7?a!:Wa<PZ@%/O%*Cp_:p'#iS$P0iBaf^R;oNm^8::JC!<7]R@Q+d,LYni=.9[reM_aQ`-Cab8Saf@O1"C-Y'/Afs('QKE)7W0&Gd4d;.TbJ#9^3B,[%&*'-f7*d1J3'S/&e\g4M^30HI@e%L&InqaOb;6VA;>S44RY?hMcOX]jPeS02Z/hdtl69`BlVC,/DKhB9rQc)BDQqZR-<FFo.&AR5%ap[QipQaN)<f8>J4K1Cs;i5`H^2P_rK@gLA;&MT[;fuU7XZ=-3UPgsSq(m^[j\mVbg:PI#/ehq2ZESS?7-9Z`hlTq\9Ao&mp-;tH%WpA?TI-c+39aOM2ElNnf<k"f02&)?3\M*[F]@He)p69Cj5lB*`?st4.91):V`s9Q*J=[?N3l(JJO[dbG\,B0N0K#]e:A1qO4YZ&[%o\cs<DY3pDqk6UsRf&_rWmd7(@(J,(;&^HTG7:2r1+,hVV<Rp0R1-C459R50Vu<L2U)r^F'&t3@>g\eqp!$sQE8<u^.=XKB%VV\Y%I\`mR5/_Mq'&$k\p:?f`?>";,$$L?lYT9pc^L<D2gWDme\G(\DREamfpLJIm(W_>4ia8%tk[bjWL?FkNdb-\\(j-Z=KpVI-i"XW+%AV=q><8tk&@@:";.Drg6."oN[bMSK)0XDRKL`.-dWS,3$<P3e1^/gH(.8>;J40jV%k;#bpT8&-0B:SDA&>T_Lm'%AaXY72F'E`nA%CcmuY9^YPArMB\dFY%'D^NTU<!s&=t^0:!'o!blOE\LVVR1Y/@FG!h,V"'C7-6F;p;][u<nt/c/0Z]a1E!)"OK?$%%C@Y^ndYg5:%1P1'fLA.@i*S&),b8st9Ts40-#ce\`)*c`a0`sp1-L^XtW4IbF0($Xf4Dfa^cr^A1ach@V8^6/i7S)%NAK3*8<YUTK,eG#Vmm<5Q%5"l#Pb`"TqJY#(d#jq>>jkgp3pt1kEcMLTgQSKmB.RUh]&]X#i6Up=i8c)F*<A:C]+Y8]AYDe%.NRr]&d`-'sRN1mfOcbB3.ZI)b%V._?l(Jgm&_U%:48>^YS/>#W6VX-]7`op!dP8]_n7qC6*MhXMT>)ReX&2'UQ!INLXa2$TZoAu/j]$'4dIs3_Qh71P*,;>?"XQb):%T_DY#TX>#,@e&m\">b;,0[h-/;K>p)Nqp(BjQEg"+,blbfpV["q@2BJqJ<Cl%CWjH-A*!2pA>%'^+[KNm[Fq3FhA&#>8kIeR#VUs%DoK_ln+u)Xq6A3$2g(C3D*Z/Mc1)6]-X'&iJXTtASD*eI"]?lFnM0p&:]<sJ?]9?*H9\+.kR?F:JnS\DO<X6u,@4:-[6HOd5kE(%%JFhLt01]m4Uegh,?Wn(^I6OAR6g851QW0US*c3OGUKr9'USWs3J8P2bO4JT;cW6*u_'_(*53X;$jbP]`fU27.9W8.@_V+^.D>tg%%U]#r7?[U\)-&l2,45]dG(Op&bQ.gLWSN>Mi]^E`OWD=j`AEtYl@4P5j"Wa!l9[6N5gldjV%0c7t>\m9hW!a\:=EAV5R9E.B4s^`q%RH.oW&brQ?=_R.P:6o]\e]lsX^:sFeDTjc_T3<T9m0!TZ*6aK+@>;3(:ZT5X%K2XrCZjGF+K1RD9X'$/I:t_,QBRc#-dF&8@p^5K%)\`Yrpt/"l)I@h>^Q0f-r?oS$mo=a;@1<NN^)n:8%AC%(b/`"6(o]'ZZ#>]6Pb<fEamVa)X03%J,t>/?n)X5*<d61n<YW/<b3tNt%alJ2b1K$%L*".IUWJhoIhhd)m=GTVe(P5c1Z1P/Hq5raLaSg6Z/.?!!Gk"b;$mRVG!4mWTQD5$hP#Vu5Z+sgW84GU+VCR$L1cCL_%Nf`Kl;u3^qKn6rr.^;H\e=L4-1:8=;*mr7<c(9M9i:pF;r@5e0%pr'J-Rm_>R3mu&?Eq;1:C'TPWF75u4?58Q4`prCBdkRadd-k$%pfdMN;3#$h:l-!lhZqb&UFpgB5uXEGck>W10?r?]A)394Gc8PM),F"s)2Ru3C3!k\mD-_>;N+M&Bu&_4cj3mMb&q0-"JQ)0$P+pD%59f\RTHIZNMo$.sKtj*gk&f#k>Bp$fL-+Gh`tkera.s_tRG=Ff6T95p?/L[9hqURXGR#7i?GF71DX\.I6+[<8ZA3>e%_CkA_;F-;%2g>R5-MM0Hcjeht(Y^P:gO&,gn"@kbrlcFp_)pjoFiPTV6T5jBG!GqV4`l=#d"P!K^9`T4n.%LNNt'u6(L<,m^;I%;P\gq9"/!:@%B_1gg,c-Lm*`'2!/_jZZRMfPK<%.)0k/uE<W?EcY7j$t!3?<T\/U@14hskgb9!^1mWIL7/s%9W.&N>?eO"cA&S`:[9fYY,nUC;>@%cFM?ub7CqGObFjGbSa/RqTd,)_dER;lJF@PUSD2O1cLl,\QK3+F_#@8f/?HR@4;JgrNsNd5K\IfDN:h>:#&G72:_u/mf'5UTpsl4%.j;Yc0IYr(G=RV2B"-i8Rs:2TFL0_?/HpuW9+]<tH/3FR3j]=3VYo6Y/FJ"mZ02fOW*-UlUGFfGX<p`qq)G+pWf19q?K)MGH8C]P%0^S+%2g(>KQaW:PI=.f-@2rV.]1I(sTmSCTF>eO)E5$ghUq2huJ`ui?XPU)ONVuG\^hBi:l9;Gambi3H/,T)GIs&TKlg1WUW@NqF%CT`7TX7WN.leRQV'TrZrdRb\Q5ZIRuGe`Q6l9BW9fGaN<m,MjiriUg/0C7^<\gJh1)'XEPH"1KH5GMAtbX_NTPclnZN@NhMf_po3%j\$4ZT*kBLPMDr3Y/I%:^Lk)rTi60K'?eFFZ[d;V*kHobRsOA0jad;MEGpuj5i?TZG<VVAlt(uqG;gj=-t4s,'RP6q]*!r(PjaE)%MDsQohe</$@3nr+iT`;aknKP=\'"Y]&,"8-Ut7`n>MOtfrbukQ:GKl=5#iGnmo:2ON^9)Vp>E,:n\=I%Zoh63kWIt%H0!8T?*S4d%d(m=Y@]*#^/&N-NV38oa#&]Mqn2feqU69i\\+26r.6$OrKqFF&b,IHYWjrVrAiH7u6I_rSMU19M<C#oT)bC3fm>O[a.CL<9\$LKs%6tQEjlIVc_TH/3NNQ;N4SNaof\,dko^UmuChX/6NACO2_25I)gAOL,thAcLo.^e(E7V)EW^*.(*a6n.@A>6gr+R`$ST='=aR:(0X%khFIu4sH2p>L<BIh$([S^?XI8qKr,2^+pmr1<tr4)7ItB`6C:b)e1-f*c71\B!6-Jq=;Y[n9*cd,g3='5HuSUj$Fg"@UPEeK8mb8%rL#ql@P)<UCc!>sZ41Yfp?RXt@e$;&2q$-.U"dUs9,H$"$P(ompU.DfM(;R"7U<2VG[F_fis+oc*kjmm2V4dT8QAlV7pDtuQm\b@%bLYY+bhs4=/C7s_I_Y'<fFQ$R_[ICus7UoOhtd8VYO@6>?3U;*pVVDpL$HbViJ+F1rBpJ@a<uJl!f-/u9Dh9+eFeC-],rZ>)G3^'%rRq-g$/[h%NW%i7E$Ka'^`V2>([@@VP.j/n+"j6&9:=AIOd+aoTSr1REsF5BaD2u0?SS(B>E6!9Z>Z#Hn(I]ZpUAbL',kj:jNr)L%^Y7Od.uNHa)SUg;#>e8/BI]nu*"\N<<#e/B69pQW"AqSen+lNZq\slP<d44-2tV$ZF^,JWA`XI@_iBPsI[S"S7sNEVS+Aa9D]8<d%gUV'Y]scAR2g<T!^K@4Io``:fo:=pun%0%@K^qsVf"VcoAJ6t>s63kS23NiqkNB7R)t[]OgV%f+%lr3^)m6j2]gOkpRl)hi4b@O\%qf=$\!OJ>GgMek8Q0hgb)cg1*9mFX`DR>tknau7IC%Y0+7UrPjbZo6.>.(>idi'sXkr&qXZjTUmIL^Ls,5'2/.T51()IZ(71cDq&%eG$^I:m#LqKi(gFmU(<%e%_0a.T3+6/'6%.^">TJMHnf'Y3scC'rcg-"'p&+]BAj,KCh/\Fk@raS>^LAEi*=chO2#a+U5il@OYPX%3B#;`37q^WB(WG?ne.d<^"-c%V/TMQ/I*n^)pYY"CaiWD)+8gas-$?jY,K4Y9At3U@fuR?U-Akp"`<EMpF1K)9op4[7/1qPCj0Cp%WhJ@PKTH#&4ZEFlN5f$3,/8^=F7?g7OQ#/M$a%tC9D,iH69'Bk(Js5FJ^IK41-fi#>F,QTL^H2s76O$Ak_7k3f9Mn"duP;UB)fO@%-X2&3])?APmX0"ajm;%+^&,""^RNrqdc0'B2p9g6*ktm-0`C;0rR4QkWVj-3.8Sf(>2=J=qUs_o^UC4%+lV8bT"NmUf^7@EC+U2.%Fr3e%MqtOSmqu1bX-OC&q)_7<G'at9mI[J@_p*S+:PBgmeaDtToK"VTrm7^um=G\WT<@oYENOE1O5a()0>2,*VHPM:g5=]EK<9O.%[02Fi9fG8i?L3CS166c^f_ML1'mA20pZjt,R]J]`\(Tf:\;tRF5?n-:X4V9m?a8@F[.d)B?<i!7r+O-!HkXi@4l,T"d?f9YpXtbt%Sf\\-[^*3Hg:F:CoY?(LVg+]eTA0,'#("QH-#LumIVF9eq/lMZ_Z<r2^2nV7dSubmk$?k^Lc2rB>?qs.;SSb!$WCrt/QeFl0\%'d%=rng&Bs?$Wqe`6G>ijD;r^VfhjBVBGeC"NrV#BmI)W'f$DNa=/O'L9m<N^G-glNpha.[.4Y(f'@9dCOF,Mnm@fCoog$hF-`FGX8K%nb'EdD89E4$bLN>>lt1)q>dLZ/SD%grr0FDpWMeikN-n\G9-#O\r2[,iN)2qMo,s):"RW#BVKI@Wi#)_9@s,iR&a38Fi+?om$B5'%drh^f]0bW>&7OpsRJ)uMVJDZep=edD<RZ)+lG=3$L9@E>k0sp=Ob]p5lP?CtkfOK;drh^fCQ".1TUN#&cI."kgaK2e\mau#mr_U[%FFDHF)IYL/[p$AogsJtudreUC>lBdcdrjtSqoQiZYGUWoI^P$+bgQTml+4!(f5.B9<RZ(KFlAn.Q`-eID-N%+RVo&A]6#o9B2^c_%D:I*XQ^tD?Wp.*?=LF8mdrfGV[FHM(VX)euD<05hh4c293Ug+QVX%8UfC$=Y]pc*.q,hECA/*R9h.l3.oukmdl+0SYbACB,WMUW-%P%t3NFPU]rqV9,8FU.EPjRO0/^pa-Z^0G&T$s4W1hDXh.mcG@fn7c9EU"72]n#Pd*V7tO"V=(DMCL%?,:D_l(gVTbG=_b,RIl)[a%0c19LT/R,lH<*1Qmo3qd"qh(Ah(CW#5BZ:TAp6?UTUpVZH0U\dd8.XORAZfGGAg,#=0"j@-2)`W\5ahs8[Ii;bZ2#Pmu-UgW*/G8%c!BWq=+cq%_d@K:>J`KD+?hpO20XHu\HXR[)sBubrqX\+U:Vockj]a_Z)\YL$ujJI+Gf%;iNN.CM(&).k\cJcV58Xmgm,9c_rLjm%7"sEKXm,0-`]Va2=$N=9XNohASJMAC^L!G),X]1"H0&5$T2,[6`=W#bjGnC:Uq>QrJrBHr8^-?>5p>'<\\GP'.L^YOE=?$9L5AJl%P!o#>-hQ$9ab/BQ72ac]:UGDq;pf_P)lcuP#N]^n93eFBSdk@-FP0Ko7[X_YC;=Ya$PJpf:BoX&(K<Rn>r`V9<dGel?CMe7S]e"F%(,(O3>]g:WPr@=OX&A`PbUtesEFE^V)q`mQCE#bX=*DmPS+leql+p.!6t8mQ6WnZID14<R#KdIYkcULUq<u_u[](8)^=PP<"K]#1%p'b]0[9q@(JLB;1LO*_ae%O(%GpBr;&@umm'q<sU4UW-^g&&P!%s64G`KcL.DdV%b=R&#FpeoLS[PM/OB9.D@3fYW&m&8Y,8K@:F%T!f*V^Q;mF#VU"tgDttV[shUbR53\Y][@75c2,TNGMHJ=)g:"UGPQTdLUlBHO#>3EmRC(L\3)pKS+82a4p0],2j1bJ??b064fYYT%H[!sc%<BkWco9`cE8TtT-\cd6%<mGrC5sR)OVDuXFH,/6lemK)qq(NoW.h>_?<Fghm@Yt?0Rshj;Y`;(_V4b!\lH3MHd7nb1G#!F%m>M<bB*<prBVeCElL0X:geR<ZiMrk7PqsS1Q8-&jWkQ0iNrI]M(&]sHgLV>l>T).nh##\"@$qcd@"9Gu]sBV(X&Y'`=N8if&N6$2%?<NVdNr.+ePHcULEb?M^HB9>J]sBWSrUPC`$9\VG@VX[IgaTaD7^m^Pk+N2NX[oQ)>/iC\@CT:/D)2UjQ)4<\\n"(DE4;`RaLmF>%CKq["^@j[gU$J->H9uu)MQdKDU-U"^3b.Q$1gUe[7T3U/aii<j*VgWj"rI-m/U6sS*Y3]ujUG2^I'H)om<c]L>Ldf0)V=->:$,LN%B"NJp/2K@k3]h[r-F?20on.(i2R31'FnbS"gQf+!L[43ja%M?`_kj3K\L0r.I.agF4;5c;h2CJpgHB@W5EF]EX,!`MTK)=ET8W,D%gtAd7;G01.o\IFJ]o)<rf@pu5`_WWj\[>hGGO=;VCTF)jH@@\RID,EMgIH#mH4O5f9!%udTDDi72d96Fg0,eGpA</-mg=6cIaO_D%q7:RT8+#3Aae#>CB7E+5Y!mRjA";J(G>B]4cF&qr[GA";3mr6N.fW7[$O5?lqfho5FjH-*gc50,\^s?4\p^rupFUmg@]/Al-S*O"%XnDI&^><mU@J`Q%n=p_XI%=ItG(;fr,0W+hX5Eld]02dE\^olOherqQU7^/hkG"F#8@o_0ji1U)F51d0;dZ&>TprLVQSpk+VouL(%@Wq?bd/:.t](t0&CL"[cJ<9CU8bt;XQa?gg:T&q>L$;Ui"?AB7e>d`94VOl"1"ZMgUs3-2.;/f7?+6;+hCT8)>1KMNXSq5%b?(NG%PbAud?jG\hdl-@$Ci7Si0I`J-FfCW`]Bkl8-[kJ8/`OnN8ca;!`'`sZ5'^<>g7Q[GfN)ul5OA__n'4o#bNrQW241oM\2%amZ4@/_%F5o`1C>9.sImhgX+'1oCjcQ7M^H+RPEFf:92ThJ4$X"!cY4X*'jn@KWPu/MfM]0AslbtLK>0pC?/?M5-Z*pHj"+/a.27n?TU]6\d%PqWI:c_u6P!T;l:_;Nk83HH*5)!(P)QH=I,qlm,=O<%u8hmG4%)58F.@-urP(Y\8=St>`?[6D`Q\3dM!r8Ke:"th1ufRD+3F*38@%Z+A#$CI)IR/p5a[gq&!bo:1F6XRU%l3qAN<:^Yi)n%4m+[[hKi]+ja,ldo$IEU3Vtm)YQ&]ABFZYLM4[!<$Z7Y3j]jKpVfL1Lh6X%mka_]m3lVkNH3$dcc/#gKfcESk'jj7(#Y`BJF+61QRECa_"B6Se`bQ%Kk8:,eGs(O04+n8^4*b1!%SqeQ`'uP?c18'(V=2m?lQ0=%oIrAu@!f$&<Gp=8)7s]"@*=`*W<)@aZ0F=i=1M23iZhg)$F"`@>-X7!Gbt,3@oR<re'OHP%<WoMV(^qG]e/Q"FX^ZV<+5Ecnm-Vf%gF+]9;]khdB]c;WV0n4I%X/$3,qe<FL;JrL;SKm>,EM1h^-V4k]Y^Lm/Z8_3[Gg$;kg]4+JP(QAh!-hUZ_;?Ahaf6-7Wp]>eaE*G%*Emeudj;;:]ADl**u4'=@s+btrS"cem8h!FSdj5!Y?ucYW2D",jLp"*<[chifB[7O@INk.Lm,#iY@%=RO:$#NV0i.FW8nl5]ma/,%eI0Z>ka*gVldpW"SbH2lmU![-\,'Cq#*:J3qXkq,pC,U2n+H"X9`7aE^Vmg7rA2`FS-@_04+ih@odi;,=FF8^f<;r`A!CU/p\OQt%eSiMBW-[=dfAG-GOTdo?]meeCVOG!j?26[u&_+H(I]m,Y<k.uN\C[p65c'XkIAM;hqA7G#WCX_P]mec>.cmd]D7;<+qHgq^1q;hQ%IV#,!V9;fs]mfp6=fkDB?1qU>Y&Tnb$)(\ReaN1sT5`UiOa?hMrEAKq3c=WV39TRip\OQT_"'t'X5<0oGHYk7P=KVr?iT?Z&GP^#%i=q@(qtR=#pX&k>^Yu4R]&2i*5=F9ggNL)RrVBah>4[49Hi<ful8P03[#=K2C(mAQf<9\:\NPl/ZM44g^X_c[p[J]TUs\Wp^+1;&%e%!qH,kph7kXuG*H:-l/I`#F0f-Xq/G->7CYslj<IZ95Y/)KUD@'?`BqH]sJD0Rk7-]\^^Y?sLMkP[((pIB8-h^Ibr0>?%VYe&Ge%hWrd,A\bq*06aVWE&h!*me+2>0mr"^^R"bZX&5^eCS(CYlIY3`Z_?g[lQO<C):5(r/pXX-s$Wap9^.`7qXl>!o,#[(i&+;S-3r:j%=2*:)35>$ip\M9'Y)Z`bY*(qM^"9GP8(7_GGqZb\YJ4MuLa6<s?GHICYt^4*[<qlKhs/h4*kTq8If53J[:)OEYMZ!2bgl.SCL,'U%>Q+D!f+)f(?[q0V5o&Rup\OPa%ae0@W3Y9R*]AD</ur=BbkPj5=3B>I^<`e8Y<]^Y@eSU&r=eX(b8/jnR%JZW)SN]7ZL'#8WfS##%F5oRuQ3id%:jEfBDU0Fl7G.Cr];\$TZZEUIf%if8UO6b8pXtu5rG_].Qa7KLZP.P#\i3F&_iRXnrq^<ro[!N=oqT10rSZLk\(AVA%SPP50>^\VVD>.OdkJjP]f9[l!s*1qklfdZ\g"JjjC?*oPpAOU&Q\Fn#Spc$-oVs=2]jLfIrQ>%co$=A?0>8HFXj'$-Zb<h+27^3*%1d1O#DYWu%al`6OIst/->rY'<GVsd4m*+9&^NOpF3]E2Vpj./LmDe,YF><`9ErO[MP7?mWM''oRB+OEHNo0i?p2o(B5!PXQHfu9/%e`=PoZMOFBC9i$]oNAKnr7T].ZYp@dci/<_^\.KTbd.B[HotG5cMq(9^7RW:LF!gNfitbfSaE!HrpohFG3/=jXo^&T$gUIKJ"JC/%?%'5fHN2t&_r_\qHB7!d`Et:1:Y)f@YJ+o1&3K](iCE`\r6;Pqe(r$D,Q755IcL.HM4Mm1q;()MM9T+;O)KGmp#s+CDE^dm)o\MV%9^c%pZ]1IS$<p3-rk>i;BQj=?gBZ\J'QCc#eaiX>F[%HX\'Lt/itcGGk![-l(Rmd-C7jcR4NMEjKQ0bh?[9!QCO9LXr:]]'i=G&d%=7#d8d%3F-ph/pcZ\Rl2Ve=II\GosE\FK.]dYGlpf/Za@\3%BugR;!)q6`/Fph=bpH"Q'^lK%f:7qUlCSU7c$V/Q6P#)i(_jm`/N%,+73]5&9oD5L1TrqnHa:j)6%b@MWm?_RtBph*'E%<bJb8CqkFWc;684r"OXG)-](c?gg\[=.\.<ns9n'fZl'_nS!YA\Jt;2I9PHr%HM8]\kMsFGKtA;aB@?5reW.p#5<^t(E4bt%V29iE+-8Kfq9tZ*h"Xg]qM-`us(VBSWVg2u`hTa!+.c2HUh4K(g4"Z4c%g'JqY8db%qI/D[Z^#^bIbmX]Ru8a>4A/MTFCNhM%?"Sq[XIXbU=&[mBmo(#Vnjf&04la2jb>J4,jpG5;:gR5dj;Bm,2ofsk&C8ZIuV\o^3sYX%VBg5pX4),c?[[.hf@MhVX.;lO1oBAW^&1JXFX']KnZ.M3R:>IA_VJc"7[5:CE_Q-[gUu,rY>^m\CMU:8RV%aUZY&Y%msEMfGL+_5%/cY0Gp>PV=qI5A+lKtYBaN;'_m),%9NSb8=]Qs+Ja_5k_cfacY,eTOZ/tH9S^CQh'NUjVcIf%4M#$=':*r(q<o()=:NRU2]5'#E4%Q)X_qplkXhcpZ5-p>.Ep`OBtjX4Y*qET6f^hOg.>m8$YB%DI1)X#suYh>R7ij%k,MAUA&1@l^KHjjT^h,tOE834AVDic4q?m>%0d%s(j5NGr5N#$/-Zdd>gj/[-hPL)+:</???j1*Z^Lfr@k-2rheNBm&dmFpK`S>/an1)4Qk^FgF!NdH;g;XpjD?!LXkMHCPNF-^4(QI%j^<8j%J8sLaH\c.Q0-AAVQ26@C#0VrlDDX&q9Oi`?e*eE)bS("M!*6DV*C\NNcp_lJ,Zd[oO7.KcCGKl:F@SW(T3;>E8toK^:9?U%?f-:DnRI%8G^JVe8Cd6_l-:L^DX!,90Xi.dN)i`>>C?$!%V+]!['&]RcH"hah"PUW\Sp(XDi1Z<Eh4P?p"tlh6iE<5Z9(_7LN8S;%Q;VTe=,Q&qU)<$hmIcme_S;F][NSo,R4#Rr[$Ngn/VkW:J*V/=5i210lfu5a=Z_*ss/TGL;OWDpr>E40^HdW=)+FB!UU_Wi4F,9s%?[j[SbE)+_-M#6!,HG2>^lQ&dC:(,!^Kljqj=8`Ib_KWNW^*Cs'3R@4ASJTd^@^[e_]rTYcSDhB028cak/3/X8`hoIDRTh7I^Ze3%dYH)D(:hkED`7"$(?XBHNKYdWmfbFknipmhh$g43CO&L`[e0'X]_M%;%r\okhlC0F<Gc.+gIbZPLaLo%TH5MLfM33oY%]MNG4"#]%K=,C%h*8SY[;X$5&6!._U=hePF=k_E2,Kdpg"Cc*B]@cWbKa9Q<a1,+Yk%e]/@N5(K4fH6/#5oDBjf#ndQ[TcK;Nqo>PIZ8fK2S-%;.\n/%acLGm$AM?pHKJGRYQ%$'Y/r_m'[s?E2t^dYI>>)gtj\[Vmp[0^HDJB\8;"oFO[M%+']E.%G0^fGggONpV5VA/59/OpK_$b%]fFqqeq.,k24^8B`Mk3o96'ntrS#"j1_O5$c;G^*?@?,92lKZZr;0K($Jm_>5e_:5cb&A"8SC2;A@aN&n'9]So-3bJ'J-rrr3;cD%qJ==hYRopX3B=Y5,i$+2R=kf<^J:i_W4]&uX_<0j4@t6"dQ.OomA+5)kR?`H?2"2CS-8`0%*/Zp9uc$-5Fl#8B6VF[m(R71_W8Om%Qg]:j_:3",(+8O0Iql8ecN`+L;O\T=M/Kj)D%4Rt%+3"8cQ1D_5;[Lo4IP^H_jKiE5]p0%D5)L$@8nG`F&sAOd`,7'//:1UD\K!t%',NP\1KBpSipNDK4[9+WM7u\h<Pls.9>qcaBk#H>R$eu%&$2o$g5Ge-X5Oh#9MWS3p)cD8D4naD[>@O2eP%_4=*!c=2dq$V`'AYO%%G7t;oK"p4H.(*J[3nU!:X7d65)HV)2VS^NC-:*YOJqp5bYfTBGc]f@bRM5!4]Zd0hSNch=e*$R77NK]g7(X93fJs;&:<b!6=\:N%eHbYI>;,>CGJ%d"c;Gktd6rD]XjToggNL2:fH"nBDV'Fr1-oaHj;,Ze$28(9J@t.4Mk?SHIjWJ&?LdOS`QsD)!/6-[keHI0f.$M;%T<rp6P@jZ<L,6bk5F,X/diT$kB<U8.I[Zkc4=2+.'9SN`HPR3do>s$&nM675^GC29_+YIUOC;`dm]tT)h!JHqoTR0hTPec4S_/m0%WF!<I3`k&0lW*Rnk18-IG*?E]10+9OES^],SkN5cYVFsad%42[[$ctX"+kbQfBQUiWI2Za@CO3_&7Nnbpu'lWA-3p$2H0Rl(Z0bZ%T%/+\RCK""MTqO]fi<8PcO@Mh(MNc`9+YE/gHPBfNOaHl'4J?hfq!rkc9+6iBD-<<4uU37\VT!'G_BdX@H&4Z[b*!;8b:R&?,q=g%j!6no)=5kSa3K!:R2A$Y@,^MRBFhA$L;,t#Ic>HRZIYb@>$nsea_#m$$q[cY2XWMm>n#nc2icHQ]Zn2RI.c[B\!=Fp2mMINRjKN;%%t?bq6pQ(mUFR5L[BF%]&$j+,6j(/mNDSGh,m]#[F6+0^,AeNMJ=6DVPUOcqL6bU)PAC*W[=OUT-c#`=`qK*9=1KsBD$.e+Rl#So%n=BMg5;loR\$#R_jmP,PFRoCf:laXS3[d$miX\)Ck!(S3Vu^:RW1Yg3k1"HGl3I,tpC7%j%u*;g/0A^$aerK.BYFiWr*o?Jp?pB"%F?[+D](0r)O#$&!,U>kbG>a.s)AqO>@!Pm$p3KXL"I0etG:.N3Xh9/)#fQ+N(17$!O6ln8/S16?Cs&i6R(5Y1$?rjB<NX_FQMlL'%3tgVHh,=bRfNSaD+(@'8M)`K:N%ieq7s!R2cKiWMhe):M;e!?XG?5i09@n+n[\#^^BsLP++8fh'qU"ie<'q:JL_=h/rcHiT-W);9%CmhklYS+\HC_tuH4btXQ^QHT=8eA+!R&.*0^-#JR<fR\5iVSBVKXN_41`S.o^HU(9!%\&\G^So!.ccsGj]JkVVD)drV>S+(>*e>[%/.["a2YZdgn^6%]ZYs3br>;$'h6"pbHt:IPO3a`)B1GIqO8cocjjV+3-V$DHa6no24aa[0kYWCeNt+rM+-#g_QLH>=Gj@/jZS?Lc%HA,<u6nJ@:XF4Hjrpp'fnit7aHmSHPGeoVK^Q3?78=B#4q="'tVk1RR`b3#7P<XKlV`m<CkK^-uRAW-ij0Qj+9A\tPE-.#KbL<rb%akM0KT2nao2_Ongh&;"M8htnri8Mo+B9*k#'Yii&om:WBX/Bn7p<)(c[g>jFAYbJ/cl$$E.!e@EF[3E#XT"?eb^BA5B7+=gj,.sX%c-H+Fm/Al$mkOgP4$NPgD9AeqIN5!VG!%uQqr>Zmn`dr;!PDs;!f_9M*M"kEZmD1!BM6iis2N0-%3407^DfeDHB4RQ>KY7c^[Z),%n6lF=T-gNeOjsP>]<3821=b=UXj9C`M7j/.?`uCpS82TdZFbQ<Q92lX2YU)>H#iINq1h&@.iSnZb46&N1DNUZK>$qcA%qliC;'1n%MCOa:f).o.o4rOeY+2M@H#6uY&'J$.He!&<Xj/i&<@2ZX,f/2()8TF%Sj5S:/(Qqo[UgoUP4eeF+uZ[91lY";U;Y]31u#fTOOBk-%ATOWlLZAP!@SgsV9Q2\=M7E<BN]&Ebj[VHP$9.6KA]4$L=&Qc<AF>b@oQ`TKKfjkZki:/W94-/ukDRCVot8/)>Zq97[BXnkfZ^kX%I6#o]^"UEd>MMh#]5m6:SY_*G2t)3!qO0SCq=+'p+,h!NG4FC*nbHZ+mr51uG@.tZ%8gEgK8l;=K'eK(>8NQNn5=+7*4%T#5ODh4%AlosMreb;A:7tg=ldd6NGH!k&;dA%/07j!HRd/e>l9KMe,:k\+:j01NiKioPhL+4!L*I5-#9)"ampCI[5R<W7hh/%27".AB+4@X)%bB*RTDVk3[j4;fH]bUQc)`3TIW>@;2=oX=Y:X'Om2XXSUnbh2_27`AViGJO-jo+4RrMe66o.Q-218gf!S+Q*iqXO,@'>In49m6!A%Ni,)D]-<%fGqg1(L#44pdM08P?)$D9rEjgp)<b3Zop$9sj!a(La/A>go?[`s&<tAu2jX&^%Cu97Is=(>oBYR\r8@[pk[u<!p$peO%Y+Hk8QUN6T`;4k&mUhE'`7%o/fnpaGq9a'8BFXAP@l#V:4#Mjt&T:_DeatiThlB7]#s1SOj\2_^S?pDFn##?1h4JE63O<fJk\MD&%Ei3@<Pnt9pn(#)q4$6+r<hFjQq$KmRfr_^i=,p9kgZNeI10h(eoto3tq/Utf%,t9`._tpk2(i(]-"82e%,u,/X)irYVHD`RZk6eK%Lkno!Zm5hg+[Mk4oIPju<k?[p]9t9+gKHJa2a"0He<)ZF/srZQqYdsS/%AL/Yh=\Z[euj.R[m0^`SJhbmQGgFKHZLKmq:pf%=F`(%g:P&HN5>GKl4P5P?4@I[[?'&DKZVBMk:;Mtj,;1er_sdIlf.('c1UAInuq]<nef06H"LVnk.uH2e+fp!TZo?-Z7[r:I_dp,;jSi!%XM8VtHOFkB)*!Yj%L*X-J`G"]jVso(?!3M#_)^=b<sd-n+E*T&G,`"$+P;$j,gQF)9Z"j8,VWC?-fJob$JMX@J<SJD"d,"LPH]Q*%=`Y52]47&6+$_]*LpiJI1^NI)Nt6L'7e[HGUud:rg@?FrS]1?:=K-e7=0%uIh1Sfsp2'eVs+2S@Ih&\-qDEf'TdpU_mqdLYqX-s\%HZHN&*1]$aj^j5;[5V$l2,N.DdF#o&pf12s6oo0D=mDd-fW_u7F8'c)nUO;bp*SYr]UFN,ghR^'eQY9CRu)d(iVUu"B/RGLo_ZMU%ka01@^\RQ8)e7&n"s:kZ5F:/1ATdtLk37-bR2C$aCn?oK7Xk*-fg)kBFSE"^`cg5uG\=M6gLTupHHZ*p]6ca]1M\HrWsZ+Q<8b$i%:@0*.@XVH!q"hU>Ar#NRh="Y$[snKs1\TkT'o-e[<Fgo.0sK$WrH%@hI;&-&_8-k1r5%"Ab?<66I@L#g^7[i/jF\Q;=536M^Fn0A%]f#B,kfLZPqWH.7;2+Ir\SQY*mrJsADe"0<ES&Y?!r`qP958M)ht;u6W4-K=@jYn'Vchj1.t+#6e'][moi$7C01_;^rY7./jHS)n%/osYJpaa#&adAjIqojn^8!gQ=Pk3KgPI&ZqjKBLd2Y#,ESb"U&ohblKX.feEoW@o@L[#0-mn["M]*a-D^GK.\k,J^^UUdCGH2#M"%ndj&@'nqQ:bM)nA.ep:FjgCqQar`*?"tKWJk0.]4J_s6R55sO8^OMV8b$UPr$;TG_BXYSjdrIBK$)cSpg\GNF-8J2bEY\nbr'MNN%5,W)Mim+_Ho';T=GYXBqc$-=QJNqs'k>O'LGG@/QT?=>GL%[?RJ1bM2+as9nFQF:-m?M65T5ol:SU-g@..XdrKj.'NQQLXi5@1(0%4/NV$Zdn:$n_Wpo21OLbOLY^F*B[CONY!Yjj^;jV1B,*b@Lb:;:!$3"9Z1NQ52,hlOd3=8fQZFQT08["3PjT[c73"QqD\4mVZ^hN%^IoJbna@Po"e2QCb25Fqar`g-]=jSUs7Fo2);RAG#Col1A$']`o:L1coR*Qn\K"(>3WGJ627%f5ftJnbqV4IQ%gf.A/Ed'0NrF_'%mFBrio67P.fkXAb5<YPc1thokhX<"@]Jbb<Kb%lc*YlM<qP,Y>]p\cCXLnL0p3SUiSZ'F*./U]Gqp%"<s$tc2eI;-N?1rV$pRR^2%b^TTjs5n*@7<h!OAoHeOkA&ML2DHA>=%DG'Ic>p_[s7Q,gQ.?ms,PB>Ak`4tj?NR3'k>8G@l=H$&s,$^C6O$ibY4"5a;3U$H['_J%r9a"OgZadtZiA&5J@+oiA*_P5fUXaFG#+^C4#SPD8bV4Zq9p$eKmV7e]im2b;#]AJ^Y0e/B>u"lPi&+bOtlq(HS(([P,J;C?QRB$%rsJ#j`r+K<Z$.:QZ-R+AAM"Ui?6lKho<,"s)iCna-7pK3h'T*=gSjqleT9b<='FY?N@sU8eGcFaeV^WRWNi!Qdb.#MX7Q"tk#5Ut%=^e,b:j5KCU]WeTlc*MhQnQm6@=:<DMT^';I,4T\*W+$X;HKY\1\E<*HmnU;P$kEaOVDH@:m/C]1-`4CY9enLntL$MfQND!0_.nd%E-tB/Ob)T%(d!s@69U\E1gd_kQ!Oa8-5d+].YIY[j)B9AOHt3ZNZI`1Ui>m]4K\LBb9uAM1sHDO0h$l+q5+\dD;jb,"NRDQa+:%/%)q_`c%n]2X;9uRR3Y-i6?DbusAKc.^KGH8*[[nD<mBk1+J$KnD.qDP9N)Z"1<+]B]/tGa8U%s"@8-b2Ib6h;V:"D<`DTq4>SckCB%P028.23:_"G`llPNBCb;11$m7aCOjImcoXA6agm/(J?VJPUAYQ%nUD!Z,RP!U@AG97H5P!0oEW8Vm-K#i'cYS@G,1@q,HJX(-/G=%pH5(j6]uKh1@J.>$BM1:)*ML@X:1.0jdi[C6#$I5h:?/B4=PuFm#uel52MKCk(t>[,_kao,pbLGns"2qMThr_LR1!dZ>d6DF.)N'%P,D<;b_h\YC3`U"\L@$k;lNGeJo(`f_[eBEl=lh=-'rVGT0dT_BHN*gjErFsi3Ss>/j1#rc]cH:1.ujBPsLP_Kk%7XHmX(K^<U:W%q\G%taU4Lin\*.'.JQ&#$[jAH_%p$CmU^I[[t:a/fH\Ga<[`Yrg>:$<7cXVb2Tp5Z>YOBmOVI"E0#LI@;DQ.<$sMW'4sc.?6P0VO%K1oJu=mg*R:W.mu-aY)Dot@HBk;(_`=VAJ^74s.#d_r.b0oi>u@Jcmem#r\dd-h.ZS:Z*_i0(!c:H#to\`%n$q\Z+[o6A@+>nCTq%YF8]F8I@IS@!-%rLZF\Q/OAY-++oZe`,J@\=fS[e3LHP:/FdL.`N3J-ARH5E1<4FX-8S)fPUtoc'M]=EkBlb;Rfn0n#U>C]&q!l%%F@Cf#"!u!.ap`6`&,BO.Tic![8MQ()<KUmRPg&36PG6rMd]@A68d&,M7e'O:P9"ROlWJsZ/X3>AodmqdAFbOT6L&F1f<Vsnje/u4%S]W&n]tP6jQ89=#m$*Y\.bTJUj<]eV&ij-OLt7kiUXD]!6MF,Na@%&KXJ<ue:P2e8i>N(Ma?ETrJB"YV"gk+!R`+.k`L8>Z*Q+I9%DKEjMm6pk(WPB>GV[R,,^i"Hk'q=IY6Y)%L;f7^$;P#L_L-d(HSS+OX&->;2#g(lbUr\lR.>9GWhnrAJ)gn[$,]ot.-mt.c+r$SG%P9=+X65oY:b"3;\FP6l=hMd[E[j7?8YZ*sjYDLsK)Rgf1N!qN(;akF.m?kpX1hi22jbCQt_Cu;j?P[jr]U*W/0r+;6^6`"o1Mgol%RJ:*[-+^,I@@9&!1[-[F'ilRq.@Gl5J<^p\L$q=UKKP,.H/FLa@[6PB*3\+;7@W&J>8]H>EJ#U=;D/n@&nJ+X7TEfZ2,.$([!nP3%9Q"\jLd@02;PJODNO",B,5$=5a[;<9+t<=J=`&#e&-h(UA;;GeE974uKp@qoeBMH&UgRdbP0]7*`D/raPsR5T2@(R"/kdJ#82PT+%S/r1K6#=2u'U_-*S/%X;Pm2jE'1\?VdqK-qC;'$J8?KP/qR'"6$-G>^pRIB7VbmN=Ln+)G$36B(@A$sn&nS8Y9Otd-aEc;>S.Q,T%l6-)c4r5`)X6m3=O]d*)N*L)P6a=ZX!HWT9QVd\Lpba.hs3<H8U;u?$REe?4Z0kr\b/"FXEm_&s:#qsB5iC/5HPccX,B.2TG8m>@%R7<9G;M+$tarX^G$;Oce5Z`J6KF.md_+(ofUQ!YT^!;7elX@V6%16p569jZ(30KF/hK"o<+T":]6Ae?8'PWb_AP;"i1nKldjml)^%T!\!u^Q#X9o)tDXgi!`YM-B"DJ?MiX*R5W6W?t(1ACJnMcUG%UZZT-c3E72<5tVu&R)Bk7(h%R\;eQ1u*],T\nX`EEVRAQ$!ZjqK%eIBY6?h5sS+hk6%R_dA*:g7-0Q&[f!jUquL=U:3Q2<H>s:Iq5d""f5T4!lP'5n/50>j"Q8R?3RU*8k42$]Xi\/UTAurg*mTm22p)%kDN75.RDRB0@YWlJ/etY]VJ0/[+s'5)#(a9_0agcOF]1UU(-cY/u`Zn_E%R`fR0\oI;40-S;"!F(QS%j'UM4B&ac&<7@>V\`tHFY%3SKIT-@M0,k5#cNJTK>pC6XW'TQ)P?T3-Nf6MQWd,$lZ-ast,,;##t8$+Z&aM$;j0'E)eC4kXaG&L0msBgT3<fk5!/3g`MrK&O+&%aeP[@+pprr_&1#_Ej$1^GI3tt`=?C4aTM"L6+Bk]$RLAX(ZFQ1Zk-aU;osrVQMhan'4i>>&V2JW":[f+8/;GR6c%)/7k"V1G!Tr$%,`"tn,r=mI2.o44aPE(JnHlT+>)s_aliRUt)`kg23\@=I02dDe4.1,/lJd.fj+@5.oJ9KlT]q<Spr&_>d:T&NY6dp?jYNQ?hPn`l%ip;jq$_7p^d4Q550L^eT)QNk'99CS9nVf%K$;0BIHGA"pKMt=O==?#V+n:Kr6.Ad>;4BYTPOP"L'N.CIdr9--<ah?9N!E`AZ5oYL%"9euNQJBXFLUddr$@[S1J9HPM>2Ut\?8@3IA3q8"70cR'%c3Wc`8f7+Ms1M%P7<rU-38%=;K7Q+%_6VV.@`RJ)bUA^*1/*#-Nh^h%!l_3!,n(peQQHlNcLMij%s3rZ&=sKAA`CMDp<Agn$L@JYkK%1?`Jo!+AE%>'6]e/+pBWWq+_C8$,QR!F[?NuY=MZq$nOP[9Cp8R-%W_X?^%8G^kcfE6GO]%Gn5b[g%AQ%/'i'^CPW1Jl7k(^Q[%t\!B8HCd-_j<)H'D)#qSe<pf:(>huj+pUG<SAN^#NRRW$C1?@HqTPk%^0s^.S>KKqIT1Z]9OipV?uPP@ZBjEZ-Y'Jt1-$'aTGVUr<rYU35f%0#>uEq.kElPC=>;B_qB:sGY2$4H+qZ>j7M/<J!549XR7nH@%a+#((Oa4o<P*G"HBQRNYn:M4kWGP;I`mFe+#g*^9Q#I?[<$:bVO<QG&D-H1ZI*\0ZTgY*kpQ>iZGmooIa;l\YlZAhXLhjh%b=Thr%LE']6(L1%*EHjYcJ5gm\9*;XH=s7\K$7JDR44-M/LV^u%BO+Q<Zql4qcoEOS`/;S<OOi.<?4*/YJU_1Z`q9>@]La<C-jHYDe.]+:%$2!E`*?QGLgOq(JYX(DqR"e9(--I1Ope;BA77'F3!5=[-4.GFX#D3fNVe'1'TSHkR.o2FR,?Bfd'IX;"j`U!5E,HTA+<TQFfHm4f%93cXldDjY`K6!ajfo%.A'\)JFJ2/K@`F6V/dE[I7:1RQU8\l!X\r2#Kde(]l4;f;Q<RVr&QO]62L`1hp:'jrK$6J,8BnFCip;!Lr%!*\IKFqdb>LN.GmKde%I_'CO>9%cV3,<VK\EX5^YR)*:'>d5lnEZ;98jdM.,DJ8gfRaE9BWR-Mjfb,!7kWG-===SqWd4,q+QV&A8%6eCMT*=J'./4peoM>P0*(^i#0;?\#0;-P2SECUCT$-V6Ui/4B#-<q<o=Ahs#h8X]C.)@lW4ht`r?4!rkVB=_o&SH4L8dbFJTZKG,%oFn!>M&L%qjZ"#U\_oR<@m@qT;'hQ,2hht-K)Wu%&-i2YWkZL7f@LF"&4kf6agM_-4fI(ueK*D@fh*fKekmcgA4'[FW_#=',bQQ[%K>aVflNfr'Ii@Fs#H'U&#.*M&bb!gpYgBV"3Q'Y:=f/.M+]k_[AFmJ;@'2";[e)`CmtFQen.LjO@0f>!M]7c8=G;0$A`6C=3YZI)%aD.HWXf:O.P?++\b]##j[YCrM/HAD/2Dd002_;Y"/c]VT0#ZsM2[)lJ.=qRMQ3^P4hMNpK2[X6H5Y_M\>6;=199k\:]N(/JQ;hRG%0+I<5QLVcn]=h3^2'6iJ!E&%B+q$e"bJFBA]^VlL&.sdiTHR-.$H);S;lMAaB\nVlZpC.;i#C4]P!i_H":O]*)Iot%kDG*)abofV%Y5l<hJ>WO[rsB,6/!c_,">dnD&7-R6>A.Dd:gB=PHb$s_^umlcA;HcVFF^:N/9R;8;h,:l@.V/GMo[G'5-]#C\>%R\]53,@K.3Qe%.:T6K)0HT3TUjHn2=W^"3&_OQE<Ik$e,+a#-9@V52SgGO/e>3I;%&C@TSO1.(]-<@%D,lc+=g9I<='jf@4URRMWk'b%Z#[n+0Nal%`hX<<3]687Ms$V'ZrG$RV#\+>rK\c;9BcN",Z7<4Y0sXp+iu+nrK+sr"(<&1H(h`ATc5^jLp)X4a@Zk9KJ+AZd?u6uf.&J)D*F5_%oXpAK5t;KVO16r1%^]/FML!?rR+O;kap''W7=I*J8"sDmHS$Yb!C)nW&=Q^&L,@Sc"oBl\8Gsk>ha!$1TNFtKZgtdtiu]19`P@0?%BTU"[E1)PEa&.2Mh?3O[j[>.--(XkTSS@[4%V&/Bg-_\ek:-3_m:6^Bj&!4fMoo@r(S_q+bnMiHi9<'IL,/J,ej:#"Om+2%0mHt@%5Y_>GX^$i;CXjQFk9sVdK0kR%;n=?-2!+R?;5e@I4g-@gZYFPMk=ilqOh"O9<&dXK!iH@j!PM&4OA3P8p!H<`NOmB4;RHo'kdQ*E%":5e=_e?*,Lm67kU,tn6Yq8lH/eW0R.'7O/"#TEb['`p8\K+ZT\MPm(*Fh6$VoZ_3g'G^70FLXnU0n;tdS`tP3%<=q`f,_LF[_8Z%Z_Kj$0O0q-V@]'CjX(V8&hp%Gf\k-56;]2$e#$!18EWoS,0AhkKm#8HlsNEME2YRq400Gh1Z5`)/,3:O>,abilr`EbCo__.I*?$?%!45iNHrth&?5JbZZLMV9_/Mte[1$_r)?-5F>@4C]LD\300g$<^Z"1qNPYeab.SA=a'a+70Y_Lf?K1J_A:PHi^6-t#k&qK&!;,WX0%OMgc)8e..],8:6_KLnd&b25Q)S$831V+RJ%%(V`1:$E5d0*ad'!<eTg*KCQ0+NZ[brb#fV#*B6\+da&Y<:S*m#3+<N8d>D:&;cqJ%'O`G!)+lt-Nl^A0KrU:E[K6`Aa[#o2<XI?G/A;6(YX,!2J1.i;SBKRmUC.M4]9gmq'U&7.N["h7^Nh.9,!o0KncOLS3M[?_T01N#%aW]-%K?Q1C%g!ru+Cpd?+\3;EZIU2:99@mS6NNATIZ[h\=KaOK9<]jB*t4&<:lba;0=>ld+jgV\Zq[;1,2;BN8XYLr1PPd"J.NBK%c'+El,mLZXUhK\4J?oj/<*mJE"k4PDBh+4gHrUOE;XJ/-<RWZjW>8X2BcLArW"`hSd<Bg$;PY;\#?NminJ(%.',3]_Ua3oibt"Rr%+R)N/*6R/!:Xmu^$$;r8d#>i+HjQl&7TRT\/f)M^.9+<D5(dd5VbCU[&fJKicjH&T'Pb]Z"%C,NP`CbB&0]gS[Vp3[U57bGYt"jn%Ft/`D%u#I@@UTk51sCiP3=(Lo.R$<8/+5?-\G;_UkVkaXd9p4[PYO5T,jADKF/Gl%&T>u9A&k%s'T@A)=ER)H+kDR]<&(:BV'pDD%N/B>n[Y<1dH4(rM<P@H]_)C#W)4=Gpl7E/VAXPTkino:g%@GVH9,#Qo!\K$Eg/,i565,90ja;1CMQ"_WF?t&sT-5nJbUk7Bm2BYq%SYSgEJR]0_,th6W0G@o^DJEcmVAuBrRSREi.Q&+gf\g8.'nlPhJ?LX]oI8G1WJdBJ;^;q![d&^]<-^MVU6csi-dh_PP5=eT.]0#X%:SjakTa:ZQia,O@f\,JfOp:h+r2gAY`__7lV,4&7#_hd@+amogEAUCp<+sD#JdFtb64s]q9Jc@H`4)BUm#,ltB7SV:UJ*#XUKn):%"Yd+5p6Yq)J:Mg:KG#"XN4XqFfBAH@JBADTEl&rJ5ib<&J"K+g$MtZh#&nUJ4ttn,L)!W2#&eoe\d:X<"%4JL1=Z`TV`%E*<ktE`%j\q$qUCZ@^A!pVUROKV3U7d!D\/o^gGRtJ[bh7k)F!cWNiG-G7A'fep2^ir`l%e"U,-R*!n4Z+[QcSCm&r?hsegL]lc-#g<_COgP%<XI.d%u#du@VNL8+n_KnKDE/G>0^M^8t\W52$G/q1kq$$3&]=>.qjm3,0Zbu',)k3%5p8<TO]3SbRlZ3/Ylgs5Z)M*-0sfU,8ucD%R4@&[*-:hs`MA6Q.qKTpZ32`-7Tq.6>NDn##r9%\H_f!a<"']hSka&*L-q-EIW70jHd@8pK0hd;p8%fF+_-O[Rj]\-aE^UhND%:D%)8/C;Fp+<h*_<b,QWcGHj%06-Vbnlu3gc.XMbrYFIAYM!.04:DI$%\.Wm#r^8j[b+S(:L%4&a)Q`Xjt:7V4Wc&\TD,Zh+SB1P'?l%,!cEd?5Z-M1>P,4+YYXe#S`cW:B<&jF-S7LC;^pBm<(+A]&>N8N9.u/nMTj$9P(Mge_H34_.\QkorSQmgeU+t11!e*.qL!<@Q]0Q%UUR:\KL,uO#K#+&#bH!q9L)c0j=)p\Y6F,"@2Apo%'@kf9&YAYb9E]3"f-_jI*NL)ng'#nRO"c?W-]!/*AgJhJpYaA;8D%6RRQ@(%Y+8-n_I5I?6aiR?)7QDEG`kaCCJn'\[$CA:CdNl5RnoFhaX\a^(+&/NLJ*$s$WroI+^hMsil2VFMC\m,#6\D4/L3[?`O?KC<LM7`%[*2=f9E`%>eNhN8CWOjf'[&8`X&+_23&i=T;ZO7YU`m\l/J]OER1>7.4:oH9aD&@RT]'[c"&a[!$E0(Sp/48g@eY\"(,uC7'ns'V%/A?jl[U>Tu'Ac*lWALTI\&=9W/<tsPASb%JBYNVj$"p7K\Kk@`<Jh"G/$Ct#jGC'(,ngc&NMn6$Y6p,CNs*@*U1)_[T8JlJ0eAfl%Q)E%iX,Y,-8f<Ub@Q&j&eRk)3Duhf!-K(5F"gVH&@_d;'C,eU]<EiY/."J%QG(7uF-o5%?/MlW/-?A(Gn'Pflapeg^<)J,YN:%;`%%HM$A%M`^_4/SdBLTQ(]b7il9a>*pX)taaCYUJ'*4s]_'!<4Ce5S3%Rab$`H)=hI(@(*q2gX))d-?oV@:SVPOY(Stb;kt=,I-mRR%+`,%B^8H3<k!,P77Jt]97B8/Z1l_K,)KT<Y4luf(B[k!p7YMKcX*9mnePI6SJ2apQC'JhSi5Hm"$5t`$bl@tY"3$Q@,"=0H%39XH%[^f2!6E+]6):PmL,.4unH)^2]?j=):Q_:9%NHPa[L[8)S.aPn40"o2V@%HNI[%pNi*nJhLE2qPI,s%9!7)mDX&S(,_TSu=IWC"Sp%[6Pr:Qu,M5e.i,WKtMqlV:1J,*_W"6q#jCh$d;GiM0L@AXqhgA=l-$PX%Ma."&:7lUc9G>F'ilMJ[Uc39kfPrm7$OD-.j98Z\W=m%66VQ7E6gp2!i^X2q2k`P,D>0:8W'aSAk`o[6J$;"6tB=ZX$^Jo!abJpkdMI)!Q@')FW*)1d3N@7LEa81Y?=;Pe>0oS_$U[d3X7LJ%8u^+/JVDo#+/,P7JMK)"XTJ=!%l$.+)"e`mOCe,a"7LuHM;fAPGFp[?D:=k4!PeaU_ks[q"jeG,NaRr(b(=mH78/gq,-u!@X-bu;%SIucr!@<dl-tg05@Zkc*&.12L0\p2Y"h!1FC3f5;;ju=fI/n\l/PU\LPRK!76$tC@Y(jc3]ODL7>,):Kf4uil.lAHo`6)X-$4Xg%%p45dl7Hp./0tkbj"s<e:lO.THA92M_a:ElcK-!rdp'T1GA_sn/j<BgK2$W;>+bmulU$OPJdP;"?1rjfm$(d`M0FUZMAaiku_XI\[%7GDY8P#"Fo09)$\I\f!4bD_4N`,do6%43R'o3Kd$;1Y=O!gA-0OJ3L%O7W\k'87565/_Gb$/LDXbG.R,0T*h?<MlLP\a5u&)FK>V%a4ku6PIBDt,HQL*1j"A_:23+-H@edQbc"b[&\Q\D27,.fR[i>HXD+$3m%NO?%Bd1k]_RApJ1G=+dagul]4MN3fTq7[_?;o8A+8@X%<NtOW\5s*9+fU@'P][T4?s@mg2e"T^dMS:i7c]S==2>j.A)<]PiH3.OFV@B*.psQ/'c$8<4FqH;HC]tkN2E4,)l4P&\fB;C\Yp)o%I4TMlp[-srRCs.FaH>b?nS.u[o8Le#]]d`qAYZ,,"";3mF_TWOBF'RsQbcKmQ:&-LQ]."TZ:d2_8:Y!R.ql(b<e_?R<Xj<)S9.pV%NG&_5:0H4P_ON!L.2S:,oZo57!D8XN]>Il7Q'=%r.YNFTCBYZ.1(9)B$Xq>f+:#Y)%FGb=@\1*lUBDP/;.J[\*,nD$>Jous-ui5M%Kh+9CKn]/.BE?6a(7BlAi2o$G%/sEQO/rnEC5/#fdi/Qi$naRGM]M/]k[6#H;;;N9ck;.80a63UVaZJb=V+?4*msYRmTgU@;PGHL%+a7p94CtUof?D?AJW_f198+nUh(k!25u>Ih<=sSPEF"NI61J*h_d9_pe%`"/!#<%tpPPnM)Eo&jn04SjV!Q6&@e.%AilQ&eX=L>H%9&GaF;jE&dq393H>tf-(M_Y9$W.8Rb]Ed\2FfOBM8[f[U7M>f,Qs\FT-HbX_omoHMWr[A'4WEEQ=D[=u:lP&n-mu?5O\P05&:#MP%pYZh+W=c%"VSOJ,elCW.CWk@F`Pk80EFrFHK#Gg]'.Ar##)]9.;Je*aCdh07#rAYM^oO,ac)*O%C_0B7bf4VSh(HF>@3HJ<OKk)g%;m%GLdm.HS/?3)ueWr`+"i99I/uHn%?,MR4DFl\%KZ;Il%PY0SPZJ8%Jgn+<%N0Y^CXn3]6Wk=+`2%C6A3lUmM\<#)aYRMV\4%tc%f,Z\YCKRNI8gT75*`rNq=@H!T:k>El@5NUq9#T.$L*-[OX:;B8i76>p.,tSIJ@Ior&CL6f@NLoJE5O]MKT3T!?]WYWLr[Y[fXQH7%DC_`(Qcn_53JUgAG\%)60H67kA3M_8.PssA936MbJs3Wnj!O%_-Q0K!H^852:j,[^J'%^oM+7A+JD7D4iDXK"Cb8LOVF`etm2#Al%4p6_\Pl&U:)DjJ^*_$;9VUcVAOI6RjqDYD[lrV%Qb.K`6"DA\_#2:AT!CNN/0*>LGPuLV<'?rW"AAm,md3ZVFA1k`'">`Uu]W\7>%[%/"i6BQqA0g4fa_b_/[3S)m,<X7D8rg>5UbX1q8V(ouNpb"IubRBB3=TSkQ3B5;">h+E,EuVY!Pj!#J_QDHu,V]i@-j)4Nc!k*:%;^Oo\OhuJL:cqZB6.6e]7#A5EP_h(Eb;:c8HkmHP;`0i?b<Q]%57:QLWs=`EIml\=UUj*K'&kM<::XuQa@sZKVFJlhJ9bjk*,2,/%W3"sX#>`#FE^fV?(4d9F[S1e"dqPf;!\G#'l#YpBiACbAj*Te("[9n^$Sb!SKIHO$Us;dc6M1sZ.YBf`+UcQ<@I^5a2,O!/U4NdV%JmqC^E)Cae=fbZ4dT$NcC==rs.BkF3B?KC+N'$/1-?8abdci3$]SEaR"bRu>n2]TB+Fl/_QImWU=Lbt?ZX8!8TWSpK"=V@_9NOL6%.=p/C!Y=c_%LO\]*`s\/0P/lA/_`?4")DEW_ATL9SmotplE]nC$#9+q-$mJ+'QGDVXK8GAI#1shU54BN%OeBToQTh)O^]lPB)X\4%;J_hZFb.(Eb&p-(+iLsb(^ZGbQ04PT%"]f?0L!E1Xu72ib*!U06%%82GlUQsYL6N<ZI*6iDj8*i/Mm3MN5(s'WE%u',V9$V:<T)%%#kAZZ'p+QpVF\QraJJs'B[:rL`GsF[VN`M^=E*GLp"gWZ"5NAQUrM1fM@LF=%H'om03dgLP@ZH[QmR\/SWK/,(i*TCN6.Hk&H0Ne%mXbkR%$V&S'0='Y)IQ+L)F^<\@Bi[+i:0ki8u%Z=7cjeA4^eQ?$9"JFSu$8oL96eR&W#Wgfkd<8aeKG@gZDGQ#9,LPP(1_\M=p>L%ltMVn0f]YM3%,+;PRR@hkGFs@6u;HD7@oqpXs#nG.V>mV'mM81Se(p#6ejF89pq\?1!#GKIDga\SjCb%l+foH/5cfYmQs6fUdC9k%+O?2bNKhPr6`REsR^c1-ar&u&Y"(?iC7).DJKt4P7e<_3FC`6K?:2X[;':k4)^r]p[uLbd#'4Rd$?tJm)*;7H#/O45>_qP^1oAD<%^)j;Z1O0M9H>dWm.3HBB`fiiTJmq'F30ne"5'2ab-SQMKnZkQB?Bu/l)4`':C]X_O.&pEqL4Gs":aj';6DX+\%Hp5NQOtKt%SMu$%65*9a/ib2OE!B--Kbq!';@E\QF/nqV0(TH'@)>;D4U@Pf@q`GBit'85#&YB$lJOoSb]G]rL/"\ui.1D.X?(AUV0WWj#$SBk;p>F,%;ajq*fp]\]5Z8@:'*j@E5*>2GY6c[0a$Ep@]jll/J=pF@WO*'9[Yo^#An/cNak36h(13iP6?Wkg\HW8>`b^t9?BH,%H%6jtQ'T1;%,,E?e5tNKX.l="k:iOYNn6m3rOeQL.KL-1n_=T&Dck#[m=9EOZ'A[QA`8[Ma@Q/0\0UmG"1e&u\6TG.u-CR6)(%JoERqX8d0<q6F%j7N8J62$NLMH=Gpk7!ZoVlD!Ua7O]<@t&lZAdH:bOco;,W8C5<-:QgM1oHCeU8D(]m_uVeNL<O$>QJmY'2:2/$qju'Jr9q+%Q4UT%P*2=Q%4RJ]aZiqXRll^fCWFdI1hi]NPK)ZKA1f1PdPjR:'$Y'Jg&)%n&.;=-\_ttik$qs\/Bb[sj)Zrg1XVD3ik(W@5[1aBpjf\r%)KD36\K0pe1!^"g*E^X@>ZIRcXH\cJ'?_"NF&U^LZQXq_"/&Su75AaGb!)SCZV"X?oT3AQ/04=gJLcAWW=O<Z!^e2%dq(@V6`a>F%6f&$.YlHri$e>ju86":6+9l=34VpQ['3W=e>$b<cZ-[Z#VD]'QQ_bg`)8UZ\!qHf7BUr0&F"$@jpOZ0Ts59Rg13Y-G->:FF,^IDM%i*m"qie\pTeCmRu6OKJ@WK@c8fNRJ>P?8+;Tk`3[D,Fs]W?D\h?l9TU4ME2'+!hDB#KKlL^_E<YJdaeo,&Yg3kI%;*97c-HUN:[#%"r75u9d,(#&g$h%SZ>%)d"$^Uj(?kU90':+YXP'KiGefqIBP'HJQ.[oTe]/p0-ensm=mV(ONk:Rb*6tILEpK!jsI)5<i/]o+]8G8%<^KP9b5o20b)H<&J@^InC8bVRd[7u3N"-AEc":Me+&[[,a&bV(:oemr9f&S`BPA9kqGa0#YQ>7N#*fSJS/>([;B;S;[iWE1oHUV,%@.G1iPW8ssW!f12<o&?OZPoPaOgB_W-X%>r_hFNU5]W74@?;[iHpsdFM676q*lq,*-#=,[c^$8(VBI;=8Xpo_4M!Z/<sbX::eHcA%<D7[-#P*Bi*7H[\aN();][o[rME[9`R:`lR@f_=j,6ZB3fg0,q"W]r!/h"0Hq&$Ml4UT[g-LEQW&,']!6I]hmmcq1BQ_M6Haj;7d%?ju-JZnlf3K@2M&>rTtG:SSj5nCM?V\Om&0)XnZ/G_ltV$PTkm;c&kR"[,/pdR:/nMm#RuLc>m=$$\$PTa&N\3dV2&"nS[<D;OPt%9II3Z71gt"82Hg[:!:d#Ps&g<0ddLiGb1/5+?DeB&%a^$'Q=Z7!enWI_rceZQcP:h(bI.<NQ-Tn7FR6.#BH(ugnBMW98;WCe"R\*%!Xp8>#'kBbI<6'?6B3>?l$;=l*)+BdS'['E:ui_MOHSi6Bk?i(a^_4,U]`Q]TEig`o*>RYa5Jp"604K%31B2fK*?<ZoEFUoK$=9-%a`N'!`!A3FJcdeKGB?Rj'gR9od/XE:lNunO[6>?D`Sbs9T-s/./LEaGr!"[DEfF1QcTq%u;;p%n]8(.ZBM3>S[5H3gKOkL?opDWd%jR`mK9U@g.d^ueI?H3Gu"'8jQj.l@.GmW[V$FC2lL7gdCman_8g_2(Pi^jg(H9)o'`].iB?LTZO`sadihsm53A!Y(i)Ze++-j>;2%:9u'FL3hXOGO.+b:+8^I,U8nbA5<)5Dfn,%D3t>,@j&n+NWVNL:V)c+WEYCp[)^]b=V_ON_G5[]Ph!]<Tb3p[0j?E8XOL$UnqKnu%943knj@Jq0K]=]0nKTA2]u13MSM5as1G%Qp2TM9"8\:E74j.t,WLefoO,-Wp7sOMBB0$*iT\4R7$0"Y"DZL=#7Rm+l/(M$jN<Y`#%L>soBA#Ie]#!5-e>-j`\'d+oFm3$M6Ah>3b'A8Yp1JT-qj#(82aAS^n4`OiAa0K@3*=0sha/<C[K\$W7Zlc$om<KO]0a<LVb<fFI%n8(=kQY$G;f'uS1RHlsV-RC(-'QLWde?)StQGGX7rGEK1cJu5jRut,oF</Th';;s]L)dQ#,mYPjd3!F#5gU/r@(a@(qTFY',%RR2%+Xj@^=^::^9q/!Llo4C$iI]XeQj_o]Zl+OU#Nu-n"-`cH6Q0>_5oDjd.[sfHR.Huk]TOL\aR?C&'bc]r5BMq]^LgIObIh>f#A)IX%/Pd*G?kn=`(Ci3W704NT,>4#*aWE7l_\s%r9XQ97GhS5;."Mqf.qN,-(ljnm4t)P1"s_N@<pMKn<?qPSOO`iIckCADgh,]<!J.'c%AlE3<:-4JGSi#gd#)';eId8gR6b\dTRh-ieS]=_V0t.Kuco`NO1hDl$QUj^m:_jC%@mX$9m+.hN2!PcH)^*hP7aMDe9c7E'eY`B+%R3]^U08<I^=9)@Y4_%r%9TVU'qI'hp2ff%&:aX>lJWpD2paZIuDbrrmJP(2:/X-!leKJ-1Y,a#eUQ_;GGaK-^J>^@O%MWIp"Zuo'%,o"'R9]0e>="XgMP#9i0q+RNP]TK!#$erW_.I,$m>%lE._,;&D#)4:^ojc9M7KQ3fac1W?-K#i,CQXJf4rH_:@[WQQs(/YDQeKE\%;W+?c9Nm8?+Y-9qCFh2\]"r&+_booC<6V?C8?[S>5cYkO,;``_$Y/^H(XHbG6blmS*Flr+-1[.LM%O/;*X0lj4S028"nGgUE?5Ak%HTJ]VO)W`-'ifiqYFQ`N`H\V"XuhDmI7@%,*bGh=O\qn41!CDK4+RQLdMsUe`fh8XAP*!bPo2LdNpU:9[2]N.?7<4G]A>@NIqos8%9.S>]/u+6M"*ccQ:8Y0;73+umJGo%8Ei9L:\YU;\kJh<b#BM,*7#n#1Qe=uW2j9^d*2o2!-AaU]78Y'-89qVOEMJ8Wk!iGSXPG'"%b33bE-M)q9o&0mGM%)n-`H)LFlSA\L(Sc+DYNBAjS2Z?O*d`IZ&Xe/H\5WbA@TuQ'=Mg$\&aK"?j\&_hFW%cI9SJMp[75R=&ePAG%-\FWZ8E3"Y9FUWP6/b?BP\'>\Gkd5j+jJW>C!4(C;LGif.@I[<.HUu1`$YWuSAa&<ThI__8r;IQ6*!A%;%L&;PZ\!,:!fh9&Pg4L%'J2BJ`@K`!l:sbei5hQF]84KO&:kX8_Z:p+R1<[4#8ES\bG^eY46,r>eW!NQ.#Ljnh!'3lE4B&.Kn9W8Oc<21!Mg,+?:2=5?6"Qt%Lko`/=DP!\^6gnqpkjkP,nq4-Rc:jl?8Gn*haBI1:YuRkBo"KCQ@r3n??6gbYggUj&n$m=Fq$qe-(2K%e&?985oN0Ud/tBNU"T\T%!>hG[UiU*VX%3J[[3RKs$+:%u3[31]`e2*+OEbk!2Qh%b7oK#2M\p</m26<&$.BV`'%^=CNEDSMY13'L#t#uLf't.OckpU)L%tpZ%&*jWr8]k]jCo/Mma0VB$+[G+?gT6<!/)#cSQk2PtXc4JuXV2C8+TR8(;P"<73_dDVkU0/%0'seKVq))]3Dpu44:ik6'i5e_9a6>.%bY!UJ)TV$aCp?;7Km%7)l*4f69T7]hZEMFO0@%PrE=ZVXnO]k(UB6!hNN`ZqYR@B"RFuPXD[JP)M;o0[3!4d[(Sg-0YluU)A$);[%H]p]2eN!,oQ8jA#l_JK_Ok2b@_blY-\6E27(F-O=M.c7m3[L4"8VM$IZp9f2(nT.g7RZpBF?k[X5Wl@K0:rU:Y@K?nK/:TS=NSf5%gAgqIVR8uT'#qd62lK;@nu/Gt75H9^)N=c2JCQ?m+i9K5`^#BSM\72O=_TE9i6Gtu+)!R`:pS6UF3&Gt=AfS_QmI(%`sHIK(CV4(%,h#dr\XZ,Y_)$34O]nE9#SN10">05hEm!F9e7fM97RB4,6dO'a1"euk+;PSU:^`dm'7f)-%$k=9MSDiG7FU$&'td6)0el$`94p"C%Ae5YG7mSTB6&Y1hBG=I>0PmFs)4EsfBBYWDF6Mg9L\7SSGXeCNlbJ0?"sK1"98*@HR1PQt[+pTMAMAMQB!Gs(LBShMLP;I++-^J;%:5-],!\$%Yc8$QVKu0U@b4h&+NO_E,)qc_]PhA`-.k*1ZW,_//bX;q1*Rkc8.n`L.2+n*=@-0*+MJ%7$;J!@_4+9BSWNLKa#ta/C%e1lFW%;A+"`]HM-:2[mXR^,>bY0\JNkN;p8762SZl:-i[d*[%+o3p,81cu-i=32>@bV2J2P\!EB7@E=6(IpAHcCmpqR';f'Am+nb%4X1mL(GOc)7Dt<gmNI7A1nMn/j/[E&Vni\*AHk/uPqc*nH4WKE<m`Olnduq,`Ad.8=$VX_H_`A7>fXaGYWY>l@tnWM\g$.4N\03,%5]7mqk#p>SJ0M9RKE70EAZ51+X9h]$j^b2jW_]lPgEo<c($?_G"A6g"#gqfP:]QKp"uSX;%4IW=CitWi(SX%W%^Q`\aJ/KX6CLBs%)T`IG2iL'kXNnY@"m9(;Y;-&\AJZQ*J.dd_E&(`3pn#n*5HAd:>pEoV(r?\9iHmIH7=ED58Mmd15mJL;S!GGA5jMo5JWa`h%)=fc%O*(pc>0nV*0p\65^_WBgjNNre),;j_R*Y#"U`gY=TI:Sll:t.+aK=$HO;ChuC4d1+1rmaSc,5$Y8kWE:X:n)#?L:NX.j5isM+JC9%n*Vj$d_mK6LlY>W4gi/+-Y.Jq@F-EPd!@4hFDI_X)S:(Gs0Z*S<PA#ShU&)8L#I3XQ[2#cL^kS%DE`IAqY@I_0j8/C92i@/X2Zsb%>Ud'Yl8Kbol_5_bH-f8(%Qr-:VWPMXZogNB9;kE3QoGEccHmp_h1a@+Z%\Ds5:ka>k2:U5fO)3dc$+N_;V+7Q*_:QS?aIZ+BU*d'%k&-r;:gQ=$6B'HA]uC;NZ6h0tH5&euDk\%G+j)&l-kQ.6&UBK?GU&3b[/!ZB%ob!&+2_4%'8;T7@).)FY;)$#!ZPdJ!RY@k+a,_X%:BJj`iY;i`,$tFK`?7e5.EJiK7u4$G7FJ"$g*28(S$Y$Kg!,f_k+I$sq7VrCd2>r<c)3<SpXC)$XY4sFr<;KqEm)klA`@OQN!G;C%UKI"K&JAnTAkA-225\%V<+B'5%1KnHA+:%?AXe%+43`fa?S)s_*)VQb>2F:#P'CaNn9WkuQSG8@$`W[U7V>pE[GP86qSo79&@h;k%1N2fQSZPU[D!ld5H@<7%mJ,nHp>u&JhkRIT+$WNHpWnnLb$W0&S/qPl5<V(Hqu-3[s$2]Jb/YkV<h?MGrdUfnX@3~>%AI9_PrivateDataEnd