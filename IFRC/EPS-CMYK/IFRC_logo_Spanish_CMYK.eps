%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: IFRC_logo_SP_CMYK.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Jean-Charles Chamois
%%CreationDate: 8/4/09
%%BoundingBox: 0 0 736 73
%%HiResBoundingBox: 0 0 735.6709 72.5337
%%CropBox: 0 0 735.6709 72.5337
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.2 x434 R agm 4.4379 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 16 8%%BeginData: 4592 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FFC9CAC9CAC9CAC9CAC9CAC9CAC9CAC9CAC9CAC3CFFFFFA8A87DFD%15FFA8FD1BFFA8FD0FFFA8FD06FFA87DFD07FFA8FD14FFA1C3C3C9A1CAC9%C9A1C9C3C9A1C9C9CAA1CAC9C9A0FFFF7D527DA8FFA8FFA87D53FFA8FFA8%FFA8A8A8FFA8FF7DFFA852FFFFA8FFFFFF52FFA8FFA852FFA8A8FFA8FFA8%A8FFFFA8FFFFA8FFFD04A8FFA8A8FFFFA8FF52A8FFFFA852A8FFA8FFFFA8%527D52FFA8FFFFA8FF84A8FFA8FFA8A852FFA8FFFFFF52A8A8A8FFFFA8FF%C9C9FFFFFFC3C2C2FD06FFCABCBC9ACFFFC9CAFF53527DA852527E7D277D%7D527D7D52A8527DA852527D7D7D52A852527DFFA87D7D52527D277E2E7D%A8527D5252A87D527DA8277D7DA8527D7D5252A87D527D7DA8FF7D7D27A8%5259A8FF7D527DA87D537DA8287D7DA85252A87D52527D5252A852527D53%52A8527DA8A1CAFFFFFFBC8CB5FD05FFC38CB099C3A1FFA0FFFF7D527D52%2852527DA852275259527D7D5252527DA852527DA852597D52FFFF527D7D%7D527D5252527D52A852A8527D275252A87D7D52A87D52527D527D277D52%A8FF52A8532E2728A8FFA87D525252A87D27A8A87D5227525252A82E7D52%5252A853522752525228A8CAC9FFFFFF9AB093FD04FFCA8DB0C3FD04FFC9%CFFF53A8FFA852FD057D527D7D7DA8522752527D7D7D527D7D7D59FF52FF%A87D7DA87D7E527D527D7D7DA87DA87D2752527D7D7EFD047D527EA87D28%52527DA8FF52A8527D527DA8FF7D7E7D5252A8525253A8597D52FD047DFD%04527D7D7D5259527E7D527DC3CACAC2A0B58CB5A0C2A1FF998D99FD05FF%A1FFFFA8A8FFA87D53FF525984A852A884A87D597DA8527D7DA8527DFD04%A8FFFF7DFD05A87E7D7DA87DAF7DFFA87D52A87D527DA8A85253A87EA87D%7D527D7DFFFFA8527DA87D52FFFFAF5259A8A852A8A85253A8A87D52FF7D%527D7D527DA87D7DA8527DA87D52A8CACAC38CB08DB08CB08DBCFFBC8DC3%FD05FFC9CFFD6AFFA1CFA08D8CB08C8D8CB099FF93B0A0FFCFFFFFFFA0FD%6BFFCACACA9AC293B08DC2BCC9FFC28DBCFD05FFC9CFFFFFFF7DFD05FF7D%FD06FF7D527DFD0AFFA87D7D7DFD04FF7DFD0CFFA8FD05FFA8FD05FFA87D%FF7DA8FD05FFA8A8AFFD05FF7EFD0EFF7D7D7DFD04FFA8FFFFFFA1CAFFFF%FFBC8CB5FD04FFA7B08CC3FD04FFA0FFFFA85252A87D7DFFFF7D7DA87DFF%FFA852A852A87DA8A8FFA87D52A8FFA827FF52847D7DA87DA87D7DFFFFA8%FFA8A8FF7D5252FF52A8FFFF52A87DA8FFFF5227FF2752FF53A8A87D277D%7DA87DA8FFFF27FFFFA8A8A87D7D7DFF7DA8FFFF7D7DA852A87D7DA87DA8%53A8C9C9FFFFFF99B093FD05FFA0B08DC2C2CAFFC9CAFF527D527D2752A8%FF7D7D52527DFF527DFFFFA8287D7DA87DA8277DFFA8527D527D59537D7D%7D5252FFFF52A852FFA853537D525252FFFF7D7D5227FFFF7D27A8277D52%52527D59527D7D525253FFA852FFFF52FF5352527D7D5227FFFFA8527D52%7E52FD047D5252A1CAFFFFFFC393C2FD06FFA1BC93C2A8FFA0FFA852FF7D%285252A8FF7D5252277DFF7D52FF7D7D52FF52A852A852FFFFA827A82E52%52FF287D525227FFFF7D277DFFA852FFFD0452A8FF527D5227A8FF595227%59FD045227FF527D5252277DFFA827FFFF527E5252FF527D52277DFF7D52%7D5252A87D5252595252C9C2CAC9CAC9CAC9CAC9CAC9CAC9CFCACAC9CAC9%C3FFFF7D7D52A85253A8FF7D7D27527DFFA85252527E7DFF52527D527DA8%FFA87DFF7D7D7D52847D522752A8FFFF52A8FFFF7D527D7D5259FFFF7D52%5227FFFF7D7D527D7D7D527D7E52597D7D275252FFA85252845252527DA8%7D525227A8FFA87DFF527D527D7D7D525252CAC9A1C9C3C9A1CAC3C9A1C9%C3C9A1CAC3C9A1C9C9FFFFFF7DA8FFA8A8FFFFFFA8A8A8FFFFFFA87DA8FF%A8FFFD04A87DA8FFFFA8FFA8FFA8A8A852A8A8A8FFFFA852FFFFFFA8A8A8%FF7DFFFFFFA8FF7DA8A8FFA8FFA8FFA8FF7DFFFFA8A8FFA8A884FFFFFF7E%A8A8A87DFFA8FFA8FF7DA8A8FFA8FD04FFA8A8A852FF7DA8FD3AFFA97DFD%05FF7DA8FD38FF7DA8FD82FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2009-08-04T15:20:11+02:00</xap:CreateDate>
         <xap:ModifyDate>2009-08-04T15:20:11+02:00</xap:ModifyDate>
         <xap:MetadataDate>2009-08-04T15:20:11+02:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>28</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAHAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9Cabpr6k9/cXF/eqy3tx&#xA;EiRXDxoqRuVUBVNOmYmPHx2SZfUers82YYxECMPoid4g8wwTz3+YGn+UvM8OgyR6pdvNHFKJ11B0&#xA;A9VitOJVunHxyjNLgJHqNf0v2O+7L7Jnq8BzA440SK4B0ekf4Zh/6uGof9Jcv9cy/wAv/Sl83mvz&#xA;p/mw/wBKGB+dvO/l7y1qkWi28+raxrspVRp9rdyVUv8AZV23ozdlAJzGykRNAyJ97vuzezM2pxnK&#xA;Rix4h/FKI/HxT/y9aa3qHH9Kafq2kB15o7amk4Hs4Rw6sfDifemTx45HnxD/ADnA1eTFj/u5Ysn/&#xA;ACTI+Vivtdq+p6la/lLr2ow3Ug1Cz03U5Le7LVkV7dJvSfkf2l4DfLtOSYC/xu6/XRAymhQ2+4ML&#xA;XzR5t8paGur3Gma9e32oPa2Gn22rXlreQSTXRLGVItOE9x+7WMmnHkQaDfMhxExg/NHzlq0B03T9&#xA;GhtNchttQur1r43VpEYLJ0iRrZJoUnrKZlP7xBwoa12xVKND/OnzKlvpFmmjz6rDZ6XosmtXwhvZ&#xA;p5p9RtoZXMbW8EsCFEl5n1XXkdhgVN7782/NEEV7J+jbKFf01eaLpBke5nluPqLTiSX6taxTTtyM&#xA;UaAIDQ8mNFpVV2nfm95m1uwtLrQ9Hsy8Om2up6zFeXf1cAXU8kIit3dVWoEDvykoOg64VQt15x8z&#xA;6uupeX9HLLeW11rF9dXU108DG003UzAltBLHE7J6vHienBO9TXFUdH+buu3R/Slnpdt/h6FtFNyZ&#xA;ZpBecNdSAp6aqhjJha5HKpHIeGBU7/MDzLqWh65pE1rITAun6zdz2pNI5ns7ZJYg9N9mrhViut/m&#xA;V+Yy6RJGltp1hqpi0PUYJYpJJkFrq1/9VMLiSKnPknFmApxYlfiAxVGab+cWv3fmS5szoL/oeK+u&#xA;9Mju44L1j6lmj8rhpjALX0WmiKcfV5rWpGxwKt078zfzG1Ky0V7fQ9Ohu9X0i51wRTXMpVLaD0BG&#xA;eSKfimM9Qv7IYVNQcVUr788r6HVtLji02FrK5/RP1+ENPLcQjVkRuRkjiNtH6ZlUBZXVpOq7YVV7&#xA;38xvN13oWo6sNPtbXQLiDUDpdxDecdQVrGYxBpImWn7zgT+75cP2sVR9x+Z+uQ3sl2dNtv8AD36Y&#xA;n0CJxM5vPrMHNPWaPjw9MzRMvGvLj8WKpXbfnF5lt9C/Sms6bp9v9b0ODXNOEdzKEC3E8UCJOWjJ&#xA;qTOrAJU/s7nfFVTy5+Y+u+YtY8vpMgsfT8wahpV9FEs8SXMUGkSXcTNFdRxTR/E6Hi61quBV/wCa&#xA;/nvzZZ6b5stvLsUEKeX9PhmvL6SV0uRJeB+DWyqrJ+6VOR5n4ug8cVV9L/NnXL/zxNpKaFL+gY9U&#xA;m0YXyw3jOZLcOr3HrCH6n6QljKFfV596Yq3+ZDeZ5fNFtFZPqVzo9vYGW6sfL97b2+oxTSSlVuHg&#xA;lZHmiKoVQBqcgdjiqX2/5tazH5elv9PWHWdP8u6XZX2u6jdh7K5uvXDcxDbIJFjkVYWLcmpy2G2+&#xA;FVbVvzJ81XOkeYdStLC2i8u28OtW1peLdmHUFm0uCWkvpSIBSSSFuISrKKM3Q4FdZfm/rtx5tTSb&#xA;XQpbjRbe8tNLub/0rySRp7hF9WUSxwvaokDSKXEkoYruMKpXc/m15pWby/5iu7e1tND1HS9V1Sys&#xA;0uWX1Et44zFHdu6cVYeohBSu5IptuqmGjfnF5h1JX06LTbX9NzarBpljM4vLe0aOe0e99Z0uIYrh&#xA;aRxMFHH4iQR8O+KpPafm/wCdrC3/AEf+i/0nrTXWtXN8Ql5dQwQ2d7JDFbxGzgmkI5D01d1VVABP&#xA;XFWSwfm3qsvm/TNMl0uKx0nUxZrbyXbTJPJJd24meMMIzBHNAzhGgkYSN1A3GBWvPN75vs/Jt9N5&#xA;UW5bVP01MpFnCZ5PSLvy+AK+1ab0zAPFwnh/nl6jszHpp6mI1HD4fhD6jQuh5h88ea7/AM6XeuxT&#xA;+Zlul1lUjEQuoTDLwDEx0jKpUcq02zHnf8T6LocWlhiIwcPh7/SbHnvZe1/lBrX5t3nmxofNceor&#xA;pf1WRgby0MEfqhk4/GY03pXauZWHj4t7p4j2g03Z0NPenOPxOIfTKzW/mUj/ACdEM/5z+YJNX31Z&#xA;PrhtxL9oTCcLJx/yhHyHyrlWn+vfn+n8W53tDcezMQx/3fouu7h2+37X0PmyfO2PaHp9nqXlGTTr&#xA;6ITWV6Ly3uoSSA8Us0qOpKkHdWI2yjTfQPj97ma/+9Puj/uQr6lpflbX7afy7eJHdJY+g8tqrsss&#xA;B+1A6ujLJG3wVVlYHL3DSrUvy8/Lm20OFL3T4rbSdFS4nWT1ZohHHIC900squrujgVkEjEN3xVVX&#xA;8s/IEs+n3y6VE7WENtHZEPKY/TtFAtS8fPhKYl+w0gYjxxVLfPGgflJZ6dbx+a0t7a2lvLi7tVkm&#xA;mjke6umMly0fpOJWEnM81Hw0O4piq6w/Ln8p9d0vTbyw0+2vdMhHKweCaUwlBKZfTISTi6JKSRG4&#xA;Kq3YYqmepflp5I1FQt3pgak1zOXjlnicveyerchnjdGZJX+JkJ4+2Koyfyj5VFvdiWxjS3uWtZrp&#xA;QWRCdO4NbGikBRF6K0AoNt8VSg+YPyt82aha2w1Ox1K+khuYLOJZ6O8VzHxuFjCsvLlGu9NwNxiq&#xA;O1zyz5Ij066n1i2hjsDZ29hdSzO6oLW1kMluvLl8PpyyclYfFXv0xV0H5c+S4NZk1mLTEGpSGRmm&#xA;LysA86cJZFjZzGski7O6qGbucVR1r5V8v2v1P6vZrH9QsDpVpRnPp2TenWEVbcfuU3O+3XFUmufy&#xA;j/Lq5vY72fRY3uYkgjjf1JgALWMRQNxDhfUjjUKslOQHfFVumfl9+Wl/62uafp8FzHrMMlbmOWV4&#xA;nhum9SQwrz4RiVt2MYWuKq9x5N/L+DzNFqE9nDHrepSSyQK0kgEs3olZpY4Ofper6VeUipyp3xVE&#xA;Xv5d+TL3Tk0660xJLKKxj0uOIvIONnC6SRxghgw4PEjBq8gR1xVKdA0H8qNJivNT0cWsMXl+6nk1&#xA;C5W4kcW13FC8Nw8xd2/eCKVlctue/QYqmGq+SfIfnFItWvrKPUor21REuEllWOe2assXIRuqyKOf&#xA;JCwPGtVpiqy58r/l7pPmWLzDc28FrrV08zwTSSuFMogZ55I4S3pLIYY2Z3VORA3OKonWPJ/lDzYL&#xA;PVLyA3R9H/RL22uJ7dnt5qPx9S2kiLxtseLEjFUv1DyH+WTajpNhdafbR3i2/o6bZK7xCW3smEnB&#xA;oUZUnSJpA1JAwBNe+Komf8sPIdxqd7qc2ko95qEdxFdMZJeBF4np3LLHz9NHmQ8XdFDEd8VVz+Xn&#xA;kw67Frp0xDqcLJJHKXk4CSJBHHKYuXpGRUAUOV5bDfFUG35Sfl2zTs+ixsLhJonRpJiix3O8qRoX&#xA;4xIx34oAAdxvirHDo35CaW9zoTzWVpO9xEt1G97Mkwu4mPpO0zS+oswMhHPny3pWmFWSXX5T/l7d&#xA;WUFlNo6fVrYzGKNJJo9rlg8ysUdS6SMAWRiVPhgVdZeSvy91O/svNVjZQzyn0rmyuoJJBbsUjEcU&#xA;ywowgLLGoVX4VA6HFVTSdc07Tm1C3vGlim+vXLhfQmYFXkJUgqhBBGYePNGNg/zj0LtM+mnk4ZRo&#xA;jgj1Hd73m/5keSbXzZ5vg1221ZbaKGKGMwyWl2WJidmJqsdN+WY+ciRNHn7/ANT0nY/aUtJpjilD&#xA;iJJ34o9fi9X/AMXaD/v6X/pHuP8Aqnmb+Zh3/YXk/wAhl7h/po/reb+d/JPlnWtdTzLoOrXGieYU&#xA;ZXadLW4aOR12DkBFKtTYkVB7jMXKYE3E0fcXpezO0s+HF4GWEcuHu4o2Pt/s72T+Wte1eAhvMOux&#xA;3vEUWK1064h5H+Z3ZW+5VXJ48/8AOl9n7HV6zS45f3OMx/rZIn5D9ZK3V4/MD/lRqI0FZ11aSG5a&#xA;1WIFLgq07M3pBuLCRoieHetMv0v0D4/e67tD++Pw/wByHmWqaNrPDWp/LEOuWPl+8v8AR2uJ7iLU&#xA;nuWsoYLkXARWIvmjFx6fqBDyAJI+GmZDhs20zT/M8v5E6/Y30V7cahcafq0enWtzFL9dMUkcot4T&#xA;G8lxMW34oHYvx4g74FYiJfPCfmdYTLp+tQWdpqNuly4S/mgNgbZIG2QraCEyHkEWJ5AebMwphVn/&#xA;AJpml0P8ytO8z31jdXmifoqfTxcWdvLeNaXLXCS82ihWSRVmQcOSr2ocCpXp+l6prHmjyvejSb3y&#xA;3o3q6zqE9jbmS2ErCe0a0bUEQKqSTFWk9JjvuDX4hirGNK1XzE2haeuraF5ivU0ryxc2mp2Sx30E&#xA;txqa3tmsSJLERIzHiW9RCf3fI70YYqzr8stLey8gXlq02oXeoTmea8F/BqEJSaaMUgthqKLO0Mah&#xA;VU1NTU9SRirCdE8n+fbTyv8AlzPcXFzeR2U8P+4OaxWM2EzWM6QzSugWbjDKyq3qbfF8WFUtun8z&#xA;WHleS5i/TtlcpoZHmy41RrtIm1U3VuIzavOeJYsZt4Dw4FR7Yqmnl2588t+cMVzPYaza6YNU1KDU&#xA;WlW9mtmtpIpBZ8nJFr6YkVPT9GL4V3eTxVZD+YFt5iHnux0XTp5107zokEV28crK1r+iphPcvF8Q&#xA;9P17V/TJHcDviqY/mZBdy67o31yPVpfLhtb5ZF0U3QlXUW9IWjTfVfj48fUCFvgDmrbYFeTWWjfm&#xA;ZBHoFtx1e0lt9L0uHQ7SG2vfTimBBunn9OSC3jdHWkguduB6HsVes/mxb679a0e90eyu7u4s7bWG&#xA;U2IIlSR9PkSLjJxkVHLkBKqfi6AnbAqS/kRJ5oF9rq6tb6lb6dcQWE+mx38d6IhIFlS79J715ZNz&#xA;6deRXl9pU474qxZ/J/m4atrelQ6XdfoXznq2oTatKYpAsaafqU9yrNUbLfW7RxIf2x0wqhk0n8yY&#xA;ZvL0Cfpa2kt9H0K30W0ht7wwwSJDF9caYxywW0bLIpSYXX7BoAeyqaSaX5gn8w2c9xZ61L5mtL7X&#xA;m1S6K3bWIhmsb1NOa3JLW4BjMaR+luGqrfERVVLjJ+YY83aE5sNdi+oS6AbmbhfzRm0FvCt/VYyl&#xA;uqEs/qIyySl6/ZFaKvSvP1zcab+YXk3Wjp1/e6fZ2+rxXUmn2dxemNp1thEHWBJCvLg1K+BwKxvz&#xA;Rr3mW4vPMKadpeuldZj0abR3W0uo1jWG4pdhqgGBwu7IQCR7YVQ8GiecNNtLHW7VNbn1e6vPMiX1&#xA;t61yaW6xXzWKLFL6kUIaSGAwuUpyYdagYqifyIk82jV9UGq2+qW+mXNlaS26ahHeiIXUfJLj05L1&#xA;pH5EMnM/AHNSq8VriqD81eTvO155Z8/va3N0tlcapcTp5eWyV2volEDN6UvH16ShSoMfhtiqY+n5&#xA;hPnQXBj1lNYGv+oblhdrpf6A9OvFi3+hgen+z/eepirzz6/5/u9N8uXVlb65cPDpmk3Ftf2/1+4S&#xA;T0yZbtkEDJBunwy+t6jueIVcVfUmBXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqk/mn/Cn6Pi/wAT&#xA;/Vf0f9Zh9L69w9H6xz/c/b+Hly6VxVOMVSQf4R/xeafVf8V/Uz14/W/qfMVp+16fOlaYqneKuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KoTWf0X+iL79Len+ivq8v6Q9anpfV+B9X1K/s8K19sVW6J+h/0P&#xA;ZfoX0f0R6Ef6P+rcfR9DiPT9Pj8PHjSlMVf/2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:F558794F9C82DE118C88F17499155EAC</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:F658794F9C82DE118C88F17499155EAC</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:F458794F9C82DE118C88F17499155EAC</stRef:instanceID>
            <stRef:documentID>uuid:F358794F9C82DE118C88F17499155EAC</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>29.700000</stDim:w>
            <stDim:h>20.999999</stDim:h>
            <stDim:unit>Centimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>[Registration]</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>100.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>[Registration]</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>100.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>[Registration]</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>100.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=0 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=0 Y=0 K=100</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>100.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=45 Y=60 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>45.000000</xapG:magenta>
                           <xapG:yellow>60.000004</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=50 Y=5 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>5.000001</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=90 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>90.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=20 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>19.999998</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=40 Y=15 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>39.999996</xapG:magenta>
                           <xapG:yellow>14.999998</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=20 M=0 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>19.999998</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=100 Y=25 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=40 M=40 Y=40 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>39.999996</xapG:cyan>
                           <xapG:magenta>39.999996</xapG:magenta>
                           <xapG:yellow>39.999996</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=40 M=70 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>39.999996</xapG:cyan>
                           <xapG:magenta>70.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=90 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>90.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Aqua</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>55.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Blue</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Blue Gray</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>40.000000</xapG:magenta>
                           <xapG:yellow>30.000002</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Blue Sky</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>80.000000</xapG:cyan>
                           <xapG:magenta>5.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Brown</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>85.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Dark Blue</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>90.000000</xapG:magenta>
                           <xapG:yellow>10.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Forest Green</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>55.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Gold</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>5.000000</xapG:cyan>
                           <xapG:magenta>20.000000</xapG:magenta>
                           <xapG:yellow>95.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Grass Green</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>5.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Orange</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>45.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Red</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>14.999999</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Violet</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>45.000000</xapG:cyan>
                           <xapG:magenta>90.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>PANTONE 485 CVC</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>91.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -72.5337 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 72.5337 li
735.671 72.5337 li
735.671 0 li
cp
clp
[1 0 0 1 0 0 ]ct
138.344 27.6309 mo
135.215 27.6309 li
135.215 4.47119 li
151.247 4.47119 li
151.247 7.24512 li
138.344 7.24512 li
138.344 14.3413 li
149.699 14.3413 li
149.699 17.1152 li
138.344 17.1152 li
138.344 27.6309 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
f
165.407 22.3408 mo
165.311 23.5986 163.73 25.6631 161.053 25.6631 cv
157.795 25.6631 156.15 23.6309 156.15 20.1152 cv
168.472 20.1152 li
168.472 14.1479 166.085 10.2769 161.214 10.2769 cv
155.634 10.2769 153.118 14.438 153.118 19.6636 cv
153.118 24.5342 155.924 28.1147 160.666 28.1147 cv
163.375 28.1147 164.472 27.4697 165.246 26.9536 cv
167.375 25.5342 168.149 23.1475 168.246 22.3408 cv
165.407 22.3408 li
cp
156.15 17.8574 mo
156.15 15.2446 158.214 12.8252 160.827 12.8252 cv
164.278 12.8252 165.375 15.2446 165.536 17.8574 cv
156.15 17.8574 li
cp
f
186.503 4.47119 mo
183.665 4.47119 li
183.665 13.1479 li
183.6 13.1479 li
182.923 12.1802 181.633 10.2769 178.568 10.2769 cv
174.084 10.2769 171.537 13.9541 171.537 18.6958 cv
171.537 22.728 173.214 28.1147 178.955 28.1147 cv
180.601 28.1147 182.536 27.5986 183.762 25.3086 cv
183.826 25.3086 li
183.826 27.6309 li
186.503 27.6309 li
186.503 4.47119 li
cp
174.472 19.1475 mo
174.472 16.9863 174.697 12.8252 179.084 12.8252 cv
183.181 12.8252 183.632 17.2446 183.632 19.9863 cv
183.632 24.4697 180.826 25.6631 179.02 25.6631 cv
175.923 25.6631 174.472 22.8569 174.472 19.1475 cv
cp
f
202.567 22.3408 mo
202.47 23.5986 200.89 25.6631 198.212 25.6631 cv
194.955 25.6631 193.31 23.6309 193.31 20.1152 cv
205.631 20.1152 li
205.631 14.1479 203.245 10.2769 198.374 10.2769 cv
192.793 10.2769 190.277 14.438 190.277 19.6636 cv
190.277 24.5342 193.084 28.1147 197.826 28.1147 cv
200.535 28.1147 201.632 27.4697 202.406 26.9536 cv
204.535 25.5342 205.309 23.1475 205.406 22.3408 cv
202.567 22.3408 li
cp
193.31 17.8574 mo
193.31 15.2446 195.374 12.8252 197.987 12.8252 cv
201.438 12.8252 202.535 15.2446 202.696 17.8574 cv
193.31 17.8574 li
cp
f
212.89 27.6309 mo
210.051 27.6309 li
210.051 10.7607 li
212.728 10.7607 li
212.728 13.5674 li
212.793 13.5674 li
213.922 11.5996 215.405 10.2769 217.534 10.2769 cv
217.889 10.2769 218.05 10.3091 218.276 10.374 cv
218.276 13.3091 li
217.212 13.3091 li
214.567 13.3091 212.89 15.3735 212.89 17.8252 cv
212.89 27.6309 li
cp
f
223.244 15.8896 mo
223.438 14.5996 223.889 12.6318 227.115 12.6318 cv
229.792 12.6318 231.082 13.5996 231.082 15.3735 cv
231.082 17.0508 230.276 17.3091 229.598 17.3735 cv
224.921 17.9541 li
220.212 18.5347 219.792 21.8247 219.792 23.2441 cv
219.792 26.147 221.986 28.1147 225.083 28.1147 cv
228.373 28.1147 230.082 26.5664 231.179 25.373 cv
231.276 26.6631 231.663 27.9536 234.179 27.9536 cv
234.824 27.9536 235.243 27.7598 235.727 27.6309 cv
235.727 25.5664 li
235.404 25.6309 235.05 25.6953 234.792 25.6953 cv
234.211 25.6953 233.856 25.4053 233.856 24.6953 cv
233.856 14.9863 li
233.856 10.6641 228.953 10.2769 227.599 10.2769 cv
223.438 10.2769 220.76 11.8574 220.631 15.8896 cv
223.244 15.8896 li
cp
231.018 21.7925 mo
231.018 24.0503 228.437 25.7598 225.792 25.7598 cv
223.663 25.7598 222.728 24.6631 222.728 22.8247 cv
222.728 20.6958 224.954 20.2764 226.34 20.083 cv
229.856 19.6313 230.566 19.3735 231.018 19.0186 cv
231.018 21.7925 li
cp
f
249.855 16.438 mo
249.501 14.1802 248.243 12.8252 245.856 12.8252 cv
242.34 12.8252 241.211 16.1802 241.211 19.1797 cv
241.211 22.083 241.92 25.6631 245.824 25.6631 cv
247.727 25.6631 249.372 24.2441 249.855 21.6636 cv
252.597 21.6636 li
252.307 24.3408 250.662 28.1147 245.727 28.1147 cv
240.985 28.1147 238.179 24.5342 238.179 19.6636 cv
238.179 14.438 240.695 10.2769 246.275 10.2769 cv
250.694 10.2769 252.372 13.5024 252.597 16.438 cv
249.855 16.438 li
cp
f
256.146 7.69678 mo
256.146 4.47119 li
258.984 4.47119 li
258.984 7.69678 li
256.146 7.69678 li
cp
258.984 27.6309 mo
256.146 27.6309 li
256.146 10.7607 li
258.984 10.7607 li
258.984 27.6309 li
cp
f
275.693 3.95508 mo
272.209 3.95508 li
269.338 8.50293 li
271.5 8.50293 li
275.693 3.95508 li
cp
262.919 19.1797 mo
262.919 23.5342 265.371 28.0825 270.758 28.0825 cv
276.145 28.0825 278.596 23.5342 278.596 19.1797 cv
278.596 14.8252 276.145 10.2769 270.758 10.2769 cv
265.371 10.2769 262.919 14.8252 262.919 19.1797 cv
cp
265.854 19.1797 mo
265.854 16.9219 266.693 12.7285 270.758 12.7285 cv
274.822 12.7285 275.661 16.9219 275.661 19.1797 cv
275.661 21.4375 274.822 25.6309 270.758 25.6309 cv
266.693 25.6309 265.854 21.4375 265.854 19.1797 cv
cp
f
296.208 27.6309 mo
293.37 27.6309 li
293.37 17.2446 li
293.37 14.3091 292.531 12.8252 289.757 12.8252 cv
288.144 12.8252 285.306 13.8574 285.306 18.438 cv
285.306 27.6309 li
282.467 27.6309 li
282.467 10.7607 li
285.144 10.7607 li
285.144 13.1479 li
285.208 13.1479 li
285.822 12.2446 287.402 10.2769 290.305 10.2769 cv
292.918 10.2769 296.208 11.3413 296.208 16.1475 cv
296.208 27.6309 li
cp
f
314.627 27.6309 mo
311.498 27.6309 li
311.498 4.47119 li
314.627 4.47119 li
314.627 27.6309 li
cp
f
334.013 27.6309 mo
331.174 27.6309 li
331.174 17.2446 li
331.174 14.3091 330.336 12.8252 327.562 12.8252 cv
325.949 12.8252 323.11 13.8574 323.11 18.438 cv
323.11 27.6309 li
320.272 27.6309 li
320.272 10.7607 li
322.949 10.7607 li
322.949 13.1479 li
323.014 13.1479 li
323.626 12.2446 325.207 10.2769 328.11 10.2769 cv
330.723 10.2769 334.013 11.3413 334.013 16.1475 cv
334.013 27.6309 li
cp
f
342.335 13.1157 mo
342.335 24.0825 li
342.335 25.4053 343.464 25.4053 344.045 25.4053 cv
345.045 25.4053 li
345.045 27.6309 li
344.013 27.7275 343.207 27.8564 342.916 27.8564 cv
340.11 27.8564 339.497 26.2759 339.497 24.2441 cv
339.497 13.1157 li
337.207 13.1157 li
337.207 10.7607 li
339.497 10.7607 li
339.497 6.05127 li
342.335 6.05127 li
342.335 10.7607 li
345.045 10.7607 li
345.045 13.1157 li
342.335 13.1157 li
cp
f
359.948 22.3408 mo
359.851 23.5986 358.27 25.6631 355.593 25.6631 cv
352.335 25.6631 350.69 23.6309 350.69 20.1152 cv
363.012 20.1152 li
363.012 14.1479 360.625 10.2769 355.754 10.2769 cv
350.174 10.2769 347.658 14.438 347.658 19.6636 cv
347.658 24.5342 350.464 28.1147 355.206 28.1147 cv
357.916 28.1147 359.012 27.4697 359.786 26.9536 cv
361.915 25.5342 362.689 23.1475 362.786 22.3408 cv
359.948 22.3408 li
cp
350.69 17.8574 mo
350.69 15.2446 352.754 12.8252 355.367 12.8252 cv
358.818 12.8252 359.915 15.2446 360.077 17.8574 cv
350.69 17.8574 li
cp
f
370.27 27.6309 mo
367.431 27.6309 li
367.431 10.7607 li
370.108 10.7607 li
370.108 13.5674 li
370.173 13.5674 li
371.302 11.5996 372.786 10.2769 374.914 10.2769 cv
375.27 10.2769 375.431 10.3091 375.656 10.374 cv
375.656 13.3091 li
374.593 13.3091 li
371.947 13.3091 370.27 15.3735 370.27 17.8252 cv
370.27 27.6309 li
cp
f
392.978 27.6309 mo
390.14 27.6309 li
390.14 17.2446 li
390.14 14.3091 389.301 12.8252 386.526 12.8252 cv
384.914 12.8252 382.075 13.8574 382.075 18.438 cv
382.075 27.6309 li
379.236 27.6309 li
379.236 10.7607 li
381.914 10.7607 li
381.914 13.1479 li
381.979 13.1479 li
382.592 12.2446 384.172 10.2769 387.075 10.2769 cv
389.688 10.2769 392.978 11.3413 392.978 16.1475 cv
392.978 27.6309 li
cp
f
400.333 15.8896 mo
400.526 14.5996 400.978 12.6318 404.203 12.6318 cv
406.881 12.6318 408.171 13.5996 408.171 15.3735 cv
408.171 17.0508 407.364 17.3091 406.688 17.3735 cv
402.01 17.9541 li
397.301 18.5347 396.881 21.8247 396.881 23.2441 cv
396.881 26.147 399.074 28.1147 402.172 28.1147 cv
405.461 28.1147 407.171 26.5664 408.268 25.373 cv
408.364 26.6631 408.752 27.9536 411.268 27.9536 cv
411.912 27.9536 412.332 27.7598 412.816 27.6309 cv
412.816 25.5664 li
412.493 25.6309 412.139 25.6953 411.881 25.6953 cv
411.3 25.6953 410.945 25.4053 410.945 24.6953 cv
410.945 14.9863 li
410.945 10.6641 406.042 10.2769 404.688 10.2769 cv
400.526 10.2769 397.85 11.8574 397.721 15.8896 cv
400.333 15.8896 li
cp
408.106 21.7925 mo
408.106 24.0503 405.526 25.7598 402.881 25.7598 cv
400.752 25.7598 399.816 24.6631 399.816 22.8247 cv
399.816 20.6958 402.043 20.2764 403.43 20.083 cv
406.945 19.6313 407.655 19.3735 408.106 19.0186 cv
408.106 21.7925 li
cp
f
426.944 16.438 mo
426.59 14.1802 425.331 12.8252 422.944 12.8252 cv
419.429 12.8252 418.3 16.1802 418.3 19.1797 cv
418.3 22.083 419.01 25.6631 422.912 25.6631 cv
424.815 25.6631 426.46 24.2441 426.944 21.6636 cv
429.687 21.6636 li
429.396 24.3408 427.751 28.1147 422.816 28.1147 cv
418.074 28.1147 415.268 24.5342 415.268 19.6636 cv
415.268 14.438 417.783 10.2769 423.364 10.2769 cv
427.783 10.2769 429.46 13.5024 429.687 16.438 cv
426.944 16.438 li
cp
f
433.235 7.69678 mo
433.235 4.47119 li
436.073 4.47119 li
436.073 7.69678 li
433.235 7.69678 li
cp
436.073 27.6309 mo
433.235 27.6309 li
433.235 10.7607 li
436.073 10.7607 li
436.073 27.6309 li
cp
f
440.008 19.1797 mo
440.008 23.5342 442.46 28.0825 447.847 28.0825 cv
453.233 28.0825 455.685 23.5342 455.685 19.1797 cv
455.685 14.8252 453.233 10.2769 447.847 10.2769 cv
442.46 10.2769 440.008 14.8252 440.008 19.1797 cv
cp
442.943 19.1797 mo
442.943 16.9219 443.782 12.7285 447.847 12.7285 cv
451.91 12.7285 452.75 16.9219 452.75 19.1797 cv
452.75 21.4375 451.91 25.6309 447.847 25.6309 cv
443.782 25.6309 442.943 21.4375 442.943 19.1797 cv
cp
f
473.297 27.6309 mo
470.459 27.6309 li
470.459 17.2446 li
470.459 14.3091 469.619 12.8252 466.846 12.8252 cv
465.232 12.8252 462.395 13.8574 462.395 18.438 cv
462.395 27.6309 li
459.556 27.6309 li
459.556 10.7607 li
462.232 10.7607 li
462.232 13.1479 li
462.298 13.1479 li
462.91 12.2446 464.491 10.2769 467.394 10.2769 cv
470.007 10.2769 473.297 11.3413 473.297 16.1475 cv
473.297 27.6309 li
cp
f
480.651 15.8896 mo
480.846 14.5996 481.297 12.6318 484.522 12.6318 cv
487.199 12.6318 488.49 13.5996 488.49 15.3735 cv
488.49 17.0508 487.684 17.3091 487.006 17.3735 cv
482.329 17.9541 li
477.619 18.5347 477.2 21.8247 477.2 23.2441 cv
477.2 26.147 479.394 28.1147 482.49 28.1147 cv
485.78 28.1147 487.49 26.5664 488.587 25.373 cv
488.684 26.6631 489.07 27.9536 491.586 27.9536 cv
492.231 27.9536 492.651 27.7598 493.135 27.6309 cv
493.135 25.5664 li
492.813 25.6309 492.457 25.6953 492.199 25.6953 cv
491.618 25.6953 491.265 25.4053 491.265 24.6953 cv
491.265 14.9863 li
491.265 10.6641 486.361 10.2769 485.006 10.2769 cv
480.846 10.2769 478.168 11.8574 478.039 15.8896 cv
480.651 15.8896 li
cp
488.426 21.7925 mo
488.426 24.0503 485.846 25.7598 483.2 25.7598 cv
481.071 25.7598 480.136 24.6631 480.136 22.8247 cv
480.136 20.6958 482.361 20.2764 483.748 20.083 cv
487.265 19.6313 487.975 19.3735 488.426 19.0186 cv
488.426 21.7925 li
cp
f
499.618 27.6309 mo
496.78 27.6309 li
496.78 4.47119 li
499.618 4.47119 li
499.618 27.6309 li
cp
f
528.133 4.47119 mo
525.294 4.47119 li
525.294 13.1479 li
525.23 13.1479 li
524.553 12.1802 523.262 10.2769 520.198 10.2769 cv
515.714 10.2769 513.166 13.9541 513.166 18.6958 cv
513.166 22.728 514.844 28.1147 520.585 28.1147 cv
522.23 28.1147 524.165 27.5986 525.391 25.3086 cv
525.456 25.3086 li
525.456 27.6309 li
528.133 27.6309 li
528.133 4.47119 li
cp
516.102 19.1475 mo
516.102 16.9863 516.327 12.8252 520.714 12.8252 cv
524.811 12.8252 525.262 17.2446 525.262 19.9863 cv
525.262 24.4697 522.456 25.6631 520.649 25.6631 cv
517.553 25.6631 516.102 22.8569 516.102 19.1475 cv
cp
f
544.197 22.3408 mo
544.1 23.5986 542.52 25.6631 539.843 25.6631 cv
536.585 25.6631 534.939 23.6309 534.939 20.1152 cv
547.261 20.1152 li
547.261 14.1479 544.875 10.2769 540.004 10.2769 cv
534.423 10.2769 531.907 14.438 531.907 19.6636 cv
531.907 24.5342 534.714 28.1147 539.456 28.1147 cv
542.165 28.1147 543.262 27.4697 544.035 26.9536 cv
546.164 25.5342 546.939 23.1475 547.035 22.3408 cv
544.197 22.3408 li
cp
534.939 17.8574 mo
534.939 15.2446 537.004 12.8252 539.617 12.8252 cv
543.068 12.8252 544.164 15.2446 544.326 17.8574 cv
534.939 17.8574 li
cp
f
575.228 11.2446 mo
575.066 7.66455 572.1 6.53516 569.486 6.53516 cv
567.519 6.53516 564.196 7.0835 564.196 10.5996 cv
564.196 12.5674 565.584 13.2124 566.938 13.5352 cv
573.551 15.0508 li
576.551 15.7607 578.809 17.5669 578.809 21.2441 cv
578.809 26.7275 573.712 28.2437 569.744 28.2437 cv
565.455 28.2437 563.776 26.9536 562.745 26.0181 cv
560.777 24.2441 560.39 22.3086 560.39 20.1475 cv
563.326 20.1475 li
563.326 24.3408 566.744 25.5664 569.713 25.5664 cv
571.971 25.5664 575.776 24.9858 575.776 21.6636 cv
575.776 19.2441 574.647 18.4702 570.842 17.5669 cv
566.1 16.4702 li
564.584 16.1152 561.164 15.0508 561.164 11.019 cv
561.164 7.40625 563.519 3.85791 569.132 3.85791 cv
577.228 3.85791 578.034 8.69629 578.163 11.2446 cv
575.228 11.2446 li
cp
f
582.099 19.1797 mo
582.099 23.5342 584.551 28.0825 589.938 28.0825 cv
595.324 28.0825 597.775 23.5342 597.775 19.1797 cv
597.775 14.8252 595.324 10.2769 589.938 10.2769 cv
584.551 10.2769 582.099 14.8252 582.099 19.1797 cv
cp
585.034 19.1797 mo
585.034 16.9219 585.873 12.7285 589.938 12.7285 cv
594.002 12.7285 594.84 16.9219 594.84 19.1797 cv
594.84 21.4375 594.002 25.6309 589.938 25.6309 cv
585.873 25.6309 585.034 21.4375 585.034 19.1797 cv
cp
f
612.194 16.438 mo
611.839 14.1802 610.581 12.8252 608.194 12.8252 cv
604.679 12.8252 603.549 16.1802 603.549 19.1797 cv
603.549 22.083 604.26 25.6631 608.162 25.6631 cv
610.065 25.6631 611.71 24.2441 612.194 21.6636 cv
614.936 21.6636 li
614.646 24.3408 613 28.1147 608.065 28.1147 cv
603.324 28.1147 600.518 24.5342 600.518 19.6636 cv
600.518 14.438 603.033 10.2769 608.614 10.2769 cv
613.033 10.2769 614.71 13.5024 614.936 16.438 cv
612.194 16.438 li
cp
f
618.484 7.69678 mo
618.484 4.47119 li
621.322 4.47119 li
621.322 7.69678 li
618.484 7.69678 li
cp
621.322 27.6309 mo
618.484 27.6309 li
618.484 10.7607 li
621.322 10.7607 li
621.322 27.6309 li
cp
f
637.709 22.3408 mo
637.611 23.5986 636.031 25.6631 633.354 25.6631 cv
630.096 25.6631 628.451 23.6309 628.451 20.1152 cv
640.772 20.1152 li
640.772 14.1479 638.387 10.2769 633.516 10.2769 cv
627.936 10.2769 625.419 14.438 625.419 19.6636 cv
625.419 24.5342 628.226 28.1147 632.967 28.1147 cv
635.677 28.1147 636.773 27.4697 637.548 26.9536 cv
639.677 25.5342 640.451 23.1475 640.548 22.3408 cv
637.709 22.3408 li
cp
628.451 17.8574 mo
628.451 15.2446 630.516 12.8252 633.129 12.8252 cv
636.58 12.8252 637.677 15.2446 637.838 17.8574 cv
628.451 17.8574 li
cp
f
658.805 4.47119 mo
655.967 4.47119 li
655.967 13.1479 li
655.901 13.1479 li
655.225 12.1802 653.934 10.2769 650.869 10.2769 cv
646.387 10.2769 643.838 13.9541 643.838 18.6958 cv
643.838 22.728 645.516 28.1147 651.257 28.1147 cv
652.901 28.1147 654.837 27.5986 656.063 25.3086 cv
656.127 25.3086 li
656.127 27.6309 li
658.805 27.6309 li
658.805 4.47119 li
cp
646.772 19.1475 mo
646.772 16.9863 646.999 12.8252 651.386 12.8252 cv
655.482 12.8252 655.934 17.2446 655.934 19.9863 cv
655.934 24.4697 653.127 25.6631 651.321 25.6631 cv
648.225 25.6631 646.772 22.8569 646.772 19.1475 cv
cp
f
665.901 15.8896 mo
666.095 14.5996 666.547 12.6318 669.772 12.6318 cv
672.449 12.6318 673.739 13.5996 673.739 15.3735 cv
673.739 17.0508 672.934 17.3091 672.256 17.3735 cv
667.578 17.9541 li
662.869 18.5347 662.45 21.8247 662.45 23.2441 cv
662.45 26.147 664.644 28.1147 667.74 28.1147 cv
671.03 28.1147 672.739 26.5664 673.836 25.373 cv
673.934 26.6631 674.32 27.9536 676.836 27.9536 cv
677.481 27.9536 677.9 27.7598 678.385 27.6309 cv
678.385 25.5664 li
678.063 25.6309 677.707 25.6953 677.449 25.6953 cv
676.868 25.6953 676.514 25.4053 676.514 24.6953 cv
676.514 14.9863 li
676.514 10.6641 671.61 10.2769 670.256 10.2769 cv
666.095 10.2769 663.418 11.8574 663.289 15.8896 cv
665.901 15.8896 li
cp
673.676 21.7925 mo
673.676 24.0503 671.095 25.7598 668.449 25.7598 cv
666.32 25.7598 665.385 24.6631 665.385 22.8247 cv
665.385 20.6958 667.61 20.2764 668.998 20.083 cv
672.514 19.6313 673.224 19.3735 673.676 19.0186 cv
673.676 21.7925 li
cp
f
695.964 4.47119 mo
693.126 4.47119 li
693.126 13.1479 li
693.062 13.1479 li
692.384 12.1802 691.094 10.2769 688.029 10.2769 cv
683.546 10.2769 680.998 13.9541 680.998 18.6958 cv
680.998 22.728 682.675 28.1147 688.416 28.1147 cv
690.062 28.1147 691.997 27.5986 693.223 25.3086 cv
693.287 25.3086 li
693.287 27.6309 li
695.964 27.6309 li
695.964 4.47119 li
cp
683.934 19.1475 mo
683.934 16.9863 684.158 12.8252 688.545 12.8252 cv
692.643 12.8252 693.094 17.2446 693.094 19.9863 cv
693.094 24.4697 690.287 25.6631 688.481 25.6631 cv
685.385 25.6631 683.934 22.8569 683.934 19.1475 cv
cp
f
712.028 22.3408 mo
711.932 23.5986 710.352 25.6631 707.674 25.6631 cv
704.416 25.6631 702.771 23.6309 702.771 20.1152 cv
715.093 20.1152 li
715.093 14.1479 712.706 10.2769 707.835 10.2769 cv
702.255 10.2769 699.739 14.438 699.739 19.6636 cv
699.739 24.5342 702.545 28.1147 707.287 28.1147 cv
709.996 28.1147 711.093 27.4697 711.867 26.9536 cv
713.996 25.5342 714.77 23.1475 714.867 22.3408 cv
712.028 22.3408 li
cp
702.771 17.8574 mo
702.771 15.2446 704.835 12.8252 707.448 12.8252 cv
710.899 12.8252 711.996 15.2446 712.157 17.8574 cv
702.771 17.8574 li
cp
f
728.705 15.5669 mo
728.673 14.5024 728.285 12.7285 724.706 12.7285 cv
723.835 12.7285 721.351 13.019 721.351 15.1157 cv
721.351 16.5024 722.222 16.8252 724.415 17.3735 cv
727.254 18.083 li
730.77 18.9541 731.995 20.2441 731.995 22.5342 cv
731.995 26.0181 729.125 28.1147 725.318 28.1147 cv
718.641 28.1147 718.157 24.2441 718.061 22.2119 cv
720.802 22.2119 li
720.899 23.5342 721.286 25.6631 725.286 25.6631 cv
727.318 25.6631 729.156 24.8569 729.156 22.9858 cv
729.156 21.6313 728.221 21.1797 725.802 20.5669 cv
722.512 19.7603 li
720.157 19.1797 718.609 17.9863 718.609 15.6641 cv
718.609 11.9546 721.673 10.2769 724.996 10.2769 cv
731.027 10.2769 731.447 14.7285 731.447 15.5669 cv
728.705 15.5669 li
cp
f
148.537 42.4712 mo
145.699 42.4712 li
145.699 51.1479 li
145.634 51.1479 li
144.957 50.1802 143.667 48.2769 140.603 48.2769 cv
136.119 48.2769 133.57 51.9541 133.57 56.6958 cv
133.57 60.728 135.248 66.1147 140.989 66.1147 cv
142.634 66.1147 144.57 65.5981 145.795 63.3091 cv
145.86 63.3091 li
145.86 65.6313 li
148.537 65.6313 li
148.537 42.4712 li
cp
136.505 57.1475 mo
136.505 54.9863 136.731 50.8252 141.118 50.8252 cv
145.215 50.8252 145.667 55.2446 145.667 57.9858 cv
145.667 62.4692 142.86 63.6626 141.054 63.6626 cv
137.958 63.6626 136.505 60.8569 136.505 57.1475 cv
cp
f
164.601 60.3403 mo
164.504 61.5981 162.924 63.6626 160.247 63.6626 cv
156.989 63.6626 155.344 61.6313 155.344 58.1147 cv
167.666 58.1147 li
167.666 52.1479 165.278 48.2769 160.408 48.2769 cv
154.828 48.2769 152.312 52.438 152.312 57.6636 cv
152.312 62.5337 155.118 66.1147 159.859 66.1147 cv
162.569 66.1147 163.666 65.4692 164.44 64.9536 cv
166.569 63.5337 167.343 61.1479 167.439 60.3403 cv
164.601 60.3403 li
cp
155.344 55.8574 mo
155.344 53.2446 157.408 50.8252 160.021 50.8252 cv
163.472 50.8252 164.569 53.2446 164.73 55.8574 cv
155.344 55.8574 li
cp
f
184.213 65.6313 mo
181.375 65.6313 li
181.375 42.4712 li
184.213 42.4712 li
184.213 65.6313 li
cp
f
191.632 53.8896 mo
191.826 52.5996 192.277 50.6318 195.503 50.6318 cv
198.18 50.6318 199.47 51.5996 199.47 53.3735 cv
199.47 55.0508 198.664 55.3091 197.986 55.3735 cv
193.31 55.9541 li
188.6 56.5347 188.181 59.8247 188.181 61.2446 cv
188.181 64.147 190.374 66.1147 193.471 66.1147 cv
196.761 66.1147 198.47 64.5659 199.567 63.3735 cv
199.664 64.6626 200.051 65.9536 202.567 65.9536 cv
203.212 65.9536 203.631 65.7603 204.115 65.6313 cv
204.115 63.5659 li
203.792 63.6313 203.438 63.6948 203.18 63.6948 cv
202.599 63.6948 202.244 63.4048 202.244 62.6948 cv
202.244 52.9863 li
202.244 48.6641 197.341 48.2769 195.987 48.2769 cv
191.826 48.2769 189.148 49.8574 189.02 53.8896 cv
191.632 53.8896 li
cp
199.406 59.7925 mo
199.406 62.0503 196.825 63.7603 194.18 63.7603 cv
192.051 63.7603 191.116 62.6626 191.116 60.8247 cv
191.116 58.6958 193.342 58.2769 194.729 58.0825 cv
198.245 57.6313 198.954 57.3735 199.406 57.0186 cv
199.406 59.7925 li
cp
f
233.92 49.4385 mo
233.049 45.374 229.663 44.6323 227.437 44.6323 cv
223.244 44.6323 219.857 47.7285 219.857 53.8252 cv
219.857 59.2769 221.792 63.4692 227.534 63.4692 cv
229.566 63.4692 233.082 62.5024 234.146 57.1152 cv
237.178 57.1152 li
235.888 65.8569 228.792 66.2437 227.05 66.2437 cv
221.792 66.2437 216.631 62.8247 216.631 53.9219 cv
216.631 46.7935 220.695 41.8579 227.437 41.8579 cv
233.404 41.8579 236.501 45.5674 236.953 49.4385 cv
233.92 49.4385 li
cp
f
244.468 65.6313 mo
241.629 65.6313 li
241.629 48.7607 li
244.307 48.7607 li
244.307 51.5674 li
244.372 51.5674 li
245.5 49.5996 246.984 48.2769 249.113 48.2769 cv
249.468 48.2769 249.629 48.3091 249.855 48.374 cv
249.855 51.3091 li
248.791 51.3091 li
246.146 51.3091 244.468 53.3735 244.468 55.8252 cv
244.468 65.6313 li
cp
f
264.112 65.6313 mo
264.112 63.1792 li
264.048 63.1147 li
262.854 65.0825 261.403 66.1147 258.693 66.1147 cv
256.209 66.1147 253.209 64.9214 253.209 60.8892 cv
253.209 48.7607 li
256.048 48.7607 li
256.048 59.9536 li
256.048 62.728 257.467 63.6626 259.306 63.6626 cv
262.886 63.6626 263.951 60.5024 263.951 58.0513 cv
263.951 48.7607 li
266.79 48.7607 li
266.79 65.6313 li
264.112 65.6313 li
cp
f
274.37 63.2769 mo
284.724 63.2769 li
284.724 65.6313 li
270.596 65.6313 li
270.596 63.4048 li
280.757 51.1157 li
271.37 51.1157 li
271.37 48.7607 li
284.434 48.7607 li
284.434 51.0835 li
274.37 63.2769 li
cp
f
301.95 55.6958 mo
309.53 55.6958 li
313.271 55.6958 313.659 57.9214 313.659 59.8247 cv
313.659 60.6958 313.755 64.2114 314.207 65.6313 cv
318.045 65.6313 li
318.045 65.1147 li
317.078 64.5659 316.917 64.0825 316.884 62.7925 cv
316.69 58.5991 li
316.562 55.3735 315.239 54.793 313.917 54.2446 cv
315.4 53.3735 317.142 52.1157 317.142 48.6963 cv
317.142 43.7935 313.336 42.4712 309.53 42.4712 cv
298.821 42.4712 li
298.821 65.6313 li
301.95 65.6313 li
301.95 55.6958 li
cp
301.95 45.1484 mo
309.755 45.1484 li
311.304 45.1484 313.917 45.4385 313.917 49.019 cv
313.917 52.438 311.497 53.0186 309.207 53.0186 cv
301.95 53.0186 li
301.95 45.1484 li
cp
f
321.045 57.1797 mo
321.045 61.5337 323.497 66.0825 328.883 66.0825 cv
334.27 66.0825 336.722 61.5337 336.722 57.1797 cv
336.722 52.8252 334.27 48.2769 328.883 48.2769 cv
323.497 48.2769 321.045 52.8252 321.045 57.1797 cv
cp
323.98 57.1797 mo
323.98 54.9219 324.819 50.7285 328.883 50.7285 cv
332.948 50.7285 333.786 54.9219 333.786 57.1797 cv
333.786 59.438 332.948 63.6313 328.883 63.6313 cv
324.819 63.6313 323.98 59.438 323.98 57.1797 cv
cp
f
343.496 45.6968 mo
340.657 45.6968 li
340.657 42.4712 li
343.496 42.4712 li
343.496 45.6968 li
cp
343.496 68.1147 mo
343.496 69.5659 343.367 72.4048 339.173 72.4048 cv
338.787 72.4048 338.399 72.3726 337.98 72.3081 cv
337.98 69.8569 li
338.561 69.8569 li
340.238 69.8569 340.657 69.6948 340.657 67.7915 cv
340.657 48.7607 li
343.496 48.7607 li
343.496 68.1147 li
cp
f
350.915 53.8896 mo
351.108 52.5996 351.56 50.6318 354.785 50.6318 cv
357.462 50.6318 358.752 51.5996 358.752 53.3735 cv
358.752 55.0508 357.946 55.3091 357.269 55.3735 cv
352.592 55.9541 li
347.882 56.5347 347.463 59.8247 347.463 61.2446 cv
347.463 64.147 349.656 66.1147 352.753 66.1147 cv
356.043 66.1147 357.753 64.5659 358.85 63.3735 cv
358.946 64.6626 359.333 65.9536 361.849 65.9536 cv
362.494 65.9536 362.914 65.7603 363.397 65.6313 cv
363.397 63.5659 li
363.075 63.6313 362.72 63.6948 362.462 63.6948 cv
361.881 63.6948 361.527 63.4048 361.527 62.6948 cv
361.527 52.9863 li
361.527 48.6641 356.624 48.2769 355.269 48.2769 cv
351.108 48.2769 348.431 49.8574 348.302 53.8896 cv
350.915 53.8896 li
cp
358.688 59.7925 mo
358.688 62.0503 356.107 63.7603 353.462 63.7603 cv
351.333 63.7603 350.398 62.6626 350.398 60.8247 cv
350.398 58.6958 352.624 58.2769 354.011 58.0825 cv
357.527 57.6313 358.236 57.3735 358.688 57.0186 cv
358.688 59.7925 li
cp
f
387.139 48.7607 mo
390.268 48.7607 li
388.3 54.2769 386.364 59.7925 384.203 65.3081 cv
381.526 72.147 381.235 72.5337 377.591 72.5337 cv
377.172 72.5337 376.85 72.4048 376.397 72.2759 cv
376.397 69.6948 li
376.752 69.8237 377.332 69.9858 378.106 69.9858 cv
379.591 69.9858 379.752 69.5659 381.106 66.0825 cv
374.85 48.7607 li
378.074 48.7607 li
382.559 62.5024 li
382.623 62.5024 li
387.139 48.7607 li
cp
f
416.977 42.4712 mo
414.138 42.4712 li
414.138 51.1479 li
414.073 51.1479 li
413.396 50.1802 412.105 48.2769 409.041 48.2769 cv
404.558 48.2769 402.01 51.9541 402.01 56.6958 cv
402.01 60.728 403.687 66.1147 409.428 66.1147 cv
411.073 66.1147 413.009 65.5981 414.234 63.3091 cv
414.299 63.3091 li
414.299 65.6313 li
416.977 65.6313 li
416.977 42.4712 li
cp
404.944 57.1475 mo
404.944 54.9863 405.17 50.8252 409.557 50.8252 cv
413.654 50.8252 414.105 55.2446 414.105 57.9858 cv
414.105 62.4692 411.299 63.6626 409.493 63.6626 cv
406.396 63.6626 404.944 60.8569 404.944 57.1475 cv
cp
f
433.04 60.3403 mo
432.943 61.5981 431.363 63.6626 428.686 63.6626 cv
425.428 63.6626 423.783 61.6313 423.783 58.1147 cv
436.104 58.1147 li
436.104 52.1479 433.718 48.2769 428.847 48.2769 cv
423.267 48.2769 420.751 52.438 420.751 57.6636 cv
420.751 62.5337 423.557 66.1147 428.298 66.1147 cv
431.008 66.1147 432.104 65.4692 432.879 64.9536 cv
435.008 63.5337 435.781 61.1479 435.879 60.3403 cv
433.04 60.3403 li
cp
423.783 55.8574 mo
423.783 53.2446 425.847 50.8252 428.46 50.8252 cv
431.911 50.8252 433.008 53.2446 433.169 55.8574 cv
423.783 55.8574 li
cp
f
452.652 65.6313 mo
449.814 65.6313 li
449.814 42.4712 li
452.652 42.4712 li
452.652 65.6313 li
cp
f
460.07 53.8896 mo
460.265 52.5996 460.716 50.6318 463.941 50.6318 cv
466.619 50.6318 467.909 51.5996 467.909 53.3735 cv
467.909 55.0508 467.103 55.3091 466.426 55.3735 cv
461.748 55.9541 li
457.039 56.5347 456.619 59.8247 456.619 61.2446 cv
456.619 64.147 458.813 66.1147 461.91 66.1147 cv
465.199 66.1147 466.909 64.5659 468.006 63.3735 cv
468.103 64.6626 468.489 65.9536 471.006 65.9536 cv
471.651 65.9536 472.07 65.7603 472.555 65.6313 cv
472.555 63.5659 li
472.231 63.6313 471.877 63.6948 471.618 63.6948 cv
471.038 63.6948 470.684 63.4048 470.684 62.6948 cv
470.684 52.9863 li
470.684 48.6641 465.78 48.2769 464.426 48.2769 cv
460.265 48.2769 457.588 49.8574 457.458 53.8896 cv
460.07 53.8896 li
cp
467.845 59.7925 mo
467.845 62.0503 465.265 63.7603 462.619 63.7603 cv
460.49 63.7603 459.555 62.6626 459.555 60.8247 cv
459.555 58.6958 461.78 58.2769 463.168 58.0825 cv
466.684 57.6313 467.394 57.3735 467.845 57.0186 cv
467.845 59.7925 li
cp
f
505.165 65.6313 mo
505.165 51.9541 li
505.165 51.2769 505.23 48.3418 505.23 46.1802 cv
505.165 46.1802 li
498.65 65.6313 li
495.553 65.6313 li
489.037 46.2129 li
488.973 46.2129 li
488.973 48.3418 489.037 51.2769 489.037 51.9541 cv
489.037 65.6313 li
486.006 65.6313 li
486.006 42.4712 li
490.489 42.4712 li
497.102 62.0503 li
497.166 62.0503 li
503.746 42.4712 li
508.197 42.4712 li
508.197 65.6313 li
505.165 65.6313 li
cp
f
524.746 60.3403 mo
524.648 61.5981 523.068 63.6626 520.391 63.6626 cv
517.133 63.6626 515.488 61.6313 515.488 58.1147 cv
527.81 58.1147 li
527.81 52.1479 525.423 48.2769 520.552 48.2769 cv
514.972 48.2769 512.456 52.438 512.456 57.6636 cv
512.456 62.5337 515.262 66.1147 520.004 66.1147 cv
522.714 66.1147 523.811 65.4692 524.584 64.9536 cv
526.713 63.5337 527.487 61.1479 527.584 60.3403 cv
524.746 60.3403 li
cp
515.488 55.8574 mo
515.488 53.2446 517.552 50.8252 520.165 50.8252 cv
523.616 50.8252 524.713 53.2446 524.875 55.8574 cv
515.488 55.8574 li
cp
f
545.842 42.4712 mo
543.003 42.4712 li
543.003 51.1479 li
542.938 51.1479 li
542.261 50.1802 540.971 48.2769 537.906 48.2769 cv
533.423 48.2769 530.875 51.9541 530.875 56.6958 cv
530.875 60.728 532.552 66.1147 538.294 66.1147 cv
539.938 66.1147 541.874 65.5981 543.1 63.3091 cv
543.164 63.3091 li
543.164 65.6313 li
545.842 65.6313 li
545.842 42.4712 li
cp
533.81 57.1475 mo
533.81 54.9863 534.035 50.8252 538.423 50.8252 cv
542.519 50.8252 542.971 55.2446 542.971 57.9858 cv
542.971 62.4692 540.164 63.6626 538.357 63.6626 cv
535.261 63.6626 533.81 60.8569 533.81 57.1475 cv
cp
f
550.486 45.6968 mo
550.486 42.4712 li
553.325 42.4712 li
553.325 45.6968 li
550.486 45.6968 li
cp
553.325 65.6313 mo
550.486 65.6313 li
550.486 48.7607 li
553.325 48.7607 li
553.325 65.6313 li
cp
f
560.743 53.8896 mo
560.938 52.5996 561.389 50.6318 564.614 50.6318 cv
567.291 50.6318 568.582 51.5996 568.582 53.3735 cv
568.582 55.0508 567.775 55.3091 567.098 55.3735 cv
562.421 55.9541 li
557.711 56.5347 557.293 59.8247 557.293 61.2446 cv
557.293 64.147 559.485 66.1147 562.582 66.1147 cv
565.873 66.1147 567.582 64.5659 568.679 63.3735 cv
568.775 64.6626 569.162 65.9536 571.679 65.9536 cv
572.323 65.9536 572.743 65.7603 573.227 65.6313 cv
573.227 63.5659 li
572.904 63.6313 572.549 63.6948 572.291 63.6948 cv
571.711 63.6948 571.356 63.4048 571.356 62.6948 cv
571.356 52.9863 li
571.356 48.6641 566.453 48.2769 565.098 48.2769 cv
560.938 48.2769 558.26 49.8574 558.131 53.8896 cv
560.743 53.8896 li
cp
568.518 59.7925 mo
568.518 62.0503 565.938 63.7603 563.292 63.7603 cv
561.163 63.7603 560.228 62.6626 560.228 60.8247 cv
560.228 58.6958 562.453 58.2769 563.84 58.0825 cv
567.356 57.6313 568.066 57.3735 568.518 57.0186 cv
568.518 59.7925 li
cp
f
589.904 62.8569 mo
601.645 62.8569 li
601.645 65.6313 li
586.775 65.6313 li
586.775 42.4712 li
589.904 42.4712 li
589.904 62.8569 li
cp
f
616 65.6313 mo
616 63.1792 li
615.936 63.1147 li
614.741 65.0825 613.29 66.1147 610.581 66.1147 cv
608.097 66.1147 605.097 64.9214 605.097 60.8892 cv
605.097 48.7607 li
607.936 48.7607 li
607.936 59.9536 li
607.936 62.728 609.354 63.6626 611.193 63.6626 cv
614.773 63.6626 615.838 60.5024 615.838 58.0513 cv
615.838 48.7607 li
618.677 48.7607 li
618.677 65.6313 li
616 65.6313 li
cp
f
637.321 65.6313 mo
634.482 65.6313 li
634.482 55.2446 li
634.482 52.3091 633.644 50.8252 630.87 50.8252 cv
629.258 50.8252 626.419 51.8574 626.419 56.438 cv
626.419 65.6313 li
623.58 65.6313 li
623.58 48.7607 li
626.258 48.7607 li
626.258 51.1479 li
626.322 51.1479 li
626.935 50.2446 628.516 48.2769 631.419 48.2769 cv
634.031 48.2769 637.321 49.3413 637.321 54.1475 cv
637.321 65.6313 li
cp
f
644.676 53.8896 mo
644.869 52.5996 645.321 50.6318 648.547 50.6318 cv
651.225 50.6318 652.515 51.5996 652.515 53.3735 cv
652.515 55.0508 651.708 55.3091 651.03 55.3735 cv
646.354 55.9541 li
641.644 56.5347 641.225 59.8247 641.225 61.2446 cv
641.225 64.147 643.418 66.1147 646.515 66.1147 cv
649.805 66.1147 651.515 64.5659 652.61 63.3735 cv
652.707 64.6626 653.095 65.9536 655.61 65.9536 cv
656.256 65.9536 656.676 65.7603 657.159 65.6313 cv
657.159 63.5659 li
656.836 63.6313 656.481 63.6948 656.224 63.6948 cv
655.644 63.6948 655.288 63.4048 655.288 62.6948 cv
655.288 52.9863 li
655.288 48.6641 650.385 48.2769 649.03 48.2769 cv
644.869 48.2769 642.192 49.8574 642.063 53.8896 cv
644.676 53.8896 li
cp
652.449 59.7925 mo
652.449 62.0503 649.869 63.7603 647.225 63.7603 cv
645.096 63.7603 644.16 62.6626 644.16 60.8247 cv
644.16 58.6958 646.386 58.2769 647.772 58.0825 cv
651.289 57.6313 651.998 57.3735 652.449 57.0186 cv
652.449 59.7925 li
cp
f
674.223 55.6958 mo
681.803 55.6958 li
685.545 55.6958 685.932 57.9214 685.932 59.8247 cv
685.932 60.6958 686.029 64.2114 686.48 65.6313 cv
690.318 65.6313 li
690.318 65.1147 li
689.352 64.5659 689.189 64.0825 689.158 62.7925 cv
688.964 58.5991 li
688.835 55.3735 687.513 54.793 686.19 54.2446 cv
687.674 53.3735 689.416 52.1157 689.416 48.6963 cv
689.416 43.7935 685.609 42.4712 681.803 42.4712 cv
671.094 42.4712 li
671.094 65.6313 li
674.223 65.6313 li
674.223 55.6958 li
cp
674.223 45.1484 mo
682.029 45.1484 li
683.578 45.1484 686.19 45.4385 686.19 49.019 cv
686.19 52.438 683.771 53.0186 681.481 53.0186 cv
674.223 53.0186 li
674.223 45.1484 li
cp
f
693.318 57.1797 mo
693.318 61.5337 695.771 66.0825 701.157 66.0825 cv
706.544 66.0825 708.995 61.5337 708.995 57.1797 cv
708.995 52.8252 706.544 48.2769 701.157 48.2769 cv
695.771 48.2769 693.318 52.8252 693.318 57.1797 cv
cp
696.254 57.1797 mo
696.254 54.9219 697.093 50.7285 701.157 50.7285 cv
705.221 50.7285 706.061 54.9219 706.061 57.1797 cv
706.061 59.438 705.221 63.6313 701.157 63.6313 cv
697.093 63.6313 696.254 59.438 696.254 57.1797 cv
cp
f
715.77 45.6968 mo
712.931 45.6968 li
712.931 42.4712 li
715.77 42.4712 li
715.77 45.6968 li
cp
715.77 68.1147 mo
715.77 69.5659 715.641 72.4048 711.447 72.4048 cv
711.061 72.4048 710.673 72.3726 710.254 72.3081 cv
710.254 69.8569 li
710.835 69.8569 li
712.512 69.8569 712.931 69.6948 712.931 67.7915 cv
712.931 48.7607 li
715.77 48.7607 li
715.77 68.1147 li
cp
f
723.188 53.8896 mo
723.382 52.5996 723.833 50.6318 727.059 50.6318 cv
729.736 50.6318 731.026 51.5996 731.026 53.3735 cv
731.026 55.0508 730.22 55.3091 729.543 55.3735 cv
724.865 55.9541 li
720.156 56.5347 719.736 59.8247 719.736 61.2446 cv
719.736 64.147 721.93 66.1147 725.026 66.1147 cv
728.316 66.1147 730.026 64.5659 731.123 63.3735 cv
731.22 64.6626 731.607 65.9536 734.123 65.9536 cv
734.769 65.9536 735.188 65.7603 735.671 65.6313 cv
735.671 63.5659 li
735.349 63.6313 734.993 63.6948 734.735 63.6948 cv
734.155 63.6948 733.801 63.4048 733.801 62.6948 cv
733.801 52.9863 li
733.801 48.6641 728.897 48.2769 727.543 48.2769 cv
723.382 48.2769 720.704 49.8574 720.575 53.8896 cv
723.188 53.8896 li
cp
730.962 59.7925 mo
730.962 62.0503 728.381 63.7603 725.736 63.7603 cv
723.607 63.7603 722.672 62.6626 722.672 60.8247 cv
722.672 58.6958 724.897 58.2769 726.285 58.0825 cv
729.801 57.6313 730.51 57.3735 730.962 57.0186 cv
730.962 59.7925 li
cp
f
123 70.5005 mo
0 70.5005 li
0 0 li
123 0 li
123 70.5005 li
cp
0 0 0 0 cmyk
f
31.1816 42.4043 mo
15.1797 42.4043 li
15.1797 28.6885 li
31.1816 28.6885 li
31.1802 28.6797 li
31.1802 12.6787 li
44.8955 12.6787 li
44.8955 28.6797 li
44.8955 28.6865 li
60.8965 28.6865 li
60.8965 42.4014 li
44.8955 42.4014 li
44.8955 42.3994 li
44.8955 58.4009 li
31.1802 58.4009 li
31.1802 42.3994 li
31.1816 42.4043 li
cp
0 1 1 0 cmyk
f
82.1162 35.2949 mo
82.1162 24.6387 90.7549 15.999 101.412 15.999 cv
103.784 15.999 106.057 16.4287 108.155 17.2119 cv
104.209 14.0889 99.2217 12.2236 93.7983 12.2236 cv
81.0107 12.2236 70.6431 22.5898 70.6431 35.3779 cv
70.6431 48.166 81.0107 58.5317 93.7983 58.5317 cv
99.4033 58.5317 104.543 56.541 108.549 53.2275 cv
106.341 54.1064 103.933 54.5908 101.412 54.5908 cv
90.7549 54.5908 82.1162 45.9512 82.1162 35.2949 cv
cp
f
2 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
118.043 65.7446 mo
118.043 5.32031 li
5.37451 5.32031 li
5.37451 65.7446 li
118.043 65.7446 li
cp
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.2%%For: (Jean-Charles Chamois) ()%%Title: (IFRC_logo_SP_CMYK.eps)%%CreationDate: 8/4/09 3:20 PM%AI9_DataStream%Gb"-6$[X/.EA%1fJc61D-]oXod\tRfQL2V\+XtT@8K4dJa2]PtB9o(DSVWeEL8<nTY<V^2"dbgPiG^*taqq@U?*_k36D74(;um0\%^%Z-.qt9&crHbpJo>d%*Rsn7Yq4q`98QD,1HggoZp#Yaf!7O[6VPsPTF^<Z3F?=@1Whq>dZumtkSSg(JYF"RekM+8#o(I7@\_:k<%5G!82GYO$QaWHjN=.AY*Z`D'a2q`O*T@RAAYHF2SS*fn.DUM=%Uq,LNg&:4$o(2bEQcnd:PH(^G>^jr=IWnG`5+_9$P5OS@ip-M`%q4)CV00d.IcaW\rIa*AW=Phk2'o3&ajNTpdj)=,T[s+<W7R2foI$.:kRXVr"nt5Z7T+]MsO?,fC--i[]Q]fE]du+-ip0mO6G4F.t%G4[GKE_Tkfo/=nIeQgi*ZgHneFXX/cJ"1u!fR>U_`AsWM57rO6[s(g*Ek+)m-u)oc!>GLTk3CAY[C(DF]L:cHD3>XAd#VOM([K[R%59Yg2T:^N1eJFjM9e%?5rqj5LG0%Z'?S6b@<@tUDo']YLX6&/5Q.)uLI*=V@]`4l_Q`jK"GMC*mC:!p6T1UV_[Cj5a>21]4f#kXn%P^R&V'nR]",gk`8Zmb6TigcL(9i4Yh=&$l4.OIkk9WP0iM$_V?r-#LG%WZg!>2O17hhWsL?X8I%So!k%XT".=WiOp^lhYKsp[tn,%lUJU<H%36WrbfE\,<95g]cd)dF1Js[GZ&c;k>r&4>0`0:rsQVDMs]il*VHMYeNGBXjlQ>qV#B!+m;a_/M?:N%=g#Nnr1<0PY\4@V%U+UA^g]Xc4M:?oN1sAj,79aP9dQgR3!XCCrlBYW93VA7_[]A#\ouG"mG1,!j>s?rE/jjQVRq^=frM5ANP0VKEs*FPi,ZF+!mZqXj%!d3T"B)uM6:Hs1L7=Fi`qY#6?,1a;Vn2?Jj#b-rYXA9XV$fZ0^(R&2Zs#c^_]gI"hl)-*&J(*?U^;p9F\YYT<I[;@pQ6j82V0kEj%7rHH!1k9<Z]JU.kRKcS_F+/!dq]7G>&"&r;OLsr^eb=U2?hb^>o/WK+F6&k;nRXlhbkX95St@qNEhAuaqt[e`&W29KTgq_>YK1G8%9@Ba5+&JmLrWa/&A2TWjW"K"6$u1Iq;/bKJj@,X/5Mf3]r!uK<-c(`[iIB>r^QFC7ThOFBPRf1l$i^=kr#BG%5+l/*/6ilAiIAru%2&GP3G+hW&#NaN+"sH3]6N-C<0M)XEXlZ%Z(k)Poos5DLY"2mK&-(Z![?L=)s$A_Dn3<RB5Q!1:-rM7:Q1@eHaT*_Jq6;gkqLn0b%'##5jUuk!,-l9Ij>et7D,nTbP(t?hV'=C2FWO7+BrU<%E7(uM_iJHX7s+!E&ZM.%uXmZPYU]cftP@9XiP;Z5iOs72>rPI8fpb(&&%f;2a2)^r02Z+:8/J?mT,]B#=InfsAlcP1)Z2Ab3UL3*>+q$k#Cnmq2lD[ekQp_77GUtaroa<,F-)7#hT>1pD*g&Vm*-]pK0_e:oR%X^&[m3M"@h#JW\X3rLK7q%A/":K>M`pan_`HZ^nhiOA`lXh9GHo$_aPhK;kBV`uOVng44"T@lop_f,@mhE*lcPjhn+cHbK6r0Eu1%s+ij/gYmWr=*_86q+^N4Wd.SXfD><bKE"PPqFPnZ[AW2cfmBmAg\Ih<am].4IlI-3R(QFTMLIY(:sOFa:&%7'nQ2nC4\CehoZm*:%VfgCY;XSW%8+3;Q%B0=Jp6EdphfU+78aZ!ohrV%lM$DTb5k=rQGpV?7>$]e<ns@%@CS39)hc0]hQ"O&5SW\_Rc[5IWFYDm2n8!J.%S'S%ui%]IB3D6?$?-r&Hp9\L;ijj"3s5T%;IN$Z(-N$1;hC.PiEJE83#H>pCc4@R>a)]fkiBD],XjjuN,t2jK72SC)(bBSR7K5!&%gF,NQ$O:;8DEb+X"-C?^re<$W:E7b(aZrS/A"f9?K5=;W,g[M%JUdFB52\V4N,&VJPR'.*X"\G1e-j;o[Rihl(2$'?FC$!rb7";?%MVpiO30)e:LGF5Z#"Z>pTKf,RQ]OI'6$GB5kOsX:Jm+CFNep]c2A%Tiqs3]WU`Yg/*;tA![B^L?gZLafR1+)T?_kBC#9()<*Un%V%K0nZ\@tAeGYLh7BX`Yud8a9+8.8KG:NRg>9l#-h*h49]=B3?A"S`uTipONQ4%Ai&CC)S@!I\V;Vhu$LggmPA;\b1rl#B1\U^`b<%%1$ecfl_7\1V&'CPQIEPm\&kK;rA;O0m=$7BNgA8RF7'@Q):E<K(OA\7D,+2K;IAW_)0.@EH*f,83VnOAK]k'gFu+aZi?:on!/@]n%ZT2Q5?>rI:s*<Ob:bJ2-BW&U@9T'0X'm?`@^5d\amW4['9qg`T0gi7l7#r03duL:3OPB(&HuDkdlNa-lJpriJYr7m&etY[>6P#Hs%MAFXh<O(mpqq>-r2+K0cju7,I2fPG)8:Ql\,LR3t!+R7;f([t6R4O"TaZ>]+Kb:$I<>U1@\[3D@-[nbYRL+4lkGGNFX-?sZAUmC:%A,b(ICR^i`T!V@QoMfOnc)?r>j)=-Adu(.Q@m+(O;-<U(g;P`_'iampkmD<.59e=p^9fWb`6jB3Dqp)Xi<JCtb(@$heC",cr!ln:%Gll^GKQ:h,c>m+5+rfMU\kD[ed*@.8pks1enm,cU/mm[u;pS.#,em2h4SPU@O8l1rMnO;#o]KOtVD>N8koLe;D;<`?mS"lMBPilQ%TgUSVQ&Sm3hSZ9BHJ@;m2<.[ndM+IB5S)U_@Pi1,(n7Ya_F^FF*fgF:Fc:.R'=/-Fmki#[MqNklT60V\nl80^[d^@O`n$SmnmLk(%\>50gMNeru#O=1)<>_3i\hfSQp2U<'0rQ]]Ro/fj$,,*Z(g?gdcMm)9d?sBnXY2CB,_+&tf9jOh[5juEgWe:2[=%Rqo9U9:]DEP8%qVq7Q5Mm%EC5j[@luW0SIJs*/Sj%S.h;$n8\ph'/hESR+]Ne4'0CI[jAlm1Kjm>hkRO53Oa[)oP<o5MUD7Wj*r:D,GYI9g7Hp.;b%jaSg7mO5CgKYLjKYO7\e,C4?\=gdX-[_9G(1\kdl\aoBhT0/O1bc--mEKp!`1T\>n$`A2A;Li1I-el6T>q#oi^BFE.A&^]>>[=I<%D\k?N<Yo6LN-t@GagXbSG(-jO/jk):[GOK1jkK*fS#b*,FcaTkjnWA4\%9(Q^3G!O\%I/,gZe:ZApYQ'NDn0Sh_))j2\D09A[/t>%r*ckD3J8<qoP1eJU`RDO3O!LEI=h^1abr*9RjF8FpZ@th?Q:6/=,Z`\45k:B''b85Qh4F\OsJ9sXhQ4%(ot@]5<PSP>qqbLU[Ogk%(RHXM[i])tCN8mh#EqBb6+sSrFcoNKj(7q^lk^Q(Cbg[c?D!>jd@YXGm<NbZT3(4;H#`8ta[/0Q4$,TpT?YYVcMFm8X?C@ElEfcW%,i@FKjYS$KSXuFu:M6RQVu:=rdBM;oeu.&4H!6_!)!:Frq<<8jT<Z)Vc.dM"YNHYH1:VTn4.i(ga9.gSAgap6f$2oO1TP0=XIL"]%2p8Oko96ME;mJ;n-RU9\ES?W=UctbQaqHPW:@eCs5O2*Zm%*es4aCgkgGaQ:=+/a<^$G:X]K:aud`lGflane8g90]*Y3JV786qRk%kNn&MgKAmOp2/EiD:@'QeWt("\s?%(k,^R[k09tfC&4]Bg88TLVJ=8NBO$a6om(sdT@WV&]LFZI]"5#5\umPA1gNhNBm!II<qC',%SQ(#+p.a(:F]DFQ<E--DbOb;+4>#aXX?7XfZcgM"CrkP:b-EQj=6@I^H2+:JEmKW,U+aTZ.iL0:WhM&%_A0UCGA$?nc/$U7\DDA2%FcEG-j[rT6kOL1%L<QVKEd268P+69P'4Eo[c7pL<cWNGWn*AYmA--ODFZuKuUqFe*q`7?;h.BF=r)`nnhe&cmLeSZ*`H2#j]=EZ(%l5u8(&Wt:/.#C(rZ`%Ioa\Sm3_2m%mQ\S[fc>8a.Pb5KMZ]$k*A+#pBLZRdmC&)K8WV)D%m&/d^l'#akNec?MSD-N);gm:YU:-6J%7%^'C:7miE7\;^l`7C1,BlQ$C9MLHnQ\QJ`ShkgjopPD-e)qu$8N:-mkZK+jC%Z38WV%uX9'ruBSXe!eaj2+tk:B,9/5,QXopP>k%U/.sga%ra3_b[C1Q!)QB/$3tq+:I:pIX9F<Wh4a&H'+/[e%mg^4L:UA`1F>oKW!RMg;25H*plLdmnocSV0sjV`Qg:;TmC?(&!-G!%pc09UVh8VGHnt)fiAhc<rQ`k$Si2$Qhll(<*^&!2.<cj!r^A`l"-Gd/*te`)6PYFei]JtdZE[4!hc9<TIBrltd>nV574)f#qH0kR%#K@eERdea-/^1[nZ0%KHMcp3e_i$LQR!9tCEhbfBLF/W?[nXjTD3Ad"5^J0-*U-,G`N8AsLXa_n2lOp03;]tS9a814*ubGr<4"AX%7SFacD*4A%4M9BUCP+8N`Eo4=T1Nbj,@e<En2B:8)&iQf%[_Ma`kkCkYp<*;0ft#i%PQGRbTc*$RDE>s@a;2l_to;qU#:[/\Y2*&%fGV0Y)7Q*qG!bLOg_`11J'Q7BM]HlG@LfgaZODe]1LJFq%gCQ([;EHp-X7NgiLEIlQpT0MP5+e$%;+*1:8qHfB-`0@Z["r_:&Urc%rmOe1RSePqV1*P^o'*++8ub`_rN<!rf2Fo(d9(K_A(!BZXeQ(PBrn=Kb\ApP]QtL7Ai,l`WTK^=g/1M01t^>8kd;E4\5$]_`0.u?%G>=n#8-V[)/Sc7^>8fYO)F\9qR\%s+HCdtUE$QDL%C\2(]3+OeZ$]9`nL4pjkL;L3#u+"OF\Un>9B14lj7nSQo2?RZc`,AQP,=D^%qjPP'2OenQWAu2Ui04Y&F6ZJ[`2k5:TdI[N4mg=J3$E'HN]$:SF6[Cu`31GEUF+0Z,n$Lr94UL-aXL@>k8?<',a1n;@MkLd<%B_8%W+[r%cHaa1'QUAhJi3m\+OpJGpU0%:0(1lK(A2e8jk@JWF,+WR\od/[^*?8e7OJ]%2g!i^bD+<bh:22H[!-8gbd:T/0$.DHpVaED%L>J9j3ppk5feVI6XI$?mF=bs*9/^<"dQM4LLQ%F]j'bCbLNpW8,+ik)X]b3<q^ouUH9ffi!;um\@EuOer;k5)pPN3-K7\G?.IKk6%4;na\Eb@[^l+,!1e',["iQN<h14Yu*?uH$$M/t"b`h^a%dbXHBlEfB!NnigAr9"1=o5)?f*cmj^cX[-m\OcY\r@[\(ELA%q3V+;5%ln?s8cLQdl4Q\&)"32PW!+K_.[I$m;4u1csJU'HA*fi>%HX5ZJ?mUlE`?[+6.K3lL0mtdDOJ.?\/S9'3,]eLG.hHYn+8]_`BC+q,%?Y*U8Z$asN0KW8,")=i"rp#5FSUTZ#rEKoR1JDNZ@qM/hI/X5-c;3<VBi#;a4CQ]J`o[F5N)MViaNVH;N@49pYf0JFeH*:WB%mF=%8';YRfcV/O8L,<@F#HQafdJ#M":n.ZLge+H9$(ZP%$d9@'ppL'Rk/*WA5(V^gFb:j?XU^?Z5#`M$m$0BOm[g<RZd',8qn`ll=AfA%e%s,I,e/hNSJg0DY]rprl63bE&'M3LRt>LMP3jAo68_t7c)Ie.G-HiZB%RD/7l*&bjq\j@6O=9I%dAuW)bhUt:6c6Y1iC-[C>"Ce%1F`Lq_6,Ss,KMoU>T?giN^s!dYuKAs@`s9r/KTc%i+gs/,-re`L1KV.)9+QO'*_^X(,J%R;Z!LpbKF]S[C4Sa._L=DVH'fHeQc)!%RCArKaBif;D!J^UY"$#^gWa[re(ouW=f1o)=n$%@Rh]jb]NOfAbH$>l[Z*4\fUU(5VH9hTg\#13Rr*)p^"N-liL>h1<dq:Ec-eOT%hlM74pW_\VRpW:HDtfa_?Y=-OS,$t4^_ul>kC!@%!mD0/:V_>Yo*3?2*<L9gbUHAt@!;N+q=nKI7>iD4E'*_SG1(MrYtl3/ViC*j%8r'gFoZ%AUZMj*AM%44-HYZD<+YWeO?S8ogj0M1LZI2f;b<m!0hOYI%Vb3A(]W,^iSOA$A/F<U64<?5-7'R)Bq2s&n`Wd:gAVfaK%Ob!X&8sAN7_Q$7!*AJ7>//$-`[C;7"j-KVaBQg-/8U.h*7m%[d)Lc3b'Pgml8[C]or"QJ3L'cgr&2)UJ)%XP=[#;oMnK['OCIfJb%`Di2/?-HLjn\l^5YmAS!\/1cX:S)WGSoKfTiEk>]cgJ;e\(nk?mc?>#oSS!BaZ[Ar?;F@OcHk&gO*T0@C=4e7=MK.][^DeorE:-J%_J%l?-YlIn(_Q\5ONFj?%gt/c'+YM2lpW$K,'-"*DNRj5XtVninUX.8W2#Y;.eLpb)^OEO67.L\p4@&QVer5c`sNh=1,\*LBY]FZ%N%eqhbuXFZ>+l^8*K;%E(0P3i[E$R8?HMQ<8nXJ/[D$sX@PX_E9IH9RW[Uk>X&9n[gK/,nR9=[0#*m[5-SqP:SV?@YHCAD+)0IDu%PF>1!c:O.0n2/WX%<_1t6iI2flpEa;i]6kWhEC13#%966ZJD>Fp\`PQqA#5K)>UX;nNUT]K"M$`b<]tMSKnfj7"3dFlZm01.ICI)%anmRJO]eOkAQDT=gLM4]4nDG99JH]rN1Z"s-"`3Gf.Do_(^2MgNt'hM[7l&7]VNagb%.*gZcP%S(p[UdMET#b>:*sI:u<aGh)`Y6%oeQ?HF/q(`.2.lQ:+DHP4Pt\Z2rfJKPR!+,%i@)D1uo5Q$2K0[Ib5s5M-F8SZuo64YluJ<KJL"[G.:Ys@a;!m.;#8o?aq?A$\%of%ie@m=on-'3Qm^AYQK+V*n<<5booFDoL/57IPWZ9B4_3)RkOV2+V[l!poQ'ZHBCmS3RB=Pc--qbc$u,K9LtqBBZMO[TTC)G&Pqr-;%dEM+D8"EIo8jbZ/KZCei`Z'B@>(?-p*`8]Hmt@4idH&prrp^J73barZ0Z0@3Fi1GR6QnLG*jZDIicrJ78(f/K0t[/4S#C-_AjBu3%ioak8l$&^OI54$>&3nFb;suj!cGMFJg"aWGqT4M%0F\UY42G0rJDuS`9g"@7gCjg8j>5PM(H_6tA'%33Ci>]opbN=BgNg*0W3e_6%DP5]Skh>!5EboBFjF:MqH)NeekcKdOrn`JYRFec*-C\AJ\L!_HZ8j5#:NDl4"jIOIHg@m0<hJ#kQ$V2=R!3<!SZ:9nIWqE@'rT&U%V>bZ^`gZb^VeVZkW(#:;05fWk+Z>[3jI&'jk*DKH?E5)HM!:_l\bYFNTpq*\?97oHR6'WqWX!1mh"BU0#F@RV#R7J<rUrq:]ME[0%gRS#jI?,EDfS,BWG]i$YN.%!Oo%oX-UP[2NNT5lTBVKqe7hfEgS;qqYnn#qk<puf;,Z<j]%tfQH%VdgKW7Q!]Gr-SjL_t_n/F9:`%E1bfkD6&Hsa*;k$StE*"A^MV<&!On^E]@%d%[QA`B"F5W7<=`(Ic+X10_,CRfGWK)$U2]PbYiX=G_8@^YMp9'=d[jLo1$Kp\X"%P%<g\8JWn:S2q8S.4T5<-5$:l,>FmOR'P_"%n]t%<q0_oa7Ba,UE]91TNhW7P^Rf<Jf2.Pt@e3@UF3KIVgngMAkU)]%=f"p>dWlt]2%=PuO[Kg43(IA[bO]oRh+M;f[0-A%lV2#QPM>ibO2OT)K5_1t]ePa8JgC%t(3`DABg,_\ZcfRcBWK.9WjcjC/aR"lfB9]I\L6F;GR%500M/$]D\(nJ;sn;+6TaoOQ?3_63Aok-6:Op:u#%>-cfD:$l>grn]:*/j20Ue:leV#A8h'n@S>NlqeLIQQDY;lGE#<K<mpNpo&n'%8@WktHmn@;LtE6V59&tp]DWo;(WeK.al8mIdURHIcEINgBj]#W/erT1S^)@c[P!tcbP'/j*AMPWh!EY\I+Ej?Wo5jlh-$-$H'kk)%Qt.fre+!"L>G*b]73Bgqm*<]=cH4T"$,cE?Yrgb_UXLle%q]JPr(OO45o!EA@\Y_c*)@@m#"E5@`Ctt#Ln-DZ&]8[&)+%$CCg_VX%Y!qD5k3"o1'ZOSsAcpM1`B0^EoQ7?T)+U5-5KIZ:5K%d`?aK@c0dc(MMq.YMS!itOfVJFU=T6W&/GBQG/rmrk<lFGkMk!NdBA\2a%1f[T0pKnt9<E/\jQUaunP^WSnd<'Lfqu4d6kru7dF<fC6&rue`_86n8YTSJVB(\ZdFKY3iCC5E[/D1X4I30*nm&4(F_p?U<k_%2[%Gh(8^0bR(U@pXP1MQ6KQmf1PbLklNIGg[@'g;4eqOXK6;A(qK:dWm?KPh&8b'[gOJFI*e\j<cb+L5)7;\rG$_D,kTh<1GM_#U-0<%:6^X"ea"1-,E\ie`d`>T[p366ArA6dE8g7r-cAqBHg54jfk4)Jo$`\:6h2Ht_eY%JiO*"j%0G?,YK6Lc`lV#\auT9\;AWE1d7+bB%.Q^l2FK&!nSkP(jh7%$"j[g/X6m;4trUD]>e!Tne-76c44c.%>./`\#AaqUI4BWFqU@;\r4:NZ6QGo%94BWFq_o\*RnK\H;QGq<l%o&CW`Sj_O/'V6k6Vr?^YZ?R"9-d1L`3-he\Sj_NjB3G/skU<krAX_fTOg)!U<dd%>:#B]D3m$F#]VsirPl+pDU71dI$1YKNLS1@g%lAKY67_m2j5Q14kQQ.:=UOP*feaKENhIUAkn#(X<]K*e-ArN;*!WJ-lBFjUIh.:8HJH$kPh#[M!A*iOln:*8^&,u$[[sUT:oC6^m%YX_2Tamfn*T1n;KljtVRk6$uIKQA>X]7.l/q;H1hj#T?OlIj6rY%./$W+O?cmH>J=ljr=Rm-pUL6b;+?AGJgkp;T1Dj*ec6[c)I0%Z/9MjZ*>=@Gh[8OSN5Qn*&^.(gSArsFiM25(@1bP`0fWT'CY8t]>"6(nB@Ma*mR9::J$Vn8e:*]o<YbLf&XK2\G.hF,[!oOWGC>/%3jsH[pZ"@.)*(6!UsGhY6D&P/I\*V_D[>fIik7EXpU;oeF#MInqjVo(5)`Z,)`7;\#!]?<FjT:(&I1SgC\Z9jTJD#nr)i"JDuP0s%?>%qt&_JH6qo+)0^Le^BYU^([<&m$;Y1B"t;K!ndUZCEejEdAn#fk#O3`k:GIAb0V.4MBjs'+`u^J8Dp%NH[Zq,??H4hir-;gV<(%A)qr!S@?ljH0$a:E0/kCT"@)-r)n'2*jQ_[PN0apSaJJdgY9SrEq,94Q/9aIW]\c+O#+J%D5K7qFaECHUR/'IHF6qZdii@MOkNL4%:[<++Uri8/Zr4(tbOnai4(iH.2kY;>moc3O2Ws^IZSOa9Ee[L9_jPSJhHO%FR>,T=H_MlQF?&9fo`J3?QIsL'i=;aGP*OkZ:6-Ca%lroVa-?`UNh@=_u1R2*+%=V**hb`@dXiPZ_E>dRA=%,'deTUr$hVuuKSM$Jin004[Sn-6NEAN)0XdpbMk,06A'2DoBqp"N"A@oCW%b4H;b4!;3+:E*RnfBG.pG0=.#Bl4]WSBH\TAU<U2^N`LDU2^($Mb^Rc1N)UL><<VP%a8e;Ecrs=Vru.nrc5Sh6/Ba,kkj;3DV<<l%DTQU1d2dE'c;AJSa1,^&3Gq;OFF]i$VZ-'?_'@5ObB0H9nOj%4c6g^E//B5=>i8ZkB[k9J\R=pb$"_f8P/6/p%?aZ4ZD3]pNa=],%UK:7a>0eEOq(#gi=h2e[OlL;K1VN]ojtAmMZ#[.d=h/0kQ,12`Ed,jQ*EY@*AEjS_*N.KuKQD3IH``k"o\=D7m^U(HT;!:Md2cCQ%HCA`Kf?;m!]&Q9+9^doLkN[eV/`]N+]aFHigLL"8HI6NmYBSeWIJ!$o:7GN-^<-Z"O/ddc0i:>[&b-:Jp_@Ti(U.J+DID4?rS#*2%f<Th6Y=4e]4mM=?Cuk#lmc]S\7]p%?r4Qllle4F-\u$i`BBbt&O194Ic\6.;EoYm&P0j4s]24sp*A0Eur4,LN-%nLu;,m#Rr/_0p%hE(AU57,3fG-"X,h#9XuYXTbk4?Yc3]">'\KY)f3j&=RUU'lQWG2mGb/0&3bO&B&%;"Bj$*GHCo$]ZhJetn(64tU"Y*%h^2<sR&R%9C$Sa3lC*);PVH\b`Arf[*'\,HS:H8GC:`P(HE)VT8>S<5Z3h@3$!)7$;&f2nKj?$I#DNWAELUA,f>jPHBD`R(J3ofmF'eq>5bXG%_VZT`prhMsZgV$/b'k2`*j4ADIOOT$b'eKJo6[)$QUUcLh'0W-#C^7Q(AY@&n1/jpaKPPn?eN%[IdI[Db2+`@COb8Dp26""qZFU=%-j];q3d1#=O(c%N-\O^%)s6*,***r3Ek0u;CSP!d3_VX(Hl9]KXGK:d7R"tKi$5_3Pp,2%n)9:dSFQGK4//h:T+=YZ;o7.YDq<7D%X7b:`rVFDBUUg!k6h^<b^6J3Mq;Ug[\Qs\IH2hEeh0eC_`H60NpX*aSdqgCcj#Y>39"h=8haHgZFEgqPq7!j2qA];&5:H'68N$<[%nu$u`-^UA&DdVejs#'g7CsV<^J2p2Br9!YGRSeLTN,!.ApLIIum3fY[\DJEI3UJhF9asCJI]`C&Wgsk"Pf1TY0ha'p*=]'*Tn6>)%ZkidIoXtJ563=,XpK5iYP&d66^Y?JifXkprSLa!I[h4QLVlm&3!)lR,.WY)\9Di(=-B1HrX%d`HnSVEpbIHg34Z$F:QYO!E/EpGD%9c4hR=HQ#lIUT?_NAPO^gUQ'7j0h$dHRu(-gXX8%\&;bSA)a?ps(b:+n(h*H=K_=8`Wk-Zg@47s`C57aF2),F6>L\Nr\sZ8#Jg>]%2k?FcU1J^b\6-4GHY!%hXTX0OR$+9d+S>V8"B&/K`ZY+!K2`j_5o2fY4TQ^W:I*u("t?TeT!n_ghd_b"\nMSImkKXaM7b0ck^*A/%&:$!d]I/skl66LZ2#q&p`*<3KX=HUZ!1RF?Gul-+">7VXnid%?-"A'C*rquE0p'$YJE/L`;R](_3Ajl0ig<Ub5tQYpV5-UXOt_D!%=sGFe(dJD4&X4OLTTiP;FaY3+%l&&+iZfR;&>59]#Y5S++Jgmp8O<c[KE`Pj8:cFhA1qE#6Sch.gES+<:oKWN#YG^6:dSn",maZ%%Tf%FbKE7;M>B!dLl>*PC8pgc;6Gu,<m1GH&:]dGW"s=YS"@rh.5Uo&+&.(Q]=IOIT&km:#8L.aON$cIs(sN[19o*56B6=9N#r.Bd%$m>*W+KeV"[/ja"WHqQ+UcO+6PSDCK%<.Vr_ATTZc;IP"V)X!>Jj9c[+akK5KF6G+&ckZ>#%1%p!7QT%Qr"EgjB[<@Pc7uG8CJ&2%+>&2OPS?m')8THJ$E#.>E0c[($.0?P-FfkT.F"mIUKX>:`Mu7<No3Ub;`LU6Jhr6ZiKWI1cD3XX';?^*(&U*iG=jY#YBA[oEAaCr%g)W21!A,`(<2sFn91f5Mlkn*4;EuBfL=6h;]1NG@_P[\B&O"^&S\J<b'ruh?LZ#,RjDO8Om!H;LMN)K@'Q]Eqjs7/O$f>%&`7T`C%r7I<#\Z2VGH::J#eb<_(47otHA9l2C/DmLa,/\E6LN<8UQ=dn(NSq-`XR*G::S[nal8"M<iuI%d(;$eEX)5VT+(.ZFSBj9_(?KrZ%[8=-O7;t8a%e%FR1TV>SNN.SSCILl<^;m%hq2]6P\<SZ'=P>J]'%;%Fe!Du.W.YZHp1hB5l#d:;&(Z*[#-UKA0(*.f?JftIdN4KX%UYF^N[>!@tQ/R&uS^<r"=dRJme.=\[,8+PE5+9X,npgHN8_SbDq;?B3Wj*!)3^GH5nj0%jkf8?>D,N<]muW(sMC#!_Z=(bH0i^66%;hgi].)9=RB9+[%Bo&8.E/b1^R%OrTP0b6Vq62X`GrS:VR*r8u9,'st)Ks:A]^Hdl@U:.VCSCmMFS\Ni]Gc?\jWphAR)0e@i$2h%%;_hk*@r1o[)ufO[RB_<V9S!]hb-2?K%7EQeic[oCg"8PF_Ul'(Tq%lp]$:*%o'UB!X3U]ti)@bY-^.!Pi9qFVF.9k$D&;0B[T>c8%[)Vm9K[RV:l"`!GguS,=O$:cjk38CIN]BW3DKLU<g#,FY_>WVrDUNf&\==lHBKLfZ!_CLg2f/o?)=&U`<DCRs+Xb7>#cbr+T*qTd%n/c#4N)dh7_u++0UoBcHFXXAS$-k:PM:>B??qMOg-R,5iQ#fA&7.kM165!:iEk3`>W<p,0ieW7Me?'/J*`9aYl?qD+XEdYVdB>#n%\s3?JHX%jZ<h<$/>l^q($-6nTp<=P!q>4l1<>-R[Xb&df&is)ga;\sn]Q7G%PBtpuIA!^5p2*/n9j%g?/[sZFcQaP;b,Eo1AOIdn%5kV4Q$In.rjV>]WY6A(r[,s))C62CggpCqK*@+76L5HV\/.OOcfjce;FBZk2>#6f-hEGru>N.t8I0,<XbVT%74_:\:GZr?L2$Ba+%A?`1-!P(u!p]pYRS31G+YbKSA52pt+F%lZQa[;*A"QHi7;.3gY8"HVtlDT';,o.;CTtM[H\"l,T&O<:;40DuI$F?]0EP+V.$.8;F%OT81fCj]q+\n0T^d:/faF*Hp_JTiYL.+7U(7kFpA3>G"WnV%_5.:!!CCa=n.(Zpn8\4PGbjLu9n<DMb<].2M\L8d13djN,b/<<LG%TP@5@#n%ZS%eTfH]j[cHW+oV6#pZCUJqYiJ(_FFm'OS[+2J=:I<6"S]6tJDT<5G@@RYDHe3lY1l>*kUu#HlZE4Z_')K3!`H$C[7n%)Hf=A;i.6rGp!D^8ifpWT<a!s@gk\E5^g'MEWEaPb(6FO74Q2BH@r0!#)Jd_FX+KUnZ$D'TI*Rsf2=^DW`8=QO&rT*3\3oOW7n%b%-)AoTa>f7d)1Z;Y'>02(#O3XpkCp9?![Htea?W`o#n\Kh[TIMa(K[FB=7JgN<HOqIS[#&$%MY%f!=fh:ODr94*E.uOe,k0A(Zg<Q%GV+?f^O%sA0<+&]g\!m2QaUhqD$"RcDT>;`I/'LpH6&AUVRf$G4q\U^7gW&MFJd_*'3N[17+EijJT,A4WiObPBtG4^.U*n+ii:#V%3aJD:F?.H#(>[>%FVq6-D<=6Q&K]"@gh<7IVST.28/a3<HSEUm[:l28D[[&,!lgfi.MY>cgm:*0C/mhm(=DnY8gATjRS+lj.6flN%S^aTO+?,-#__'OH7'Ik@g=i9!bJ\.1L:t-3`CTSSk^u<dl:#G"FFqLgMhI)EW(sj&eC$h3Esi<X.q3e@/^[!Q?U7hi,o^<1*K+?-%a6Je_8\.A8@U]lP`?q%e-rOp3C+MX6eRHc4#"iV[<ZTf_cCM%p(UQSrMO:7(5\7fW=6\Z*LBna-OMf"9BM`2WA>9g6p+qbGOg4=>%#m<1f15%sEah(rNomMNcr[P5!5WG/ke>m@B<G;Sj&QagK'euDu!c[Uf^!`oC(b&<57i=<s]<kVUFr%U'FrmU)<8fa7F&S%m2V#UN%.E4K>PZQD<?dkel9==)i1oW"b7Qce_oeG7)g/hdVgol::hmR%W5/F)h5(UZW^RFA>@pl'q]+Z.JC4;Ai3j?@*?Y"\f@81./APH"+%Be;e1#`l*".P`oOfg^s$LRJ7#%nP\KT1O-_[P><[2_1&r9=nB2@7)k<e7=&=/F3Eg=:^]`<%>8#fd:/nNZ>:0mrp@`L>SK1'+9al%6)k4MfNF<bQWML6lQp#t<pTDkf7r]==Zfs:;N9c34%=)+!HGn!'3?XF,]2FR(Eu:>6qJj%3diP>$<I'O5+9D15U2c>k\HWl'QTQ2%;G&02l0E47$#ss:4GMRZ<(%HM@^&ot\`5EM07*60C@i'1HPWHsZrDk1Cj2'MN3FS<F]<<=SedU\Qmo@41,elN6Xc*&#`DMkmE*-!%]*aMTMPS6\<GBI9@`H>>LSVt&]0(ik'H0fi_W%(]HPWG4HC^,X(,f%_Diff&iVlAGN&h^bDLPm%jYl^%cf-3q'5o=J@DV0UilBIK%dW^o\%AY#A7&m$XMlD_K2!oP<OZ%YGZ$q'@V4iV.?<:ack\_rnE]tGYQF:WfZ$m[Z,2Kq(:lZf8c=\BS*o2LM`V!hkM:`%4V_f<O%8mT=J2LX]D\bg-:.2F'e`LNakNG_!\>4/.)69m+WUl\nbWB%jF8!bS`TC(Pl53=uZm\DZ];j$fc,PZ;o5aXp6>1tbC=)(nNV)8Q!%MBUFRenU-V8OQ)Xa[ociE0/HT);-?ZS^PSn<L:K.>`k[!k4Peu1JZ9P)tY*,Gh;JTK/_L3`Jc\JX,'b.&F,rtW#&Hc/qD"?K,tD[%iBNO+L05DWpX$X%c'`ruBpfPm=.o![pRQ%X8Nj%:ABUd=+QK_A<R-?_L0QIclZ$g$TiA8+j<:r4lf(6#=>lIL_;[cca9$i#k^&#h%,?\9'1Ziq@-=Li)gXQrLD]T\k5nR/iJ<ea`ZB+X\Z/.[A'h2BmeLl?TpZ*CE4X4]M7!X_JTU1HaeSf.B`nGg=Pm4hc0n[oXQ[`>S%hI'-ErC*K>DOtfX<5HE;b'+be.do2oMFIl3&]Z=9/R49P*C7g:(e#IB33EeNGbFD:/J\^nG50g1,FqJ6E(reAH1%%$6")h'T(C0H%UU+$(:F^`!E0FYo9$?r[J<1q*h,hobQ7.;f]5FW.;c4/>DN1NZVn]9M5a1)#K@0fG5YYZISqZVFk+/66RPN/&MD.qCf]UeH4d]\0%R[?<>2g$h9!d=.e&Qp%&<FI)#.%Vi`WHb9ab*A8MTPM=eL%UTX"aXSX79s0U?)i*A@u?FS;(5(pFdThAasLs[LS^iMlXDTsPTWGa%0bP^si^cODS>($<j[tFLOG,-rC.OUF4eaE@#,+Z[4WC5%6mYH%RR3UQS3b%%35mFc@nq$m'QF.':f4'sq3WmZBUUhS;1XUFV.C,"%8m/!`&Z^(d=NLpC<fdUeDM^t#B6#`NJ6Q%/a*;K_-iB_,-lmf9L8prE;Ve"@4!TRpCt>hmLZP@\k5'VZfMsJBfAEJ7L'f0iBX^H3%'2-?'+k&SS446&3T<\1X'<#31$[?U-5VleJMnP^1AUM0$boC_,RsCr>'%Rno.-ZGN=q!EBGl<LR#$/[JF]eR9RN%\DM>97b:.-Jp%^&.HRNf"5:#`eERQtb,aMu2o4b"o8hYO$-C*N;0fI[8mEpN*eQ)bX.f3Cu<>R@p_9]V-sFGhe[)BR%OqXDL%$2sjmNq6XdS>"+a+%l(e#!moWbXpJjgO.2s0:,h)5s9A^H":FW5`\9?S+*NOq#BM0%9@4f:0j(n]NF>&_Ge*:XG=1hD18,3>"#*Xf*-`j[Q`TL9><E^$a%gqZp(I3.[%:"t#RqO/+5Bcmi*#X_`Kh,l]Uenq!Ac<aOkZ8pV!Q02XM9LVRKQP4)%G;GjS1,!9*(!0E8R\lLE`>FW$3(Q]g$f-do%%/DaG\n+h-]IEcb&KL\EN8Ci'jhrCU(4g1GbU5:oA0jmKF$2I/?'3lqI7eeL?d[Yb)!n9FV\SU+m+R=ooF`TQa]'l1A0PW*P580B%=/c5.L)%E=<e%JaID(`R'A7d6+kg.,mNBZ1ae3hG-tYNj)o&(@qmI&!7NQL@rUcI#]+-Irm1ktMUo=b>L1>q=TWs6(,&/*#iHI*A%S'!>"3QuY#pp%1Sf;OcGe(g(`LBrRAZW1*GY'V_N<8:KOSL\tTL\)LZ/:3n?6/pBp1r*Gei0:jD_`A]p;M`St=kf6BcL_#Eb<+:G%W@t1oUU3eF>3d[a#`Z!=QOoCAB]AV@&-bH&6R=W%]c-Jl.(Q1;8m/I`0PNg".q1[S86R521TB+kiW5%oKJ)cN5c8na]9iuYZj155%R*`^2krfO_"[kB5!>/Tq[HBj#<_L@4;R+3&"]2f;#7C*fg2ioS^j0;f6<KdOl9F\,g/jmp8+^Y%V>3:U5VPslP+!U\[A^4m*$IX`%5jM0.]nHn1=2&)9<5/(U*`_%'<dj1q$Lp5Uod-_tX,h/9,G\?^@C\89NH4]3>YA@eEV2%^<s)@c:IA7=6OO2&d[D1kI=mJ?JMP&f%JT8N;JS.@"%m1f<,Bu+[:Pef(HU>XUh\/*sZmQ\8X="i4ih#(2Tj>KZ@=;Q\`CHu`jl5%Vm>%k\=1FbIIUe9J@27:L>u(TQh_d8W%,$&oH2GVr?1o&g8CiLf@E4le""/X.t"*$N+qI!1L_<f<eIZ4sO-r`luNa'6]n:Ep/he*QVlO\KirIO=ZVO@'=b*E=(CXAUlR=8fc%8jO-`e%T8rYU@h4q:GtQ)>ORY4MlW/s(jZ^^+?0!^JRbHH]8V"?IOGNOS"S.</r"c,R^T%Q:?Z?nS8l"&#%BD"HpJCVMVs8iW0*!%H_rX_n/dm5*)9EMXK1%(c#Gp:6Xn/@d35ZGXC4NHonjOI#GP/oSgURba,k_ePI7Q);Z]7(!3U8c"m\J+njGe"F!slr2]X]u1:jiH%U!@G6XQX\a8Wl?6Rd4.CCio<7Vn(h!d2\ciq3tm?3C&RH(Aa`P/D[PQH[N#-i2\S.9tu!\.<)]GYT]=;IdH!N6@Xe;7Qm=]V_,jl%l[4=M;e[IIgbAUG,pL!J2U@3`%#`"RA9c'r:!dO4=R@++=GjAD\S[V'?5E5r.*\?*.7Zg.37b)SCHt&Gf$k4.!8[.[fqOA"D]2qo%mYF@=1@@2UG!\b2bWHkEN/QSXlQ2?>?qWRrUuLpJXr259"q-qj3+aU3&6c2K9\@13kj;!$7b([=H2tq(NWQ5bW`aMT2$cELS5a-4%*Q%#\*igClW,+&d@^+kQS-jXZ75QE>9;2U8Ei_mL)_e:^7tK%A9m?0%,1<o"C$%G$Va=I$H+'ZF.aVDf=:)c.lZe9(p&#[.'-&%/%IAh0!n!-NX(gpdr:oCFg%8*.*7P[GMd0ih$kZUd#K<_RlFjT3^$a.BX-4:48XVCJ#E!:[7/(cSZD*``j!XX"J-7/_tDp6ZCo,J`e%L[[,=>c?8=**Uik!npD-SCcd^*hXC5j/H)=?P>fL4'I0Dk3tW>6Q]5oYoK+<;a;^mD@l/lgB(kg_:qut*fkGCY=W#?^EeM#[<C=1%9B&>edS)=Z@!'&BLsYd1cT#o/E*QWmFrCR3L2;)N%-/"aUXN9'["rD7)0@!`?a)L&Y96K4S+8lb=Q3Xd7A*46Nk)8h\")]u%L\]2%/*kK,i`tQf.8L<=&5M'RSrI5:'1Yq.0W'eZfsRn$=>)VgY`>hRFp1RH&>%NG=?LeOBPF[he\hqA[PaT&6(P@@'W?*ZZ.L7S*.l3e%T&eoHddNlEF&#$'5siKZ_ms8LpiJY;0=o"KJb7uL;b7pK&7icCaRI+PQ.H;Bq(npJ@c8"Aa-jaZJsMQP:um$I)kU?n=&lQfj9k%W%(mHqAK'9MII\L`t?>DI\UMat?+.X8?rFAXWj=(/[3LTW;2O/)QmDK!T_QPq$^S68b@nk5%)mO[UYc`3RY6u(okU%0e0d*,\*/9]0%#8S_e&m`Ao*CSUkgob2C+Yhq,2I^0tWXD&f[2am+eM9`Y5..Y:S;8=,6-ZeZ[+g=fkN\Arebb6EaYN$XB8Vj>F,F;V;Scr(OV-.R%G!(j=UgI]R-Of^N/DR8JiY1/e"JnGk,;thRQE'#>No$H*YRRF/BP]%EH%QQKRB#8V#4-BoGW/2G9>50.<"KV?#f:LNB/'q>Jd^e1%4&mM*X:Vtd/FF'6N`]fPF8XUU>gF`5V19#4,RLE;#'ER%*N=W/bKJ*SEXtPi@Hs96eah41#<!^I=;I+1V,Z2Wc5^jI9oEig*ImOV%nLN:H-]P;D[rNBiMcKG9G>"[,Gs43+jeYkhBaSi0B9Fum6<6\@e^-dkCob,Ucj^@?qAC-sYfO6nDh(/$*VPJ8"^@fTfN%H\!JA<^%*.5l*%!bFY"gL&I=EC41eNCrhbKKK(SO'Re7BOSh;".nBE!*B0$=cfT+j_]1:2C?A,JoS:#;ArnEm=d%=gq@<`FFBd81GVNaY[#Q%XI(J*I(bse`,g0`+:Du3ci^SJONV5Zli3gqe4Ljt<P=<]Jk?4toa31?]SkSIZjZ,6oaA#&JSM<I6&ef8S(KHo.iotd1Vi\qf;W[b%_a>tak5\^qo%JEq]eff&#M@a,#'1JAWPcQ@jri/Um:jd3?ig!K1gG^Fi0?7o&O<b)9]ad.T$#\WW-RR+q?X#6KNc"kX;gHGUcJdN%QK2:Kp^,Rifs^#je/7e7fMAHNe"nuf!W+>SB7<2'@:5,N"A1(ID/KEgZ,DQi_##rOeZrg*MF--P-C:k`NWO,6%aGM705MSAbu&..%Rr<aB;tG$9j<lcnf;YABi6n$cJ@@.N'H4>ICQ8H2h)8"KKc3k<`L[.p`/#_2!iU]<,+\jZmC5(J'H3>OKm="7cT.DkJF-!T'71&q%XJ!]u"i:He;bs+'D?pd?KG'<C&uC.J[(J,#JQ_HT&GQUf1qbmW2&7<,Eu#s;X0[>&kInG729_fOg]`/-@s=W$_<]<N^ddb)0mB=o%=Ag>mJOBoEU&G*g-L8l]^aJdUe6T"-*&Qe2n/,"s;H5F?(pHThQ7^$bBNl1E%Kj/,:lgW!#+V3F47a:-C45cA*Ua-N3"U?Df`"h$%l7l[rLjJROnl+TCAdZFcTEL%;$[*EO"k3G01=1qR;2NKC@Y1RXQ_BQ7E,ca>$H-L@!m-P6$k8_\6=#>CjZXMdL8JB06<j`]Ei-Rd%/j][in&,89&aV;1-(ch54p-h!X8BtN:_=M9!SbUdE>bu"3cZ(AD%6t`O+AuoO;$q$002fV*^_0!LrEjHR4c8Vp)(%&=7qK]$n@P%%16C!C4F[a?O\-=[Tgk,NDb`[UYsY]i"7L-.@]'6>.Z!6gVh+,bY,4sHG07m?!)mDp(/=tqL\utWJ-tpSj>Bb#h,WSpi6<#!2=RRS%hH#E`co;d]obtX4[PG%[_-g9^?:0@iNg4l!=>VDs8A,3I4&Io@f>.:=9Cj(cNMfFgCENq^qUfMtkI*(B!LqlucFen/j*dtjf79V"%`.*Bj5QV@BX'S.D>MFb]d)qd*l88QEfr3MQAU8E(`)"a_@W/K7W_(pp#@9c%Z0%&D#0I)YW.%)aL1'($n2VPdq$kt_ei<7?&?012%I,[)l3_(KF"&:<040pPZe;+PMi]4ABXfZjY*R8ilC`Mo$WG6PJ*'.p"1WQ2i_uc/hS)4"]&*%UK\rt<dFW<FZK8hl$*L6k7lo9*S%pTMh]kUMVP;9,A_C8bU^TkdcNX5hQ8B5DFF6UtY$9dPZ?g7^lWjuC^lhO!Le!4>R^W8iDc3;"4U1gCL`)i3WO4\#)`kVLM`<mLda%MoIja6CbY7p)H,(lHOAmB\3IQ3ImH=)g`(54kKDi3cqZORU$/5Z*nOZf:`kY<*]aA@4W&C6/+Wp*EqfOm`fr`C$Elf^g#k0Zn-'>%hOF,`64R1?*jFO"gK^9SUpRNi%rK9H:7VW+]*sohFBW!o2?s5O0T4AL#=s,;`m+[09K%Sb%kSQq8tWR$mZ][AD8D](`I#Di--&Bj%HY>*%kf!kb6gLP2loh`8`2NFW7K\UZ&*T#4#f:ui7uH1$LDCB)T1Xn=!6SP\rWDrUga(DQVB:h(Nd8@LqIVImgtZ>A9_9Of48kDg%PqMs*JNNh[0.(mq\,?[g<B[oHj'C#`,QG\>i;HO&:*-NTK#'hf%BkK=;E<l/gYVK#POM`S]&6F(VpigNp;ngIrs?aSZ!n'm6uF3q%rZhG__#nq_ab#A#6ZEoSmr8\H59g4a#A"TYF]#Hc?\(Ohk9;a8r!co&7SKTqOVmkH9)6Yo.Bco5B8FY"PYsu2po&"II)5E,IIH7K%,_D+B04Y4(I/s,'`kfN)Or&XULfpHF1i?cj!egKnE)N!L'!.6DP\q`OhHg";BhW,@>g(LlKlhB-&C*h<^cj)thmcZD8)V)t!\$T&%E9RGma[um4;P:5AW.H7G#]cRA97d_NRInJP:LCYHXaU9p8;"3:5"UTo-^8Kos3pEl%fblIng3Rlr$T@2ConWL0#(&6K"Z-Hls1\i%*CF*;\`%aHm)%?KC<NGJ/fK<@<YuSaam,"73KD7d*F9-lr`&`k[3:Z>Skr::9##KSI?hc&WNst.:TXtFcR5SJif90T32D$lpl0Gq%^nHZTXSSuAZ"$d!`3[f;fD\K[$Z91$b3ukt&X1&4@M"!RS4lmI3T-&/*m@#*T4'8_5odO\Ho6M_8-C)c-?:$o9#\3CU_Oc,rf-hs%c[0#l^'^Ym7F^2bVq":JZM19J"saQ>R3Sm:c_s4^JaeC;n+s4Jj;g)XZUP?qq>,$&P`He7?7@6*4E0kp3&D^i0mJug9)hqEa0C9O%@uT4s([K8hp#KSi]sq7_i#O(N)@D\8dghReNotbnqOP=S6)an:[=;h:&f_VT8+-NZClj-*i7#O)(E5B>Ndp7jj%Xlcj'XgDS+bct%@2Z?/.ALZMl""NMWZ"WPcR29#0d5_[lR$qD',hADLc%:,d:-Yk`uX^J32S^Xe*:I8&G)(o/JHRbJ5XR:?,Hh+Cp"ni87j0*g/-rf%:Jikb\P1KDIbBBf!8f7X/OqY8lfP4/K..JCLc5;s'e@J1@m<djPc@d-_ZVHej?+sOYdW>m'?;mAXFR@g"*<6ROUJT?(5Wj$.e-"J%IR3V&etfBlA1;ggLT9cbBtBe06sE[6HE,_3Et.e3boQ6oDInq6XhsD%]F<0W$W\9u!b^[R9K%Y>JN@+`/Lk(*-qfDk.Op'gV:@U5%lY<4aCQ=u9\\3?$'![rG7:u%/g0)D\Au1/a77:?[Yh6te7l]9p[q+][F^I`0[&d29K/:AD8f'E;>/9Z#Bd4rN#IcRHP%=!)74^57%4i9%-]>42@2_IZkgesG;)Qeoe^$o2BLI1]oXL_&@At[keMNbL66EB/o?tbh"2ZZ:H+Qf-3a]\kR-7NVnU,**CWrPg=bZY0P7)Cuf%,Z+l3j(LlsI&f4?0Q%V<!lh@*&FHOHn8qib=d%VEN7V,VL"DY[laNF7F0&4k"Bn_`e5,\uP#lYH)ah*``[;lO+NiF*T^Iu;-#8oV%/j3gr"jo9"9MsLb%*ZXhZ4na=dOZ[b&#_HUYAAU(@YVPX@lPD8?n#3^2,'g01HUlN4>G+ZO,m^!H"hs[AL/P*jPJO&=/H[gp+'[_%+K!oX%1=O4dCq)j6\0@H=sjV11QBCrD"+ca[Cl$iMQ\="cRF"%Kq#MkU,)j7+[ND^a>oP6B/RMY/)n+N;?E.0+K"4j7sQ<e@^Yf3%P@Ps-,s';mU,tm)-Udj31u(*b<E1"0&co%]hIk>Xa4=21&Ed"b5_sEkB>jkQ-AG%:TbpVe#iT55A1Ed%-co4IHAI^)=YEW]Wpd0*%X<%nQ"Z7bK<Z-RZ:E)p)p,];5!O^kG6s5;-Jjjdb*1pF*g+e3<g<RJ';0s)\WsOl3bN\q5['dWHPE1"h,+QLg1?Ls:GuCa+XCAi-%iOtLr*UBeDYUV,o95f)M#bu6rBYgk3l#!MO'Ba2aDB(<=BnLCZ*TAY*_9T=-efS<$jEsuT(3B;=F'd9E*>d+g=F9C\Z2.j4:mo"f%G1i$sea^M"6E>#./4hW8C8l0&"JB-s5\%-Khf3QXFk$7O%T`rm^tcp)5V#7jEJt'4mU/[Xj%\(U*14rR)&h6QR)0P`cU!O,;LDP;%oHa`I?k#CQT7kX+9WosD"/^)NZVt$7CQX5GT&)(JDdG)3MR9kSX\<"VmOG/?/7nY'D3D<_6/<kV93.BeG!hP<r2bLeX`6,n[&l>9%bb0\lRlG(#!L8)[M&e4fRd,30`NE%^8d@Y7_:EQ\m>g98+e\!Hpeh/D>6OZR@+fU&7m$fMZ)lGH:i/Uu(F*'%EFJ(K:fKJK61A>i%9%9_rhMbU';HpoZFlfjm-\f8'gu?u8g/>.<,ilABJ30RfE_ReA/JHq(i.msb3>LA<p!08DYbn8?;'$_GgMgC4a2\mAML]kO6j;L"%:C3[](a)/$3pt`^[Au2m%Zt[c.4QX._/Z,a?1F@,n*/umUa@JkN-61%_2C'NhSGo&Nn&`Z3AO,d\\qDW>(Wm4@SNj:'<f],Kuut,%,g677Zf)4=K=VsfQl;!&_?'F3a7Xrp=7Kne`aBDW?0>H'?u@u>UD@2>[KiFW*4gm+G$tCliJf]"7WDs77!#0"+N7<h<pe^@(4p;3%T,($$f@uR,PP3cll6=lV*VZ,90Uid4MVcu4D;"5*A$lM<Y=l-r)t!jeYuoGen[B!s/R7Hdo0heI#fDf*\;9G&Y\Jc'_5aLR'.o5C%E$ecPo6DF9(-6olQtX==W[\Z6-T7&&/PM&\=D8@!-O,fm(9FOKO$sGDHY9(liVSms<^a6s7F)R6<Bp.HE7IZ1pEn%JhAtK>%*:g]%3n@"e03JQc/s+H'i/9!s?@laX(#c`Ob-ZbdUmuDb\`6s1`7S7SG3HJD_bUe+*GaV92jKpV/X+7uL^:F]0]Q]W?a_OHNe``"LiOja%S^WoT\"R0d*M<).fd]"]go9&,"pHnGjh6'nj)!fWB,ML6fp%_WcBrbe&Q?2QptcO/^a=CRU%H3k.7HmldED+'aC_s"^kXD*NW5Rt%H1N'3GuD*5FU@JXkX0Q3HeHO$bn/a'fpaA@aWqf,R5op?0=a)oXdBeCmu0Q!`_N.,r5Y+o5QnS2hAYAMO;`<(Gl'O_0&dI8BT.pf%39\#<."4/m"AU*5#NY5+7RVT/j]G$g?aQgm[]%>8WZi9QM90pG?s39)3$AMm.^DtRAedF;\J5s)'s&T2&.Ie`I$gstM_Ek,<I"?I%6+F$UKA"N6\LK:`Hf"VM$#i;>Dj;)"qg!4WpIDHmBBC2[(Xu_>#>u?Rl\TC9Fnu\)W>4m6Wb%N$T,2P%^J'2<G,#XHW6hY7r,um-%EG0hc`U8#c;ag&/Wm-r#Hm$][$W6*&h!r<b6ut1l_QtYuT4GamJE+._',"";e2#.mE$)7#,XWeT5IF0?e2$\q8UJSo#i["$^)EU>%_9?$,`\=9=0UOd["+lpmCQtEgIX%GZ!l$7B[SY'S7!m0_n2)/aZNCRBT#RfLV?bT'4\*]"I#4S4]R9B=:!M\Jb>*SFH-hJU=9[[+%H/asG%WP8`NZ4+I:3I6QZa,mC5e'o4P[Z&_h<ojRaMt5>Yqa!BQ]Mt@KM(A`Nn5*(iMI_]35.>XM1\oF<qL>^>HUJo7[2+&3chYn%J#1.(7XD4ldu^=s)UH`jJh]e4gTJjQR@n-'cR=elUIk+oAg`2e;@d.-(8"&.lReNS;RP%r=')L-?SBr50GK,iE\agJ>0HH;CS\@[%7ROR!b_2Xs;N`9,`C<dF"(`*?@V_MoAIZsU48.;F5?mNnT;ug%,]mrN/"/6n<dAK&an-O^c$3@>nZi#rZ_e.PNl&;`B<_i4H`P+3%N@FOh9"IX^kM&YohDNbZ9(-ZMi@MN\fA>I;V/OuFE,+"e>*h:\kt<M&A!aL'<VgjSf*RZsZg!Ij;S%!"7j_rRB&>SAeFs-7c#@9m%6ON]_hYC%hhE[s/Lu0-B+7pT??jYqB[9X&:bMVSHn1!A)>[8!*.L%kjUdWJZ76%p/LiRMMrO!.6f_."1K8uE8iRIS1P/;,@DrB+R%:+ebMElPe]*5$?2b.^l+04IWK``J?qL<=#+U5k,S+;u+uc!8,]^[.e2fOX>@]o5Ec(!#'ZS^"2,*9)r$Vdm3VeT+Rtf<^bP4^L2n%Ss$KAU5a`8B@F_S/VeVW_Ajq>n0hjAGN+joXUKSn"@bf"QClq5'Wb=iZV%K+q1#`pGiMF5XB'd/ZV9h^&IYqr^Q#F6B-5;V><0K%%`W\sm,pf;7$[Sum$osLekTYJZD=XhZ$ptWKJkY".Xd`E>Ck5Z8Gn;NC$C+CmPXf'hT>!p#QDk;fb#lBUY)Ia]MT&TPGtCU;G5aQ?%oC=Ac^1:(OJ-@`R#9pHoZWNHg8[1-M6'=YWK0WX/Y"RRP52ng@pj`f0bl*IQm@'\[^#W+M?a'`i!-@/V+"6/sjUc2FQ`9dcN&>_]%.Q1C.SWpdd&oRrc5dHk`r_urs_Mt3,";l""35"`OGRt*6Gh>'s;$YkX>T&PiL%$c4Bb1\n?@c'bRZ%.nH"0.95-R!#CQDq.RI2JJ%CKdMp0SF\q+^5@TET!dI=E!]UC2/A[9:=@el&<P);Ag5,Tcig#gsDfj(\MTmdoQ(2W:kX4"h66Ld=_p&JuK&Fe>B5\;lUm2\Xc/:%X*C;%DE2Q]Dk/d`5Fsda_\JWd`L+60&u<)6eHKV&@rVO]6C3EQ<Wk*=HJT:bl3&]#FkFlgCQ%u=-f4XGb)UgMnV344n?rjC[[q,<%0SFV^;6H7aVn2&nECF!.aa'@]?-<\uaP-3D5>7o2!uKZ8b`T\ol#=rLWg.WcYYnAn@rnW4h-G2H$FX:qEO'_rEO(@rjO6c+#lqSV%$?$1>"@b%WG#4Zo>SXJo=0HmN:)d6C>>E7T=a<EdL4d*H2T`tE6E@tI[W*!N_i%+=GuJp'0;_.Xk(db`Zc,(uK@CUf)T"*"V>Qh+%K.U!k<DA26jQ*tZ(X-jMILQcFL2;q3mmWDK(uc#SD";;s0#??il[+od,?1Q$PoEFGU`fl3J$IEY6&<p96Dn:PW^6Om[>=G)6`bE8%VWR2RXD%iuN]5\I/F?iUnFo>^3jrJ%C1Sd,ce^7lhSp+>GiVEC'R,^@kt0"Bs!<drE_1;s-PQHE^]0&fqMtsF./>PWN!+ea>d@P>%dY*+snJ6cf]0d,\MZr-5\%:mJ@o6:`=pb(eGK[e(duuPl%9kG3ekHc1`/9EC_TT_#J`R/$@Y44`LP(lEEl;HV;n17gQefp"cKnXR%N$/#bHtrkZjZIOT'n]gEV^(iD_%78)NN?#8E+qH:llg(*(11O0WX%u<>Xl;?a4%c,.uV8Sg;h/L'kS)Y[ZSq,L*oC$[ZWY:giX[i%*i?rU@,k9CT]_laN"pca7o-M)]@US.aPg%O"qJB&Mi@U@'k.;RM\XmTieDh@[L9dY=@fB^rkX4*KV2mL5)5It]sk*#/P%P3G-.s*%cAj$-8r/Zfe$B`Y)Q+rARf<PKfR'YZG,*T%EA5+OJWl;i(BVg&n\(24k0YgGa'BP\F05Yf@LK9]]]jZ9-guHiqPHnB%JH'&OqDE]%#=QmTo]GB60!5TE'qo7s#tH'+[?a.X]io9-T5d,3<MoDbFW(gGo@f\61:fXJ:brrj7H#DKA4&&LK%2Dh?4AgZo"]%N7$uS+b3d_/%2Y[^("ddAGk)huSke_^NhAFoeJ#F3]=SOF-Kb0+nIp)lRQEa64Q&5-9RaHrOK).YW\VOhD+;,I2[#+`u@OSTE'14+LXV)X_'6>XZ%QKBVs%)WtlCF0\PP+#OBalJhR`>(1Z6tk+Mf>"Fs/7#EbMA_`b9T(E5BqA_O0W`'oO2Vj?:1e2ep."hM)oOnaK-[+-[.kf$f%I,3%L,6!0FZ2tbj=?7!FTrj=Y,1eN9=$fiU_!;ih!GNgqOO;s.t*1>m<M_7_\q(SqOWI>l4q:21;fuJH_30lV0SYIk8NnNDG(M(0Vf]U%,K"t@D/&smE5m=Rg="D3rJG)eT0Z]$e[2cl1s].'_N;lZ@iC:`VVr@BIYU=.9WNd(N2pZPl!]g(75:ac:uRd=&1\_nZb`(XAr<:n%MhcA-Y[Li/a**8QS;([09@Gj0:5(:u(hp1Y`j%@qfJ!_L0GN!GAgXC@jp,cMHmh2#i,16G<ipNijUZ&^0ss%ZcFBGmVNtid)ie?T%#%AKPe&9bar%P9R(lD*Ee16K7WSn[EIYU<+;lbN/N2pZ%l=#?n6SYO!<UsfBIWMp.HuZXJRP-coOII,-\>=!.pUaT"iAs]P`d9RA%bXpN@a8b.\'Y=YZB?YB-BO9pdRY[0I_FB)dQDi'2<6T@h=(lrmq@-)mFe?H(*]`eInSoHhf@7uAWfnBm$b:qFdFL_nL+r"t9@/5^%UI7c:;g%CaTajqBKj:_'Q,r7o9^<TA_cOC&_NtQS<D&\bj3V&E$7ocD<VEq.>7_MB!;SP]$Vm/Uplp`Gq;/#;1D6*"M:'<lLMgDZ%o*"cY;=JhsiN*(d@-u9sG'5A^%UEdPSj?>hdMI;Z(FI&PIrp&B1BR?AZp<0a7a7O"CjFnS6@p/-.;U@KJf>Sg*a^Kr-<ukRnBhP>%Jg,*5Bk<!.NO^_ETC%_V<Q*:]QjjgoFC'b6RLLMce438?16OV7Z&^?lBXg)p&^1h]f\D"PHiaJ-+t2IS%O(7M/g@6iMOBi0D"UUC%0jee\G70Bi`lme^()l3I_$+,H[tlJmJ;Hi+mn+`><(.KFW])(4+V:d4]-Jp2L_cMDCR)]D]8BDU_\.b0dH5Hb-I2/AL.+cna0%D6%R_"['LFB"Wf]a;_6B0m_O0D0j'Ll#]6Xlc(3L?&TdTi/VDhO]+`f+Io4\@l6fkR6Z*&WLDEQ!6ei[@*h3,/nfikTsWifKhh/ntm`%G+h&5D:BW\l_=)Dl1P#TG?NQ+?Whc5*_2m)^_q'6+cS7F5l-/S+b<',\uN4+3kJS8)O:bU2D!63<qa*29''j3&\5NRb[(@)4F(%!%"=<95N(QDG7-8S!'+XGe-&b44U')9*Ru7G<!j3dD8C2_2:B^Xm^P/?LG0[UOUc`OhT!qcij^HE/ki20?XePAC-*!HB?DpG!<n`".%a[^Bo2YS,j6.(eW"tp5cn"]#[)ie<T2T4b.XY>^MlF8oDR$;"k.V2_8Mn8u>.ADRo8=^<j%EA5?\A>P":K9/l?2li#\on>5=4tr@%\B]PFQGYGscE!XrO6Z8q;"7$a8[#Fnfl3M\W6C!+XIN@lYe+T$E:L/?2D6JWr"2(gqF*4t`$g!8M^$V6IN?p=U^)&PDB?.LUt;Z-%N)W0%g'Tt!>M6/sAAq1@_Tk=RI8-<>_Q-e^i@TBmcR$SSD=<@DWD/8+;Q;-Rn/bV\iR-`FN/(:IIrS/<*K\h1&.#okk6q6E`Ciu=%!%]8tiZ1mAKZ+R5+R1RZJDdp3F+[ccEC#m%"8S^E(kUWX@f$0998J/'^`+Ek/KqG><7hgmTXGh>fFeVV=K2.3]:(=dNG_*',k-5<%KUIm3DtMb+qYe_2."Y,?;ZrBX`>!``VO=$p(kQkoaX*/+?PpfYG_)VV4>IG:k^+<La%=T.M(c`kEEebVFhDj;2[R=q]aJ@Z^32Fa%6N8MZWsE8+jY&LZOge'>oOCJ=U*QV0hPE&'Wqi/V:BD_f"t=tZ4=7'86kt)^;IpZ/@[gW[>1,4!<$W.hSN+K.,RFY>0e\91,Ul([%C:ji\?7.2+mpAFLWa+sF/TT,#dla%GN,\X5qrt\jn:!Job8O8X-`r0I:7<k2=4D6q%&Z8[C!p*ugG+h<.I(d`hZf7Pf4\>e_Z!"U%EQEgXIO"X&p.<Rs;Uf.u(>+h;N^GRG8oKmDMt+di20N82"]k1GTWRBW.m&\_5A=e=W:;Q9Z<iMK#"oj>"ZTb]?rDnM:slSYk46Y&%AAQ\qLQmm?LgAX^I@^ODF$1q'GK'*W>o!'C>o=?nCnM!,Ula!.5?\rjFE[L5imZ!=WVi*k`Oi*Y6ZsJVXDM*@qYb,OCM<@G:DGC0%3fC;L2ieH\C(^<pHCTVP3/:/5a)ATTG(BSG=.g=G</4ZDUnfi+&3;!l.;iL_1BeJsO!LPIN6o,9,)=g!M5F98nstF7!Fp53oXP*K%.*\`3C-m1j8MLO`<:41-KIAZaUUm@ZV/VeY+CU5Wa7RS?n84>t(Y]DV/t'BCD-[>&O'"KSgS!NsRre=a(]#KRY!\*)'Gi#I,u2im%cZ\fR^!s#(kn675s*?Nj0)f,pG3OsHH)k^l_Jf7XXk<ei&7Sf&4Sqa)(l!7tjGjGYAc_X'2'%HnVIa5QYee;?I-!a@h]^+Dj%5k4%mb)As55-*+P.48=Zl,32!=ZG3&.84-P_e@3YW"gkFEDng9I!'KiT>Y[DE6p+>7\.j[Z3"_n=c(+oqRBp_cJ_kb2<8XelN'f.Jonr%Pm"4(AT5^bATbht<gV=4_V$94eYSFM]!O*BCtlmN_3W@&f;4^I0=<DL[T]`SKiSBCEIC_"^+7f:"ih8;^+.q/8QG8npJjLdDlkL.%kc6bI$C9@bMhk>dYH0:W.QFB"lf5Qa7\T<o_+>))W!d=?@85fL$JmkqS#oNNO\.cT=>!cpNE5M5WVBea]XOa67]s#578\HL%WA--%jT=@4%T1"V&e&'hYn`;^[4l5jo*-iqG9`EdA#e*6=.FZgE3oi;q7oEQ4brD?'h?j;Eg-[OOh)+(Z#(;>n=Z3\4MX6%E\%uu<e2:#%IT&K!Pc,P3(_pHfNc13A(q<I7"@$!Jj<b>t7kL3;QlgAAOk_gkr'2E2@JnL:3opSV?>-C,+4r!npVma1@jr>V#:I*M+ZT(h/;ta.%->neb'm>+l0g?44cr\3tH35p6#[^D)`XJj.@MWNGh=.g$_N;e-e;c9eFMOG".Urae(FVs@g5^)8$N,F1[5hSfJgo`sFI89]+.V'4%3/Q[3j?BY_b(mXfr[=X;Na41jA'"j_,8O$6!):,`QEN[A$lFcH@.>:b^cF[W\**Ddlo<C&TCbT/Ch)]hg`.+XeT-E]:/\%PP*D,X%n6U`)W'>k!>Sou3fS-ER,_b$JL^>pF-US;4Y*XVneW*EPigg)"[-`ekF&@j$iOPY;,:YW3_E;E8N\r4J48;JOcOLr"i*pjPW*H(q%=ueMR/ZAT_=aO_s%id+a4?mct6g+9]7kc4di)BY<5B(F*j8"7C3I/IPS,ah4SJ?2?6<b<l&@:;0ji<)=ek0g<#!Xe[>$&]S"?"-a%?k"HV)D0.E*fAok^?X0=.%P/^`*L?`>knp3`#Pbf`-,igfSWlZVta_P,ou,BD=\@]9j>d-k^9.$;=dXkfEfdaoMuK-+3MD=^"g8W%:Y8>/Gj>N\/D\%j8c1"14<_qe8ShH[pO<Qr9i:\&9G$M=+.qJ9IBTba9IlA93WR`Y4;YM(q3/O=\ONDH@OCSHC.uDs/&rRg(D"E#%bQJuaN<q_!HRA4fT.kh7g]/",RVCXt'6)#ZQS8GQ.WhLATu-W\XYHO#YtUP#G"or"Sq%,`LF<hg8?!d[YRP)9@.VAo!Fp$l$#CV"%'4<e"SdCCHPnGg&%522mgLQl^CpPE]BPOuf*()WDk5prOl9=>30'9/s(L"?P>If9RIp="P_L]8A)Xh$_^0*\XY1@ftp$3,QP[q5Y%it'i+2t*!)QS0`@],,[0YElZN8&&>J^0C3PjQ#V*5FjE6/afh1rr&aYO$6oU0..iP+2(c^hcq`B"NInH2.UC<&.Udq&uT-m-")K.%dol]oR=4^T6,ZKHSkVDC@d,fb82Ub84]obfMlS/oO,8,\Otl!Bs%d"MfA!q)ibl/,;f/JggME7G4hpJH^)?lqCg,c<qt"1WPL&IM%+6h[$J!ig!h<npBHN:UpV2:=2arc,d,\X%Tb3KnE#-p8jl898J+aQCM;'*aIP_+\,VpBfpN'UGLfr@udM?0Ib&c<HL'ir-fQc3Ur%Qbh2T#FIa8cN%'Ar'(4`I%aP(J87NW%+Xd3gW"Ht&6rEY8!9<9e=1gbj?N)LOI&1Enu$Io>eTlE=8,Adb^W5.[F/:uaQ/QPib\fG%mfM9I',p4qD\>mZ#.0r>[CnfZ;F`SurnAj-Ye'R)(Y`jT&V8os=$i%?DmmjD4!JFM1n7.#'V>SQ^Al=;l;E3/c\T?Hih]i8hBlpr%PXs4?qMX`MrS!(X(I8Cn.55*]X\AYh/K^GRrSOe:U]D/t?N;s1R2',uio6F<-@^9H]&Rh,)`mqWs(ANlUtI:l5m)l;S*fA7TtC^H%EcHLln83.fCCD*O$Ssu6kgrYQ".7+""J!e>CT?86QWI7XmhBO-!6W\?&]X]"N=6n&W+?D&+bV(#!kp=%4F$ZE%YG,a?JI-!=-M<H%q`rF,Vg2!Rce\X22uVeb+E$c3ic;H:H2uhnL/Gle;$)t/3Y(tW9SWuer][W<1fIe_[C\uX#87cT,Gb0D<ZXY)[\Ug^@Df,38#u;Y%'5[7;.74"%PFLAj.3_nmGRPKnPQ6m"G'3?"m8:D/PdAWl/<A&QTTX/uIRR;\lF;cWbZR_K?9MMpQ_8f8?8&cXU"IID7&;EoO$fc0%lN:*V\&'h[+BgA"2s\ZI=R(Gtl`ZY)?G,,7-V+Hb)4rMK\'(gBYVXB4UH"j)8VS)$dHleM"i6A"n6[cMY)Yj\_)$]<9#DnEa4DIY%qs]3),>\e%R:.r2n:tL-KOZ6gflk(OOjeKsF1/n3Rq&`72X2t7fl_:.DV:p2R5FR#W,*A+KoEpRQ6Yr26Xp`c7ot,CV@+[6lHp2'%da]^'$e^\SPOJ=hk?iZ-q:PnU'_C5.e[?Eo,1lFSpCPR]I#Rt"N4c[QkM:,C);nfuCmW>C(N6KaDQ\NPs3kLF1e?DS>\Q@W>hi[>%f6=-N]1)GMf,r[-\`.j<?,-bPCu=f1;^:GqUJL.Gqh/C`f\X<s/@Ln/Mp9da9.\r:Rf7h=YRJ[bM9#F$H$=`oGt)<:rIR_'kF7t<%)hBXdXQ92[Df6EGjne!(jRm\=3OrGof@&]MD)PIQpsK_'Zeer76W-G4)adaE3<*YFZ,PcMgDNM4qKb<GJ_/nN*!Q3F![>!u=KoBm%>V4$%I!N,)?W&B^YY0M=P7+hSI_2+t[J]XPjQpo0[s5Hp>2?k,i0#)7O1njOY(VTamdG%LV-bimWAh$[Ml.f@(8Z'>nY[.!-[@m[%hS+7Xa&&^n79%g>5dVjIQT(u0T[Jb!ea9#E[l9eg!S$f%p)C,4A)uGs0!u:@%U(5-pNIQPlE5C)PFKP9E_E]^I=JY\._N6Y[!McG%fsB!`Qcmbd6m_m/qJ&`s5@!!+[XC`);QKC$R>hT*qFdUY!UrTU(N3>UQWoYKCHD?Ms6eb#."C.Sank_sDeX1eq+i@[@CTIT:-lX#%pccOY[sR&aMsI3X9Ek@P^HHelS+Z=X`a"Y3K0jmO1C!XW$0JkNlfF"(OuoCU,TJX5I*S"%\:-1)&(LO7P8!@,-]Y5,C@RIhbQk3K%@&s9d48QqpmG6q$0@eVQ4)(s\^HK/K!'OYQs)N/Tna-DD19_.cM]F=.J+8!X!qVX@)H-S7cqA:aIJ4s-NW7#Si:^o.n_[UgIop+c%>HQhsc$NF=riJ%rfjT)2Yj(o4k3Xn2H2G(R:"NA?6T+[WFa<`DR+`tHhmQ!kJQ#\)LFVt/\U+5:(d7:1s0gJKY3*G*^"hD*V=SO!%lL'Stl8=kH*j447SfbeQchd(Kk'hZ^S8I\>VYk?of[B!U[jL'[H+1:/1[+_ad=4qQrncd`NfgIMGVHD]o#[p_"9koogWAUWmV9.9%:2]O/Rr;!Ip&X('o[2gUjn8nbM773f_48TWJ:kF_]jG/fC%;\]\]<*;\,<R1>Xq_K1$"X5Cd.c?H#^=H:0oQU(@-m@ah]s[`RX6c%Ej:0Uqrc(Eq3off')qm&5$M?rm]WBW.YK/IDS<V(L)Q8r-8Eh0G+M[FS&A&MWP=A9p2YF-rAI\VPE.obga/SV3N)Ns0R'g+1Y%t!%N\3:VDa\7n3Vi:YEUe])_p6)g\ME?kQoW:<ScF8G?!OPJKZ3dckP>ChHc[6OZ0goRM[@tn-7<$>`D_g&B+[#Q_du!HfHf0ed%h`e%jndBDk3?^'L_;VNnAT@UG?<6d_8u#Me/?$q&#2WQKb$?=Qom<ofC\lRI5Fe[QU`8:fA,P^elDFaJ2]FAl0<TbH9&[5;9C!n-@-6u%DIYKl>rg0A_nb"\^3=s)ggP.>1jsT*"hap&GFM[;DO5PXJ\;qOm4e9!2D9ot\#\-HBEEE#+Lgl6*Aei@gq6fr/WYEdgqI%L>q^(*%K*ohGcp,OC0<Vb4Mp7]4bT5ij&!.,hYDZ^2H:aBM3sr[7S8Pe!Y7IiEJ?MN,]\.-$9>tEP'J$m7f17]l<2/ntEAN#a,i#m+BtJY=%rQUSH;0))clUm[5qGM"QA+EHkh6$+X"<_N#9^VpR]c0=KADci%rJ%o)CAho=!8'2e07<hb(H,Uj](97j1*Ei<GtIr`;AD\%HW>%g%CnrM?J;t@5ZPWOcZ2NfCV>:I*:\>=(&_0B:&(K?/S%Mq^9eW\f[]_UT6XBHKFpc-<oYKqR-GH%6re$oO-I?E+hgt^sc#c$H0<X.6%q>(ps6u]/]K$?54^]c^&;>4SU?>a]1hWr0@c<t6(>-5h;^:9c'`HuV'p6u.6/HB\VhO%G"b&A8A6s].4(,.eDX+'EUPlh6%TG4tP%n$!cndI38n7,$^Bo()2/FM%Abe/m+?PWr7m#DV#%4ma2-QUr:UAL)eNq>Vj;MNKQcD0-2=&bXMtY^QK>n3J`hFLZ]Oe1JOd%+g,N%#DOE']",CsHU'h6k$iacLnt5q\%;,2!IH^&/HSfkJ77jAd"nqam5RS@.'TL=7U^3'?WsSSEQ*'c30dtb03@WO%YCdKYA"^Kp/&Gr%9$(=B+,7=H:q-lXH+`+0DVlutQeUWh!W@*bg*u6_G0E2q[@$a'qc"qG=pK3>k2tZR\\J3S#HH&LQhQR2V?bcbG@4;!pZma4'EUWT%en^0K$(gYse3dE,FF'%spO>,M0qJ5Nq2u`Z`>pDRs8DqT5CE#!J,aW]D=N-pM4l)uoo&@7i#St:Y3+n2=pL5k-O)P]\%CtEMmL(R%Mgouo5VO0<B-=usk]G(-GhT)*_+k=ad5<$E?KQ!7Z+Qt*"?a6an2*F9!bXMi5e`TKYBK8l!&Bqog6jN1Xn]dI4JP[+Q8I7fFpYtO%+aIX+O=Yb7c*C,S!I"@bl@rQOo`8P+@$pIdgb$Rbm5LN$T99Ek$!Y-)#GZY\L]JG:S>c8UlKXs(&o,C0T<oJ9\u=BTe+9bU(q[LE%Ck!;g3JeLDp><'>hsKSc.LY1`jmCkr-4$2]Y#Z?WO!Wqh6Na/NIY'1DD=uGKqs0U7`TkUWoiH(1QVJ=Njb-=QM&M>:>D2RN?f+Vm%Ha?sQDAV2^EJsK8Ah^U>A9!OgPKV4ojb1eHEJ2f_mqs!hrLY9\]=FQhODIWLlNq8>I,Ue'h<W$pN=!e,TFWAKR*W@@)GfcZ5]O'!%XE\o00tCK#7G-b^k(YiCnUe7E(N2RqVs@9QH3n8\Zo'T2SuCDV$H92d-hlqFYgmiA=DX^$]@a9(%_F+n9H<$:nPs*i*GRA`r^TMJ%B\fkdOOo7Dc/Fo5]Mi.dbom,A0&@6"b85/[j5-dK+ZD?BNV@r/57@(7UMch-^E@T8H$<#<e<ak0rJ"UV,-7bD*1_B]s&[t*ok/6<%+7?9bmV$iJClb(CYtV_Rp[.,KNKjb#1`g8m/=HPugo`127l;iM5F37$0^5VLs)E-n0b&>OL-0?:9Kpg2IY<G#!Bm9N/+H*D?*,4#%1_QWIhlJJ4&,'Vo":_3"L.S[6;f>%FqEs>T*j.O]b?/lsO[S1D8af$[Goii+!r>8@8QT2c<H&5n,/b]`IO;XT^:9;5n^TC$+$,]"%4"EK"Z@95bD_?:XlPLl@3*4-jX<5bp?,/QVIHOToY9]VObp;o<D78??*I1G;&$Eek;Ie%lX8$db5n,\*4W[+m2aaU?RUfCo*n=>k%&2H)L!ll`('?cStmH3Nimb-UedZ8jrR!Uru>X$+Fd`K\W[n#[:P2C\nE4F8GkRU=7>k:?1ler>?<coh`n"rfD]qgrt]iphVo&,&j%(u9;h&q+o,dZDZNS::Bh`5""#n)=d@.&KGO!mF[Uqdd(N4k*Y*m$W-ha@'(^!FkeF`gGu;RA]**0ufOm%Vb`I]u`2Z:hbNlp\<7;%S?:#/4F&[]o[Bs,?(tKlZ20e?Ie'D/rSe@&r5YE_rp>?qPX#!'_qD6%T3T/,q"=LPIWPL4+2%W7o@7;rq[^s?IXTfFrPu\Lh'`7#%=nOEi5Ps@<pt;jZpD<5m=n,YhSu\m+ch#o?s#>H*62hD0qYC/ZrmS'"n\NK;YAShoI$D>=X.MWR]<)=Ls4&d*2IE(OgOEK-CprU.%cd.(1qo`UQcTeVjqr%MRm%9c^^HXrbro"Bos1%pGccE?eQ`>E&T@^h@q<Bp55>1MEk&0nhfDk]+9)1pKTE"4Y^\Hshhgb=hmI^6f%V]WQqJ,]EpQ`moJVn`2tMa,MEr99Ptf3b(e?L:&PIt)LM=F]msoD,HEr+W7Zm(F"PYKmuBqW6s`qN%h8*;bN"J+`>HIer4)[/OE$%g\pI#q<\./p7:Nklcc))^cf=U+edq&;@";+OBtNI]oqI0BE-Z:IV'kYP)X<P?p4CWot;5RQ-j]u8?]!b.b?dBl;Ui.Ii`$p1NT\<%bNr<2?F+8Nh@lkh17M(i+29bVjO:M<Zh)^L9rD4h<pJY"c9[ag=2r)UftmU8q<BPR]0'0Y5JI,_*ccS@Z>hpH:g%%pHcafNp5YpX%-+,Z2:d.mUg[sH;;=5F>m_d\FkPF$$qJQ2>ZoM-7^R9Gl/Zi;Q<u.EWDCQ$@cVM+Beold)ViC/qlR+l&0fa"k(rkjiK<\MA*@oBF%TiQIB[t1^]kiu_BO_W\/26SM8F6R`*?L"5jRf@)O:0gpOMZn1%YrYt$_*qsNRm/9]`j,&Q$JVr_<V]h4\K`WD?T%U:pP%FP40.gu%2"#Pqb/3iLUR=['[%l/PV;HdXfB1ZqQ]\4A/H)Pd2"PlKcNt%ACT_)1#6&nf#(Rekl_tVY2CWRqFRh(WMqHQHDWs(hqpK_SCXV%)%BhPLDl&#+42Qf7E=[,hM-U5AY7le8iUU)"GMjcGLD:K[+S2ELq-P<ebI2/BSA7)Xkor"YW)6E[4C>SUZHDCF[oRe+ZNjpmF4*t&t%J?7Mck2f5+Y-tl`qbl6qeIMs9"k)4k4/X^-^9j@"]is5LCaG4,jH!HcI%7oTFiV*;6u;dCQ]>jPh:FFnWggK==68./`[EOOJS:7n%VUlc`X2Wam13_OJ/Ig:ja/sjuB-Z^;js=lBoTU)P.n<L?gg8/(Nb-ZcJ]3>tkDf*0UNnDWc2,I@h^^UB(Un%0)f_bfR%CB:/dCgp%"[&p;N&dPtb]Rd7Eg!PAVp9a1+uqCjL\JLGBKQtabB3KfeZY&!g>UG<9<1du6Pje2!9eL);h'*O8q:c$)L&LA=?5(3Ehi]i!T4dL%"8h1t9c*Z_lt4jQNQgd%^`;(9=6&88Q.^Ih+CYPP]Ub(#LQi3!5r=k05Y0)ao;bJ,mDm=l133ePDD0RI/$Gsp5C`GOXQn6dI">T6%Z`TJaEWQWPXh0472KRR7=cg`1CI`<Fk3(;g44RZfJ9)L`S1YjXS(H)_c?4u>r)V[C5I2k3Jdrp'NI38J;nB)Fa+_1!BjcHEkjQ_B%dnHR;HejHICN"B6]mZ>e'Kn%O?P(cB`g:dh;Ld1KB*<MKrn=l14ZTM6ViQ;>=sMM/dGM,57M;[cPlY1g2Ub<+L[C_Ro,3s0p$JOO%mI'7Uj1a5pCom?:QN:hM$Ym0LdEM(8/:ic;5/aik*mNcg986&fYO:O'n+ETVmG#Y'm8=Q9m=?bQ'O$Dh4i;_saM--CHg?qrm<)DY%2XUr#-X74Of()a?WuPB2bcT1e:*LukTC5k3g#Ph*aip:,j`\=A_1.`4d[-cAlhP*PT<9iZYd4!2g5`u<c^N9aI]/IVaIgIi=4sIG%/CCYl!U9rkdE\bMKpJ\S)EZ*\nRiN)/<\$JB>YaiL.sRN06@mJO*$IS\Qr1iad:h%(.][?cPDq5]A+m,#VM8m(T2r=fgFBnkt2qL%FQ#`P1M-TZjA38*>q[\L(CU!g=iN3e-*2eWa6?G`^-=/b]1CR#piK#/%+r.3jMk(#-;n>l"T8Ca`VV"*+BThgVu&fL09K9)5=oMU%aR+L<<'j0:D[@;=Y(^d#SML#-gER`gqr_X'62-'G"ubq]X5_&Q'!dhe8dXZ?aB/M'm&h7rD[)oca/LZmQN@po0J`+a?oaA?cDSt&%-GTE^-&jqB$%(dedk[h(7Uq72C&k:c\9$GG`<R\fncQ]Pkr&a?l0aH2,*HC@dKp]F^<8h%O"AOec*C\["qmY[9/mGB1Ya]93O;<V%7?R&Ae2.YmpLqGa5-%AXf[]`]cMbX!=?C;ji)K'M=r3Uf,Eq['C[\B_/>GtR!1`7e_mMt'`p\(cZ$#TCQ`Vf0>=jmN;4'qNg=;*]%RFl;LD;nW$Kc/amlp&a""tMnW]HG7,3WZ9oQ$Pa[^NfZ!F5aX`Wi@^.X6(RM+Pm:`Lb!.eX@d*2OMBBcCWg(mk0;*$XRN>u.IB&T%l1aH->&X/+oUJH4^L*NMrU%l_o-\S-\n<VQOJ582>HVWbe?0l3GM-T[j2\DBP'qmA&lWX_"Uq,@m;=kU$gKM1b0p`RFC'b]rVM#@%`f03/ic]58i9JL*)QYIW1bd\TDf,Z#[L5k!B)SWQI%,RQigZ9<V\PIFs2E1#<eGW_Ya0;,T]O5_?bWmDpB#.JF>,iFKopKuo5\tL%\]X^:jOiB[%IBP4U20?:-Y;mZB;W4hG.6&4hu;I_4lp6J>&A`=l'bU`l6OH-&bdT;'>mst5P;m0_P>X6kGH5RkJCd\ID8ga8rJ&:%-ls-inrqo#i[NTf&CGZ->=\<iP.YsdgT'/Foa&P6-:3+@]?NgGg:247G),Ghg$-DN!bVQ+5jD`ShWA".(M13Ulh4WdVWi:g&ubl/%6KiT$jnn)Prq-/"TT';!F*a[89hK6KWcZ\%[;O9deX*=sEk.:f_I'/8gUC5j"mRSD`hPM/c`A\!oqoN%Ie[r-Ii]gMS(6?gm5*,A%;I?Ei-Z.!Kq3f[Q;YjJ*X*+,Jn*(?RlqG8uYJkqqooJK[k6Ad4$e"U_AaT0h!%d*0<.fJ'^V*Tho<[#IBtlMscL67p4F:,158kn7%@o[kaXl01HUB'e1q9h+oZ?O`3B5.J:?-JF-`udeU/J^$`]TF'tqE9>ipgq&9Gab--LNDdKoLr^1V!m;Hm:AEcT$5d!k1t[]g5E8$%j?L0B\C.l[DK"$2mqQnA.=!ZR!k#JmOCfP660BZmlVo(9E<!QC>i"/LlG6fP^H-Ji.CbD(?d&dQ^HjS!]Bri;F:-r_]:F4lZ$Zjo%YrPm8bk:7tVt/7u'-r?+.bB6kmuDhJ9$_ru!#[jOc!7a1RTHYi=\M7=Wj>*W&?^tP$j`mPFS0un=^R5SbM+\L44e\sW.G\+ZgHP"%[c-V^lf%Gn7gGZe^Q%6uD4r`"nbhChh`YJLoj4hFGA"Yr*>C]P5+W[hUP4RU/J%%48rn2ZQU8>[=jDP9>Ls?7#BOs):1ncdY+g-o%[2Vb4^)eokBFlT"\';4OdKtnMBXQ)lobb,JkI[/*)Y\jAk+Vj$_jHkkZ7>I$?V_((Sa2'Rr)"sjfEYBI;a9*P-8,.(^1VOAC(5S!%p(M3jV40F?cOK75nNu:(F0iKC0')J[l)lq(0Vu%_[m%cd2\06,HQ\lGB:9XbqcVs.YArIDJ#r[%8Q.cDUma5HY8Ns@`<'fcW>?,1%p6>AYg,Q&!FXtNnG%#@\Ms3jK@/j9:G"QE=:Zp:l$-Vg/"4re\Alha=frB=D]&1)$GV&Xq<Q\Ze5R\/p1&OYYSboNmf:NR1(ee@'%%+a:Z=.toYYVV-#mjIqB];"dIggDU,H)"2_I?X)MZ<iQNo)*+'ZLDSOK1cm4@JDsS#hV8EdJWD!p"*T8j$H,=O69^>46*0Kf=6uZ%YL^',.J^.p0V#RY)<EO[#N_>6MPaS52m>ZF#Q)%rGN?/MH'<HHSW'Drqn<p2@E>(AR_,o,(_A`G?Jf*@"g)A4V5eab<iT@[2k,f5%Vr%((.-p-_Y'/2>>mtm1qbu=AY-1m`45$gg@dAd%aThX5"I@[MF^65Sr-@S\mc>2H1Y7:(<9_?XW%P_C>X"NV0"YN/1tKtG<1nn]%=_qtWhiJah=M0ce*:*cKD>tC.o6[V\7D`-`KuV7BRQ74uCZB=&*5l^&F9&Jjj#!.3dk^.cpKX]VXAs@@V#*VMCK2FANdSi,Rg>HP%bsk/++gc_06a\]+/]Rdu<Up7UQTP*,J-D[,c?.SdaE&EG-2HQERi-V!.'M*Z>fk\$\[e=CU(['uZ\+:Xg^Ir&\(On$jk8Qu%<#tJ%c-G[a/uE:5)u"N^#i891'0oML7kYi?F.76]g8fL*M!"XkRYtt>(B(\!OWtrK(118`d9Z?f[<k<M$0.<P,#$Bk^?QY3qm-(g\=(U,%^Q36@$^E8V.D;;:e[Dq:)l9Isq*f1aP:!Dif9-051gV]pd0%,5@C<k"C'Eo@7*]Q+TJ#]JI4sC#cb@5qG;A4"1#mNUWWPZc+VF&"%Y0Rh&eT)bb7S3Bp4gVq\)TJ+[mt1PoD#jf@?E:]QHafXp[aUoI2\//kA:N"qfU4DJ0D<M#e?:]b;C@hc&%59bJ_CSKYTFY4`R(bD%$HC9PRQ%u[(I4'NE-9VI_ptB$lPA6YmrpYVjn=u[%44u=\QnUQ+&?dPT^V#BAT:p;Dlg&m:=Z`.hF5eH$a$J_AnBq;rtV<R3L#Xb%m8WEHV,a_UJ$MEg2Pl+.HKFDtFQI`/BWA>GWh+e2WI9)hdPJ;1i*VPJa\"tWGPu5irK3OAbJmDk^/7*sp+;(@3qni2/*i8mf1pI$%YOWF$QA],T*.Cd5I#q!YTUXOA&BnLP`Pu[p*tStGe&fW.mc=\4nh`5!UT(P%I4qdO"L23+5<(,n2a;1DmIg@>>htogY#Q6PTD<H^%%#0#'C7a7!!&IuJ5jofPrQP-5%TU[n=Es!latJ@Q*a;a)1*1/RN=h6Q?E28`WbLoai5tTpP2r&sdjXKhPKt:Roub0IB4a_AWS428%C2fAOp:54J[rRa)[2']GV]t^Mdo0Xoh*"`=ci-B3;7fs"GL9AF=gD*:GNW1k0ilHXR)b"jr;c)b^ZEUM]2SMd?KcD!dC=U?ITJJo%[;Bq(<B7SHq\Ar;Y]!f]3G@PQ.I^>;]!]$&m(?Dq]Xm7nJAP8HS%js.q=f(XJ)+ilAnFs<GU<o8e7[CE8dJPjkiK>JZ66']):28h%P4+[OE9r2^,2L$(m0&DjFpY7<>c[Lpc[Ql-+8oZAjL8pZQ%r%]AT@PP9i6%pIEkOEWtXc'[q:YlT29\q2VR9B*Vbo._6j0Wn[F;J%D\)AsD_?HAh0D5XWZY+MW7c:4deaE-i+ofoX.+,=2!r-M94bC+3A'frUJ@@2OKE#6n"R7S8/]*YW`!d'BKnV\#e&U7T"NL#]W:[g%C/X[:[q9\SQ,9:"o?+Psa4B*]o6RTdfQbbUT7"lE;T($Y?Q=NhXMf@>NlNpi>1KatkPY2Nmt^X6O(a0:`_HEsV3-0Uh3a+8o<*@d%^X<f?MB8$+rEN3VIU>'K44tCZoZL"/ebH9+EU!'QCrBSPd<`"!K)jfP!.c[:QjGXKJhRPPQ&s1?XBV>P4jtl<Ds&&MNT0*\U?C.A%kuMB`DU6;XIWahKHYJ_Z1+tu<'60O5/_/u!]?U7V%1d<@2rEaKk'p1!i5=nrj8.tWVtU$nm^.<WT9l\P>2+4+b0sb24.?<hA'm/1%R#?[L1kp@D)u"EsZ[dn9RQ.;6oFL5_7:Ui5[R@7%Pahr%I![6u=A@XFT%NQ+<:cu2GA6D^Siid/9^&t?3lOh]!<W!1:B5fiWg3B_%ph8M$)83JMaZQ![/).VNn2[m$kC>F&Ngk`ooha*IeH4-7/>`Q9E;fkXOmfCA[<AsjFP=5tK5J.IHcL4)aY#/McbD#V4T_;niat)L%hVMd0M]e3hC36S4lcR)u-:eFlIh[D>GGn9kg0A@W!>_ajhYbC2_@pUfr5Z(tWkMfQd7aO9@,GkPCT>Ooiln1,>Nbb*\Q5OWK/IQ6%FEj;t8>U=^9(+(Tk2FcqO8')jL_b<Thk-<Ok3]bnD-=>pDiL$OFIN,f2H.1a3nc)]&jTTPNlH/#Y,/#/XP#u$At:_HCUW'tbZ1R'%/!\,3\uml%:?JCbjOTKcXCl)U;P!8W2Nub.L-*OX(A#$(R%^a[c)]!I,bL?:@d%?t=Huok#6ehLF&R8L]6,=]b6rO:9-OOsi^_<H%B,5=SYO^H0ol7.FT!L^OeXjTDq#%7AQ%/h;lrKW*=DRVKPLSN<s(d]([Regn01qsqIs>,9#ArV<lU^AnVeDO-m\r_j>OcHbKu$)4%r^<:N>'s"HUt=^<c("</Jtt/ZOMG,>>Znfu_'ciI8Yt3g(7an:(&t+DMqdj'qnol>0Cm#4]"Ic9"/Dmpd[Arp\jFYFG(3M490:.'%18B#YP(h=(kReA)08mrr`j))Y5<cnZQhSI0mWX+=R9r0n,R`&3,*eI?Behft5\=6t<kcC(f,HBso&aLdX]_Y-o&8t\Z#JCm+9u*J%=/g7\=&5XgrUSBZ2?14l>$82Hb>r9GYh8e3ede/Idpo@sh!4:7QE!S:1AF]7C_V#(4'+(GG@8(d&[krUTVC/JB1Ruuf;ST&mk9(W%_'&OgWMJq0Aal+9>HOM"jo".M<k=ieaiKsag]!W5]a0$j^U\AH3D1,_p8.:W/:C`>c2(UgL-OFrn9(qn*V?^g[XPe.4D<J3fB65\%Mh-MPcYS-.l5Q$"C-8W+;o+)=-I_p33RnW]FA"gJVNgm-+#K,>_g]qnf*`aSlAt21\R%(::p"pe[A</8i1O#N>6?-5pnA]nCR&(M%LQ.B]NTnsDDRCB@kbZe#52PITP2'>efQNrD[rPb:$:OCJo9I,rh3si)TiYOpH+bMV!\I_;]mC*l[st9VDW%ae_-JXaBM7[a*"8iq%%$8p5@OlOsrH32HLC_NVR1=So5G(XjKFHSG1#D(%2/pq2lBrPKBEp6bERO^i?L-TMqKpMXm0=*Ss1OXqRIp'l=jWg>bANXATJ27I%=(c[eq?t,lC:uF&Fk54P>j55RHQi&[3nOl[1m*sTq;70n[2RM8i-T<qX>F)FIt)@\i1Sa(oPV.Db@W'2%YL4BM3NLl?*i*lKD#Xd%hk7u,pZ6o8g,sdtGuf5rOh)o74_W21l?fQ&okhE:D]<4hs.J]2r_r$RQ'[DT2.Y'tN3kZrpIti\)Y5+sX`1jpH^Fa=*-CpaGp.:V%NRQ0f/SItFr7X_J3g`"7!YIQFSc7Gn\A#?P#<h:n+/+>T[nH*i12%jHYgt\ri)?b2%(_rh3'Y'W"qGshI%:]b'P&s/HZ;p]3=J4C%W@"0QmU^tTh:R+"5&)W\!s_!d.;k>8;83OBokc3<HPAAO9=idT=puHoZ]aRF<57b56"(H_D"G2FKHSq4,S)i0/fjS!lDO#\RcXP;%iJE;Ajp%2bF*]!Nrqgj>>^8ECeG$0>1:o?[#(<b_5#!g`X`*E6:h?f"mW\sgp:h\MVfC&b*u%1Q!hrmmSk^4V(pris+::n/Cc^d#%\s`;d2d(!7cI"r(Ica]pkfrJW(-5*h0FA4m)AIo&El%+f5/X%q?iQetVr\=+FFLjc?"mrdQC;))K<!,lh(BQZ8"j^h55Ed5:UY4=%B`Psgp?^;Vch7\SWXMG]IeEPc5F57aK7C"++Hq0Lh:'oihg_hmMpfa^mO.)I\[$VU]epi&/*oMOT1mdI)Ye*0K]uaV)eNkT`nq$B%AubItl):n\?f1bCk#k4KrT`g"kNBmKbK"5af.42Lb3!,R465"cKsd2rl0mP;f;,`@Wgh2r^EL?2(E8Y1mp*r;C\M')-MThl^KMSs%ZD1!VHiV0tdYtf)Ku%,Ug&7t8Ai\r(`UlHEnZ_$Me\tY"Q9Cc&5Li*7mc6%d`nkG!YNs`io28'&"TQ'<!uh"2qkBJdq>KOQ:&Q[n%+hta>I2$#UXPdH4B3WC$<IoT<J?cHIM+cZW?XJ1$3:\c]f;g--Be"&0_D$.W[*e`<g:RgmqHc40S9nS1$N)c(\:&^c:2VTfrS$]n%?#1ldC1TJt`nu],^FQ^Wc0a4(r]20TqULM5n)W/,,Oj=BbP?6<[@"TP^CFW[IUC6..u2e.rcS#mZhWd2I%NetQ0ll@1Qc!AkAmWk%\n5Q9CF4?Cam@`5SBNp8%[6^@F7:\5DYK=YPKY]ZCCC*eHEsbu!OgA&Mb-,`07CLKCj%=>4?de"h0P[qGP(*c3'5&O\mKQ7SM!&W%?"^siRqdPe;tA)Urff1IZrLMZcHM'BK$2UmMZ;3clKhd%m(A.#?Q<+iS;%P8eN,@:%P"l$`b*;b`\_p3n*7an+4`5]mlY(+G#Ahm%[,(0Egd*Z8-k:$8VSA)I;eOJNWu&Tbih5#nN/6?Xb)S1>mHj0r*u%1IGhq98_tjq'eFjbBW7L9g%m&6eO??e4*L?I1+bPA*$,4<"%fUu<>K;(6[QKCQd8h?.P6.$b,%mt9,%n`r3moie)ICgul_:BaHPCKisf_E.>eS]I)cH#f*/Z1LnOtk\`IkP,+K!`<N]@-7jFkOgH%n9$pcX*oA6;!Ngce^=A#+c(+llZ.B"EsHZsSnJ(+QA"`:M%?:eWTA=lIbL4onMk_jBCijkWPM!c5K]V_gHC&9#_oOJ*q(!aIr%fj%"(Zgg/f*i*q4';&D!eceNE"U8(OP7a1F;r(,U9e-=Wg@N]J]TJ1h"RM@i$h1BiRs*aFB9g4H9W8fquB57]q-@Fp%pTG]3%h_4S'4%\ULkq4Mic1PPXuIau:V?8'$no:jg]9%I&S1$8_ro/6hN@%S&SUc]74Q#HViH?L%ft09HlK8H*[Qe-Obo^45G=_;>$mrQDB#H9m#d%Bl%aB0\_:t1pZ-0?[MMfehRlD,!%dk-h]qX#.\ec8b[:57r]u9e!5hGOg713X-pND8=0q*H\k\lfU0GQNlHDi$<]R?e'#N'78NN^%r[A?8Y21[T&uhS:EScqLBA[R8$T/cPmBp)/PQc)=o5sROE]un"kOCba@aK5tG>7_&f7Lqa3*0]YQ_r%ZXE@$:RTGDE<1cnr8+eFp%Ts0AEG?5UXHrVAMGug2u-*%@gUV6T'=%s*+:l'd=Si2HI$0/=bLX)a.Xl?G6<Yr6EgckZ\BQ<(SIm_HYI/5fr95hF1P8>W-(XZC!%GS6dXi3%Ur4>GLZ[IW;>];qq!<t)g$juPiN="UmYaBn"uH28Vk=7U\l=^8"+6/.6^P'9:`5>2EI+Eda%>YV?DTsR[Cr5^Jck!^\D%r[VMkb*Q!f[TA(tRBNFhX>'[?Gg;Jp0@m%>9Ao.7I\a').sfo_O)<.L657m&S'aT][r&<J("?,*2<+VL=MLV8:Vj[SPJ9j^,7E+)%)EK0k.RI5-q8=uO@(aPEYUNQhn&O8#:m6nGfo+au8=SMCK>UBoq"rZe<L)iGni32rc<W<&kESTWm;/0I&N)5fR5jF^N93W;,e*%c%J2+7'*>;phM)I-/=Cd=%RSl64'tfQB#?dl`\ol6[9&fb.T:bZcaWVM._/en9'5Ci$;?I,HYcZ:BHfAOSj[2NuqlQu[i$d('gqfQZ%=\`tl0Md(<m)4,F!&r-1*5G<rlRcuk+_31dD_;a@pa*p<7CdZWM,6hoE%8c$5b*]+D9G0&A/O&_'6/D1YbX%*.]RZ6ToJ2udj%RG%`9kYi\XY%&j?$ga45KZLD1I_@`X4lfD3#f'65Tj\Yc5tu,uPs^lAl"^V(mP_Sl[6a!+:5]U\ak]lW]t<?B7R$+st_W5MT:q(!lAO%nm\[r3W"8i-UUkKO?FcB5kRclX>A'JIpS9*jf)PpqFh=T_8]8U((YP7R$WKId`4W(V^O;QQ[X;jNcIg"rJfcY&!&?FqADCH64t#+%!'>HQH8_Jjq`og&SXIM`_(_cH7S%]fg[>UuNufX!0%+aW)^tN7Q-efH>5gm6j)%f-qgLP!UdAN'E>Q"Y)^@h=(_WZDBC%9'/n./p%6:SNLNtMO$Mq7rP_W!FZ8f$Kb-dpp1V(ji1ns\!BIT+sYr'W#h1!TE"IXCpP\9%!k3hPmtWF;*s#BueU?8\[-IBenKiV`BPpgq^R%"91XLo@lk-.m:*6CG]4#hG:+*(6jWPoJN8hqi_$T>_>n$qX/9XM%1:J#$"rb/W8798(0i./PGIcYH#dAF5Hg(=Okf:1uC`CSX5L*%#`jBtJ\h)4Dp8B^U2f3nfNBX5^JGi,NjiJ1d^V'C:?5O=G>)0d],%+2KJU@$rHK@)&SAr,`(<1'F!0`/e/u"5AF_/IN2ZIRIm9S^%mg7rD9%7oG82To*]AKGQfVD7Za>pP%iVY_*Jo_A_oEdbB$Sruep0sao0L$5M+TL5^B\<BB[Qh>k$]C)HDbNEjID>PQX5dFR!M+od%qDc&Ajp;ZDVMoFBe\O],SJmjhpOaaF+*`9bFGUbI]-.'20@BJ@F7r6&\Hk>ZX%7G!q^"QmM9s>pVJ!d^UehTUF*&78UU[`YS&u^1%^u_XNW@MlG6]@P9UOuB53rY7(ChJikFX-CNM-9%Y'Hp+o5?,l#5"EqJn2'\7gm=<tNGY=rb!@YOKGiL)hiJdk2WRV.g<\D#&>YXX%95sC]I:tk(S.fY##G*9(c:3ch7HqZOMd:S8iScci]n]-S^PFK^cf7A'CPW%5jk+Nh#bAqS+%(1Ea0U<A`f@UZ@>F8_`n+[TUPH2X%[FjFtp:[@?V@1Gm@Y[8CI8DSReBiYRBu=UikX_)AWHDblD<TH&QkH"R\r_n,OSeUHF<k,i;33Ek\l)4nib97'[K+P;4ObDETTX8*%FMn6OKcq4C$qo37aj=0AL5]R*6<F#fW'[;]oj[8N'mD%)ZjcV`NahR)eEJEd!li9p?OfH!r:"ehs-/,'PYuN1p@9Z0@XqYIKrUur%G]K`l])I_/dR#_@_YsG)5F4PBPqeX64Rq.Q9=/UO2s%.O?%)NKMm+iZS_dae5I$&i.)t8bPJ^-"]K:t7lq+sOln$)nW#&)=agXMI%R%_Z9U(h*8;.8Dhk&N=7MZIgMJL6'UN$mK,P2;T]PPN8^?*'"N-4<l5,,g)GOd\rQ?$$8+5fM(lCZqKCkc"5:ILTS)"^P*8i$^I)%d1pc[C;I[:cp_$_,uTr+To6(Ho2Q1t\V;`JJhE1S9FY9L"Wb_QQp;*dF?<D!1k?RVkR'@*$9(]h?$$5jZc@gPd!6:f_^iqpK<4I]%*;K"qTZYkW;[SHTDU%m1-#PAAVdn4L$!,rNRC-8*6S_!g7sY23>GL8BLS+*Rc%Tf!NJ+4G.\"7JZY[ipY[!,0MYE&_U9jdMlQ[23%nB/<:lRNJ*Qe4k'*Tdd&;L%<`O>'eTPQjeC0KM7(d9Je:e&r,8mE+`5Xak/><"R4L@EBYTc,lL#dG3-b@\V89(2:@l=Z8^+h7T/;%UBLiBrA&9/fI:tO5.:!.8OJElrfdcLQ'QrfLiZkL2'(t:?rq5'"4d8nG32N8!hZlko:FUAHp2g@j^UuPFZ":US`1bO]a<"*L'&CK%$8""RWPk%On\m(g*:DRjK$LY*Hd!Qm)]gu_%>IGlgHc!2Iljo]Z,-nGK;u^XY!QeBfZ?pr3AF,H?hDkPZ1I="gS#M)@a5]!>(r<?%Q%,*$6`(Q+8d@fC@8c&EnF"lHg-9pr=:Y67FaWZ*G7@6,:rbN%-756"4>jdQZebAt:_l:k#d6o>V),;U)&$MX6bJ_I0G]*O1@cWW%7/JLS]RaFr5EP+$;uZLD@t/SC*]cXr(`BB0`[rG#jo!ONX91(o67X/PAGVoAh#4QA'>oYu`,YJT6G!iT?H=-!9!($04&-SoL)&p[%Lu'Z>kn'A@V/h(@TtuqTE1\Mj`,.L&%nB.b&YkER6]iPIX"Xr&;3jj&qT9KG[ZbrZUiQ0W?1cj5/&SArBuNnZXcHEFo0,e!@_bua%/>^Dh\H&TB?4dpZ"+RVs?qRE.@11[.$cURj3\J$6QeBV0L.j'LT)>KG?4q3,lsc*mYfaK&.J`7kZ(,[,LePaOeBtX*</"VjLs3*i%oGC#:&QA8Xh6AN7Iet<ElAY[%`2AM,O]e"%VT-q[>E'5WER4E7\.*AWj$[FjD[jd'F5no*+<n_045uU#N?42gW"ubTrgFr\maXQk%lJLmu7Z#3>`;(!"__UUh(?Y[8N*);a02&&14&BTS^RZ@92]g"Ar`kp\:#b`X*1\eqa3gPW\@'E]Fi`!_12"9=3DLIG;J,PH3M1cr%>`4lY0XQ5OQb!`//NBi7DR<Zg^^Sc$\G:HuF`gs0790a+:Cn\gFlAZdM3Ju5<=_QjT(Ae\""YI`O[U!j@d*c^PGj83q(P1Qia^TX%rT4$`dHfbCZ_/[O%l[ODC@$8V+W79nWeVfSH#*s1<Y$!k,A:b>i*Yg/r7Ooln_[mCi<&Ef`Qff8%i=8lJ-j`C$2YpDoM)h:0#/82%3S)#;b$P\CI.^sNBEF'^'C!,<38Cs$P7os<-1NqNh]KVG*edG79ZWq+6tHSC52jJ0I*V=3ZZ5@eda,E\p9^/P^H"7YI^hf#Nspj?%o:6cf8$ZR=;')%-72Os.R*^9[-b.T?+r*tE5Den>HDe*%E6\cPA"d_k4RN*@SCD22"26.uL:toig]gIKM.4AIhCIi'$oSfH!@AfX%XrH(jpj%2TD-EWIf%?DbMO@n^To!%agt%93bkY^M#TIMN7lf'c7I&hW.T0'W-<QB;SP?72p%3#$'rgbg5)G0HX/Yc>F>*/6;PB_f%jJGa,(@,"`TsG&IT15qRNIMDEkRn-`oaqCb\28?X,U9s!B0Mk.@)Mg4OH#&4f4(RqTlOtDV/U+/%F+,,0(KOLE+/W!fi#>big-iB%iC<Dhs&ocm]7]=As.>Om"\'4R?4%Ja+,fBUJc:TQ$@MRq7he.4'-p&Z&`.Geod4jU)A\i'iT'.6#@dmuYqti;jC?grfAGFXL.==1%n5c=9MksNG3"`+t=QMIQUD$.S;;CN-;G;rZU8%bSJOP*tl)SfTjQr7_jFL"rroDpP*4HE$/#AkA\(NuQ\ld[%]Z>q/]iJ<"CeW`g%mP^AP]6d0mQT50Ie_YnDF7n,3C$Sff.o/%$9h<.769P&dT\+*k=ffTZJfSlpkS1X'+8!"[n<KmSX?9iSl%Kka*JIObiQHUh7"lY,%<]ahg@i?H>4prla)cC,=WJ1q@cYA4FMN;L:K[jOC]G5V(@^dpp&I.ooJ<?b,h*M"YDYQKZCKQ:]QAMQERqc4D6O/l[CPuC?KAq6*%.;bi")-6*I&QS0U@tYBHhOZpnK+>Q7QeHgj^Btp%-N^t#CBpPcJfJPapKQK[SY6i83<*Hkg&5NL9!R*LFii6qnr(8ZFIA]'`oo-9%s7+S!WY<t=e,4qKpQFY?'P]c\kC.*eXl"^6[-AOt),VVJJlB>1SgE9r)WNsV'n)AB5gEC)V!:><8Ybl>>jlfE0?FC2,8YU&b#g==%N>R?g\Ff.6eW:l0PVhGBEGo/jj<J\4o(j^*Lg90?6Jd-KRB&Dk8jhJSLlM$DWKa!deGfGr>^V"r(j988:qCGT#O$n2H:P09qeI0`%Ztd/p5Cc8_-<3bV<(e$T5Kl+;F?qXt!.GflRP(P)DN)`Y&WX+`1[Y3I:$4m%^UAGTeT=)_%D<oqjD)7KV`p\A*i5;XkaY,hPnU0p%$`^&pSW$78RP$#6ik6.G'%M(iZ$,QK:9'a8ih!1W<mq6&dWon(-W*SSUpS83:UHQCBM/8nNQ86"$ei?`C*`C-7Q"JurWQn$NE&\3%f[\>-L&XtD(N*GPZC5YVN;^;UDQkY(95W,-FFV9^B[q2j*`cb0eT=(tOP8uV<mq4pOI18M?-m<-5S!_EeT=*bFFN\$r+`g9nhKUT%a<[eMJnjQJqITS>\fbO.?H\d.2-l/5XpJ(V"kD$i]Z2tF"1Xk=oSE\6HXH,JLku_M5V20;HbeAUnHtmt9+,K?9_uH6TIE<5(Opb7%0%.=eLSph!gNn\*`KIu2HmOMU&W[&55J06)[-BYr;M.o*,mn+p/iOD+"\jhcGHA`]ViQb6TL=Yc#nqlf]=?Y^WT<Vr6igrHDl[30%&<LKE&Xa<>=SP7-,Lidu5BH#$k:3&p55I'Zi=]`[`qaT/BC6rn\`+@P`OZ^F3^9#qF>r?6<dt-[itf,BGigVR6udAAkC,`BM@gBT%`Mlk;7m1qVe@pp*#94Ws;O@-!dm7ajl(4s%[>EF:/C/7T.XiD0U'+,Y:QJf)o=5Ve(B`mMboI6GU`8l0_/T6UA,6$9.&7fNqjWCA%@2PTS&[s5!&S"K[M/4b#o]N.53%o([)*(ep[.P37k^r8X$9R^mEjamK*`VWA6g[W$)esS[fhf:8Z_<+!2K-:JA\K=QO.!866:`c'%f7>;IU\44;Q07\#83c-T+R-im]>H+PLM(dmcA!.d7_HP)0<B<"-l+f*G'5<<9?4d^&3HrmN+Cn$g\f]l&h>bCcs<?DI(mf#:`8<,%f*ET&XgO*PK,S.s8",0Wih8B^q]hNs&MN6?lifc+PnU4N4ST16A/L$p^L(G51c2l9E?REH3Dgm2V>*iaeYJhbl8_5gYo:-Hpogah%^QUY:6TdO:M(W<UnUq]qYO"Lt_q`kjb*89037\I]]Y6/rNOqE[iP5hFIt+qRPS`a3XE!gNh'=Hl)n?9gPW+8D@_\-dOh.?m2ss.A%<T)Ea"*I1T*h")EKtAMs^#fQ0=MnLUMgMKb-E0\7Y`#>nKR9om$YurC/r%lm-K5im?;4]1L(%NNTq9EI#o(s^IK``\O*]+em:Xp^%<mVj!d*Dh%CU"['d4*cc)r=Bc]l7FqNGp7UBGo:X8G2?N*<#+b'tqg*!nd!Um'rANmT]J*1*/4o7M4*<hred#[Fih]VLaW/G](-t%0;4F'dFcQC!`pG^$<+to@_1e#I.tDQQ!!5f[tr.S;g;,X!CdU:"nP9>+g"9e`[t\XAJj!V"eT4ZUXY2hF@f0DYSV$kP.Z]MCKtXF%O.eKi"Q!9WDeKZ`#TMb=`BCK")"YMipr<@iFqkjar/2"?OM<OBE$=dh_==.E]`'6-036WpE/E/(]OAraoc-ulb.1S'[4VePj#L[_%GP-E7=\d?W]tJ!`QUiuo>J7_iEO0#OG)X,bHEDEjYLcB^R)Z]6kpW.QX*8k@]&\3nD?'5#,cDb:Oi$+bPDG"^[cb+f;Y&>TjVD_l%_i!sUa)#KFq'!mkDo#J!mGIY;la@KgW79P%D$LN=8C;Y6`%!MATU/O%g_FX6:iDV$s*Hs(/]9:>&)CqiO55MOg:sV/BPCZMpJMJP%_?5`/">;C?$#e,bb4'e^lZlQX&lnc%VKcRSrn>,J]tMcYB=iAK[papG"V'b0qds\]+,(n@C2TQK6O'qZT#V6;K5Ql="cYW==HcI0%r/2:uc4B8jE4^hNFtD8!)>gc[X%+bJ7GBOSfeihi:5<gn^TR`X5=NSK.m_lA.W$q2DjU(/@Q+)q2h*AN2kMq>k6ah?#YB84dT>3Q%d0b\c8WArA'3<b=Ebn(A<@<dQ`%#[62F\s+CX/Q((1ZZ^?=l33N0[W^;#oanH1LE(Bu;\_=WVB1HM[+Ck?i:W)Pa*E%\&WJ1^!M!%2U^VuBp!X\<%24"S9RGNM9+/Gd.n+4`d5U(nRLMH\sF5ib7(Q7MC5RPRrOKB,@[n<hRJEt)V;p`T27DnH#j%b4Ku3An`+-BbmE1[%#^[V7A3JqcepiW0qf>8sPIQ8]CB3DGM[f>_Yd<gMXZ5i*?dd$'o&6d@]pe4UY;rb=\Q4/,jWheO#KI5W[mG/uk\3ARkNb7O=qAC7%.O\gt0Ga>_%(R7mP<dJ9Id;UC*XVMXDqblHEO8%flY$!^.Bs9&cMdJWnD,+q`bLn2k)%)=;];`eR9R61^#pMm2(hX<+AZ^1;F%Fu%%kQi7h/a<;$96W9H0QsCQ4=68,DLiF:[a@p=XhA'][aD%SIL#FG8,uFIGZFO,*b`/9V!HK[*[)&b(U)&6d@?7W</#_"6e(pr^26=%%+it=<?nT'Tk29LC&i8Js'>lmhnQB65TrMf%on/-2&l_]@XkH\oT;bELH1_,)n&,o]Vn=Tp=CcZc^$uK!"RL\Kq`(I(\InQq%$JU%iD]<e8pofeF?Tf-nl\a55KYq5MemllPgB51epm?@?Vj^1nrN>NJ!"R\O7H-iH#>B^$@S/"S0X-g!o>"?jU6s_:&\#(aS1fEp*a;'%pFF:/Pg:"C^e&[Vdu[.<m`-dd%XHTC&pH_%]7(EmjI4`W:uf7Tk?XOkYiu\O[XmoD77W%5C97F,Y+Lb)IBWMGokl2X]7/.)ThnO4%`-;/HG)3is(NqaeW:0T%U?&T:oo%*(&L(:d^$?K0P%t-fqU%p<Y]-bG?cIKF07%>bmoTMU?,,T)rVlEj8AMidd0g<,:`]L?^VF]D%^=E,ln+oIcS;#`%mDViUntXRk,JiXalWq8=77U*u-Le0FoW*EchEVhPY$\Q:)j1@fo"0?:=]>5u^Tl\VRm>5Fr-/+6HQg!cJTq'e%%oe4@m]kXAM_:M/W(?m9]7.R$.aG)D^=O8%r3"pb)P$T&T9H2FkOK>\Y$\Oi9DEV\?f1Ma4K!0n#jN^qs/o^N_R6isp$_AGH0VjC%?M,8IkN\,sqF)XUH')t!GPr_2D'(3P'(>ZcT+6qO*o@gDG^/-+)o(eapf5)VX#Ydhonu!X%aVR(m9RJ?9:j_IO8l@ioW*G)WCe+q%T92Z=k$>aco4EIf_-c*mMgj2pN;**:8CE<?O)OC.FPKsr-Lr58:gZ9'm1"^:qMk%[T23=_pTEC=Z%_@@5IY*8b]j"jnd9cpmk7[T%URO9;1cF@*ISj_&knj-l'7&2J&p:Cqht;n/pH%`SIVpenha[Y#]7-O:>Qqe+p\/-ApJjH(qoIcrd`=:A;6Tgbgi>=$]7(oDN0s\K%>3q==qF)bm%E+M1po[t+H(6c$A+=?+k0rk1EpS#K7e8/1qQ?G\E"0JF2bs(>po[s\73l=HH&'*!(Mt##-])?IlPEh<b;Jj8n+oJf%l5*ihrTRV&-mOQ%0U$b50<Pa?hRe6nSb0\^(Kk$*_Rk9Eb$dgUBC'j@U6PhePjkWW31q>(>/ZZ)?5Uo]nD,UkcIacrWqV4o/iglZ%A`r9qHZ.T3:QB/b*Ui7;XG?2lDdpeG#\Nfs&5jk5PX&A\YhPd9KG@q;oL\1(=X_Os(Y,ZOj#$%Mp\W*W248mVDjLg1q-!B0?*EN_%me_"#o^R8cf=A6Sm./9BnPjPj-^1X?G"P]HF(9Z2pMd^+H?nE8cJ:X4((r'+\,1;V^>*lR.PI,-O)&sO[_6\7q)[/n5M,=I+1IkK%pY2P;hh-i1-@Kl2cXi\pqX`k(<c6mq1O!+"l)/^RF8`g6PFVKZq^A;:RE($*EVJT<BBRjpjfb)]0(OJV^!Z:%cYk,9BC5Af;VQTD%/_k"SW?j-_V:OL39577PCe3s<NQ6MJBt;UjI4W]mcfI*gET'JiBj(FMk*E*.'AS`r.=78I#NeJTqdFUc\T79o:a!#k+n_\nn"7U>%X4hDB<L7Uu'9Mi,_7A:O:,&t[ASq0]Ig59#Ic]D<802ZMjau&U=8I8HSB9'RNj`Q$L"BLCCU^u<GIb>kUtN*?7a<RqKl&kf(<l45%1QY&.of^i/.4"ddB0aR@^psQIA[CjeVn0r5Q`4%^C_b2$(2p>FV/blIiaLN19*!pu-sH5Hp2s1\rF?j->IuN<RS'IZYk?PhrVkYC%[:<HZjD96Y\Rj+Rgt'ePV`SFc9!+Fq;RRpM.cpA4)ZQ)J2=da(<k>WC+udj2(DEeEdoAuZc$=6a]R8C1l0+t:>]alT;X*JIJ3&,`%1Em2$2(6\FNu)qaJ#Z&NF_(CA*-$_/P-/B;T7F2h#Q-TS,Cbk\Rs)LG:a,e]6'$58nh5,tEUg>WOZ?R.ma!BoQ%a+]&+a*@-^pCY%0AR_UiXb_3[JL&<%LYMgbI?n87Ic.gV0hqA8beu5Zh!>XY`U(ZQ.t,o.i4KrN>!bp]R=,!EITGDrNnfP-%qPN9$fLB/6I4^4%<;f%58DoHom+^IHTO`e>^sn@9?23Acn@1?/89JRB"LSQh&(;$B3QS3`lg<3:%B[tp?)-<->n]?lEtZ/p"^E!Ibi22?^6R)n"OBsk_p]s%Ah6N!h+]cuG36HC+<A[^,jCP';@h7>^&#B:kdKR<1bkD9-)"PR2#Y+TgL'.`jaD!@C7a7YW@q:N1<7!u7`i=WV>Bo5rN<:D*aWkR%;_l+s0+JU)o6fkg7V<$E_F$rY9&k.bV@:h]g!n-YJ<CkTq[.uTSt$J&=.5PXMZFiSRSB`L?2@5$!l3pD+9@!MmiVZ9"G!X,_S6jf%/#D^\AKh9r^K4X/JHEX]IP.D7eMlc^J;DLt'<<"4A#k8uF&&K_04<sj&bdCWJ"D,LYGGLqi2D:,4CoDT\st+nCm#ShiD27&H2hVo%=!Kl'G69Ugm0<&D.CM^8iYXNL6(a>)h3PTBL$/F6r(1:8"=1l6UD!;cpk,*/HRp<^B=tlqs'X&p/a#n)$mr@`F"Gq"r(2NJ]t_c:%?[8Inl.9^o<$%:KK22C9V0WNXj(F?/C!UF2F4Q27e277g(*sC"]q;`@IigRsVeSL%LhO.(q"$&T4]ko_oYFGiRFkj,@:e\@8hY2_%8RV>Im5@o(9DtAon;n+qQZn,n<_i6TdGlJJY.T7H`>mp/+#I?u4_<['UmVFSoh/#OfjeSn:iE^+IW:Qqi3.DR?2T#[kfe4[8V]:!%p%5a]+Fiu%$E0(BaMWBQL]8j8Y`]BH%En3hTlomhmScH9d`#\so?OAXAIk-QSH__81=tF*&*`DJSPpXBXmNmi!0'FU+>%Y(hFDaj%*PD*]0m#06r*c%^6*L/)*WpKWNU9@jZfYF-S[7>*o0+l[clPKH^\'m)P=Ts?9I<5C3D2*(R[Yt3?si_pER6.`b6@2#.;(P*`ICoR%_+A"I-7Aj#K?mV?,\62\\*"56M?OM'ZnE4%k9:7tLM[h2a!(k\4#`[n`:?_"CD[\e(,n2ce<<tenn1E"K*lNegJcBl'N%CLEp>k]%I[$:c%f3Ti8N]&4r/rHJ+mn/47m^,N5+-PUE"kSCoS..=`R?M-3heGHece(*+4`k[#6u?H"4SuRm@s?s3?jn6gjS^:EV_QT1+rF9%K5duPm,Ik'mP<E6gk/nfrJ\:Ga'To[3IYOeU3]Oo:6hELFa<<2rK#b$FO9mjl2]BJ^PgReE@&i[7>R%_],Ou+rQmPM;Xp&mpH<UW%Z84fPbOr%LccJ_'lZ#Umg3WRSmXXkWA/??0iM_]7H2T0n>&(`0hM'H^n(idOH`&L`oRtmiXg=&^IH6;^(ULD<@n\2g5YUW!I",YS%=RYd,]Zo]SK^Z'/A!('0s,P""jDFPg+,#A]%_kriF.b?*`@BKkJ)tpQK?$0RYs3F%&na9N2=gG;cSumT*IRhb<?m!FjjH_1_.:i<%@2$%oV7W@W78,;b#<qm,8QR]dVplf[>O#)S(*h<S/5or:QL"E&c`lFjOuP5l.X8a]#%f5U>\6+*,Sf*\-dMec,2-@oUALYB8;]T3%=\H@?4d0d4l$;HIq(2Ps"Kf`U\GPA[T)YV1/U,C`2m&hD_qFL(`VH2XnK3-2*q;>1OkZ.+,/ph-a+g3i"o\THE$'a+]3AaiFaI%R%cT%iJfPa"tm<o08#5@oXa(??.eT9@g&-"BAE@kBF"ik'Kbqb>nX'6j/@"9JpeZBhu/R]OrF,PMhd;ILr4YU9craf]!)(53c6?Wu2%WQPZ%`d4+C15]8A<,:I\4EFkZ1g6BV=)6M&h,)lfF@$ua>s.e7??Sr7^!QA;R/QAE]H:X5Btdp0T3\t.5FQA[e\18F+VM5ce5!=4%/95fQoL'l^KZ<^bQ]s,A]tEcRZFBsK]a0quoaV:2k4*V[%/nf.e,bC1+F87<oO#"9[=aU2*Y?TUMK?BY\d1Eu90?5>rb&:_*-511%F`2[^&ib3Z3@o:_HhB-o/3Q^Ebu0E!(\QO>MA.d+>!)!a8.#V/U!fls)a]fO1XBXT;D..J(C(T7.m,E"qNiBtE5B'F0kE.Z[TC>j%pZdjlXm0fXeu\HF7XMpLo>b',=>=/YIBk:(f?k]JNTkb6%Gu^2^4*&p:;+-tr+B;MX=ermctHA?r'GI]-jd8IZHi;)E^YTNOS]!B%';f@*7K&jT>:08DC$56`Y.rY>H?ac9QVT.X9%=YZhLE<=B_Ci^p?qq;:ZLKtp[.DIkMQ3P;K]I_Z=<'X]:4l9]73d2?(-@P9P;.s%<=M%W=hk9YC5mSPrR.+j=h8A'9>.Vrj$_g<eBS\u"G%Iek/o?8aiqc0S]j;^_,$El`FSC\IQ*[%5ADGOd^fJiCbP9?<T&UAj6_)r%E7t(A%oqjP+@'%8\ut0[2c_GEp353T/05R2+33)$Z[[9POc)6A+UX>bK;X0(47mKM/gu(t!ga^(n9gJE+.P8unqT`WFQ$sAf=-Y;%=\'=.l5$IIp,nagH7^KPn(Xb^geH0cD3^!PO$!I9s%FLHf"p2B:\>=Y$UJ(r2u8=eL/IqSI71H)Rr&(2kp)p^fI4Z0&T02P,Q8CH%TpdEmqKn:nFVIZX=%iK>3XXDk7n`XgaLt.sn."`d_tN[VfUac[o"N<@+O&7^h,[C5D'A@lP53>m?3&a+pt;6:+NQXE0q5(@EY+X]%Y=6rb5?Xb^08tPWn6A4O@mh+np#;n"<7WY@lki:+HbRDeIO@L8X7p[BjA5PHmt73).W^m9)*:g!(Wgf/93Z[nXO>SF:Q]D*Vu1q&%SC4>l$dI4p]Ihd?NAYUb0`*/E]?a5;b%=+BI>iBm90$Y-CO)d?pZ5l"6"J*bNa9aiJrmsH`7gPD:DZ8XB$'m?,4IFX#cC["K1)4p%F5!Q%A0j9.]or-S0..;gdlc61&Uj,15XC@lhcO[.,CsCr-geoA^:/J1&>po1/o$rW'-gl\a:=eI'\7R%<_;%/eT5b>9IEcHR>02,%c)e)N*2Q[K\r^,dD4)Kb1$1i_N-8OlWP%+6Q5gN.RF%i648<i(]mf3[o0(,)'sT##LrEjMNY*]_dYT;$OJ</KPE8=H.u2e.kM1S!%'apH,:CY[*r8XaW2;p?$L<Sa&*rbXO_2J!N+JGOl4L]K@3[i?I*!J<k(ZEjDX_NWS6]nT8s75S#+e/%o)AM2&*g'+pJrm2n4?a<F%#Ku^C5Q'FbOc".-jJ)gYR$_s!8.L"e/;f)pGlWO"2a(%T"!*KDn2q_QX3aB#Jj/6Qa:Zht+<GR/.YKOB61^uZ47I6$A/F=[M,BTO%OJXt^1A9m(Tr2mTSQLh'c7@=6Vjb=00F`Et0g-"jUR.F+mXQ9t7Wr5?AB10,4dC($k^6[Sg^Q:$c/iHZ+d%YL`P,RokBL"PT:;(@%pp'>0b5c<)/la[`+6_^j/e(6\PfbN#XN72in#:K.`hfLdN<e?J6;'#619>'Q=m#**NT*iPf:C&FQmI'>@?rB2Qc>a2dloG)g#);T%D*M\;:1Je-SG),n*0DDmR(nR)9VjSs1-1,TjNuQ:KE`dMa`6LZBZr]!lgrVN*.Ro9$em+DjS3$9ba=+S1pVL-==T?MnM`qnc`Su[%1.cB3jg7qOaXcF>De([Vk?^i0qP&3%pqZ4aY*X52(j#XanD@QOa6SD&H7UGfp&17jW#+WeJ&uEaX"[mR834Zd/q#2;,b3GG:,#2?%??AAIQ!?gW9`"rUFQ!Ec1YsZ<2a;@8-iVK;h=)QZR[EsYK(R@eVBl01=m*>t4r4ai<?#CNCO8;5VR:;ddoo$S\G;U57H,[;CJ**e%"s-.#hN4_gfid1J5I\VGY9.e@fkol=!\M^0#D;hpE]-obnj8et0!U)YjV:2<2XC'KH_5D<:S976PFrCLJ<OFcT7VecZR;D7aXgL/%8154dUqNCkg2$4%>MZm$ml&`tP.La4B\cmim(4X@VIV`i75m3lmuR7b,PS_(?/jgLrF]p.Y'kJ04]HWTB:bR4[p'\ehig(nP37k]%5[NnaFi\>o'2qMi9fGfAYe]g%\*GF`%SI;b+%"l:BBX:Tb"c44OOQRD&/mW0ahQY`#@0GtR4Z\3b\m.5qE(JIc+>O_&iXo#k_3Pg%UO+DoD!o4''oQ=jZTt7[Bc:.U]:D>cGqcY%1^YTj_ItP\'aWn4?GiM?,<&3CH$C?3cZ`*8HQS$W,%90N2Cm'q.We8W(&bV90Ch_9%.Q>[l:WS3O(CQH6Bq,A%09Hl,OJd0FfIsH#=MgEgm@62d:tlf>qV%2SanTuKH,'B_S,hinj+`KSqlP+mO@Z2JZ?u?;qhYdSMq[")%dsLiSJ+*4?q&fQ"$2tJ8=4-\jVN(Tdrg",L]hYA159<!Ds17ZUe4$@js(OUOr&fD??hOHnh`QLNf":f0NIUR"=MoiBBpaZt!DNTd%_39idR+k%rqH&CNJ+Pr3M%'c@r%IuQ$NG>Td/X$mriQ2^3KsHu@_81!6'GjHT;Ga[__C_4D[FZb%/tH0Ol"1WbHb`[V'FW,jo"@"%qM"smr^+Ah$&PeY-"0D7`AF]HR\CTEbL#0W_^rs!ATL\7K4&(U1LpJgC/MDb,oEEo2,d?PjE;UF;QZ[.iq+e4BW-e,#_=9mMX:.T%&EHOW20#80mc,KC$QuGZXgOn"gGUU@K1qemq9P@7;6\H:C)8H@HF/s3Bh0QUga$^2W5u9s`[n,DQI$$;Y@3oJUmo3:].bo6?R(+D%CD*d9_M-uu!_C]q):i13A_D\7E77c'5QQdMf+aa?D&Ff.^]8Q*<%OSmg_$4rJdFUEKjq*S!,=-$P-/iXWsH%h\m_Z>D"piHok@#q%dj4=QXWj'Q%Y3M4BPV?&"GA,d1@7LbTbe28i?,(V+#tI_!\.(/J'a+M@kW^oe'W0/J1R)j!<"sr[bJf0o7\bt1nYT!T55_J!FQgV%,hmK+1?h?>9$'sZH=3!RJ^D`5S[]QmS?>LZ''u/?3CC]Q81/="$q;Th)*k]p5VKDo,=5t(W+9%d^"-/fPn&6-2X-$ZPlOZPfCUj+%;CoD(=bbgUgZ!l/b>Qa=7Il#u,fI&u$a&30"%"O@G&VDC2iM@".#U@WSBp*V6u6*AkC!h=D+[A.VQ(tu!QE1%'*])1"@&?bFr\m@%a9`ZV'05'8*6sV>d;:/.J15:<6jGfWL_-ZooW=>G*#Pd,[U9HJUbdUGBF9O$/B\_6%l(,cRNf2gOO4e0BnTE)H%rG"c329EOi[Uc%mKeAd7@5T%?*&(o21T?^r=Oog'iCb50IDci"m(q^#c*.^<rcYQ!Q$/clGZdRY0O>+ScE4J[Ohip_)XK<%9r.]/4qhKV5.:"[)kSU%Q@ba@KW(URp/7r#i,4@1gef*V-Hq+#2\i0PAp_H8LGA<G"+SFi-.!E&JRV<G2V<,eJOjX8!fB7K\VLnAY)MBp8''X_-.rtX)"%W*%KBf-gQnlXpgPW5/Y&Qa_kYtPd'.'3N)YfjQLcQ:DM.-gd%NtC*0'WXab=?<9k3S:I'Zc^Or1dsI,'IDi&"W?Fh\l]^<Y,\\:"BU'%+O!dn+%up>dWP,_/=SmZ)GZk@*mR5g2Ct7u'R[LmAgrW!D.Qp$q[R0:5?S5$JSqCn4,.)s#`MP_F@e\N#MfbD!*,0^j4HZA!^2>N%NNuJG!/K>hOUY.O\uZJ@gPSI"M$m8/[Y(Cq\2P$uNWHnF^ligR:o4U3>Qfpi_\?<8aG,^'s)88&G(Y2*DM^\kV5tp!R?XTLM)IV\%e5aLcYYtDEOGbH\Gn9uUE8%OA3e:+<nAV@L*\B^V!t0;6L5u1FU5FK['bcR.KRn6.$*R2]!!q=eeE"C\Z4<To6csTqCi0A?DCYgd%.I2r685C5B2@mQD@6-9HEP@;u<i*,sLV@n22@5%a#@!-(e#Aa*'G(Ni?#_8`",6qXb;rD@TY*aUcQTM5)H6#C#39Ag+C9/tBZmhl%*oZfcZJi'L#a%Z4W2<tfF>;,UOLS#N%-icY$!!`e(1;68d#&GB5_+r0:IMk:L>dNX\H3"DVJ`DC.l>$M._7#/!lQbuiA/O\<,n9s%BD"l)?lUl,KSXd7*Oo.F&4I`BfMU<*ckuh%ks?=#LR(ZH<b2fW+t[bY#6_Z!(k38c+;$kd.tlk4$X(T:,!]].Mq8M[M3GCMm]]\`%S4"eMKW,t]e2ID]mZY3>o"]W`niK]&DZg8tA5MqfCaBJV<^X56:"*5`=7<#@N2qf;</*9oSbBuF.RM2r3D?.UNt=t9"C6u(;$,Yo%gU(sA7?%`i=!aCE1IC*<nmkg+>+gRK@W=2+QbX:EI5&X7WX60@#ZDP@1RnOdO#)@o&k43CX4p6eaOehY/k"(=*9QI-kfHXPd2Y"q%A/5[j=P1\/ob'rg/fAW2J@#/L=<?5EHGD-@=onOu=Fs'-U)Rb!!\8BsR%RiX:BNkVq@UFFW$:Jt0a)"Cm4SIX^?c'r-8#MEP.1UQ%]\Z$nn=GX1)8&[2U&KTP7c-F!6=,g4%_5.Z'$;2"'3g#jB;9J7F<j+VC)124iYoRQH?(8@+4#MRhE$j@`=ee%lY(6[Y.%r:@B=dA%bs5qH'07Bn"NRuJ20%:Z"K.=5[:GsG\j_K.oY_oiZ8p.)bg1WVLm=#KOL.)"Q_`HFY`8o'LT<m$)iC=&@PJ=RQ>Za*mAI3S'nLK.%L<.:#2<5:-JA=0D<LLa2"1n*H8HlY-P7<XK'EuAWU92r\@#dbEJQYsS.gijNRNO$o70_7dh'GJjHbpJf.RaOt>ICH_+>R;SBU#iC%.iap106AEb8IL8mrl&g?QpEFo@j;CY/c/t@c9W\;[4ANl\lKX.Q%H/rC3f/Z`.k,3L=jYb2Tu5HS-)TMTRTfLfFfeA'JuEk1nTKh%dW!rPO&Y-n/op`r6*PmE5c*5(iK9c?)F'DL$"e4F5T1X)O9XEhL91iQ%d&:RlQ0',J5HNrW[5**JMbmm8:s8hBt,j*?928\\e,>a%a8g%#3bAps+9R/IR]1UA(dgXAcQs#@#tP[f*=O)P2h<dc)hsB-#B/^3gE@"B+HXUYQ3c6!<f011AM>>CPqE>j+I0GC*(6nj`<76j%9eX:?=YLNj0NlloK"<.^j45K>UW0BPfd>qkE'\'<AUs3gi@W;43!?ip&3mbY$4SkLH=;=79nZW/Oj@I]MNR=C2I[4kfO+C-5a]@h%r@YM[+Mr=4/qRKJ4T$-DllE?\]^^+F`^34(729N1al*[:Fc9jV3!]p#PM&[;OY$[X`=TXjUJE,6@OPu1#*)>J^:-Z&fo8EDbd93\%a.dNTcp'k\#q)W$L1'B-.#7rJe&iQ[#t>4WEJ%,GNND<&[0nZ(N5B`%\eo8(3>arR%,HPH&p-!e&27p2Mqb<7`3jDAbcuZ&-cS3k%7`OCteJ=lX31c*D0=[F+.[[`b@o3B"Z8_%Y-3r9`-PhCD2ADF3U(BRSj.WEfh=BiX<Do?8i^+Y1r.\g0R+[15U;h,N75G5/;'uLg%&u0La#6(m-><EN%V@h*Z0TX$<L'='D\66V,3*TO%A`C@%*f34>DV:<mMrHE3H,BP04c1pYZGk**=Dn[uS:H=oEMHB`=QI,rU@aYs%UZE<sV\^lnY=6E=>\sg%VD_GYT+k;4W)S^kH^#l@H%n?97Os'qYdi*q+Kj/R0O\!;Cli)[_(]<XA_#J9!#Se!#d\*G4b_q]MJ,fE%$=l^E:;p2:YisjFC-Z!$;+,/<EQs^p#B6M"\08_$@;&:I",@A>Kah#rRR2g,73[gN>mqXO.$R9`MRNYAep5?`rS%bu3Y3ZDW.LhM%9uGoJ65:_TL8p-i65?uY["Nt'MJ0C7K[Qp-,WAul?_eq"EScR](h0^G-)#B$.`B(>L05'aKuUDji]:tUON`Vj`GGeYO<mWaTgAe>%L'e)$$PhZI'\b>h#m[Em5K^8K.O<Zp84:IW'rldh`[NH>W%-)oS6-qin5u@aA$JAU)bDf=ire(Z8tT@m,A!g^VMhQm[MgMoM!G.5%9bClh"@goGM\RFhd1;-:_D7\NgfP`:/<'gN==_mu]"qm1#VcLX$o$d.gc-HD?tbH[j9UlA(=C&+*uRZdJqA)d7299g.e"Q,7:m5@%!%1O_6#N3SK:FnEimBZ,6#.^!d2a$JT@"tJHlFUJPa"q-&0Zd':4_4Li?3jO[%WNXAD1LW&7N.:BT#:c<A<Z'E<n=$7JFS3EueX>%*CLIdcb,O]E99Op"c2L8$SW>B6jTW,a%@Q9dCja@.9/<aVIkaG/0IL6i&7mF4?#m2)CS!"+`c3]0NBEB3f=W&D[Rhi$'kup_=TJ_%9[h$/Rd#ncZ]R5#>>bN]fitH\Rjf;.YZJZEU.cbmJ3M<ek=o"D":9e4\O"*K9bug)!OO>%I9[MW//ZC-!aV1dmbD`5@%se9^38Oi%!mL>WKcYkSDPV6U5@Hu-+\a\#`^)/gVh/8fb.>PZJ?"Im,cP7G:pj-XW+%::J>e4L'8LOYjtIS.j#sps`uU3G$MgcJ.qdj:8,gIf%EC+%c?l<,=0&(q;nNHf?E<qI'$M/3]Kp_$L)lCsf]a3:hKT9;n\82u$id5Q50"nik#up<;M77NWicI#]\f6\Idj3ieeJf7O,kOhG%:\9:W\B-28R)oZ;1:U2=BMR8^d55^j,OR6aa:Mo,GU&kSA\mNi&8lR#0S-dMB@/8K>`Zc*k(7NnO9$K?\ce+hZC&*$UBKdaS=',*%`XkX%H9@cEKpr4>_U^!K=lcMn(+0?+MfWi%3.GZMpgq&(YrOh'=e-I#*!sJ&Mc.G4-^CotCNjN$>>(,kMlf7D)Rdd?:BBJ/SfHlp%T0QU'DHX7MYs*.i_dWl)bkfi)-C8R=ou-\pLb1?;8ib[4Snifc0%mKpE@/8nMZtS](p,M+'UQp<cAYC*g]^D2AC1N+P>fFVD&cST%R/E[AEJSC^$8?(D@S__p.bk0W^u_k%G(.\0:kCHKf]&?mJ2i=*QjJW]\o!H6as#OC'k#5ge\L:@`9?Dc*08C/CLBIUZ>,<"Co8"(%6#h=a,3bg.MD2V.`rsp,1jN5"`41J,MRmU37O`eAgnp!h1qJ0s!D3XSY_6sX@#Dj,,F%hn))@QO#Z5G^UlFL])2rC1CP7j2l*;VB%;&MeX,?+Y&7OSMP7OSL%7O[[YAH8(EJ]?oF$f\su:#63t(tmhZ..3pK.`0$oboiF$X\_u8Cft"j_u/3=Eq/P6\9Ym)%>"b>+)!"#%3n%=jm8AJ^ZqJi6-Z`A,6[=jVa#/B:$rBY6>JUNu/:Wk>=TRNX?#l$jG,^%,WB)I5PT953ht!:pCRD']akPq+G-W_*(['EU)TL]L%;P]e*M%``#drQSI@9e)>#of<E_K[ABVmCBk/i?<n+Nne>"-Zecfb;6L_"KWJl+b/iZYc^lM&[*MDVc[p3I-r.Ou?$5aEo.&PJulp%7(1+tc<C=mgD71)8E^i@V^`Tr,*mFE@*Y(B]Lr:F8^bR.-ac6FqoIRn/hi"Co:#_h+_o7eM(@#DAg1*!A)2Z+OBROo#T#u>7&M8[%-mVr[a1;L&i2S"86Q79jk_?Z?Q`;Ng\i$_E1gQ@M8qaaCVDm"a.q$!JZuUnD,2IVfDP12i;8m:A5dp`'JSq!A-&I1jS,pTq5\n`[%Wf)_LRXoXl,Xf3IM!L[QR,c.o:PL7;(WU$m^hF8I_C3TEjm[p:ksgJGY`PWT<D8<fRM4pTLk@.n`X&60nOWE4ApMKlQ]Q&eClm#\%)o="MTp!tQNU8:$&nl%u+OF#pD%;,*^aoW6OuZ2<dnqH[][2j.e2E(1eC)/$>aRpsi#5_A]'LCq'>)N/FgBpR)c$^n;'SZ*Wp(4o%!80FfK3GuMkT*T#W5o16Weh;?Yq%dBYY@mRY]iHETdFGaO>Rt&Oii75gl^&;!N+Q6S+0e5n1;G`kR!eggP"RkhS[Id,r7fB8eX32%.RaJri^dbLS$=AoFTn-GO[*0VGqpn%bZlrWi"fct"bTcQ`E"=V3DodEq_sRl\.FqN>/u6s94i&L:c^j<murtRL2EHg`Ma$:$J;@O%p71NS6+L('<A'B3Fm24Lb`&bSk$/bUQT-`OT+N+6V)5J[M'Oc:&=g8t:q56eZieS8-)uSoKgbK7*@@]i0EsHHFL6?b#Mb@U@*Iql%21ka7DAS-<^g)GRAQas6kX]eF9E/S*:hQbrckD2ESui!&DEmU3Ynm.[4FY(YjgO/)GBt00T49&.GSic1'?-4u0ZW_(mjTVF_#[sk%D?L!9$W+#?)5F=Lo-^WuFQ<G?FZU`.p@E/A!R:r1@\-B;D8hk$oJEd3DZE'.Efh)T*)tNhfERT":)jt4(m)3D#Lu\[.Gd%_NjLHt%EDR[X5t_gLTE9d"T>ObN'RQ![0b0*$8[^PfWadm$[`(_oH"pe.<*14)H4]8*+_FPo#u!9p+V'B:g8ZXd1`_G+[RJ/j1[!Le)o5S=%@N^n&\=s^G9HEFAEGRuNET2jubo6p7POc+:fTMdjW3ABC&3@>E!orV)AF$hbDZBt)+LOWsU<>hb"N.t_Jr(NSs4E<_Efb&d$N1.E%g`YfGDo,s;NSDkaU[Lp11"/t>>^O^2bX\$_#[,.,jljXC;baM3`Wmb`lj5Z'P_J1TRt*LY<[RX6AFjdk'4J+.2RbGa_h:b8KN^4&%SRS"mL\NSeS`VW;XdjAO1K0ZtCM2oZBJbRAdCXS!!+U2LDSh`t(pCk<:n.jQW8!9\gfEVfkY-(p_WDD)r[uE+&t#Z"gHm5BR'31/%--a>FR/ARp0\dmO1:`g0kgV0:;r".#aiZeWAgT._727O>&44.lG37_+q<Uf(EmWrpe,kSTe-N9Y722;Y$EDr%;oLh*2;-Fa"M!ED%U'R`<LuV<QOQ01'=<)'H6:!,^VWd#R&UoMf(+[;tZlP3RE,i%p`&o90</e=.29pmCQGC'aN-j&b`i@s-^Ch*KN8map,3Z=;ZEb0@%n;8S\"=NCX;*7=@bfCc=!TH/i*9K61\nNqJG0((!Y\bKP=W3hlDhQ[KMtKun`>.,Y[`//Y*HSi`*F\rS!9<Y#`@;[oK:)?FTRf#7%jGbR/(lKd]?l2Oo,t*t,$,qMUM(""q%:l1?&S2tg!SPnG6s5&M&S2Gn,0D%t5bP)C6lF%O<Gt8C8.9r(<?>#WM9EIZ7$NDe\Imr>%-+h%EG"Bf9.-%&cd[c1L68V>o-lZQ#;`a(RAXj`/&8q`iRYo?7ao]M@-jq^E;9#1e)e28R+gU3h-khieZ6uBJj2$Ep7[+Jd`#qI4%3J9ne"W3.Glfah*@RM*S1JD^T)?'lJNYkX5RF9VF&S54>8MYR:6lBE,#-iui+W1b=Z!ag[=jD5/6l@lp,b?VH!hrRM*`3-(m?!eV%;&3PW6lA42\W4$aLnP+eAHX]EG9Y0h-VG'rap=XSaWek/^kjI\O;h'Z+=EnB%&\HXIM'&2cNWk#d\\P/YXVt9,K^9h'Q6BbJBWEc%6$B\hlQcL#FcmnXYY5fVC'L8`3*E:U-Q*c\2[r2lKa*km7!SrlUQdaZ;+_%)a=EE]]9D2a5tf%,ZH7<V2KG__kbQ&63BG8Yd,,E[%\o2[7]!i`9_miIYFkX:lM=MiaPtds^hG@1[/9b1c#g?+-#!1$@Cj'*#V)Z>Q.4##S.O>RGP`d17)d7h#6DUTL2tCQ/17L@DV*[u%%,U-Cuf.?6BVn*pXmZoQ/,f'1t,q`N7<Z8oaNs&=98\-J,hu\j?c3DY!8J6V\l;Ea97B2%6@FC5eQqH<&JCq>b33Rl6%pSVCGmC8*%BF47C+aX:(#dXqF#k[,\MPU[bP!N!T9i%DuQbYMtD<6`BR,GhT>SGo>:uW=\BS$UGAqK'S%+Q+[]f67S14eA>G-FAd;e8H*0b[fB%\0a1j3@6`Z6q)W!9'B/NK&?ceXrbEogIbDtbT.Xmi0,FaEuWm7?]BKSCiBK;0h@&&@tQ"ZI`H<p_>Wp:Rt2^bMp_\6d(N;D`,J:q%@Y?/8,p]i7]"tVo_cDMpF-:(9^j*:iQ88j##nW<_o&FpHb[BJiiJZ!A_^O@+81U"BeNSG;+X*%QVo11hL,0Nu("b#d/e"P#Z9j6p%Gl]*d>XDdMbR)H2#"CPiTY,hG>e6iedf<HQ2oXN3&45'lM4kc2"b<`&_J<GO(6X^;?Iq0<943ESSOaR5Men;l+(sM_:b4"9<l9bu%m,eg.pGp0hZ!:P<"2cMs0d);`8PVoh)Ht#:fIRabHAc"&3<]R':neV9&k$k+`7PG\-R'sXs#-j:B:.030qaBV!4Z3)FY5&YSl;'o%p_=23%C$*QG>>PJoT)n@#U.["#LGIAH5Ln_#q"KlY/YZ.e4MIB'@9<s%j=CU`;g6K#B5k\ah:ZBcj%TrP"?``c>nHtli@=lHNDfh%n;E:d=uL7EI"O@1J^/?<J,g;EZHPW&>\1@s^=>1mhEhSRKomoH)BQpHQWlJC/dGf7'@lOu\R`hET[s=<U61B:8YOkoeEKR^ig.A2%9`2^<!&o^58]OB%"#=8=,]c;8(ooClVAM=Nh$(noYG:m1Ufkm6%#6f?'Uo1)Y8WrdDhD,(W#EcAP@^6MNi>iC'<e-jWs%5D*7P]g%-KU>lMaSBR3f$k@J;&^b*]E&ISGU'+OA/:KL/^$mSoCqqL5S'CiOO]=Mf!E-MT1"J%=2BJ44;C3i9pPN(f&X9R7dR_J-UIheV-$Q%[S/DD.Vqh=e![>b44OI;"?.;s0=9]u0q#lZ9K^nr;Clk!Q4&"]5tD:RmOsc0G34kn:/f'a*)96G4YUDtS4LK1:4&[YIk^r/Jog[Q%$R1bk^^61I^g'dRJg+D6WQE^.U>7.W>61l:fG7;]RZ("3S%gN;)k2ii92tDN)_j^HB]DVN#2BW'M=4ILXRjdA_SaR#<-l6F5bBZ&%TLS+n!0BIcDS<\4dp%-;*mU$)*%'&`@5+<C-[Dg0;$(uD&rb'9GQj4eGOjBQ)\AJWiYHh`j<?j"pHBE(A(EfR@gUHm&]3s$6;hHa%PO.@d>i:;0.?WF52o;5WO#aBLTf9jXFm/7Q0E^W`DhM!?bt"/>l.cOH0R@@EhV1NfED\Q9dh3F<Oh4rH,uBH4:u!!uE-@$Zh?jd_%ae_t"F2a4C+o.Ah7MlVFVkD\+DNe(glp_h6H"<DE/*BA=k?]Y!I-4*=b\+gdck&[MKMa"@r>Vo1?4"Lmm"FsW_-sR1oL]s>8BFS+%/kb,IR\Y6(#)U:&7@6aYZPf%L\kK@o/i?NYc^J9r$>Drn6tOt3WJ'M9H7'R,cJWnCl1E+;Tp8BV5=#Pu5qju=c*B=ff+S50VNZ<P%?'/?1Lh*:!Usk7E#Xfho62sb]3J:[NV.,T=Dl(k9<lb>R%g:QN+YloFg!6uZ%LD/8]bUgqF@b5>jRRlDDH,Y*;4pap'aeH)O<2(M%7Nkk)adfSR!f5Y[Ighn)^Ol-7VF<.q_I@(uJL$GF&!FP]aONFud=\9ZHY_iq;%2Ah59mU&M2NNG8Yc!K$R'S"2p$$+lJ-QXdS#l;%ZcKU8QtA$f8YJHO-:BJ?EnfM4Q-9pB]c>!FkhRCM-:i54XEt.AQG^;pOs!C`Qt<Lk$GiM`G6/q@jEf`I<TMjV(P3<EVs1S:cpQ@I%UaXj*&53nLWPia`QkF7G@OeqF8&<m_=e\Iq*5)jCL27R;bfFWi/4*f?Qo(E>+dPRjM="o'E.\=Z@,dH1ZL(LQ-IRh;d6.nk4ZIZ#%?k/SO.3UCu]l+?foZe?eL11kQ-:qbM&s%X#RH.2Q"dH,,[YOkPWZlI`Xk65nB9NTE&sHRLK3Aliea*o,%[5^!f.>]c1'J.Da^$\(%N2+FUgB,<4Y@/A8U3K0;MBL`5?k1)dT.G<]%43=Ae>sc*[7`,p0eJSm!CRaH^`f^m#R1ZCR7",4&Z%:@?qlo?<`jI;Yo4(E6<eu5%I`C(Dr/SV3/]DcMEqgFN;orUZlqSjjc_''F8ZZc#E-]7m`2cL(dEX#h]u[W.[K:3OR-(,jbTRn8ESr2&K#D@HLFKt%4"uea#I[%1%F$N',<Tt2(M7k2LYc,?C(1:D[k4X]LhWTi6Kts(9^i's2q[;P$Z"jmrQ&ZdlF4Z')WeMAqPA0;f2ddZC)HEm-`b5JjKH!>;/!tNl%fc9WVDG*jRNceb;\N5k_JgM3X!^q2%[KIF'f'0ju&ljM$2T+LpI3:/<cDTd@?3@(i?GO?\S(*b"MpMlsd15N.bXR_:RDTT1K@HaS%3q@k&;&ifj"*;4E'G488,+f`h&_uAB0Hao[*YK#LbUGl?,g-NRQ5#L`L@G>'h+C!Vo)GoZb'#=+Wo+]KJ#J^"i1Z:(cHVCP)C.^B%+9[9T<%<b0dEAJ8@)Us_3,A<cU3W/a:8`/SB&m+S%fLd.]V9R[r@2#XO]D'OTXnA-A;;WL@X1C&j72&nZ\1-UQsUHQbF0B>ZtUY?%BN]E\&u'AeY;_'1Sm4%bikP%78BaCCQs8cmeB/Sm^j)qi<qFeQcLdZ0e%n*=[H_&E@akZ&-JjHdr)V=sT`SS_i`eJf:nXd7'To5\%b"6,<M6tXI8o1gkmkk9nN;!JWKcY#0QHGM?9pbjifa#)OU8N%sH!m[Z:\"AQopJrOQ<(GiLD&7UPsi998f`g!L>&^X&aFXL0!4+j%`@4M+*G9Z).SF?r6fmOGJ*-ep.-]6e(JVEXVtGnObs!_8q(0TpT8RU'd'OB>N^07J!^7a%'W$iig$Gti*))I<fiK%8giXmTQa!46%nQDll0FFGVEdX*l4;nF"_6SrQb$BR[K.WGP1-gH]Id^QiKZ-bq^Sd74K?L45iDF*AdH;Cn5/R5#3`Uihi"hTt"iAd!:iPg&CY0*=%K[<UEdm?>o:*3a%\<+jMf.7:9KOH#IZR\:=V_p.U[k$B2HZ]g,CE@+u?Y\:0csRIY#eL.\+m]QfY/[Gofr^I@?_=,aMg0@"XoP9c%>=j`=_6m=60POTRlbj/EL%&8UZ!*1hA5l+@C^QoD1X(HDRU`i\/Z#dJ6,otH'esM3d.WlCgXE#"jS5M33Cuco'G>JV630`Oqb02R%U.o:O$Cr:Oqk-j!Qh"W!;*PUO+I`Edm@i8K+SR)^#@T37DU=bkGn6AGKS!qVK1d@2G*K3['Wcn'-2%VpV80sF!).K;EZ<%KCYMNu%!K^e#27=riSC(Ma0"'AqFM=,5g(Xg6RmKAK;o#kcHimoW`sBl4o0/\F1J05G-KIW"+D#$b_Wui>IO?<?W>^oFn4cLYIoPGN2m09M%d"?9N'tKa4EY)TE#iS$R"k-iu0-kY>DT+)$Er<U#4Yu]uL:ktZr5'"9+RLX]6D^Q_.,4KIfE<k-Z\IWEZd&>L0G,^q/Ub)eMY%/c%nH3X/Ls3fpY9ForXbnm7f4-0DqQa'aSKZIX_B(OSX"-muG"gn%9%lO(=K(nA`pRJpZk<p51WION7[Ud3TMMjG)`c2%d(\?(rgjT1%&j=LSA>PAI[Zg0=ODpd'VVX*D>%)W.]FKNFFI.Y/N[T']WGK&Sd&t%i[=el#`)>6G-4LjYac2TgqU#EZ4c4?WU%;J#CP$i[6rIXO%l&159bs(FWMaRs=cJFTrp2P"S+QQ9Bbku/d9+p'AfMOA<>@117>`>elSOu19Y)lEgrEF-Cc)CmqVSnb;&dq;R_b-0m3n3m21egD5%aKn@'3Q7XVUV[VJ\e*@CZ4XGJ-#p*u/lbn2,&;dPM"Eh.CY(It656"5>:0q#+E^2AM[aSVHRIhYg=GAXBYbnF]DEm?9'':%bsk8!%fgPgMRjU^1@,YfeYBj]");8ICQHK`31(+cc%E:r$\a^&T+QRDbbdUJHqL'Oe/`%kT'>3,YjfaVOn?b.:FHb+:XZ4"3)e@^h8oD,u%5WAtFcLe^LdHAC<G+#DCKf15Ws(%\T?nJH-.um!0$i#pHYQon/3N8&kSEVb:8rlD)"BH3a^R/BU:.Ttqk=*T;b<QbPP4+BlTZDd(%8&b^2''Fll@s0/:T/\TdAPkl%NZ=3)_3(]=_3(r"NR%h6(%qG/7g>jE"4!$[oSR$gVn]08,(bt%UB[!La?gH(/ED*bKNL!<7[&BS%#\jX6N4MHMK4m#p9_:Q*-He6UG`!uP9l!bUA3tkp-g!6'o/Gsmm<U^J+T?ho7\B`IV5Eq*BejuZ1(?X80s]M#Vo_3(LKA-j.fu:7%\Y.&P#`rbn6Ik5E=L)`_ZF#c@',E,:f\0PmA5k_DKda4=XK=m[?U]lc+7%i_`R^iKj@#.V'BUQ#THM@nB1+m,G!EM77@/`%aBY<C%$C6#NM/e\0D:rK;"A-<[om;[VTul9#r<*mkrA.ra-*;)<^Ap45BT3VI-[b%=$q"=@nM!a/ZimtcZc<;c.(dF3i6eB%`tiXs4i4iT%q4or-&aRk\f$EeiLG-Cm7f2PWBQ`:*Y[(6]HnR?jh`F257.QOXoH_jB-"[&V`\"_p((5p<,?W_OAF^1d)9l!cN^f.A<Pn(aM6K6$%UXad5WNJ8;=]7,Y"!T;J2M?YaSf^%L"9E8D,[nMn(CgI4dmO1gp^0&)+r4<2?YXtBOPhW(,'DEE1r`Su$bdf_)C!Ga?Q%R*!uBc<%'F/gW&\0;i>q*bg8g)&R#W'2HQAQ5@m%h%W?j,l+&.9)<#:e8'il1_N%-D;R3o;jMZoN3AJdtl[`(0;3+So@4Q-3._X+W;OaLI]O%VKXfrWXBCH#c:99fj&,5fMP[%<E1@gmUh-jh2F&$RoLl%mt89!G[3<ch29iK%2eV%fke9h>rrih2$heIWI_^N8NS13LHaJ.nnM2o%*RFTH68]"FiZWb.6RPhW+]]>P0t2S&efGh#k7u^/M2qA^('n3j#d^R7m8[52Xssi`\QaDje[AC*`/iYNdgm780:SBJlu"/;:PmoP%#g4gEa-F*?lWE$r_25gBNjCb.@MY47iOU$So0b_<#Wln(oQ43<';HG+)BWC%iP*l5M:(6Ia>bP^:7.Un;#_)h!N4`t`hC3j:<ceD%U(8_P<)b'?3?^]5#r?=&,uLe*UuijY1:G?T*$QqF:L\d[3B9*B+?92)UN&VND%F0f"t'YQZ3nn!dD)fJ/a9]WHUo?0P&b8;WFWNY%H^jq<R$7)+Lm/PgWZ\>?&=gB?94'X?j>'c<2Wj'8L?!$99$Y9:?$]:A:.T?p`13#mr8TgehAG_1B$tn7S&bf!g:`_jEcb(k+Gc3`%P7BW"(I8_Fe2c9<G)JL!PT1T)a3'lVWnR@g-\nMBg=bc^WuGK`amn<E#!!fq0R#I`JP+,O8u;;BQ'BZ.c;NCMb`O?=h#C,9*f/9b%"+lJ!4[t`cDQe$TDWfqc>*i*$0hDd$j$4B@\oPKpb8S,g=bhrl%ttuoa#8ILLG@E!Sf*I2m^TRT6s_"iR,SR9Y]p7e9Qd;Z#&Uc$%7I1R>d2J\1+VDJ.1PVp3^f+Su>,3<I6;(J"7(.e?;$68e`+"K7ak3<&BPWAQLh\%p^aO@S0om?,HqB`i-j908ej:WL`Cfb,&S6]o%Y=IXb+W`WX&3$U@VLn:;j#OeH#g7#M.OMrpe[n?gE"rjCa%Anjj4NLe-_X\b:<f4=Li"hsC]2mZjnH0W'XY#34(@_2=\#\.Rb2Fc%e1066enmOf:4k>#SWBut?,0F.jG_?$_5a@DZC&.PJ&r/a4fpR?hODmF3k:Ia2-R8QZA">;5$`("3Zg1[durAZ`(s'&r&.X$1AB81%6#s,jFUj!06^:-H%+9p?R3t0AET.XD-b^ueX;2^mM@I0Ehp[E8Jeb*j3qMO3ag$-\B0YtF^[sIL!Cg/8!'9nE#jIV:#=#e6"7AZ?%Ht+?9O9`NK6aU"+'KTaha]alQI./Lq#<utgnWh0C0eER$:4A.i8AENnh[l_I$r^kj@BGENT9)&.'D%D0=r<ECSf?XUekXpO@2[oK%DjPG2f1E5Qkas-6o>qLJ\AjR)d1:Mc1?kHeA;3767mAJoCnUs*1[%=n[_oeK!oXI/UOSa'5T]k/!`s?4l-]_k[/%h)<lkV[.EI.E%'F169Sc4Jbq<q-6!)0_2]#V://2Ym`TH,0lBRD?BEU$*q0V9P:5Qp#Vf'anP\g;uA>\(l.[IeJHN'nl%8l@Y"O0a:h8=.@c-4jUJ%$(6nWeI7F2[!5*R9ZB;L,,7jH'R=P.A8l2G#`;$H@q4l##RXN?X>13?jEX6l,U!a6H,AQ$)4u_B6pL!@:GENWEmP/c/e".:#RUBk%=WUo[&EUVA'F@%S)(6mG\c7h6:Jm7iL<%-/?j\``Wss\L7J_[6:a?B>-@>)SGbO9)HW276*Yh8.77CZf,QlVS?H`HS7B64.3'!<-%j.V?5c'.KTds#S1;V/r<1lsC!AaHX_(:+B_IP'"+2**:?,.jZ$er<<39mb0S&rBFJ_D]`K\!gdLM>'kDA@*gZA]qca9E.oXU?TPS%N]Ud&N0%`j)M_oJ(=\?M]'.N?+)[4';K154P<<VQ,l=-7a>[3qR3.pYS4U*EW[nko-^BfmkKX*j:eHfXGm]?Qbed#'87Hq!]Kf%R%ZDo>r&ipOaHWd@^(3`/7!mt/lLe,B,q@T*DNf7,HH!imLQdoM12M=IdA7.ekUQ:J?;a_mr%(d/&)"s]BkhD&/+(86_'(X_R7!p<(%,YV>fP1R1N[U>1fbjTu+ge&;gBG<=\4T2ur-(66R8<?N^N+=-sIVrb2Z8CsJiX\F4TcPoWP>OV$]4_7`2+]-;,=pt)]5]AF0<D7Q%W(:=Ng1ldEQ'gcG2aZj(]bDf]BUoQ-Q4hl$UmUj7&^3M!?K1F]=[]eM:Ec-"@LnZ/@^O-=-dt_N6]ai.VjG)"HfCD<,j8fK:+mcI%0`+>X;'Z`KGB&c-+G2@O\W]Sk@L.l[G"q8fApn`0$)H6\VeT+#Mea:RM8sS%/uMUb-I$c]JA,!o2aVg6Yi(e^at/7TDo?N]XHn7d%d*C3U]c`WhXN=S"6U4\H'?`e,=;'c718#bU(eRs-Uen;]Pk,BTM_[mjQ>MRkQ9^nWH7#u2/oWn3s)d"fIeNB2^\mp$n)I(9mK_FA%QRDb#?aj(lS,dn)`s2&T@6Ega1[I+Vpqt*4j>QB<XB14Lr;-p._g;69f=a]@gU&pU=OiG`6't&6D?`6;<3U9H^!%kmZ**pOb9icT%9[$%+0`8),=Mc+fo^!H"j;gV)Z--WNROf.%TDcOW3+;B940.R)7@PB-r9XCGq=#HS$70,#fn*<n2W7S$7=H'o^M8a8>uc$QZ/VJ_%/\b=!5Yr1BF&ElPW5[h=1kedk&pU]N>R&S`p,hL/Rt,JFYGSOVht>Y7fIY`gHNH_Feo:C8"$s8rJt?a<3,ejo+58%A24t+]8Lq*c%1T5ak%'.,l!(=IDAW\+R2sO^r1jmA-`[oDSDaTWbkS*TVWfltfJsSd[9KXM,mIHa&3dLhbVo<e3",]*(q!>845$d:Wr$aj.qaCGq%hop"Wjlr\4,]MFc\Z9>V6gu6DUCeTIr7q8M#`8kZYB<"c^/57ZrSR3"DstF;:&F8NTE"W_o&$p[n)*$Z^&.cOLUTKsIJN'H\$*7O%hd6<Rp@RqOo9UP+IXM%Opm7lh?f/TrpuUhre$jgSq$G.4L_kR8mebo?qY!/F7%c@~>%AI9_PrivateDataEnd