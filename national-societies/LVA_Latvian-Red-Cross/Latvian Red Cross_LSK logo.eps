%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: LSK logo.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Peteris
%%CreationDate: 5/11/11
%%BoundingBox: 0 0 154 154
%%HiResBoundingBox: 0 0 153.8501 153.8501
%%CropBox: 0 0 153.8501 153.8501
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.0 x399 R agm 4.5188 ct 5.1874%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 128 8%%BeginData: 16686 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD35FFA87D525952522727F827F827F827F8272752527D7DA8A8FD%64FF7E7D5227F827F827F827F827F827F827F827F827F827F827F827F827%275259A8A8FD5CFF7D522727F827F827F827275252FD047DA87EA87DA87D%7D527D52522727F827F827F827527EA8FD56FF5952F827F827F827277D7D%A8A8FD13FFA87E5252F827F827F827277DA8FD50FFA8522727F827F8527D%A8FD1EFFA87D2727F827F82752A8FD4CFF7D2727F827F8527DA8FD24FFA8%7D2727F827F8287DFD48FF7D52F827F8527DFD2BFFA87D2727F827277DFD%44FF7D2727F827277DFD30FF7D52F827F8277DFD40FF8452F827F852A8FD%34FFA85227F82727A8FD3DFF5227F82727A8FD12FFA8A8A8FFFF7D27277D%FD04FF7D27527DFD15FF7D52F827F852A8FD39FF7D2727F8277DFD13FF7D%27F87DFFFF5227F87DFD04FF5227F87DFD17FFA82727F8277DFD36FFA852%F827F87DFD0EFFA8A8FD05FF7EF82728FFFF7DF8277DFD04FF52F8277DFD%08FFA87DA8A8FD0DFF5227F82752FD34FF7E27F82727FD0EFFA8522727FD%06FF27F827FFFF5927F8A8FD04FF2727F8A8FD08FF7D27F87DFD0EFFA852%F82727A8FD31FF5227F82752FD0CFFA85227F82727A8FD06FF2727F8A8FF%7DF8277DFD04FF27F827A8FD08FF52F82753FD10FF7DF827F87DFD2FFF52%27F827A8FD0DFFFD0427F87DFD07FF7DF8277DFF5227F8A8FD04FF272720%AFFD08FF2727F8A8FD11FFA82727F852FD2DFF2727F852A8FD0EFFA8A8A8%F82727FD07FF7D27F852FF7DF8277DFFFFFFA827F827A8FD07FF7D27F827%FD14FF2727F852A8FD2AFF2727F87DFD13FF52F8277DFD07FF272727FF53%27F8A8FD04FFF82727FD08FF7DF82752FD09FF7DFD0BFF5227F827A8FD27%FFA8F827F87DFD14FF5227F852FD07FF52F827FF7DF8277DFFFFFFA827F8%27FD08FF2727F884FD08FF522727A8FD0AFF7D27F827A8FD25FFA82727F8%A8FD0AFF7DFD0AFFA8F82720A9FD06FF7D27F8A87D27F8A8FFFFFFA8F827%27FD07FFA827F827A8FD07FF7D27F827F87DFD0AFF7D27F82784FD23FFA8%F827F8A8FD09FFA8272752FD0AFF52F82752FD06FFA8F8275284F8277DFF%FFFF7D27F852FD07FF7DF82727FD07FF7D27F852272752FD0BFF7D27F827%A8FD22FF272720A8FD09FF7DF827F8277DFD09FF7D27F852FD07FF52F852%7D27F8A8FFFFFF84F82752FFFFFF287DA8FF5227F87DFD06FFA827F85259%27F8FD0DFFA827F827A8FD20FF2727F8A8FD0AFF52272728F8277DFD09FF%2127F8A8FD06FF5227277DF8277DFFFFFF5227F852FFFF7D27F87DFF27F8%277DFD05FFA827F8277D52F852FD0EFF7D27F827A8FD1EFF2727F8A8FD0B%FFAFF8275252F8277DFD08FF59F82752FD06FF7DF8275227F8A8FFFFFF7D%F82752FFFF7DF827A8AFF82727FD06FF27F8277D84F8277EFD0FFF7D27F8%52FD1DFF5227F87DFD0DFF52F8277E27F8277DFD07FF7D27F827A8FD05FF%A827F827F827A8FFFFFF5227F87DFFFF272727FF5927F852FD05FF52F827%52FF272727FD11FF7D27F852FD1BFF7D27F87DFD0EFFA827F87DA827F827%7DFD07FF2727F87DFD06FF2727F827F8A8FFFFFF52F8277DFFFF27F87DFF%52F8277DFD04FF52F82727FF7D27F87DFD12FF5227F87DFD19FF7D27F852%FD10FF5227F8FF7D27F8277DFD06FF7DF82727FD06FF7D2752527DA8FFFF%FF7D7D52A8FFFF5227F852F827F8A8FFFFFF53F827F87DFF27F827A8FD08%FF7D59A8FD08FF2727F8A8FD18FF27F827FD11FFA8F82752FF7D27F8277D%FD05FFA827F82784FD15FF7D27F827F87DFFFFFF7DF827F8272052F82752%FD08FF52F82727A8FD08FF272727FD17FF52F8277DFD12FF52F8277DA9F8%27F8277DFD05FF522727A8FD17FFA87DA8FFFFFF7DF827F87DA852F827F8%A8FD06FFA827F827F827F8A8FD07FFA8F82752FD15FF84F82759FD13FFA8%27F827F8272827F827A8FD04FFA8A8FD1EFFA9F827F87DFFFF8427F852FD%07FF52F82720A8A82727FD08FF7DF8277DFD14FFF82727FD07FFA87DFD0C%FF2727F827A8FF5227F8277DFD24FF7DF852FFFFFF52F8277DFD07FFF827%F87EFFA8F8277DFD08FF52F827A8FD12FF5227F8AFFD07FF7DF852FD0BFF%A8F82727FFFFFF2827F87DFD26FFA8FFFFA8F82727FD07FFA827F852FFA8%F827F8A8FD08FFA827F852FD11FF7D27F87DFD07FF84F827F827A8FD0AFF%52F8277DFFFFFF52A8FD2AFF2727F87DFD04FF52A8FFA8F82752FFF827F8%52FD0AFF5227F8A8FD10FF52F852FD09FF7DF827F827A8FD09FF7D27F852%FD2FFF7DF827A8FFFFFF522727FFA827F87DFF84F87DFD0CFF272727FD0F%FF7DF8277DFD0AFF7DF827F8277DFD09FF2727F87DFD2FFFA852FFFFFF27%27F827A8A8F8277DFFFFA8FD0DFFA8F8277DFD0EFF272727FD0CFFA82727%F82752FD08FFA8F852A8FD33FF5227F827A8FF5227F87EFD11FF52F827FD%0DFF5227F8A8FD0EFF2727F82727FD07FFA87DFD35FF52F827A8FFA827F8%277DFD11FF7D27F87DFD0CFF52F852FD10FF5227F82727A8FFFFFF7D7DFD%37FF7D2752FFA827F82727FD13FF522727FD0BFF7DF827A8FD11FF5327F8%27F87DFF7EF852FD38FFFD0427F827F8A8FD13FFA8F8277DFD0AFF272727%FD13FF7D27F827F859F852FD3AFF2727F82727A8FD15FF52F852FD09FF7D%27F87DFD14FFA827F827F827A8FD14FFC392B593B592B593B592B593B592%B593B5A0FD15FF522727A8FD16FF7D27F8A8FD08FF7DF852FD17FF52F827%A8FD15FFC2B5B0B58CB5B0B58CB5B0B58CB5B0B58CC3FD30FF272752FD08%FFF82752FD18FF597DFD16FFC38CB58CB58CB58CB58CB58CB58CB58CB0A0%FD30FF7DF827A8FD06FF7D27F8FD31FFC2B58CB58CB58CB58CB58CB58CB5%8CB58CC3FD30FFA827F87DFD06FF52F852FD31FFC38CB08CB58CB58CB58C%B58CB58CB58CB5A0FD31FF272727FD06FF27277DFD31FFC2B58CB5B0B58C%B5B0B58CB5B0B58CB5B0C3FD31FF7DF827A8FD04FF7D27F8A8FD31FFC38C%B58CB58CB58CB58CB58CB58CB58CB5C2FD31FFA827F87DFD04FF52F852FD%32FFC2B58CB58CB58CB58CB58CB58CB58CB58CC3FD32FF272752FD04FF27%2752FD32FFC38CB58CB58CB58CB58CB58CB58CB58CB0A0FD32FF7DF827A8%FFFFA827F8A8FD32FFC2B5B0B58CB5B0B58CB5B0B58CB5B0B58CC9FD32FF%A827F8A8FFFF7DF827A8FD32FFC38CB58CB58CB58CB58CB58CB58CB58CB0%A0FD33FF212759FFFF522752FD33FFC2B58CB58CB58CB58CB58CB58CB58C%B58CC3FD33FF52F852FFFF27F87DFD33FFC38CB08CB58CB58CB58CB58CB5%8CB58CB5A0FD33FF522727FFFFF8277DFD33FFC2B58CB5B0B58CB5B0B58C%B5B0B58CB5B0C3FD33FFA8F827A87D27F8A8FD33FFC38CB58CB58CB58CB5%8CB58CB58CB58CB5C2FD2BFFAFFD07FFA827F8A87EF827FD34FFC3B58CB5%8CB58CB58CB58CB58CB58CB58CC9FD26FFA97D5228F8277DFD07FF27277D%522727FD07FF52272752277DFD04FFA8A8A8FD10FFC3A0C3A0C3A0C3A0C3%A0C3A0C3A0C3C2BC8CB58CB58CB58CB58CB58CB58CB58CB099C3A0C3A0C3%A0C3A0C3A0C3A0C3A0C2A0FD0FFF7D7D52A8FFFFA827F827F827F8277DFD%06FF52F85959F852FD06FF7D27F827F82752FFFFFF5227202727A8FD0EFF%93B5B0B58CB5B0B58CB5B0B58CB5B0B58CB5B0B58CB5B0B58CB5B0B58CB5%B0B58CB5B0B58CB5B0B58CB5B0B58CB5B0B58CBBFD0EFF2727F8277DFFFF%52F827F8272727F852FD06FF522752272752FD06FF52F8272727F87DFFA8%2727F827F827F8A8FD0DFFB58CB58CB58CB58CB58CB58CB58CB58CB58CB5%8CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB0%92FD0DFF5227F827F87DFF7DF827F87DA8FFA82727FD06FF7DF85228F87D%FD06FF2727FD05FF7DF827F8272752F82752FD0DFFB5B58CB58CB58CB58C%B58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58C%B58CB58CB58CB58CB58CBBFD0DFF53F87D7DFFFF84F827F8A8FFFFFFA8F8%27FD06FF52FD042759FD06FF27F87EA8FFA852F827F852A8FFFFA8F853FD%0CFFCAB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB5%8CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB593FD0DFF52277DFF%A87DF827F8A8FF522727F82727FD06FF7DF82727F8A8FD06FF2727F82727%27F827F87DFFA87DA87D2752FD0DFFB5B58CB5B0B58CB5B0B58CB5B0B58C%B5B0B58CB5B0B58CB5B0B58CB5B0B58CB5B0B58CB5B0B58CB5B0B58CB5B0%B58CB5B0BBFD0DFFA8F8272727F827F87DFFFFF827F827F87DFD06FF7D27%F8F8277DFD06FF7DF827F827F827F87EFFFF2727F827F884FD0CFFCFBB8C%B58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58C%B58CB58CB58CB58CB58CB58CB58CB58CB593FD0DFFA827F827F827F852FF%FFFF27F8522E7DFD07FFA8F82727F8A8FD07FF7D272827272EFD04FF27F8%27F852FD0EFF93B58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB5%8CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CBBFD0EFF84%522727277DFD10FF7E27F8F8277DFD09FFA8FFA8FD05FF7D7D527DA8FD0E%FFB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB5%8CB58CB58CB58CB58CB58CB58CB58CB58CB58CB092FD24FFA8F82727F8A8%FD24FF93B5B0B58CB5B0B58CB5B0B58CB5B0B58CB5B0B58CB5B0B58CB5B0%B58CB5B0B58CB5B0B58CB5B0B58CB5B0B58CB5B0B58CBBFD0EFF7DFD15FF%7E27F8F8277DFD24FFB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB5%8CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB093FD%0DFFA82753FD14FFA8F82727F8A8FD24FFB5B58CB58CB58CB58CB58CB58C%B58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58C%B58CB58CB58CBBFD0DFFA8F87DFD14FF7D27F8F8277DFD06FF7D52FD047D%FD04A8FFA8FD11FFCAB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB5%8CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB593FD%0DFF7D27F82727522752527D7DA8A8FD0AFF7DF82727F87EFD06FF2727F8%27F827F827F8FD04275252527DFD0DFFB5B58CB5B0B58CB5B0B58CB5B0B5%8CB5B0B58CB5B0B58CB5B0B58CB5B0B58CB5B0B58CB5B0B58CB5B0B58CB5%B0B58CB5B0BBFD0DFF7DF827F827F827F827F827F8272728277DFD06FF7D%FD042752FD06FF52F827F827F827F827F827F827F827F852FD0CFFCFBB8C%B58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58C%B58CB58CB58CB58CB58CB58CB58CB58CB593FD0DFF52272727F827F827F8%27F827F827F82727FD06FF7DF82752F87DFD06FFA87D7D7D5227277D527D%7D7D5353272752FD0DFF93B58CB58CB58CB58CB58CB58CB58CB58CB58CB5%8CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CB58CBB%FD0DFF52F8FFFFA97DA87D7D52522727F827F852FD06FF522727522752FD%0BFFF852FFFFA87D52522727F827FD0DFFB58CB58CB08CB58CB08CB58CB0%8CB58CB08CB58CB58CB58CB58CB58CB58CB58CB58CB58CB08CB58CB08CB5%8CB08CB58CB092FD0DFF5252FD0AFFA8FF7D7D7EFD06FF52F8527DF852FD%0AFFA82727522727F827F827F8527DFD0DFFC3C3C2C3C2C9C2C3C2C9C2C3%C2C9C2C9BBB5B0B58CB5B0B58CB5B0B58CB5B0B58CC2C3C3C2C9C2C3C2C9%C2C3C2C9C2C3C2C9FD24FF2727527D2727FD07FF7D522727F827F827F827%27527DA8FD1FFFC38CB58CB58CB58CB58CB58CB58CB58CB0A0FD33FFA827%F87DA8F827A8FD05FF8427F827F827F827277DA8FD23FFC2B58CB58CB58C%B58CB58CB58CB58CB58CC3FD1CFFA85227527DFD12FFA8F827A8A827F87E%FD05FFA8F827F827527EA8FD26FFC38CB08CB58CB58CB58CB58CB58CB58C%B5A0FD1BFFA827F827F8277DFD11FF7D27F8FFFF272753FD06FF7D7DA9FD%0CFF7D527DFD1BFFC2B58CB5B0B58CB5B0B58CB5B0B58CB5B0C3FD1BFF7D%F8522727F8FD04FFA853A8A8FD0AFF7DF852FFFF52F852FD12FF7D52F827%F852FD1BFFC38CB58CB58CB58CB58CB58CB58CB58CB5C2FD1BFF2727A8FF%7D7DFFFF7D27F827F82728A8FD08FF282752FFFF7D2727FD0FFF7D532727%F827F827F8FD1BFFC2B58CB58CB58CB58CB58CB58CB58CB58CC3FD1BFF27%F87DA8FFFF7D2727F827F827F827F8FD08FF27F87DFFFFA8F8277DFD0BFF%7D7D2727F827F827F852522752FD1AFFC38CB58CB58CB58CB58CB58CB58C%B58CB0A0FD1BFF2727F827F827F827F82752522727F82752FD06FFA8F827%7EFFFFFF27F87DFD08FFA87D2727F827F82720527DFFFFFFF852FD1AFFC2%B5B0B58CB5B0B58CB5B0B58CB5B0B58CC9FD1BFFA8F827F827F827F87DA8%FFFFFFA852F87DFD06FF592727FD04FF522727FD07FF2E27F827F827F827%2727A8FFFFA8272727FD1AFFC38CB58CB58CB58CB58CB58CB58CB58CB0A0%FD19FFA852A8FF5227F82752A8FFA8527DA8FF52277DFD06FF52F852FD04%FF7EF827A8FD06FF52F827F82752A8FFA8F8525227F827F852FD1AFFC2B5%8CB58CB58CB58CB58CB58CB58CB58CC3FD19FF52F8277DFFFFA9A8FFFFFF%5227F8FD0427FD07FF27277DFD04FFA827F87DFD06FF7D27277DA8FFFFFF%27272E27F827F8277DFD1AFFC38CB08CB58CB58CB58CB58CB58CB58CB5A0%FD18FFA8F827F82727FD06FF52F827F827F87DFD06FF5927F8A8FD05FF52%2752FD07FFA8FFFFFF7D52F82727FF5227277DFFFF7D53FD18FFC2B58CB5%B0B58CB5B0B58CB5B0B58CB5B0C3FD19FFA82727F827277DFD06FF7D5227%7DFD07FF52F852FD06FF7DF827A8FD07FFA852F827F827F852FFFFA8FFFF%FF5327F859FD17FFC38CB58CB58CB58CB58CB58CB58CB58CB5C2FD17FF7D%A8FFFF5227F827F852A8FD0EFFA8F8277DFD06FFA827F87DFD06FFA827F8%27F8272759AFFD05FF2727F82727FD17FFC2B58CB58CB58CB58CB58CB58C%B58CB58CC3FD16FF7D27207DFFFFA828F827F82759FD0DFF7D2720FD08FF%522727FD07FF2727F8527DFD06FFA8F827F82727A8FD17FFC28CB58CB08C%B58CB08CB58CB08CB58CB0A0FD16FF27F827F852A8FFFF59F827F82727A8%FD0BFF27F852FD08FFA8F8277DFD06FF7D52FD08FF7DF827F8277DFFFFA8%59FD15FFC3BBB5BB93BBB5BB93BBB5BB93BBB5BB93C9FD16FF7E52F827F8%277DFFFFA82727F827F87DFD09FFA8F827A8FD09FF52F852FD06FFA8FD07%FFA827F827F8277DA85227F82752FD15FFCFFFFFFFCFFFFFFFCFFFFFFFCF%FD1CFF7DF827F82727A8FFFF5327F827F87DFD08FF272727FD0AFF7D27F8%A8FD0CFF7D27F827F8525252F827F827F852FD39FFA8527DFFFFFFA82727%F827F87DFFFFA852F82752FD07FFA827F884FD0BFF272728FD0BFF5227F8%272752F827F827F85253A8FD39FF52F827F852FD04FF5227F827F8277DFF%FF52F852FD07FF52F827FD0CFF7DF827A8FD08FFA82727F82752A82727F8%5252A9FD3BFF52F827F827F852FD04FFA852F827F82752FF522784FD06FF%A8F8277DFD0DFF27F852FD07FFA8F827F82752FF2727F852FD09FF522EFD%31FFA852F87DFF7DF827F87DFD05FF7DF827F827F82752FD07FF272727FD%0EFF7D27F8A8FD06FFA827F8277DFF2727F852FD09FF52F82727FD30FF52%F82727FFFF7EF8277DFD07FF5227F82752FD07FF7D27F87EFD0FFF272727%FD07FF7D52A8FF5227F827A8FD07FFA827F8FD0427FD2DFFA8FF7D27F827%F8A8FF52F8A87DA8FD06FF7D5252FD07FFA827F827FD10FFA8F82753FD09%FF5227F8277DFD07FFA827F8275227F87DFD2CFF5227FFFFA827F82727FF%59272727F87DFD0FFF7DF82784FD11FF52F827A8FD07FF7D27F82752FD07%FF7D27F8277D52F827A8FFFFA8A8FD27FF5227F8A8FFFF7D27F8FD042752%F827F87DFD0DFFA8F82752FD12FFA827F852FD08FF272752FD07FF7D27F8%277DA8F8277DFFFFFF522752A8FD22FF7D7DFFA8F8277DFFFFFFA827F827%F8FFFF7DF827F87DFD0CFF272727FD14FF7D27F87DFD07FF7EF8FD07FF52%27F8277DFFF82727FFFFFFA827F827F8FD21FF5227F8A8FF27F852FD04FF%7D27F82727FFFF59F827F87DFD0AFF5227F87DFD15FF5227F8A8FD0EFF52%27F8277DFF5227F8A8FFFFFF7DF827F852FFFF7D7DFD1DFF52F82727FF52%2727FD05FF7D27F82727FFFF7DF827F852FD08FFA827F852FD17FF272727%FD0DFF5227F82727FF7D27F852FD04FF2727F82727FFA827F87DFD14FF7D%7D7DFD05FFA827F8277D7DF8277DFD05FF7D27F82727FFFF53F8277DFD07%FFA827F827A8FD17FFA8F82728FD0BFF2727F82727272827F827A8FFFFFF%7D27F827F87DFF7DF827A8FFFFFF7D27527D7DFFFFFF84A87DFD04FF52F8%27F82752FD05FF7D27F8277D27F87DFD06FF7D27F82727FFFF7D7DFD08FF%52F8277DFD19FF7DF82752FD09FF2727F8277DFF5227F82752FD04FF28F8%27F8277DFF272728FD04FF52F827F827A8FFFF27F827A8FFFF52F8275227%F827A8FD05FF2727F8522727F8A8FD06FF5227F82727FD0AFF53F82752FD%1BFF52F8277DFD08FF7DF8277EFFFFA9F82727FD04FFA8F8275227F8A87D%27F8A8FD04FFF8FD0427FFFFFF2727F8A8FFA8F82752FF7D27F8A8FD05FF%A8F827F827F82727A8FD06FF7D27F827A8FD08FF7DF82752FD1DFF27F827%7DFD08FF7D7DFFFFFF2727F87DFD04FF2727277DF827A852F852FD04FF52%272752F852FFFFFF52F8277DFFA827F827FFA8F82752FD06FF52F8272752%F827F87EFD06FF5227A8FD08FFA8F82727FD1FFF27F827A8FD0BFF7D27F8%52FD04FFA827F8A87D2727A8F8277DFD04FF2EF852522752FFFFFF5227F8%A8FFFF2727F8A8FF7D7DA8FD06FFA827F8277D52F827F87DFD0FFFA8F827%27FD20FFA827F8277DFD09FFA827F8277DFD04FF52F827A852F852272727%FD04FF7EF8277D52F852FFFFFF52F8277DFFFF52F827F8A8FD0AFF5227F8%27A852F827F87DFD0DFFA8F827F8A8FD21FFA827F827A8FD09FF532727FD%05FF272752FFFD0427F87DFD04FF522727FF272752FFFFFF5227F87EFFFF%A827F827F87DFD0AFF2727F87DFF52F827F87DFD0BFFA8202727FD24FF7D%27F8277DFD09FF7DA8FD04FF5227F8A8FF27F827F827A8FFFFFFA827F852%FF27F852FFFFFF52F82752FFFFFFA852F827F8277DFD08FFA8F827F8A8FF%27F82727FD0AFF7EF827F8A8FD25FFA827F8277DFD0EFF27F852FFA8F827%F82752FD04FF7DF8277DFF202752FFFFFF5227F87DFD05FFA82727F8277D%FD08FF52F82727FFA8527DFD0AFF7DF82727FD28FFA827F82752FD0CFF7D%F8277DFF7D27F827F8A8FD04FF2727F8FF7D27F87DFFFFFF7DF82752FD07%FF2727F827A8FD07FFA827F82752FD0CFF53F82727A8FD2AFF52F82752FD%0BFF7D2727FFFF7DF827F852FD04FF7E27F8272752F82753FFFFFF7D27F8%53FD04FF5252A8FF2727F87DFD08FF7D2727A8FD0BFF52F82727FD2DFF52%F82727A8FD0AFFA8A8FFFF5227F8277DFD04FF52F8272752F827F87DFFFF%FF7DF82752FFFFFF7D27F87DFF7DF82752FD09FF7DFD0BFF7E27F82752FD%2FFF7DF827F87DFD0DFF7DF82727FD05FF272727FFFF7DF8277DFFFFFF7D%27F852FD04FF272752FFA827F852FD14FF7D27F8277DFD31FFA82127F82E%A8FD0CFFA8277DFD04FF5327F852FFFF5227F87EFFFFFFA8F82727FD04FF%52F827A8A8F82727FD12FFA82727F8277DFD34FF5227F8277DFD12FF52F8%277DFFFF53F8277EFFFFFF7D27F852FD04FF5227F8522727F8A8FD11FF7D%F827F852FD37FF7D27F827277EFD10FF7D5352FFFFFF2727F8A8FFFFFFA8%F82727FD05FF2727F82752A8FD10FF7D27F827F87DFD39FFAF52F827F852%A8FD14FF7D2727A8FFFFFFA8272752FD06FFA8A8A9FD10FFA85227F82752%FD3DFFA82727F82727A8FD14FFA8FD05FFA8FD19FF7E52F827F8277DFD40%FF7D52F827F8527DFD30FFA85227F827277DFD44FF7D2727F827277DA8FD%2AFFA95227F827F82753FD48FF7D52F827F827527DA8FD25FF7D52F827F8%272784FD4CFFA85227F827F827277D7DFD1DFFA8A85252F827F827F8527D%FD50FFA87E5227F827F827275253A8A8FD15FF7D7D5227F827F82727527D%FD56FFA87D5227F827F827F827F8FD04527D7DA87DA87DA8FD047D525227%27F827F827F82727527DFD5DFFA87D522727F827F827F827F827F827F827%F827F827F827F827F827F852527DA8FD64FFA8A87D5952522727F827F827%F827F827F8272752527D7DFD34FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">sarkanais krusts</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>Es</rdf:li>
            </rdf:Seq>
         </dc:creator>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:CreateDate>2011-05-11T12:07:11+03:00</xmp:CreateDate>
         <xmp:ModifyDate>2011-05-11T12:07:11+03:00</xmp:ModifyDate>
         <xmp:MetadataDate>2011-05-11T12:07:11+03:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FUo8xeb/K/lu2+s69qltpsRFU+sSKrPT+RPtv8A7EHFXkXmb/nLnyHp5ePQ7K71uVSQJKC0&#xA;gang8gaT/klirz+f/nJj85PMs7W/lTRIod6KtlazX04r/MW5p/yTGKuXQv8AnLfzL8c1zqVlG9OT&#xA;Ncw6aBU/77iaF/uXFW0/5xl/OvUyJNU1+2Sv2hcXt1NJ9n2jdT4faxVfH/zhx5sKAya/YK/cKkzD&#xA;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&#xA;Yq7FXYq7FXYq7FXYq//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xmpMM:DocumentID>xmp.did:58AE085C9320681188C6E3C1001EF3B3</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:58AE085C9320681188C6E3C1001EF3B3</xmpMM:InstanceID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:D69DD0AC382068118A6DA91B6E424F1E</stEvt:instanceID>
                  <stEvt:when>2011-04-13T14:31:27+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F1174072068118A6DFF8CA04A032A</stEvt:instanceID>
                  <stEvt:when>2011-04-15T15:56:16+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:57AE085C9320681188C6E3C1001EF3B3</stEvt:instanceID>
                  <stEvt:when>2011-05-11T12:07:03+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:58AE085C9320681188C6E3C1001EF3B3</stEvt:instanceID>
                  <stEvt:when>2011-05-11T12:07:11+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:OriginalDocumentID>uuid:C1567BBFC3FEDF11BFB9EAFC13645BB9</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:57AE085C9320681188C6E3C1001EF3B3</stRef:instanceID>
            <stRef:documentID>xmp.did:57AE085C9320681188C6E3C1001EF3B3</stRef:documentID>
            <stRef:originalDocumentID>uuid:C1567BBFC3FEDF11BFB9EAFC13645BB9</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>209.999929</stDim:w>
            <stDim:h>296.999959</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -153.85 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 153.85 li
153.85 153.85 li
153.85 0 li
cp
clp
[1 0 0 1 0 0 ]ct
47.0664 86.9316 mo
47.0664 66.9165 li
66.917 66.9165 li
66.917 47.0664 li
86.9321 47.0664 li
86.9321 66.9165 li
106.784 66.9165 li
106.784 86.9316 li
86.9321 86.9316 li
86.9321 106.784 li
66.917 106.784 li
66.917 86.9316 li
47.0664 86.9316 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 .99 1 0 cmyk
ef
76.9253 0 mo
98.1636 0 117.395 8.6123 131.317 22.5332 cv
145.238 36.4551 153.85 55.6865 153.85 76.9253 cv
153.85 98.1636 145.238 117.395 131.317 131.316 cv
117.395 145.238 98.1636 153.85 76.9253 153.85 cv
55.687 153.85 36.4556 145.238 22.5337 131.316 cv
8.6123 117.395 0 98.1636 0 76.9253 cv
0 55.6865 8.6123 36.4551 22.5337 22.5332 cv
36.4556 8.6123 55.687 0 76.9253 0 cv
cp
129.475 24.3755 mo
116.025 10.9258 97.4448 2.60498 76.9253 2.60498 cv
56.4058 2.60498 37.8257 10.9258 24.3755 24.3755 cv
10.9258 37.8252 2.60498 56.4058 2.60498 76.9253 cv
2.60498 97.4443 10.9258 116.024 24.3755 129.475 cv
37.8257 142.924 56.4058 151.245 76.9253 151.245 cv
97.4448 151.245 116.025 142.924 129.475 129.475 cv
142.924 116.024 151.246 97.4443 151.246 76.9253 cv
151.246 56.4058 142.924 37.8252 129.475 24.3755 cv
0 0 0 1 cmyk
f
43.7969 44.4482 mo
38.5376 50.9429 li
22.7856 38.1865 li
25.5879 34.7256 li
39.3198 45.8452 li
41.7759 42.8115 li
43.7969 44.4482 li
cp
f
44.0488 44.6528 mo
38.7896 51.1475 li
38.5859 51.3994 li
38.333 51.1948 li
22.5806 38.4385 li
22.3291 38.2349 li
22.5332 37.9819 li
25.3359 34.521 li
25.54 34.269 li
25.7925 34.4736 li
39.2715 45.3887 li
41.5239 42.6069 li
41.728 42.3555 li
41.981 42.5596 li
44.0015 44.1963 li
44.2534 44.4004 li
44.0488 44.6528 li
cp
38.4897 50.4863 mo
43.3403 44.4961 li
41.8242 43.2681 li
39.5713 46.0498 li
39.3677 46.3018 li
39.1147 46.0972 li
25.6357 35.1826 li
23.2422 38.1387 li
38.4897 50.4863 li
cp
0 0 0 0 cmyk
f
54.6299 36.3584 mo
51.0171 38.8877 li
47.2788 34.8608 li
45.6465 36.0039 li
48.1558 40.8916 li
44.5435 43.4209 li
35.6479 24.9043 li
40.2686 21.6694 li
54.6299 36.3584 li
cp
45.3652 32.7671 mo
41.373 28.1763 li
44.3457 33.4814 li
45.3652 32.7671 li
cp
0 0 0 1 cmyk
f
54.8154 36.624 mo
51.2031 39.1533 li
50.9712 39.3159 li
50.7793 39.1089 li
47.2334 35.2891 li
46.064 36.1074 li
48.4448 40.7437 li
48.5737 40.9951 li
48.3413 41.1572 li
44.729 43.6865 li
44.4165 43.9058 li
44.2505 43.5605 li
35.3555 25.0444 li
35.2368 24.7969 li
35.4624 24.6387 li
40.0825 21.4033 li
40.3081 21.2456 li
40.5015 21.4429 li
54.8623 36.1318 li
55.1294 36.4048 li
54.8154 36.624 li
cp
51.063 38.46 mo
54.1304 36.312 li
40.2285 22.0933 li
36.0596 25.0122 li
44.6704 42.936 li
47.7383 40.7881 li
45.3579 36.1519 li
45.229 35.9009 li
45.4609 35.7383 li
47.0933 34.5952 li
47.3252 34.4331 li
47.5171 34.6396 li
51.063 38.46 li
cp
44.8838 32.7085 mo
43.2012 30.7734 li
44.4541 33.0093 li
44.8838 32.7085 li
cp
41.6187 27.9639 mo
45.6108 32.5547 li
45.8467 32.8262 li
45.5508 33.0332 li
44.5313 33.7471 li
44.2373 33.9531 li
44.062 33.6406 li
41.0894 28.3354 li
39.5449 25.5791 li
41.6187 27.9639 li
cp
0 0 0 0 cmyk
f
58.4473 15.7661 mo
56.1274 16.6567 li
62.4438 33.1118 li
58.2866 34.7075 li
51.9702 18.2529 li
49.6455 19.145 li
48.6978 16.6768 li
57.5 13.2979 li
58.4473 15.7661 li
cp
0 0 0 1 cmyk
f
58.563 16.0688 mo
56.5464 16.8433 li
62.7466 32.9961 li
62.8628 33.2983 li
62.5596 33.4146 li
58.4019 35.0103 li
58.1001 35.1265 li
57.9839 34.8237 li
51.7837 18.6719 li
49.7617 19.4478 li
49.459 19.564 li
49.3428 19.2607 li
48.3955 16.7925 li
48.2793 16.4902 li
48.582 16.374 li
57.3838 12.9951 li
57.6865 12.8789 li
57.8027 13.1816 li
58.75 15.6504 li
58.8662 15.9526 li
58.563 16.0688 li
cp
56.0117 16.354 mo
58.0283 15.5801 li
57.3135 13.7163 li
49.1167 16.8628 li
49.832 18.7261 li
51.854 17.9502 li
52.1567 17.834 li
52.2729 18.1372 li
58.4727 34.2891 li
62.0249 32.9253 li
55.8247 16.7725 li
55.709 16.4702 li
56.0117 16.354 li
cp
0 0 0 0 cmyk
f
75.3345 10.3989 mo
75.0991 30.8496 li
68.8394 31.6182 li
63.6636 11.8315 li
67.9692 11.3032 li
71.2227 25.1714 li
71.0151 10.9292 li
75.3345 10.3989 li
cp
0 0 0 1 cmyk
f
75.6587 10.4014 mo
75.4233 30.8521 li
75.4199 31.1382 li
75.1382 31.1729 li
68.8789 31.9414 li
68.5977 31.9756 li
68.5254 31.6992 li
63.3496 11.9131 li
63.2554 11.5537 li
63.624 11.5088 li
67.9297 10.9805 li
68.2192 10.9448 li
68.2856 11.2295 li
70.8545 22.1787 li
70.6904 10.9326 li
70.6865 10.6416 li
70.9756 10.606 li
75.2949 10.0757 li
75.6626 10.0308 li
75.6587 10.4014 li
cp
74.7778 30.561 mo
75.0059 10.7671 li
71.3433 11.2168 li
71.5469 25.1675 li
71.5908 28.1641 li
70.9058 25.2451 li
67.7192 11.6616 li
64.0718 12.1094 li
69.0815 31.2607 li
74.7778 30.561 li
cp
0 0 0 0 cmyk
f
83.688 31.144 mo
79.2456 30.8335 li
80.6597 10.6133 li
85.1021 10.9238 li
83.688 31.144 li
cp
0 0 0 1 cmyk
f
83.6665 31.4683 mo
79.2241 31.1577 li
78.8979 31.1353 li
78.9214 30.8115 li
80.3345 10.5918 li
80.3579 10.2661 li
80.6812 10.2891 li
85.1235 10.5996 li
85.4487 10.6221 li
85.4263 10.9453 li
84.0122 31.166 li
83.9897 31.4912 li
83.6665 31.4683 li
cp
79.5923 30.5317 mo
83.3862 30.7969 li
84.7554 11.2256 li
80.9604 10.96 li
79.5923 30.5317 li
cp
0 0 0 0 cmyk
f
87.4976 23.6338 mo
91.2915 24.6504 li
89.9956 29.4883 li
89.9106 29.8052 90.0688 30.0176 90.4692 30.1245 cv
90.8696 30.2319 91.1128 30.1274 91.1978 29.8105 cv
95.6323 13.2607 li
99.9341 14.4136 li
95.5845 30.646 li
94.9556 32.9951 93.0142 33.7334 89.7651 32.8633 cv
88.6099 32.5537 87.6587 31.999 86.9116 31.1895 cv
86.1685 30.3857 85.9194 29.5249 86.1655 28.6069 cv
87.4976 23.6338 li
cp
0 0 0 1 cmyk
f
87.5815 23.3198 mo
91.3755 24.3364 li
91.6899 24.4209 li
91.606 24.7349 li
90.3101 29.5723 li
90.2944 29.6299 90.2944 29.6699 90.311 29.6919 cv
90.3433 29.7354 90.4214 29.7744 90.5435 29.8081 cv
90.5532 29.8105 li
90.6812 29.8447 90.771 29.8506 90.8237 29.8276 cv
90.8472 29.8174 90.8677 29.7852 90.8823 29.7314 cv
90.8833 29.7266 li
95.3179 13.1768 li
95.4028 12.8628 li
95.7163 12.9468 li
100.018 14.0991 li
100.333 14.1836 li
100.249 14.4976 li
95.8989 30.7305 li
95.5552 32.0117 94.8462 32.8574 93.7729 33.2661 cv
92.7378 33.6606 91.3735 33.6309 89.6812 33.1772 cv
89.0776 33.0156 88.5239 32.7881 88.021 32.4937 cv
87.5171 32.1982 87.0679 31.8374 86.6733 31.4097 cv
86.6733 31.4092 li
86.2671 30.9692 85.9937 30.5098 85.856 30.0313 cv
85.7144 29.542 85.7134 29.0391 85.8511 28.5229 cv
87.1841 23.5503 li
87.2681 23.2363 li
87.5815 23.3198 li
cp
90.8931 24.8804 mo
87.728 24.0327 li
86.48 28.6909 li
86.3726 29.0923 86.3716 29.4795 86.479 29.8506 cv
86.5894 30.2329 86.814 30.606 87.1499 30.9697 cv
87.1509 30.9697 li
87.5034 31.3516 87.9028 31.6724 88.3501 31.9341 cv
88.7974 32.1968 89.2983 32.4014 89.8491 32.5488 cv
91.4058 32.9658 92.6372 33.0024 93.5415 32.6577 cv
94.4077 32.3281 94.9849 31.6289 95.27 30.5625 cv
99.5356 14.6436 li
95.8618 13.6592 li
91.5239 29.8521 li
91.5122 29.8945 li
91.4429 30.1548 91.2983 30.3315 91.0806 30.4258 cv
90.9009 30.5034 90.6841 30.5112 90.4302 30.4502 cv
90.4282 30.4502 li
90.3853 30.439 li
90.1128 30.3657 89.9136 30.2456 89.7896 30.0781 cv
89.6479 29.8887 89.6118 29.6631 89.6812 29.4043 cv
90.8931 24.8804 li
cp
0 0 0 0 cmyk
f
106.63 41.2056 mo
102.89 38.8687 li
105.136 33.8545 li
103.446 32.7983 li
99.9282 37.0176 li
96.188 34.6807 li
109.757 19.2578 li
114.541 22.2466 li
106.63 41.2056 li
cp
106.316 31.2744 mo
108.982 25.8057 li
105.26 30.6147 li
106.316 31.2744 li
cp
0 0 0 1 cmyk
f
106.458 41.4814 mo
102.719 39.1445 li
102.479 38.9946 li
102.594 38.7363 li
104.724 33.9805 li
103.514 33.2236 li
100.177 37.2251 li
99.9956 37.4434 li
99.7563 37.2935 li
96.0161 34.9565 li
95.6909 34.7534 li
95.9438 34.4658 li
109.513 19.043 li
109.695 18.8359 li
109.928 18.9819 li
114.711 21.9707 li
114.946 22.1172 li
114.84 22.3711 li
106.931 41.3306 li
106.783 41.6841 li
106.458 41.4814 li
cp
103.302 38.7432 mo
106.478 40.7271 li
114.133 22.376 li
109.819 19.6797 li
96.6851 34.6084 li
99.8608 36.5918 li
103.197 32.5908 li
103.379 32.373 li
103.618 32.5225 li
105.308 33.5781 li
105.548 33.7285 li
105.432 33.9868 li
103.302 38.7432 li
cp
106.182 30.8071 mo
107.305 28.5034 li
105.737 30.5293 li
106.182 30.8071 li
cp
109.275 25.9482 mo
106.609 31.417 li
106.45 31.7417 li
106.144 31.5503 li
105.088 30.8906 li
104.784 30.7002 li
105.003 30.4165 li
108.725 25.6074 li
110.66 23.1084 li
109.275 25.9482 li
cp
0 0 0 0 cmyk
f
114.002 36.8457 mo
116.662 39.9043 li
113.152 42.9561 li
112.802 43.2598 112.811 43.623 113.174 44.0415 cv
113.53 44.4492 113.878 44.4976 114.228 44.1938 cv
116.042 42.6172 li
116.595 42.1362 116.927 41.2021 117.031 39.814 cv
117.174 37.1768 117.334 35.4775 117.507 34.7134 cv
117.676 33.9526 118.052 33.3252 118.621 32.8315 cv
120.339 31.3374 li
122.324 29.6128 124.438 30.0439 126.689 32.6333 cv
128.705 34.9531 128.808 36.896 127.002 38.4658 cv
124.358 40.7642 li
121.697 37.7017 li
124.511 35.2549 li
124.817 34.9888 124.825 34.6885 124.537 34.3569 cv
124.195 33.9634 123.729 34.0234 123.139 34.5361 cv
122.202 35.4658 li
121.633 35.9595 121.3 36.9146 121.202 38.3232 cv
121.074 40.8901 120.91 42.5991 120.707 43.4399 cv
120.507 44.2842 120.064 45.002 119.391 45.5879 cv
117.439 47.2847 li
115.403 49.0542 113.26 48.6406 111.003 46.0444 cv
108.826 43.5391 108.665 41.4863 110.514 39.8779 cv
114.002 36.8457 li
cp
0 0 0 1 cmyk
f
114.249 36.6328 mo
116.724 39.481 li
116.791 38.3096 116.861 37.3291 116.934 36.54 cv
117.015 35.6699 117.101 35.0371 117.19 34.6421 cv
117.191 34.6421 li
117.283 34.2285 117.431 33.8511 117.632 33.5107 cv
117.835 33.166 118.095 32.8579 118.408 32.5859 cv
120.126 31.0918 li
121.199 30.1602 122.316 29.812 123.479 30.0493 cv
124.609 30.2803 125.76 31.0708 126.934 32.4209 cv
127.991 33.6367 128.547 34.7676 128.603 35.814 cv
128.661 36.8911 128.198 37.8564 127.214 38.7114 cv
124.571 41.0098 li
124.327 41.2222 li
124.113 40.9766 li
121.552 38.0308 li
121.542 38.1328 121.534 38.2373 121.526 38.3452 cv
121.526 38.3452 li
121.461 39.6279 121.388 40.6997 121.305 41.5591 cv
121.221 42.4258 121.127 43.0776 121.023 43.5132 cv
121.024 43.5137 li
120.917 43.9683 120.743 44.3901 120.505 44.7773 cv
120.268 45.165 119.966 45.5176 119.603 45.8335 cv
117.651 47.5303 li
116.554 48.4839 115.417 48.8472 114.243 48.6211 cv
113.097 48.3999 111.935 47.6123 110.757 46.2568 cv
109.622 44.9502 109.01 43.748 108.924 42.6499 cv
108.834 41.5146 109.293 40.5088 110.302 39.6328 cv
113.791 36.6001 li
114.035 36.3877 li
114.249 36.6328 li
cp
116.204 39.8726 mo
113.971 37.3037 li
110.727 40.1235 li
109.885 40.855 109.5 41.6802 109.573 42.5991 cv
109.648 43.5562 110.207 44.6338 111.249 45.832 cv
112.328 47.0728 113.366 47.79 114.365 47.9824 cv
115.334 48.1689 116.288 47.8545 117.226 47.0391 cv
119.178 45.3423 li
119.49 45.0713 119.749 44.7695 119.951 44.4385 cv
120.152 44.1113 120.299 43.7534 120.39 43.3662 cv
120.391 43.3647 li
120.489 42.9595 120.578 42.3369 120.66 41.498 cv
120.741 40.6533 120.813 39.5894 120.877 38.3086 cv
120.877 38.3018 li
120.928 37.5688 121.042 36.9487 121.219 36.4443 cv
121.403 35.9194 121.656 35.5142 121.979 35.2295 cv
122.91 34.3062 li
122.926 34.2905 li
123.27 33.9922 123.591 33.8232 123.89 33.7852 cv
124.238 33.7402 124.536 33.8604 124.782 34.1445 cv
124.981 34.3735 125.078 34.6055 125.071 34.8398 cv
125.064 35.0845 124.949 35.3047 124.724 35.5 cv
122.155 37.7334 li
124.391 40.3057 li
126.79 38.2202 li
127.613 37.5049 128 36.7139 127.955 35.8472 cv
127.907 34.9502 127.403 33.9497 126.443 32.8457 cv
125.366 31.6069 124.334 30.8867 123.349 30.6855 cv
122.396 30.4912 121.463 30.7905 120.551 31.583 cv
118.833 33.0771 li
118.575 33.3013 118.36 33.5566 118.192 33.8418 cv
118.024 34.126 117.901 34.4399 117.824 34.7837 cv
117.824 34.7847 li
117.74 35.1563 117.659 35.7607 117.581 36.5986 cv
117.501 37.437 117.426 38.5142 117.355 39.8306 cv
117.355 39.8379 li
117.301 40.5596 117.186 41.1675 117.012 41.6621 cv
116.828 42.1836 116.575 42.584 116.253 42.8628 cv
114.44 44.4395 li
114.191 44.6558 113.93 44.7451 113.658 44.7065 cv
113.409 44.6709 113.17 44.5259 112.945 44.2715 cv
112.945 44.2715 li
112.945 44.2715 li
112.929 44.2539 li
112.697 43.9863 112.577 43.7217 112.571 43.4619 cv
112.565 43.1802 112.688 42.9287 112.939 42.7104 cv
116.204 39.8726 li
cp
116.649 40.3457 mo
113.364 43.2012 li
113.266 43.2861 113.218 43.3696 113.22 43.4492 cv
113.222 43.5474 113.285 43.6685 113.405 43.811 cv
113.405 43.8115 li
113.42 43.8291 li
113.543 43.9712 113.654 44.0493 113.75 44.0625 cv
113.827 44.0737 113.916 44.0352 114.015 43.9482 cv
115.829 42.3721 li
116.062 42.1694 116.252 41.8604 116.399 41.4453 cv
116.508 41.1353 116.592 40.7686 116.649 40.3457 cv
cp
121.66 37.3032 mo
124.298 35.0088 li
124.379 34.939 124.42 34.8765 124.422 34.8218 cv
124.424 34.7563 124.38 34.6719 124.291 34.5693 cv
124.197 34.4604 124.089 34.4136 123.971 34.4287 cv
123.806 34.4497 123.602 34.5649 123.36 34.7739 cv
122.431 35.6963 li
122.415 35.7119 li
122.174 35.9204 121.98 36.2363 121.833 36.6577 cv
121.765 36.8516 121.707 37.0669 121.66 37.3032 cv
0 0 0 0 cmyk
f
19.2378 66.2134 mo
18.8843 70.2515 li
14.251 69.8457 li
13.7896 69.8052 13.5347 70.064 13.4858 70.6167 cv
13.439 71.1553 13.6465 71.4399 14.1079 71.48 cv
16.5015 71.6895 li
17.2324 71.7534 18.1353 71.3433 19.2056 70.4541 cv
21.2026 68.7246 22.5356 67.6597 23.2056 67.2534 cv
23.8706 66.8467 24.5825 66.6812 25.3325 66.7466 cv
27.6016 66.9453 li
30.2207 67.1748 31.3794 68.9951 31.0801 72.4131 cv
30.812 75.4746 29.4863 76.8989 27.1021 76.6899 cv
23.6123 76.3848 li
23.9663 72.3428 li
27.6821 72.668 li
28.0854 72.7031 28.3066 72.4995 28.3452 72.0625 cv
28.3906 71.543 28.0239 71.2495 27.2451 71.1812 cv
25.9253 71.1528 li
25.1753 71.0874 24.2568 71.5107 23.1753 72.4185 cv
21.2397 74.1094 19.8965 75.1787 19.1514 75.6172 cv
18.4053 76.0601 17.5806 76.2397 16.6914 76.1621 cv
14.1152 75.9365 li
11.4282 75.7017 10.2368 73.873 10.5371 70.4458 cv
10.8262 67.1392 12.1914 65.5972 14.6328 65.8105 cv
19.2378 66.2134 li
cp
11.7388 92.8262 mo
11.2783 88.4404 li
16.6123 87.1226 li
16.4038 85.1411 li
10.9131 84.9663 li
10.4521 80.5806 li
30.9595 81.7773 li
31.5488 87.3867 li
11.7388 92.8262 li
cp
19.3716 86.4639 mo
25.3223 85.1982 li
19.2417 85.2261 li
19.3716 86.4639 li
cp
17.5391 107.97 mo
16.0161 103.785 li
16.3906 103.135 17.8423 102.355 20.3677 101.436 cv
20.395 101.426 li
21.5459 101.033 li
23.1382 100.484 23.9546 100.202 23.9907 100.189 cv
24.6348 99.9551 24.8047 99.4053 24.4878 98.5347 cv
15.3472 101.862 li
13.8237 97.6768 li
32.8711 90.7441 li
34.7524 95.9131 li
35.1812 97.0918 35.2871 98.2139 35.0596 99.2822 cv
34.8384 100.354 34.1445 101.099 32.9746 101.525 cv
30.6899 102.357 li
29.2119 102.895 27.8945 102.394 26.7441 100.856 cv
26.9683 102.741 26.2378 103.993 24.5464 104.608 cv
22.436 105.299 li
19.3896 106.408 17.7578 107.3 17.5391 107.97 cv
cp
28.2798 98.6279 mo
31.4131 97.4878 li
32.0791 97.2451 32.2534 96.6938 31.9365 95.8237 cv
26.7954 97.6948 li
27.1123 98.5654 27.6089 98.8726 28.2798 98.6279 cv
cp
26.8711 121.313 mo
23.9976 117.358 li
29.0767 111.551 li
22.9912 115.972 li
20.3735 112.369 li
36.772 100.455 li
39.3896 104.058 li
33.9248 108.028 li
40.5352 105.635 li
42.9629 108.977 li
33.873 112.193 li
26.8711 121.313 li
cp
39.8174 132.545 mo
36.3901 129.77 li
39.2305 125.066 li
37.6816 123.812 li
33.6753 127.571 li
30.248 124.796 li
45.5952 111.142 li
49.9785 114.691 li
39.8174 132.545 li
cp
40.7158 122.649 mo
44.0283 117.546 li
39.748 121.866 li
40.7158 122.649 li
cp
54.5054 139.89 mo
50.3228 138.028 li
51.9507 126.933 li
47.5586 136.797 li
44.1646 135.286 li
52.4092 116.769 li
57.0288 118.826 li
55.5957 128.307 li
59.356 119.862 li
62.75 121.373 li
54.5054 139.89 li
cp
71.4673 143.768 mo
67.1538 142.851 li
67.5488 137.371 li
65.6001 136.957 li
63.7368 142.125 li
59.4233 141.208 li
66.8989 122.074 li
72.4155 123.247 li
71.4673 143.768 li
cp
67.7754 134.543 mo
68.4102 128.493 li
66.5576 134.285 li
67.7754 134.543 li
cp
80.8843 143.225 mo
76.4375 143.458 li
75.3765 123.216 li
79.8237 122.983 li
80.8843 143.225 li
cp
84.3101 135.174 mo
88.2583 134.262 li
89.3052 138.794 li
89.4097 139.246 89.7339 139.408 90.2749 139.284 cv
90.8013 139.162 91.0073 138.876 90.9038 138.425 cv
90.3628 136.084 li
90.1978 135.37 89.5288 134.638 88.3521 133.894 cv
86.0913 132.529 84.6655 131.591 84.0728 131.079 cv
83.48 130.572 83.103 129.946 82.9331 129.213 cv
82.4214 126.994 li
81.8296 124.432 83.2036 122.767 86.5454 121.996 cv
89.5405 121.304 91.3052 122.125 91.8433 124.457 cv
92.6313 127.87 li
88.6772 128.783 li
87.8384 125.148 li
87.7476 124.754 87.4849 124.606 87.0571 124.705 cv
86.5503 124.822 86.3843 125.262 86.5601 126.023 cv
86.9409 127.288 li
87.1099 128.021 87.7964 128.764 88.9946 129.512 cv
91.1997 130.83 92.6323 131.777 93.2798 132.351 cv
93.9312 132.923 94.3569 133.651 94.5581 134.521 cv
95.1401 137.042 li
95.7466 139.669 94.3755 141.367 91.0239 142.141 cv
87.7886 142.888 85.9009 142.066 85.3491 139.678 cv
84.3101 135.174 li
cp
0 0 0 1 cmyk
f
19.562 66.2417 mo
19.2334 70.0015 li
20.1182 69.2383 20.8721 68.6079 21.4946 68.1099 cv
22.1753 67.5649 22.6895 67.1875 23.0366 66.9766 cv
23.0361 66.9761 li
23.3979 66.7549 23.7725 66.5986 24.1577 66.5073 cv
24.5479 66.4141 24.9497 66.3867 25.3604 66.4224 cv
27.6294 66.6211 li
29.0459 66.7451 30.0728 67.3076 30.71 68.3091 cv
30.709 68.3096 li
31.3286 69.2837 31.5601 70.6606 31.4043 72.4409 cv
31.2642 74.0449 30.8364 75.2314 30.1226 75.9995 cv
29.3872 76.7896 28.3706 77.1279 27.0742 77.0146 cv
23.5845 76.709 li
23.2598 76.6807 li
23.2881 76.3569 li
23.6284 72.4688 li
23.5479 72.5322 23.4663 72.5986 23.3838 72.668 cv
23.3833 72.668 li
22.4097 73.5186 21.5874 74.2104 20.9194 74.7417 cv
20.2397 75.2822 19.7051 75.6675 19.3164 75.896 cv
19.3164 75.8965 li
18.9165 76.1348 18.4927 76.3022 18.0483 76.4009 cv
17.6021 76.5 17.1396 76.5278 16.6636 76.4863 cv
14.0874 76.2607 li
12.6392 76.1343 11.5879 75.5688 10.9336 74.5649 cv
10.2964 73.5869 10.0562 72.2046 10.2124 70.418 cv
10.3633 68.6943 10.8042 67.4199 11.5347 66.5933 cv
12.29 65.7388 13.3325 65.3701 14.6611 65.4863 cv
19.2656 65.8892 li
19.5903 65.918 li
19.562 66.2417 li
cp
18.5884 69.8984 mo
18.8848 66.5098 li
14.605 66.1353 li
13.4922 66.0381 12.6304 66.3335 12.0205 67.0229 cv
11.3862 67.7407 10.9995 68.8906 10.8613 70.4741 cv
10.7178 72.1138 10.9233 73.3599 11.478 74.2114 cv
12.0161 75.0371 12.9048 75.5039 14.1431 75.6123 cv
16.7197 75.8379 li
17.1348 75.874 17.5317 75.8506 17.9087 75.7671 cv
18.2827 75.6846 18.6426 75.541 18.9858 75.3369 cv
18.9873 75.3369 li
19.3438 75.1274 19.853 74.7588 20.5146 74.2329 cv
21.1865 73.6982 22.0029 73.0117 22.9614 72.1748 cv
22.9663 72.1694 li
23.5293 71.6968 24.0537 71.3486 24.5391 71.1255 cv
25.0503 70.8901 25.522 70.791 25.9536 70.8286 cv
25.9536 70.8291 li
27.2451 70.8569 li
27.2451 70.8555 li
27.2456 70.8555 li
27.2583 70.8555 li
27.2734 70.8569 li
27.7266 70.8965 28.0708 71.0107 28.3062 71.1992 cv
28.3076 71.1992 li
28.5815 71.4189 28.7021 71.7158 28.6694 72.0898 cv
28.6431 72.3931 28.543 72.6245 28.3691 72.7827 cv
28.1885 72.9478 27.9497 73.0181 27.6538 72.9922 cv
24.2622 72.6953 li
23.9653 76.0889 li
27.1304 76.3657 li
28.2173 76.4609 29.0566 76.1914 29.647 75.5566 cv
30.2583 74.8994 30.6284 73.8418 30.7554 72.3848 cv
30.8989 70.748 30.7007 69.5059 30.1616 68.6577 cv
30.1602 68.6577 li
29.6387 67.8379 28.7759 67.375 27.5732 67.2695 cv
25.3047 67.0713 li
24.9629 67.041 24.6299 67.0645 24.3081 67.1406 cv
23.9868 67.2168 23.6753 67.3467 23.3745 67.5308 cv
23.3735 67.5308 li
23.0488 67.7275 22.5571 68.0894 21.8994 68.6162 cv
21.2461 69.1382 20.4189 69.833 19.4185 70.6992 cv
19.4131 70.7031 li
18.856 71.166 18.3389 71.5063 17.8628 71.7231 cv
17.3584 71.9541 16.8945 72.0508 16.4736 72.0137 cv
14.0801 71.8042 li
13.7515 71.7759 13.5054 71.6494 13.3433 71.4248 cv
13.1919 71.2153 13.1313 70.937 13.1616 70.5889 cv
13.1924 70.2349 13.3003 69.9648 13.4834 69.7798 cv
13.6826 69.5791 13.9482 69.4927 14.2788 69.5215 cv
18.5884 69.8984 li
cp
18.5581 70.5493 mo
14.2231 70.1699 li
14.0928 70.1587 14 70.1816 13.9438 70.2378 cv
13.8726 70.3101 13.8276 70.4458 13.8101 70.6445 cv
13.7939 70.8345 13.8135 70.9683 13.8696 71.0459 cv
13.9141 71.1074 14.0034 71.144 14.1362 71.1558 cv
16.5298 71.3647 li
16.8403 71.3921 17.1953 71.3149 17.5933 71.1328 cv
17.8931 70.9961 18.2148 70.8018 18.5581 70.5493 cv
cp
24.2285 72.0386 mo
27.7095 72.3433 li
27.8169 72.3525 27.8911 72.3389 27.9312 72.3022 cv
27.979 72.2583 28.0088 72.1689 28.0205 72.0342 cv
28.0332 71.8896 27.9937 71.7798 27.9009 71.7056 cv
27.9009 71.7051 li
27.77 71.6006 27.542 71.5342 27.2173 71.5054 cv
27.2173 71.5049 li
25.9189 71.4771 li
25.8975 71.4771 li
25.5791 71.4492 25.2168 71.5293 24.8115 71.7158 cv
24.625 71.8013 24.4307 71.9092 24.2285 72.0386 cv
cp
11.416 92.8594 mo
10.9551 88.4736 li
10.9258 88.1929 li
11.2007 88.125 li
16.2598 86.875 li
16.1108 85.4561 li
10.9028 85.2905 li
10.6196 85.2817 li
10.5903 84.9995 li
10.1289 80.6133 li
10.0894 80.2339 li
10.4702 80.2559 li
30.9771 81.4531 li
31.2534 81.4692 li
31.2822 81.7441 li
31.8716 87.3535 li
31.9009 87.6265 li
31.6338 87.6997 li
11.8242 93.1392 li
11.4561 93.2402 li
11.416 92.8594 li
cp
11.6309 88.688 mo
12.022 92.4121 li
31.1973 87.147 li
30.665 82.0854 li
10.8149 80.9268 li
11.2065 84.6509 li
16.4141 84.8169 li
16.6978 84.8257 li
16.7271 85.1079 li
16.9355 87.0898 li
16.9648 87.3706 li
16.6899 87.4385 li
11.6309 88.688 li
cp
19.6567 86.0713 mo
22.1675 85.5371 li
19.6016 85.5488 li
19.6567 86.0713 li
cp
25.3896 85.5161 mo
19.439 86.7822 li
19.0864 86.8569 li
19.0483 86.4971 li
18.9185 85.2593 li
18.8809 84.9033 li
19.2402 84.9019 li
25.3213 84.874 li
28.4775 84.8594 li
25.3896 85.5161 li
cp
17.2339 108.081 mo
15.7109 103.896 li
15.6597 103.755 li
15.7354 103.624 li
15.9536 103.244 16.4526 102.845 17.2314 102.425 cv
17.9697 102.028 18.9785 101.596 20.2573 101.131 cv
20.2842 101.121 li
20.2905 101.119 li
21.4404 100.726 li
21.4404 100.725 li
23.2036 100.117 li
23.2041 100.118 li
23.8804 99.8843 li
23.8799 99.8838 li
24.0991 99.8042 24.2358 99.6787 24.2876 99.5063 cv
24.3315 99.3618 24.3276 99.1792 24.2764 98.9575 cv
15.458 102.167 li
15.1533 102.278 li
15.0415 101.972 li
13.5186 97.7876 li
13.4077 97.4829 li
13.7129 97.3716 li
32.7603 90.439 li
33.0654 90.3281 li
33.1768 90.6333 li
35.0576 95.8022 li
35.2808 96.4165 35.4209 97.019 35.4751 97.6094 cv
35.5298 98.2051 35.4976 98.7852 35.3774 99.3496 cv
35.377 99.3496 li
35.2539 99.9443 34.9985 100.45 34.6108 100.867 cv
34.2285 101.279 33.7197 101.6 33.0854 101.831 cv
30.8003 102.662 li
29.9858 102.959 29.2109 102.967 28.478 102.689 cv
27.9956 102.505 27.5366 102.198 27.1011 101.767 cv
27.0664 102.375 26.9136 102.91 26.6431 103.373 cv
26.2378 104.065 25.5762 104.579 24.6572 104.914 cv
24.647 104.917 li
22.5366 105.608 li
21.0337 106.155 19.8828 106.647 19.084 107.083 cv
18.3433 107.487 17.9312 107.816 17.8486 108.07 cv
17.5571 108.967 li
17.2339 108.081 li
cp
16.3784 103.83 mo
17.6377 107.291 li
17.8999 107.042 18.2793 106.783 18.7739 106.513 cv
19.605 106.06 20.7891 105.553 22.3257 104.994 cv
22.3359 104.99 li
24.4458 104.299 li
25.2129 104.018 25.7588 103.6 26.084 103.044 cv
26.4126 102.482 26.5244 101.766 26.4209 100.894 cv
26.2778 99.6895 li
27.0049 100.661 li
27.542 101.38 28.1108 101.853 28.71 102.081 cv
29.2925 102.302 29.916 102.293 30.5791 102.052 cv
32.8643 101.22 li
33.3999 101.025 33.8237 100.76 34.1353 100.425 cv
34.4414 100.095 34.644 99.6929 34.7417 99.2173 cv
34.7417 99.2148 li
34.8486 98.7114 34.8774 98.1958 34.8291 97.6685 cv
34.7803 97.1367 34.6523 96.5879 34.4473 96.0234 cv
32.6772 91.1606 li
14.2397 97.8711 li
15.541 101.445 li
24.3765 98.2295 li
24.6895 98.1157 li
24.7925 98.4248 li
24.793 98.4243 li
24.9761 98.9277 25.0151 99.3516 24.9111 99.6948 cv
24.7969 100.074 24.5259 100.34 24.1016 100.495 cv
24.0459 100.515 li
24.0415 100.515 li
23.415 100.731 li
23.415 100.733 li
21.6514 101.341 li
21.6499 101.341 li
20.499 101.734 li
20.4785 101.741 li
19.2319 102.195 18.2515 102.614 17.5391 102.998 cv
16.9619 103.309 16.5747 103.586 16.3784 103.83 cv
cp
24.4458 104.299 mo
24.4463 104.299 li
28.1694 98.3228 mo
31.3022 97.1826 li
31.5347 97.0977 31.6787 96.9688 31.7334 96.7944 cv
31.7788 96.6499 31.7759 96.4673 31.7251 96.2461 cv
27.229 97.8828 li
27.3325 98.083 27.4482 98.2236 27.5762 98.3042 cv
27.7339 98.4033 27.9321 98.4092 28.1694 98.3228 cv
cp
31.5239 97.7935 mo
28.3906 98.9336 li
27.9556 99.0918 27.5684 99.0654 27.2305 98.8535 cv
26.9209 98.6587 26.6733 98.3101 26.4897 97.8057 cv
26.3789 97.5005 li
26.6846 97.3896 li
31.8262 95.5181 li
32.1309 95.4072 li
32.2422 95.7129 li
32.4258 96.2173 32.4629 96.6416 32.354 96.9878 cv
32.2344 97.3672 31.9575 97.6353 31.5239 97.7935 cv
cp
26.6074 121.503 mo
23.7349 117.549 li
23.5825 117.34 li
23.7539 117.144 li
26.9297 113.513 li
23.1821 116.235 li
22.9194 116.426 li
22.728 116.163 li
20.1104 112.56 li
19.9194 112.297 li
20.1826 112.106 li
36.5811 100.192 li
36.8442 100.001 li
37.0352 100.264 li
39.6528 103.867 li
39.8442 104.13 li
39.5806 104.321 li
35.9751 106.94 li
40.4248 105.33 li
40.6548 105.246 li
40.7988 105.444 li
43.2261 108.786 li
43.4819 109.138 li
43.0713 109.283 li
34.0718 112.468 li
27.1289 121.509 li
26.8638 121.855 li
26.6074 121.503 li
cp
24.4131 117.376 mo
26.8784 120.769 li
33.6147 111.996 li
33.6743 111.918 li
33.7651 111.887 li
42.4438 108.815 li
40.416 106.023 li
34.0356 108.334 li
31.8745 109.116 li
33.7339 107.765 li
38.9355 103.986 li
36.7002 100.909 li
20.8276 112.441 li
23.063 115.518 li
28.8857 111.288 li
31.2231 109.589 li
29.3208 111.765 li
24.4131 117.376 li
cp
39.6123 132.797 mo
36.1851 130.021 li
35.9658 129.843 li
36.1113 129.602 li
38.8057 125.14 li
37.6978 124.243 li
33.8979 127.808 li
33.6914 128.002 li
33.4707 127.823 li
30.0435 125.048 li
29.7466 124.807 li
30.0317 124.553 li
45.3789 110.898 li
45.585 110.716 li
45.8003 110.89 li
50.1831 114.439 li
50.397 114.612 li
50.2612 114.851 li
40.0996 132.705 li
39.9102 133.038 li
39.6123 132.797 li
cp
36.8145 129.696 mo
39.7246 132.052 li
49.5601 114.77 li
45.606 111.567 li
30.75 124.785 li
33.6592 127.141 li
37.459 123.576 li
37.666 123.381 li
37.8862 123.56 li
39.4351 124.814 li
39.6548 124.992 li
39.5088 125.234 li
36.8145 129.696 li
cp
40.6396 122.17 mo
42.0376 120.017 li
40.2314 121.84 li
40.6396 122.17 li
cp
44.3008 117.723 mo
40.9878 122.826 li
40.7915 123.128 li
40.5107 122.901 li
39.5435 122.118 li
39.2651 121.892 li
39.5176 121.637 li
43.7979 117.317 li
46.019 115.076 li
44.3008 117.723 li
cp
54.373 140.187 mo
50.1899 138.324 li
49.9653 138.224 li
50.0005 137.981 li
51.2856 129.225 li
47.855 136.93 li
47.7231 137.226 li
47.4263 137.094 li
44.0327 135.583 li
43.7363 135.451 li
43.8682 135.154 li
52.1128 116.637 li
52.2446 116.341 li
52.5415 116.473 li
57.1611 118.529 li
57.3872 118.63 li
57.3506 118.874 li
56.2769 125.98 li
59.0596 119.729 li
59.1914 119.434 li
59.4883 119.565 li
62.8823 121.077 li
63.1787 121.208 li
63.0464 121.505 li
54.8018 140.022 li
54.6699 140.319 li
54.373 140.187 li
cp
50.6802 137.832 mo
54.3408 139.462 li
62.3213 121.538 li
59.5205 120.291 li
55.8921 128.44 li
54.915 130.635 li
55.2739 128.259 li
56.6699 119.021 li
52.5737 117.198 li
44.5933 135.122 li
47.394 136.369 li
51.6543 126.8 li
52.6162 124.641 li
52.2729 126.98 li
50.6802 137.832 li
cp
71.3999 144.086 mo
67.0864 143.169 li
66.8091 143.11 li
66.8291 142.828 li
67.2041 137.63 li
65.8086 137.333 li
64.042 142.234 li
63.9458 142.501 li
63.6694 142.442 li
59.356 141.526 li
58.981 141.446 li
59.1206 141.089 li
66.5957 121.956 li
66.6963 121.699 li
66.9663 121.756 li
72.4829 122.929 li
72.7529 122.986 li
72.7397 123.261 li
71.7915 143.782 li
71.7739 144.166 li
71.3999 144.086 li
cp
67.4985 142.592 mo
71.1606 143.371 li
72.0786 123.508 li
67.1011 122.45 li
59.8652 140.969 li
63.5278 141.748 li
65.2944 136.847 li
65.3906 136.58 li
65.6675 136.639 li
67.6162 137.053 li
67.894 137.112 li
67.873 137.394 li
67.4985 142.592 li
cp
67.4897 134.15 mo
67.7578 131.596 li
66.9756 134.041 li
67.4897 134.15 li
cp
68.7334 128.525 mo
68.0981 134.577 li
68.0601 134.936 li
67.7075 134.861 li
66.4897 134.602 li
66.1392 134.528 li
66.2485 134.187 li
68.1011 128.395 li
69.0625 125.389 li
68.7334 128.525 li
cp
80.9009 143.55 mo
76.4541 143.783 li
76.1299 143.8 li
76.1128 143.475 li
75.0522 123.233 li
75.0352 122.909 li
75.3599 122.892 li
79.8071 122.659 li
80.1313 122.642 li
80.1479 122.967 li
81.2085 143.208 li
81.2261 143.532 li
80.9009 143.55 li
cp
76.7446 143.117 mo
80.5435 142.918 li
79.5161 123.325 li
75.7178 123.523 li
76.7446 143.117 li
cp
84.2368 134.857 mo
87.9126 134.009 li
86.9185 133.406 86.0864 132.883 85.4155 132.442 cv
84.686 131.962 84.1685 131.59 83.8618 131.326 cv
83.8608 131.326 li
83.5396 131.051 83.2759 130.743 83.0698 130.404 cv
82.8599 130.062 82.7095 129.688 82.6167 129.285 cv
82.104 127.066 li
81.7847 125.682 82.0024 124.532 82.7573 123.617 cv
83.4917 122.728 84.731 122.082 86.4731 121.679 cv
88.0425 121.317 89.3022 121.356 90.2515 121.797 cv
91.231 122.252 91.8667 123.115 92.1597 124.384 cv
92.9478 127.798 li
93.021 128.114 li
92.7036 128.187 li
88.9009 129.065 li
88.9858 129.122 89.0747 129.179 89.1655 129.236 cv
89.1655 129.236 li
90.2739 129.898 91.186 130.467 91.9009 130.939 cv
92.6245 131.419 93.1558 131.808 93.4927 132.106 cv
93.4927 132.106 li
93.8442 132.415 94.1353 132.766 94.3657 133.157 cv
94.5972 133.55 94.7671 133.981 94.8745 134.449 cv
95.4565 136.969 li
95.7837 138.385 95.5708 139.559 94.8198 140.49 cv
94.0864 141.398 92.8452 142.054 91.0962 142.458 cv
89.4097 142.847 88.062 142.822 87.0503 142.383 cv
87.0503 142.382 li
86.0054 141.928 85.3325 141.05 85.0327 139.75 cv
83.9927 135.247 li
83.9194 134.931 li
84.2368 134.857 li
cp
88.0151 134.652 mo
84.6997 135.418 li
85.6665 139.605 li
85.9175 140.693 86.4644 141.421 87.3091 141.788 cv
87.3101 141.788 li
88.189 142.169 89.4028 142.182 90.9507 141.825 cv
92.5542 141.455 93.6743 140.874 94.313 140.083 cv
94.9331 139.315 95.103 138.326 94.8228 137.114 cv
94.2407 134.594 li
94.1479 134.189 94.0034 133.819 93.8062 133.486 cv
93.6118 133.155 93.3647 132.857 93.0659 132.595 cv
93.0649 132.594 li
92.7544 132.319 92.2456 131.948 91.5415 131.481 cv
90.8276 131.008 89.9224 130.445 88.8276 129.791 cv
88.8228 129.788 li
88.1987 129.398 87.7046 129.006 87.3423 128.614 cv
86.9663 128.206 86.728 127.793 86.6274 127.376 cv
86.2476 126.116 li
86.2339 126.07 li
86.2339 126.056 li
86.1411 125.63 86.145 125.28 86.2485 125.008 cv
86.3726 124.68 86.6187 124.473 86.9849 124.389 cv
87.2808 124.32 87.5308 124.344 87.7349 124.459 cv
87.9478 124.581 88.0884 124.786 88.1548 125.076 cv
88.9214 128.393 li
92.2417 127.627 li
91.5269 124.529 li
91.2808 123.467 90.7651 122.753 89.979 122.388 cv
89.1636 122.009 88.0435 121.983 86.6187 122.313 cv
85.019 122.682 83.8989 123.254 83.2583 124.029 cv
82.6401 124.78 82.4663 125.743 82.7378 126.921 cv
83.2505 129.14 li
83.3276 129.475 83.4517 129.783 83.6235 130.065 cv
83.7954 130.346 84.0151 130.603 84.2837 130.833 cv
84.2847 130.833 li
84.5737 131.082 85.0688 131.438 85.772 131.9 cv
86.4644 132.356 87.3804 132.928 88.52 133.615 cv
88.5249 133.62 li
89.1382 134.007 89.6216 134.394 89.9751 134.778 cv
90.3491 135.187 90.5845 135.598 90.6802 136.012 cv
91.2202 138.353 li
91.2944 138.674 91.2505 138.947 91.0874 139.17 cv
90.936 139.378 90.6899 139.521 90.3472 139.6 cv
90.0015 139.68 89.7114 139.662 89.48 139.545 cv
89.2271 139.418 89.063 139.192 88.9878 138.867 cv
88.0151 134.652 li
cp
88.6431 134.48 mo
89.6216 138.722 li
89.6509 138.848 89.7017 138.929 89.7729 138.965 cv
89.8638 139.011 90.0073 139.012 90.2017 138.967 cv
90.3862 138.924 90.5063 138.864 90.563 138.786 cv
90.6089 138.724 90.6167 138.627 90.5864 138.498 cv
90.0464 136.156 li
89.9771 135.855 89.7935 135.542 89.4966 135.218 cv
89.2729 134.976 88.9888 134.729 88.6431 134.48 cv
cp
88.3081 128.628 mo
87.522 125.221 li
87.4976 125.117 87.4614 125.051 87.4146 125.024 cv
87.3579 124.992 87.2622 124.991 87.1304 125.022 cv
86.9897 125.054 86.8979 125.126 86.856 125.237 cv
86.7974 125.393 86.8032 125.626 86.8735 125.937 cv
87.2524 127.194 li
87.2573 127.215 li
87.3286 127.524 87.5171 127.845 87.8208 128.173 cv
87.9595 128.324 88.1226 128.476 88.3081 128.628 cv
0 0 0 0 cmyk
f
115.348 131.424 mo
111.159 133.941 li
105.816 128.375 li
109.69 134.823 li
105.873 137.117 li
95.4331 119.742 li
99.2505 117.449 li
102.729 123.239 li
100.921 116.445 li
104.461 114.317 li
106.874 123.653 li
115.348 131.424 li
cp
0 0 0 1 cmyk
f
115.514 131.702 mo
111.325 134.22 li
111.103 134.353 li
110.924 134.166 li
107.583 130.685 li
109.969 134.657 li
110.135 134.934 li
109.857 135.102 li
106.04 137.396 li
105.761 137.562 li
105.594 137.284 li
95.1548 119.909 li
94.9878 119.631 li
95.2671 119.464 li
99.0835 117.17 li
99.3608 117.003 li
99.5288 117.282 li
101.825 121.103 li
100.607 116.527 li
100.544 116.292 li
100.754 116.166 li
104.295 114.039 li
104.667 113.815 li
104.776 114.236 li
107.164 123.479 li
115.568 131.185 li
115.888 131.478 li
115.514 131.702 li
cp
111.213 133.529 mo
114.808 131.369 li
106.654 123.893 li
106.583 123.828 li
106.56 123.735 li
104.256 114.819 li
101.298 116.597 li
103.043 123.156 li
103.634 125.375 li
102.451 123.405 li
99.1392 117.894 li
95.8784 119.854 li
105.984 136.671 li
109.245 134.712 li
105.538 128.542 li
104.049 126.066 li
106.05 128.15 li
111.213 133.529 li
cp
0 0 0 0 cmyk
f
127.196 120.752 mo
123.993 123.846 li
123.247 123.768 121.944 122.759 120.077 120.826 cv
120.056 120.805 li
119.229 119.914 li
118.081 118.682 117.491 118.051 117.464 118.023 cv
116.988 117.53 116.417 117.599 115.75 118.242 cv
122.507 125.24 li
119.304 128.333 li
105.224 113.752 li
109.18 109.932 li
110.083 109.06 111.065 108.507 112.133 108.28 cv
113.202 108.046 114.166 108.377 115.03 109.272 cv
116.719 111.021 li
117.812 112.153 117.89 113.561 116.953 115.237 cv
118.583 114.266 120.025 114.424 121.275 115.718 cv
122.764 117.365 li
125.017 119.697 126.495 120.826 127.196 120.752 cv
cp
114.293 114.74 mo
111.977 112.341 li
111.485 111.831 110.911 111.896 110.244 112.54 cv
114.044 116.476 li
114.71 115.833 114.79 115.253 114.293 114.74 cv
0 0 0 1 cmyk
f
127.421 120.986 mo
124.217 124.08 li
124.109 124.185 li
123.959 124.169 li
123.525 124.124 122.958 123.83 122.256 123.289 cv
121.591 122.775 120.787 122.028 119.842 121.051 cv
119.823 121.03 li
119.819 121.026 li
118.992 120.135 li
117.72 118.773 li
117.721 118.772 li
117.231 118.248 li
117.23 118.249 li
117.067 118.08 116.896 118.006 116.717 118.029 cv
116.569 118.048 116.404 118.126 116.222 118.263 cv
122.742 125.014 li
122.967 125.248 li
122.733 125.474 li
119.53 128.567 li
119.296 128.792 li
119.07 128.558 li
104.99 113.978 li
104.764 113.744 li
104.999 113.519 li
108.955 109.697 li
109.426 109.242 109.92 108.869 110.435 108.581 cv
110.956 108.29 111.499 108.083 112.065 107.962 cv
112.065 107.962 li
112.657 107.833 113.223 107.86 113.762 108.045 cv
113.764 108.045 li
114.295 108.227 114.794 108.562 115.264 109.047 cv
116.954 110.796 li
117.555 111.42 117.878 112.124 117.921 112.907 cv
117.95 113.423 117.856 113.968 117.638 114.542 cv
118.209 114.325 118.761 114.246 119.292 114.305 cv
120.09 114.393 120.83 114.789 121.509 115.493 cv
121.515 115.5 li
122.999 117.14 li
122.999 117.14 li
124.112 118.293 125.032 119.147 125.757 119.701 cv
126.429 120.214 126.897 120.457 127.163 120.429 cv
128.099 120.332 li
127.421 120.986 li
cp
123.886 123.497 mo
126.536 120.938 li
126.202 120.8 125.811 120.56 125.363 120.218 cv
124.612 119.644 123.667 118.768 122.531 117.59 cv
122.524 117.583 li
121.041 115.943 li
121.041 115.943 li
120.47 115.353 119.864 115.022 119.221 114.951 cv
118.572 114.879 117.871 115.067 117.119 115.516 cv
116.08 116.134 li
116.669 115.079 li
117.107 114.296 117.308 113.583 117.273 112.942 cv
117.239 112.321 116.976 111.755 116.486 111.247 cv
114.796 109.498 li
114.401 109.088 113.987 108.809 113.552 108.661 cv
113.552 108.66 li
113.127 108.515 112.677 108.494 112.202 108.598 cv
112.201 108.598 li
111.7 108.705 111.217 108.888 110.753 109.148 cv
110.286 109.41 109.835 109.75 109.406 110.166 cv
105.683 113.76 li
119.312 127.874 li
122.048 125.231 li
115.516 118.468 li
115.292 118.234 li
115.525 118.008 li
115.909 117.638 116.28 117.431 116.636 117.385 cv
117.03 117.334 117.384 117.473 117.698 117.798 cv
117.701 117.802 li
118.195 118.331 li
118.196 118.331 li
119.467 119.692 li
120.294 120.584 li
120.311 120.601 li
121.234 121.556 122.014 122.281 122.653 122.774 cv
123.172 123.176 123.583 123.417 123.886 123.497 cv
cp
114.059 114.965 mo
111.743 112.567 li
111.572 112.389 111.395 112.311 111.212 112.331 cv
111.063 112.348 110.897 112.425 110.715 112.561 cv
114.04 116.003 li
114.18 115.828 114.261 115.665 114.283 115.515 cv
114.309 115.33 114.234 115.146 114.059 114.965 cv
cp
112.211 112.116 mo
114.527 114.515 li
114.849 114.848 114.983 115.212 114.926 115.606 cv
114.875 115.969 114.656 116.337 114.27 116.71 cv
114.037 116.935 li
113.81 116.701 li
110.009 112.765 li
109.785 112.532 li
110.018 112.306 li
110.405 111.933 110.778 111.727 111.139 111.685 cv
111.534 111.64 111.89 111.784 112.211 112.116 cv
0 0 0 0 cmyk
f
113.5 105.703 mo
115.925 101.968 li
130.197 111.237 li
130.537 111.458 130.841 111.361 131.115 110.94 cv
131.379 110.532 131.344 110.215 131.004 109.994 cv
116.732 100.726 li
119.158 96.9907 li
133.227 106.128 li
134.21 106.767 134.702 107.667 134.711 108.83 cv
134.722 109.992 134.311 111.21 133.486 112.48 cv
132.721 113.658 131.818 114.527 130.769 115.078 cv
129.728 115.626 128.67 115.555 127.594 114.856 cv
113.5 105.703 li
cp
0 0 0 1 cmyk
f
113.227 105.526 mo
115.653 101.792 li
115.83 101.519 li
116.102 101.696 li
130.375 110.964 li
130.458 111.019 130.527 111.038 130.582 111.02 cv
130.661 110.995 130.748 110.91 130.842 110.764 cv
130.932 110.625 130.972 110.515 130.963 110.434 cv
130.957 110.377 130.912 110.321 130.828 110.267 cv
116.555 100.998 li
116.283 100.821 li
116.459 100.549 li
118.885 96.814 li
119.062 96.542 li
119.334 96.7188 li
133.404 105.856 li
133.942 106.205 134.347 106.628 134.62 107.126 cv
134.892 107.623 135.031 108.19 135.037 108.827 cv
135.042 109.444 134.936 110.074 134.72 110.715 cv
134.507 111.351 134.186 111.998 133.758 112.657 cv
133.362 113.268 132.928 113.798 132.458 114.248 cv
131.984 114.703 131.471 115.076 130.92 115.365 cv
130.346 115.668 129.763 115.8 129.173 115.759 cv
128.588 115.719 128.002 115.509 127.417 115.128 cv
113.323 105.976 li
113.05 105.799 li
113.227 105.526 li
cp
116.02 102.417 mo
113.949 105.607 li
127.77 114.583 li
128.261 114.902 128.743 115.078 129.216 115.11 cv
129.685 115.143 130.152 115.036 130.618 114.79 cv
131.115 114.529 131.579 114.191 132.008 113.78 cv
132.444 113.363 132.845 112.871 133.213 112.304 cv
133.612 111.691 133.909 111.092 134.105 110.509 cv
134.297 109.936 134.392 109.376 134.387 108.832 cv
134.383 108.306 134.271 107.841 134.049 107.438 cv
133.829 107.036 133.496 106.689 133.05 106.4 cv
119.252 97.4399 li
117.181 100.63 li
131.181 109.722 li
131.436 109.888 131.58 110.102 131.609 110.36 cv
131.636 110.594 131.562 110.847 131.386 111.117 cv
131.208 111.393 131.006 111.566 130.78 111.638 cv
130.53 111.719 130.276 111.675 130.02 111.509 cv
116.02 102.417 li
cp
0 0 0 0 cmyk
f
130.546 100.852 mo
131.798 96.9971 li
136.222 98.4346 li
136.663 98.5776 136.969 98.3828 137.141 97.8555 cv
137.308 97.3413 137.169 97.0176 136.729 96.874 cv
134.444 96.1318 li
133.747 95.9053 132.775 96.1016 131.531 96.7275 cv
129.197 97.9629 127.659 98.7007 126.915 98.9463 cv
126.174 99.1924 125.444 99.1938 124.728 98.9609 cv
122.562 98.2573 li
120.061 97.4448 119.342 95.4102 120.402 92.1475 cv
121.352 89.2246 122.964 88.1353 125.24 88.8745 cv
128.572 89.957 li
127.318 93.8164 li
123.77 92.6636 li
123.385 92.5381 123.124 92.687 122.988 93.1045 cv
122.827 93.6001 123.119 93.9683 123.862 94.21 cv
125.141 94.5347 li
125.857 94.7671 126.847 94.561 128.106 93.9199 cv
130.372 92.708 131.92 91.9688 132.746 91.709 cv
133.573 91.4453 134.417 91.4551 135.265 91.731 cv
137.725 92.5303 li
140.29 93.3633 141.04 95.4131 139.976 98.6851 cv
138.951 101.842 137.274 103.038 134.942 102.28 cv
130.546 100.852 li
cp
0 0 0 1 cmyk
f
130.238 100.751 mo
131.403 97.1621 li
130.368 97.7075 129.492 98.1523 128.773 98.4976 cv
127.983 98.877 127.397 99.1299 127.016 99.2549 cv
127.015 99.2539 li
126.616 99.3877 126.215 99.4551 125.818 99.458 cv
125.416 99.4604 125.019 99.3975 124.627 99.27 cv
122.461 98.5664 li
121.109 98.127 120.236 97.3477 119.84 96.2295 cv
119.456 95.1421 119.541 93.748 120.093 92.0474 cv
120.591 90.5146 121.274 89.4551 122.142 88.8682 cv
123.036 88.2637 124.102 88.1631 125.34 88.5654 cv
128.672 89.6479 li
128.981 89.7485 li
128.88 90.0576 li
127.674 93.769 li
127.768 93.7251 127.862 93.6792 127.958 93.6299 cv
127.958 93.6309 li
129.107 93.0166 130.064 92.5269 130.827 92.1631 cv
131.612 91.7891 132.22 91.5332 132.649 91.3984 cv
132.649 91.3994 li
133.094 91.2578 133.543 91.1895 133.997 91.1929 cv
134.453 91.1968 134.91 91.2739 135.366 91.4219 cv
137.825 92.2212 li
139.208 92.6699 140.105 93.4575 140.516 94.5825 cv
140.917 95.6777 140.84 97.0791 140.286 98.7856 cv
139.75 100.432 139.035 101.575 138.137 102.215 cv
137.209 102.877 136.111 103.001 134.842 102.589 cv
130.446 101.161 li
130.137 101.06 li
130.238 100.751 li
cp
132.007 97.4067 mo
130.956 100.643 li
135.043 101.971 li
136.105 102.316 137.011 102.221 137.761 101.686 cv
138.541 101.129 139.176 100.096 139.667 98.5845 cv
140.176 97.02 140.255 95.7593 139.906 94.8037 cv
139.567 93.8784 138.807 93.2236 137.625 92.8394 cv
135.165 92.04 li
134.77 91.9116 134.377 91.8447 133.992 91.8418 cv
133.606 91.8384 133.223 91.897 132.844 92.0181 cv
132.842 92.0195 li
132.447 92.1436 131.868 92.3887 131.106 92.7515 cv
130.323 93.1245 129.374 93.6104 128.258 94.2061 cv
128.253 94.21 li
127.6 94.543 127.01 94.7642 126.485 94.873 cv
125.94 94.9858 125.464 94.9771 125.055 94.8481 cv
123.783 94.5254 li
123.761 94.519 li
123.329 94.3789 123.018 94.1899 122.832 93.9536 cv
122.614 93.6782 122.563 93.3613 122.679 93.0039 cv
122.773 92.7148 122.922 92.5117 123.127 92.3965 cv
123.339 92.2769 123.588 92.2627 123.872 92.3545 cv
127.109 93.4067 li
128.163 90.166 li
125.139 89.1836 li
124.103 88.8467 123.224 88.9209 122.505 89.4072 cv
121.761 89.9106 121.164 90.8574 120.711 92.248 cv
120.204 93.8091 120.118 95.0645 120.454 96.0132 cv
120.778 96.9302 121.514 97.5752 122.663 97.9482 cv
124.829 98.6523 li
125.156 98.7583 125.485 98.811 125.815 98.8086 cv
126.143 98.8066 126.475 98.75 126.811 98.6382 cv
126.812 98.6367 li
127.177 98.5166 127.739 98.2754 128.494 97.9121 cv
129.249 97.5493 130.21 97.0586 131.379 96.4399 cv
131.385 96.4375 li
132.031 96.1123 132.611 95.8975 133.125 95.7925 cv
133.668 95.6816 134.142 95.6919 134.544 95.8228 cv
136.83 96.5654 li
137.143 96.667 137.355 96.8447 137.462 97.0996 cv
137.562 97.3379 137.558 97.6226 137.45 97.9556 cv
137.34 98.2935 137.175 98.5327 136.956 98.6714 cv
136.716 98.8218 136.439 98.8462 136.122 98.7437 cv
132.007 97.4067 li
cp
132.184 96.7803 mo
136.323 98.1255 li
136.447 98.1655 136.542 98.1641 136.61 98.1216 cv
136.696 98.0674 136.77 97.9443 136.832 97.7549 cv
136.89 97.5742 136.902 97.4399 136.865 97.3516 cv
136.834 97.2808 136.755 97.2246 136.629 97.1831 cv
134.343 96.4409 li
134.048 96.3447 133.685 96.3403 133.255 96.4282 cv
132.933 96.4941 132.576 96.6113 132.184 96.7803 cv
cp
126.995 94.0527 mo
123.67 92.9727 li
123.569 92.9399 123.493 92.937 123.445 92.9644 cv
123.388 92.9961 123.338 93.0762 123.297 93.2046 cv
123.252 93.3428 123.267 93.4585 123.34 93.5513 cv
123.443 93.6816 123.646 93.7969 123.95 93.8965 cv
125.22 94.2192 li
125.242 94.2256 li
125.545 94.3237 125.917 94.3281 126.355 94.2373 cv
126.555 94.1953 126.768 94.1343 126.995 94.0527 cv
0 0 0 0 cmyk
f
126.055 77.4849 mo
125.795 79.9561 li
143.324 81.7988 li
142.859 86.228 li
125.33 84.3853 li
125.069 86.8613 li
122.44 86.585 li
123.425 77.2085 li
126.055 77.4849 li
cp
0 0 0 1 cmyk
f
126.377 77.5181 mo
126.152 79.6675 li
143.357 81.4756 li
143.681 81.5098 li
143.647 81.832 li
143.181 86.2607 li
143.148 86.585 li
142.826 86.5508 li
125.619 84.7422 li
125.392 86.8945 li
125.358 87.2183 li
125.036 87.1846 li
122.407 86.9082 li
122.083 86.874 li
122.117 86.5518 li
123.102 77.1758 li
123.136 76.8521 li
123.458 76.8857 li
126.088 77.1621 li
126.412 77.1963 li
126.377 77.5181 li
cp
125.472 79.9233 mo
125.698 77.7744 li
123.714 77.5654 li
122.796 86.2959 li
124.78 86.5044 li
125.006 84.3521 li
125.041 84.0283 li
125.363 84.062 li
142.57 85.8706 li
142.967 82.0879 li
125.762 80.2793 li
125.438 80.2451 li
125.472 79.9233 li
cp
0 0 0 0 cmyk
f
135.631 75.0894 mo
135.138 71.0664 li
139.754 70.5 li
140.214 70.4434 140.41 70.1372 140.342 69.5864 cv
140.277 69.0503 140.014 68.8149 139.554 68.8716 cv
137.169 69.1646 li
136.442 69.2539 135.644 69.8423 134.782 70.9351 cv
133.188 73.0415 132.106 74.3604 131.535 74.8975 cv
130.968 75.4336 130.306 75.7432 129.559 75.835 cv
127.298 76.1123 li
124.689 76.4331 123.177 74.8931 122.759 71.4878 cv
122.385 68.4375 123.385 66.7686 125.761 66.4771 cv
129.238 66.0498 li
129.732 70.0776 li
126.03 70.5322 li
125.628 70.5815 125.454 70.8262 125.507 71.2622 cv
125.571 71.7793 125.991 71.9902 126.766 71.895 cv
128.063 71.6484 li
128.81 71.5566 129.621 70.9517 130.491 69.8384 cv
132.032 67.7827 133.124 66.4575 133.761 65.8735 cv
134.399 65.2852 135.168 64.9375 136.054 64.8291 cv
138.621 64.5137 li
141.298 64.1851 142.843 65.7261 143.262 69.1406 cv
143.667 72.4355 142.652 74.2275 140.219 74.5264 cv
135.631 75.0894 li
cp
0 0 0 1 cmyk
f
135.309 75.1289 mo
134.849 71.3843 li
134.142 72.3149 133.536 73.0879 133.03 73.7046 cv
132.477 74.3789 132.053 74.8555 131.758 75.1328 cv
131.452 75.4238 131.117 75.6543 130.757 75.8242 cv
130.395 75.9966 130.007 76.1079 129.599 76.1582 cv
127.338 76.4355 li
125.928 76.6084 124.807 76.272 123.976 75.4248 cv
123.167 74.6011 122.655 73.3018 122.436 71.5273 cv
122.241 69.9292 122.412 68.6802 122.951 67.7813 cv
123.505 66.8545 124.429 66.3125 125.721 66.1538 cv
129.198 65.7271 li
129.521 65.6875 li
129.561 66.0107 li
130.037 69.8848 li
130.102 69.8062 130.168 69.7236 130.235 69.6387 cv
131.008 68.6079 131.667 67.7603 132.214 67.0981 cv
132.768 66.4263 133.211 65.9385 133.542 65.6353 cv
133.542 65.6343 li
133.883 65.3184 134.263 65.0664 134.676 64.8774 cv
135.092 64.688 135.54 64.564 136.014 64.5059 cv
138.582 64.1909 li
140.024 64.0137 141.169 64.3477 142.017 65.1929 cv
142.844 66.0176 143.367 67.3198 143.585 69.1011 cv
143.796 70.8179 143.63 72.1558 143.087 73.1162 cv
142.526 74.1094 141.583 74.6865 140.259 74.8491 cv
135.671 75.4126 li
135.348 75.4521 li
135.309 75.1289 li
cp
135.5 71.3501 mo
135.916 74.7271 li
140.18 74.2031 li
141.289 74.0669 142.07 73.5986 142.523 72.7979 cv
142.995 71.9639 143.133 70.7578 142.94 69.1802 cv
142.739 67.5464 142.279 66.3711 141.56 65.6538 cv
140.861 64.9575 139.894 64.6855 138.661 64.8369 cv
136.093 65.1519 li
135.68 65.2026 135.297 65.3076 134.946 65.4683 cv
134.597 65.627 134.275 65.8423 133.981 66.1128 cv
133.98 66.1128 li
133.673 66.3936 133.251 66.8599 132.715 67.5103 cv
132.172 68.1689 131.516 69.0107 130.75 70.0332 cv
130.746 70.0381 li
130.292 70.6196 129.851 71.0698 129.425 71.3872 cv
128.975 71.7231 128.535 71.9185 128.104 71.9712 cv
126.827 72.2144 li
126.806 72.2183 li
126.354 72.2734 125.994 72.2334 125.725 72.0981 cv
125.723 72.0981 li
125.411 71.9409 125.23 71.6748 125.184 71.3018 cv
125.182 71.2803 li
125.182 71.2793 li
125.15 70.9888 125.201 70.75 125.333 70.564 cv
125.477 70.3638 125.696 70.2451 125.991 70.209 cv
126.012 70.2065 li
129.37 69.7944 li
128.955 66.4126 li
125.8 66.7998 li
124.717 66.9326 123.953 67.3711 123.507 68.1143 cv
123.045 68.8848 122.904 69.9961 123.083 71.4482 cv
123.283 73.0781 123.735 74.2524 124.439 74.9697 cv
125.12 75.6636 126.06 75.9365 127.259 75.7891 cv
129.52 75.5122 li
129.861 75.4702 130.182 75.3784 130.48 75.2368 cv
130.777 75.0962 131.054 74.9043 131.311 74.6621 cv
131.312 74.6606 li
131.589 74.3999 131.996 73.9438 132.529 73.2925 cv
133.059 72.6455 133.723 71.7949 134.522 70.7393 cv
134.527 70.7344 li
134.976 70.1655 135.411 69.7256 135.831 69.4141 cv
136.277 69.084 136.71 68.8931 137.13 68.8413 cv
139.515 68.5483 li
139.842 68.5083 140.108 68.5806 140.314 68.7661 cv
140.505 68.9399 140.623 69.1997 140.666 69.5474 cv
140.708 69.8999 140.66 70.1865 140.519 70.4043 cv
140.367 70.6421 140.125 70.7822 139.793 70.8228 cv
135.5 71.3501 li
cp
135.395 70.707 mo
139.715 70.1768 li
139.844 70.1611 139.929 70.1196 139.972 70.0532 cv
140.028 69.9668 140.043 69.8242 140.019 69.626 cv
139.997 69.437 139.949 69.311 139.878 69.2471 cv
139.822 69.1958 139.727 69.1782 139.594 69.1943 cv
137.209 69.4873 li
136.901 69.5254 136.57 69.6748 136.217 69.9355 cv
135.953 70.1323 135.678 70.3892 135.395 70.707 cv
cp
129.54 70.4287 mo
126.07 70.855 li
126.068 70.8555 li
125.962 70.8687 125.894 70.897 125.863 70.9404 cv
125.825 70.9932 125.814 71.0879 125.831 71.2227 cv
125.831 71.2236 li
125.848 71.3667 125.911 71.4648 126.016 71.5186 cv
126.016 71.519 li
126.166 71.5938 126.403 71.6113 126.725 71.5723 cv
128.003 71.3291 li
128.024 71.3252 li
128.34 71.2866 128.678 71.1328 129.036 70.8657 cv
129.201 70.7432 129.369 70.5972 129.54 70.4287 cv
0 0 0 0 cmyk
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 11.0%%AI8_CreatorVersion: 15.0.0%%For: (Peteris) ()%%Title: (LSK logo.eps)%%CreationDate: 5/11/11 12:07 PM%%Canvassize: 16383%AI9_DataStream%Gb!R&G@0o7pFgjL!:N3Q'VlRlYn9SrZ(PL.<'b4&G^duPs#@4\baQXa-6\B.hY03?T*ls59Ne]6[9;CDa-.IeL99>%.l[<CAg7p#%2I`ZL7Pl"?846B/O/LL>D,9e86HO0l"pIB9F>T"Ma$T;a"<L-h'!Z*O4]`IXB7ons>*2>"p10=.ogeQuZZ0.J65Sr,:[NU\oKO;*%I_GR;nq^rK&#n0!9-\^YT5GoA!aLY4i2>uikaBX!rgR.V)`IT"<kEr)DR[mqkk5-s,X:eUeb4*BqMH1!UOM8WT?;O'crK2"pZ8j^%eXK7oqQr1"^A1=U[J""`Y><n`W9I80^(E^7Ni#]Gh,gF8l8C76:5-R4A9&nAK[R,=Ca5NFOpe6['X"6&Gt+.oIsUM^a_[3qoi>9D%1_Ab_[J.G_@,pKr.$BP02H$f!.$[CPaSjjr^Fe=PHW)[ZnLRC*F?+*Dql%,A/Q0=n";((;0`*+!C3B?Q4[ns'lH`l)R>mH(gq&p`%0'`JDA_+Zi\36pQmVuTdiE-qZ/f]XA+bBuU*8s:0[?4'M2BiI_:,&2/-8lJCV9pu73)"(B\tCD("JVTfJu7m<mX=b_R94PUN`[d$%8<N.!Q$Y)@S&r`@ML=?UKMpV*2#U5HN.sQf[YN!B_NBoW-*'NI6C1^#5cm*e1ktZEU0TaA_Z,2MF,2K(L&/0J_4sYr3Vr26m[kr4%R=Ka\;><g1i%ppYc[;<jNCMlN1^\H%;7IR)P.Qk[:Qq[h#q2'0^pc]58gP*H.Zof<>%]l*A^Y9@P=@e+F?0l-dV1*5J&*Lsb3,Ht%4qCHOo5H(LLGG"qG9n]#J>X\"mRn1<L@gl*Qh6'?8FF?YoR8X^o"ZW;Jhb(hP_(X;Ock&F,5?gH0I$:FEDoJkB44L'$/],Yn-Lra%3g#k>7.:NCL>Qqb`WU,kC6J:a'T<D`To:852**tKF$aA'77&<q,YsScPMVM;PJ311U$$NXBF453V-n]?#rRh_,bl^\aGdrR-jAY+%1JF`6SqZ^N-[^QoOnjc.dW;o"T25m7#G5NB$'u47P4kS<aog"3b!1!n8H/tGTbO1>V$e/$krn[/oS^(LC8USk9$eY."/DW]$)<-N%af*<e(a",l.Djsr5!fqR/:9c%(nJi;3Ld/l693HqiGQfUPZK9B6-fk8&72$qK$Gg=46[cZ3bar-%=1c^KT;&a*D4`18aYSaEhE8k%Ss,F2\=(Q$Tadte_EW^'fkMn\\3+l@ZB[lC`-@nn2s#D+J+,;T+hH+T/5n%)H%6r59#B&9)RQ]T^U.9E06o;m(@Vk4-;lS"r#kk:%s01DA-Pdrafl-HAo#0SL$N!PHP"G58r?ab.'`"=mdC)urO!p/Qlo4a^jiDZ>S,BcYK`\g%IZpC5OaLfVacE+o&:"b,#G5O5a`mT@%r'o_)`:C1C</AO?8PCE<nHdS3Oa&.7N$P6ap-7"%kYAFF/;P`0,o)LULe1LM#Z&^3[eoOai;1ltXuMkG;NF\E;F-+)X2uRX&cTC)%:`B(PmMU,[M!IH6!Me&n#Q7.B(:P3Bi_^M3)nJqW"p+/`/O5fp1jZT$.)r_;O2.;'*fK_0\/pLC'@:gg),p]a,"4uIb+mBFD>hg/%TQr*.f1rJ<"o`df/V^F)@]W<[A'l,6&U>:t7LP#IROd>&Peo8?BPT;>Qj<2QoJ%?;p)DVLk50p,7H"Tt[fiIkBPVPtl=8_g8SFH?%2OYce7;\sPB8WL/kV$VaM#4=HPWhV&V;KX78.fSdcZ(06mYYI;VA,[T..[pEUL#?)#/*gMhmf6p>Z\\:aN40`d[htR%Vsf6o(01R%g/@4#J6Ve'Ocm(/1;\8M;,3dZ-`olmPmP^#nj%J"LYBKg7k^]?r0S[9G"\VO2TB^'bn,gV;P86Um*iKG5$+_OUi\muE,EIQR,WFj%Q36B%g59V1Nem<hjXN1+n1<ubqAkW[ERW=6rCG>e1$p]fU>Ish-b'n))tf-:19C$pIP+4H2'*-CS"j.:7d!C7@?HN_[hra7-*i5h%+MUKD,(c1/]Kr,7P!MuH-nV:&SM[7F1A>#aTRW(PO\DPRIO7edKZ>XD]G;[(+RR,mk\5_P5W*GN3W@IuJ6H`KT5RD[#j"5'#KkN<%/>r.m5d,^a[F?>4!cEX_#[[6DWKWth!Y%Q-KrbiWD@o1@\j\Z8OVH[poQ41ePFuKoS=sta`(:5kEXT$!cIsTX'p#StjV6'%>`Wom%;^F2"DCrY+e,4#ZY30MPjgdu0;?Et)[TZXuQRjPk>XVZD&V08!H;r8<[@j\E+ua:/m3lAD0],QBdQXWf8_e&UX7I@0[H"]0#qV8W%=+kYd;ODj,/Rk-J8dr]O9ImIKYZ[bb_em_6R7NKZ(%`lOeMs_NE_W3N)-pnt\.t4#RT?[8,dPG*I_kT:k::DQUZtJ'kR6r<=BooF%4f.F&7D`!K@/\!sTArh2)as^IP!rim7&1T`)YiP2UDD_lghN"=k(J3E)j5OsWlO<q@Bu,"%$Wrg%MVpS-o*ZrqTd3n,WAmh*^t7J%WHCbd-<:=@cPX&VYU,\!Bon3LDFCpc3\le3ig_Wq)MXTC,2l,[G>YMR&r\pdM3/^TPgena7>E)AQB"b+$kZL.W*G5QHr@'W94gjT%KsQUM<G`*fs&H1reN*0@S1[BQpUJaGqar9>dT+eu0kG1mqOaiP0u\2aSStC3<"9_CY0cJLVJ4ZiNGoMm8Z#%AaV*$;1/!Ra"_ECf%oG3EC(`Ph1,5.Wqi?Yb]e2\aQ<cjO/99F!G:GoO0cP;><(3rkhiD@Wq,]fZ\'&Z`k*EZjbVrc*8SDtg=lG9!lS_ZE'3g4m4g/Z]S%Z-T1:.dbk<`H!-%dU'0p<:5IS7obHTcO'@JfUbkn>?Bp:W.omJV'))F;-o96m_lMh49][EEBP,;D<!LTdqSS\5+7Mmioqlf5PNpo%+b,=MX]oY!Zh0Wl^iW7*/P,c'7lBF^>We91qjic\02]-jYVo>>*jupT-m6eJL$(#d$_dW#M[KB00\_ie3RB.[3a<`s([[L!WY>h5%Tmp2/MkGJ>W5`0Fl9SQq74>_eo.&?*64%m_Sjp4;@Ej%+r!^rdkhF\gcR\tV7MK>W6@9iZV@5t]#WGsB.NL3K,0o>,Pb]NJp:7-)%#MKh1^.FNOe6\m^!D4YNI6gX:6k4dM*)BLiMFS>fUBmPRVFaa`-*tZ`%0h3SjY_`fQopK:s/S"FN5i'_(>9!;7lVTLotdG@Sj.1)%8)eY<`1Vo#NadiRp,'f5BgiQ1ER]rh[3Xj^d"4r3;m2,4X\*sGbN4+N'X[mK`n34<S%RPsVpf6R/,phZImMLdYZcrYNRgoTOJ]=N%8Jgri=Zp.oW>9%Wmk.#q\D$j>RVugbF'9#E1c;[FLrN9iQ3?;mFZh+>,trFtYr(Y1;fp&T>1dnSm=2K0dh-G%9[Tf/4fq1&<)83e%T&L\c%uNd:Qk,;>+pW?L`p8!)s!CP)PgMmmJ(,t"qFRoKQ&#a7%r<u=e'.R*EFaoO&r^VRhbhUsYSSH8fD!6r/0/<n6i9bsNN".3%;/1Q7\7e0[[q;"/6[4Y[e`USeR/;kcW70XG`mBtjDqQo6=7#o#pKa$a@-,[\bZrgFN?42M3;s,g,is&r`+t,!Um5cd#`Xq.Dil6/%euB7WqP-#r:?YQ>e>P$g0cCd!8,nb(\2@6=F[L;.@cIhQ>0_IPMC5:&I^2%&A29*jH)`so\H!8$m'/7%@W*kgkd;&$3r,>A&NaHe%]0'7H5sP?n`X!TZe=-O]`4H++4eIkNXMX.\<sc@UWLp!]$(=jfGPT<4'BLS1neR@kbA0C52/6b8NNM%.A0*o,Tp]0I,=OS`*$\7C%]eV[K8p\2e]1&F'?8?P@/1b-Fm0V&1[Yag0\p*h^>Gb:I`-S/S\R,$H3*<g8As)L9'DVcn@.[M7iWr6P3L-]s=^3s\F!Y.QD2L0t%_>6<3hL_OCM)dEu)Nrahb0E.s8o$?mqVQ&6%6Z$_RDT!D:TIQah+4;Y@Z"h!\iPYf7cP;`k9AYbd`s1D.EL[;?3gJ%k't!*b$XC<%cIR3!.(-!2i28G6La46o;0K&V*B]rq5l>PpeW<mRl@VUKBQ5l;5WqW3-W;`_pF;R4F$?l!.KP#UXR75^Hh%d2T.3]o,)b85s,#f-%6kWP71M[q"W,c(B7N:fk<Yss=Z3#%4?EoX7H6[PLHeNd1S*]/8e`]\'^GR(_b$qX\e2UrkjWoqcPud9a$iB'_P/\l+FC9H=arIAm%\VTO+Wgn_A-IRQ:^e)lJEL[!+j6!k*eZP%MFSCIBb$8I57shCG>?#d!7;HWd]I(ucT5U:a20rQ?-Oa#dNFsci2`73V"$8k,]!'<i%oI=>==hpIPS>`dk$T,jl4Z50hQr[fH`l4)a:/[Thh_[)?;LcWN>*N&INgqG5o6W?:O+QfZWA,5BdOE-(^-RmBV(s(8Fu]iYR9h!m%Ze%U4YL;/'9JK9??t.qjMhR38d1rSR_%\o+4A@pQSQl`njU+Nn9XPR!S")],kPoOi2fY;D68JYpNWRst<VPL<F\1;]ld.-46Rg$\%OgMPH^Pf2=U2"nVSOIuA<*'a5dG52Ce!P5.T9;Slo)$1:A4"u:k3ZpNgi42]7/s-(*&=\Ql+t%fPuUKk@2`"'&?$S+0HH@SFsu,n%E^1S/UbOXU5K3kKG;gUP[Ki'kHE.0A.[Hj+`bFFH^-8V%F4:;)]4>th8;amIl*sR9e&lQ$'\a\>[-;K[US,=FgOj)qC#U,^G>>E6%8=lFZ-]s?5IYG&.0tM;*,fCW!`bR-/NQEXAM/%@RmDlOA+_CC1YLt(WBJUuT*'[/o*0n@Q(8PI'@Y&:d)b4QU4VLCY>XfKk/_ZLU%qifT5<)2HD#hc<<2+D<%ZF6"&W"`%tErqk!]f?oS=>8-m<Z9BZpsgBdp<rJ5&o@<4g9^'c8Y4+>((8koKZF_]-OOou9U"/-NNVj%%UiV;B/i@Q<TD=R"bdU-pI8h=EPtFiPOdMZf[\rK`.To&R2jN+C]G>#jOk2FP!qd>-#,\Y!P2XFS'c$1hbA8DC-tVihCsFl*Dl/0^%dOZ=bP#k7q]+=B?ei+D+=)9n,M_eYgST6nda/D;trFt#&GF[fO6ra";RuYGn1tf!G4Hs$U/9c]K;!eZ&ftqA1d/=/Gaf-M.XL88T%L6B&0^%n0&(9aDg"g4L<_.Db"N,NrTKmF<ma3Lk2R^YeZMl4*LW;.AhSu0b,d'g(&D<!K+aY=&;3*o[XNi9Q)HnW"-oslSE%A.G,%VDXcu0o\ZaZnS2Ni`YKNrj]V'\NZ.G/i!OA2P=5OM=.4-,aB&OQHNE/lnrY"Q8['Ck&sZU8]=*B/iKPO4JM3ha!$:bH;a.IkK\e3%/0$-rpq8MDX9!(51g+3[=2]@:/>fB'Tk_(C?2\;n;;75U5jeOV2k,L#U9kF`:KZ-KF>V-f'o=fM4r7_pQdea96tfVP.fU29M/k5l%A)_$CSEUZgD8ankcOj%8L78";fVp;L"^%79?Id+\Y)2s"CmD4fGM\*Of/P.]pmk,SXq_h&REeh"9n(BtXC*?89D(QK&'8Ndk^ATb%D,o8efI\$<OsmJ>+&_O#17rlt=?d*1c)G;DoBfIZ:M@[<LD\L4`q3c29;<BKl=%,T<[T<Cqlj*&?p,Q2[=;H3'&&:ok5Vaa._Q*0%o6IlG$EMr+C&15l5ltaX&nBTkI'0oFOuV3Tb($N]U@OR[46e7`^[]kjM^kY^OdK4F=Kb/R??+f6'j41O^3OFf8n&+HVkXnQ[qUiu%lrMXLf'X=g+t;(R)FLEJfL]uD6'!YW1bbibR,pV\U:%:/)ao]8=m_Y_IM,.O@P`>dVa8;?.Fpo;'6o4#l220@O-;+D=ta13bgMFa%GY=6@5K+RUCq(<8:RK^r\4fOV5E&'8]gB8pNeNER_Mska0fDsP%ImD+eE?O7@r*`:G!\m^1o$KOL2d9W,4ha$I[!^Lqtu?4,pfga%W5RX?BLL%),`dbZ,L*0!I]-^Q'RADH4Xj]!OuP+[kLe\PCg_i(+;go!Pg0Mt]OV]r,)D.:&1a#.b=`oC:NAXjP3j+H\4W#-HjgYd%92j_u=V3W#Z(R*>d/']4`S].Wf1qHM9'3bjT,6%bTTktak!>Pok.oeehEQ^:UIG-d]nM7H<C\l"p`M:#>)]mTD-IjfhCBt:M4b\o%<;_ruP87(RMdMD%,e_#i-g:OB]1`,*YL's[qHq*d\3qFbn')He`=&b:I@]^h+$\rgX*BFe6HN[=9S4AkWdU?'if]Q-X2n3Z[br83%nlL8sJ>4bEoSA3Y4R/!Aa?B37I&G\icGnqh#lOY]C4o4RL2_fulO)N@I8p&!FR)mIc,OD6cH,)^>GFZ7UF+T^W7]+4j1F-;qDQ"/%"nl#?esj*8p"n>6=cq4;bO#aZ'0V;hdbjao(YYFB4CF56X2X%IgATEdX&co3+1='KlLNTAl:SfTXNMRX\m"\omm$#2*RT\nc)s(*%Zn5(nLg]ui>X[1o702hBK8/[?mRFA:*k!D1h;kWFj5cYWIFTYap*"A8jOp?@;&bMkC:2c"C@0/THkjg(45-Xk#DUht6D4.?PQL]I%7!\X4CB]t]DZS\l2qOY)p\VWW\N]HTRRR`'gfI](pD.2=Ig1m0^Gd#aIc@M0lLM=6m'j%q9W%3.<Gb!\:2ecON/4;Llg8@>L=;VM%WnmN]NU**X-![aU<Z(j%&t##j_4\4*?2/t-\H<'V:&jIe-a*F=E:c@^r+.,5o"H5d=eGAbDn_50X88L&&TI,=H\4$k]2D&L\982$%M+0_nY?Mf+h5K\7B,h3sO8kk+kNItFFQn95@N1XQ05n]s$XJ1nFhqKSO"JsI&X*I&NIB;-qMdRm7`;lN42sn+haRtWGG<N)R2ma\%?(/:cNgct)?'Ur6#d%kS$=9CjGd>SR!>ejMWknhJ72QW:q1"XPW$:%dPKK0)d^-*4"n8cm^SBJ8DnRJoUFuR6^->q1>`Dp(r5H:u%;T^24W(ppNkMH4KqEn4)#TlFP,<j$kSe'lYs/Ga*8qHWSrY]HLF*mc0=Ll$sb&Z=:#D;`WhEi5i]`[6T3q/cQgoEC1E1YbDhp@5[%j*g^[8VI7IVV1A0>B5(hPgQ`f<tHfU\_!3CTq_X9.kj2RbbP_H%@4s4k)"4C,]/V$R7ZO*[N5&/$n!-1W[7rt7CbTPrqB.i)oMT,%i*4J2f:5R4UVX]fGa`R5m'n;WoLI/uG0?IP_pP^emirD2]to#rb@hc"i;qSjXjP%A@#"]0j5WZ"QX$c1@ehrU!f'1lNd]@OTDrC>%E7424s*paAn3F"KRG;W=1M-TOA(#PrIsS52f=%1-GVkYB$`Gkjm<\e>_sU.[k9m"YmX96F9tGi=Y\<Lga7YM\OOR3es'8"ga3ZfN%*K>@^o=o&ts"t]h@l-XJdm^l)-0P6\F5OudDD_4aN,!eArt8n$FOU9O\orK/B2+r[!YC_6"[Sh'6p`dmjFHL']HPlSe$^7o:V/V-%aW$4c^HQJBN>mg,2)IgOR?WN-[C4)g&@j,aVQ]`@'AY^:N(6fPWBkt'UK!PP6==&:[FBb`B,fiH3nh*_*UWg/[]T\fGXf#R^GftI%9\]SIRYjUEOd%p%oL<,X2F_i"[F'Z&a#>1]%@+hIMosNV:W2;@\9Z3c![V"@[RIsl2W][4>bL/0U6k7==!\H=dVZ5[dH;qohOs5?%d6jbqdl-J\)nQ>YX(8p`g9h4\VfI2F):oIq2ZH'Km'S_u7amUY(tZfAL*jUMXC#W=_G%m;E]onPB@Gt^nhW[o'&io@$bW`s"jG/$%]@EA[\2rJ+=bA5$"+,:MDF7=4W?Sf!mHFiH9Pc_BT-=paD>&<d<$&n)s$_>+KmKP%.(UeGcjfe8m>]MCg@?(IPm.bP8T1;)%5IlP%Z.5>p)ng]=qN"6*.KS[dHr1u7c0A['NQPp..2P`I;c33*qEVbYr(h`=FhA85;gJ"&"]IO[c8E)o#3Y&sJ6FH%GH+7dMk[[g4n3*s%iHRm!$/DoeLhG/;hl!$Z7l;DEUUsL.TW4J+\^bTBMn4oHX3jmf>>+*fV7MeE3Qs!pGg"F,'7PQP/=;AJ^2RTbahMWIXP5[b+1#j9%/^*+/n^U*ILfndU_4*-"l]]hG!>>h[<NtYER8(F]2<'HTF=PmH4lA;ELr_+&6h[j:ag07Bh>[1bn.S-_X5+\:3hb6&NFk9X?RK$K%T6k/OHOMfDOI:^#DQ0JRGkb`B\J52"p$:YbIiOd?R^WXCVJ*s6V6I\XUtH__VUkE6RcAkg+&;\PpM/-XpY3(D[cP)DA!Fapl%$o)%ou'T$NnKI0p4fD)BFT,To)H!J23NOTl8I2cjcI%X)XpW@la"d_&=&i=4_)<A:i_*Q1OUO!0Cq>AKU=W5<""r+rMiX3^$21RG#3;1%l1K1"ZXLD!'#_#SYgo?;^4pe6*091m2?^*n*t!/<6CkK]G/aI$=Y\cs[]#.=&\Ng@#>),M7cU,#JrDODlnb4MG`GKlMT$/!KmN7:%Se1Fo'Xga`XUE=Re)?O6dHP?2XC*.7:Sk8"LfmTH>k)pkX;FG\6_TEq[)g7h@^m=W"<qqaQ[^>)RX+`h.*b]26"uTT%a$Of)=i\d%U%#a=:gCG;7VukIf+,r<H>TacYQ`aZbBB=Mk-jhtMN/9YonK$"?-Df[67B*i-tP^WA&a.ALonI-j;?6;/.l#5lV%SJ[1$'1LShb!%hbkAViS],>-:*W;+LgE'W&#AND2N"##TLC8J,$cg)m+VtN5huf9nA.,%F(%21.MM`<O"0L-phb2>ILAmA:?Ns&WKD3kpMaM)0@09%IEA:I7=be\iYoh"*).fdQ\XsbebY\eOA=5iM]1>D:p^UK7Vc5[f+3ME?+4"m';4.qDbO?#)8L!S=Kh!]B\<<aK-t4RhBuuVJJ#$n%d%o^hs0V[c/Tlfsct(_3Z;RAeX$;n3,Mo%M.E:^&6h=e!U-A-]g25"KjteO@*;oD<DBkj,a?W)OO8>5fTk\9$U"qtO?[[e?Lf\Nf%iO\UFg\=R_A.dk13)e%s5B\@t(*l9rfbUV!LGZq]aQ>m..?:)JX!8X'hr\J'=%\Im/b;7p0u[NsbF)FfM?$6E7[n(4A\j7@bJQ?t%frTHsT#tOqCX6r$8,[lU];1n/BdMC5m]o@kDh.<AaGi(O")'@pRF,@W_dO$@^J>rVZ/K9$=QN*n3ao9OT]G132b";(nAe]/f$+9p%l;Lpe#L!TobZY@GNuF*(b0cO`O-!1q5!G^#=HG:rL+LDEp+_J9>i-J5\_OqI&bR-IH%`^fd^9]6X"h"q>,KG4deJ!*Gf=*t,bS]$%WhtTLdCE0;@5,F?3/][qHN.jV.rDiGDX(HW8,9/PcIJb6<U9[!?_S:i6S41!hERB7C+M/AS&u&5,q5EN!IE)"&(gV-Y^FE)rp20N%0;*VqOOiaf+")Zpfno0;ZVWi(FsPs>7*PYmhS$1Xld+VP6W@_>Znn9srd&O<S.=fT@^[etr@`cjRfDH_YqJNAe$sX,PA8dppar%]%:(3_"T#9Ka1r>NOp'rEYF`up_LQ/Koo$$Xm5V,,6[q,<E5!85iIlDD?QT(WU(eO_d6[nWH^Ec"0`DY\@0@`g,O4jKri<30RG$OZH%KMMInh.bC#M7`AnS(JuA\O<nJ]ZO>ORSrMA-?COL_t%so;#e4!GPANQD)jO*qCaKC$KX'f20D"(?V6%IagP:bLNi5U-$rJ#R>(>^%nP[$W./k!RV0E</]+iS9$7Gi@9CDC$;GEI`-NWkI):\=LktN^J$\.9dIB!%2:7V0LLaEq7_n]4?,^Yn,Iu1S%k5j;;M7(N-XB:fr%4D8&AUWJe`lLQX*G:&i#?hob#'AZLW,(1k?Ig2HQoAQJOKo>c1DVh#bQJF4)Ie)(1C;E]eYP"5!4;RH/T=T5O*_NO2'H1TK1bsFS%CnRsqT?u;;.O^MP3QfM8_;nIBo+`m3E:>rAa%'`+GFNNG-iMArbt)G"ERWe9_f2e^UFqW*G*aV]Ap'*QDk]J%=ehV[g[Fd[UsXQ7%EE`rCE2-t;\Rsqpl60upBIT8@Ld/n=*cCC>G.0tOUINX5AtPc6De&\<eS)%9,b,jC1n*(N:*"H)`f8!0?3R<o]>9K$g"24+;]9:2%f=f@3_a[G27Mhq]m[de(/r^c<@mL73P@'fAF(k8TT"pg+;,;SNM]*$/o]1GDC`b0e<d&\0EuM)*:]%Y!QRBEn2N$3kI?WRV)n./R%Aj53uXfm/j7c/j+/#,R>*o(RP^Jit-c-A1mkk<,^N.5<lBI3HqHgG&AN#J8R*^:6+!bnVUCV8ufc*^?,)i[!D#uXs:12M&2qFYY_%%O0N97St[hQ/:@C'*9Pi4?pa,]NM"PiAC%LDqsQU+RZ\OaX<FqOMK>I^kpM';p_RL1acA0UK>lWnb#E#2#;SJ>U4r1B_7BDlLH@J%QJ*Rp<e[3<IkP-"lR%T<[ZWj,l.rGgJoJ9p#4H$P2QJZ\p7'0Qb?)0-NE-R5USa$:gXW6qCD=1N2#@n"WZSrLj$q4gp=7?mcYM1s%rU00u[*`X_k-KUrZI)c]:5/T9ps?OuMl>f6arVTA2`a.[e2<+f;4>2u38L*n20pi:S<OE$NF!YB5Mg>8h@(?O]DafXX3tgchbWd.%ACB[W8pHitK>rmWI?+Wbku<m)MR449p>[\`1i64c<;g]u7\B+%@W-4'fP'P"\EWRoZZ!Z(C,R!Y0:LQanj@,u&bYB(NUQ\;^5!Ye%llLLHg6#\IT6hFf)Eh,;(tL7<pA9%]I/Zu1N@+A^eD"["8830lin'1>N>0'e1n&auT4nHPZMNY(h6@ofc-AtYZQL:Q@9D-[s.H`e%+H;tGb<_[A%#e[tT=E;4Fs^Q#/]K`]/^*h,&/rgX)O4m=4ehkDMsBDBr&^*@)U7&jFQ@Ri2Fm/\)GtJ@qF<m,WRBVJq^>s#pZX"e%\2V%S'hY*iRA.ZZmN^+`fJ.Xic,#E)mnrM%\!+D8M,a8&p3Q:nRTl&6@<_<?GFoP+Q*\]8l.o<Ln+P6&Y03$of&([Gmu*=!kGIM"%$if]A@Xbe+h)S:\2LkaQZe6ap4ImthPRd./jDJW)2m%H#cJL_Y<pk]$1NO8BCReI]])/"^/,6*/BlNg_e(Al6hK=)b?43/Ge,,c/%pZ/dIh=#&h>Va"iF!&N[:l6.G+8e[Mmq,@jdGGq^:%+ZD@`OPl'_=/:NTu5NdlZugZe%@h]1)7qd5J](6>`?2L<].Em`;gi@raM7%&rK2+FNbWkJaT\UFu)-U.@(JblL*7f:\R9=l++F^^$QJJ%NF4eH-TafGEMWsqN]Iq)h1&]QVU;qmr-:pWdWrigO=77/o?)R*DYTP%*05N'@s"I[bX]+&4q"(;j=u#=\Z7@Mn[\D:#@VhLE;SQ'gqQqHJWEjVm="NLi3*Jsi1IYD=T4*aOi6BAHbWe@-6bE#4FN&Fd42Gc%Z%M7)4rXAF[Zft$@;mmZ(<_b&YQ3NXd`;!fSimpG2[egJXZ.?Tc9N?ah@YZa7<c$./1."d;%W#!,a^ZK8h7ODpHkcY5[&"(1,[i5%c%9/\%.&Cn$2qfiGN5dW#\Kq3hGM1GrF*[p7Xg[RrX30mn?\*(\9Wns*`\4.mCf5!:D<M15KnI3lX%g0C=GCpk;K12TP<SNSZI!1%OE-1ng[64LD\tY4YjL5p46mkgYbp5<FiPNL:,kD%T@D0J`R4.F:Y.">I)liXBHg+oI>E*k9uL)AI;<++36GR&WmL*J/+XkTn#l",%Mtu3LoF$"ESCM7Qg!bkSb2,`KK*7(NSj&ZD"tl80+J7AJ-mha(cF<-j]62IRD!<sRfT"!NBg]gJCEV_#k:-7m'*&p+@kNh[#7m,7%%p@-O0ksoRJ'_7?m3)LZMjEME@l>QWl:NYmpieVN**9J%^$-aO()HjqXcU^N?AD;td+-gH;Y&#[([nem.]@5n;lo]KZ;aNRmOOUk%<V+gl/Bq]o9mFRRb2eN=o>I:j1-QWegk>jq`s^J>Q%Td@;$)M_[c15nS__K<g2"ASKQF>(L!]3mJ;%>dTCSe/%+3;_GjK9qAIjjB%>=;:5cEUetT/o`>hGoYj.=LWWO,qs8mU#&I\!#],)`NAkc<*;_n91k*NZbggD&5>"a"?^DG,^_IQ--\I:qQeB(dpmr5>qJ+;oQUP%oaR#!G?jbg++['IN/?Q-iI4Wbd#mI%QcFERMi;ae3`;]7nQ<9QC`1G35LL3`Z0Z/"n,Y,Q4K*UnBp7uP\sJom?0B:2$K+0TY&,?m%p2li-/S<eOXiTpeE!E'uj(%+;6WOh5em8^A-/CZHS;X/6jj]=-Hb"'OXR9cq),.:UYMs]UKU-QupNZ04Ls-)EmC7BrA`D1:nbW#u%'WuBCQ@NF;F`5!8+0oVDd!Aj)H]d*)qL#!^\NJU6)2PLt_d%j0?h8U7`lIu@MN5>%B-VX.=:8QWRQG'ABXq$'af*ne,%4cK&mMt/%9'l;\1'.<H//fL_2cqoUf6]FqU_<&L)Q*(&Ik8Bc8g]JY]boQh-sp)#c:''PBNIM^`$LgaTV@!Ja;[d,e+/Nn6oF!,3CZJ?n?50(%2Dg4$4QsAp`KZm79'oMiTe:=gCp$^X?%#n1:26*uQcIfR&DGUFI>,",!Dq[DSf5o3nS)KB[!WR;+*ISZL)D&43'K:RWl3GR$YQRd%A0NoUUZB89FTo3i,H?ZZ)jPs"MjP>6Nu^7I'hWoGEFpd&aP,N?hUWtl_5YO]eYU@A/6B8d)sfrV>\/*qr(=lp?&"nG(_['4,!93S%P*W&daN?@i/"/ClCWnb,o:e0>Io:?NEF*?@20_lI@M7fX1US5O#.P14CnIVa`V*)B\k[V='SobpZRI`%_tKI3pX0Q<Yq=n[II!!s%`I?7)QBg_5"IkMl=Ir]1\_'<G\".OGiaaFmF's8sF\WqbAR_AR/I`DlC)KauI7Te)FY/O#HZOs9[Ds6pZdpQn`#mUPaXJ)HTIU[P%dJH2G3FT?7!I9*j=A!Z.[P\)Fo\&m3f1_g%?r^*a[^(N"aZ[*)q@*+jBk4nKDJ1PnHFiN5r/P!(^$+eXfsIg#0ggDTY]b0M^Zb<j%aWRMD:;*A$@R@/oc(2h1`UCLgrd;rCN0_2[nM6RT:P@;:]u[.*BA^js18D=03Gd!0&0Wd:oLfShZ"@8:&Xg+9QQsnjLW'qJjY:k2%9e>7dOX4i0VcOE$]0*Qer.eT5q<e_]hBn4e^7-[5$g$qtNp_kaan\-L9sX!t]D)u"`1=FNS1PC,e#Y&/-biB)D3qr-*%(2(A7BA[%)-:=P92#(:#N7EVmGUDrk2"cpL`r1%Xih_bAi4mT?b9Po5\!!UVj5*XED+cC(8dtF/]bJ+U3d7P\#eST\9mr#KnIY_S,^\n]X9`d%FMTP5R69@iKAb>Ab;?^Dh+j#DF0fd)pTY6HSV51-SqH;eEaFoWOC`CFA8o`E7uhJ"6@/%2HuNk?md`=CDqPB)cE2_')@9mk[R&C;%.kDRn@_:15i/GNWMarr'9@8$Q]M-6QFie'2bN5BqEJJYi1(H`e@^+4cI-AN]Z'\.j$^3^40T!t_\;Q,%B$Sr9*J)o#`jcG^n[HX)%Wgm;ua8F/QP9"uFBTTh9#Kc?dW>XLrh*[q$@We8+\NB@BPa7rU*@sb*`oip('C^,,D+ct5c[5:Z];19h5c<2P%&^;D:3RB<ki=u@%bZh:u2L*n3)Js>DCFEe&K0tsdY*o$U7l>St$T3fY(pb5.A?W+HRdt^d4n`[C1WQZmA(AA22Vf7U2k+6O:A(^3Auo[A=dpPJ",=bj%V)!Sc^0=a/5V9]q@sMikc*^kc/tq0\D/Yj1-)#&&Y2<el0C^S9;t>2K%B6,Tr;Nl;`Q[CoJVj=(lSm.Z3NWcGn*=FT95h7*5(U8P%VRMcb":>h8Q:HC?`9C$kLX*W!TYr_U0<TnLK]Zcm.]Hu0;W!Pt,8S9LhL'gF)[<$=FtK535B;&#\DIcS[c+)(`Jc@l!pE*B+,r,u%WQSd7f(o*XEr*a'(M>05i:5+BbV=oWgWlY3SqW.(2teb1)ZB7.Kk6&DUtW;7>;!;SNbb-u1Jf16@h*61P*Qc^-2]U>9A!!C3m8_h%UDmkB&.;uaD$8^-ih+5+N@FoE=mqP-[Y1n*Hd]r&QP*@qA()_d(PT3SbN8;,N8g.apT+'=H6.\bXP_oB`X5*+"K[ro@p]WXbAbQ`%LbG,nCme!"dk(ZgLH$iUn>>*m@6jtQ_O8t3M$[qk`/udb*f!1NM.>[L3d4[IN#\/Fj8:UZ,m/erXA0UJH[?c+jn4tN/,%Xmek7=%%))QA9QH8BEnQe150PrQgd58#L@6qi[\gp0MC@d1#?A6)&C`:Q]e(6Pq,1P3L[\[Pp7PP.td=CHo7TJ:/[3jn<,m4%Kb@/);pU_[M%&J"3=4IQPJ.:GCKniVkH1oa@%aI4%!BqZdB`b[CR(K9d98q%1M[!CM^%0<#gl.F.aoCsG*-Fcl_fec%d+kuB-/@L:0IG,,1"YmAd%NJ;3s*t"I>+g`_?O7*I3$Vf5L@q)g"pt19XcPtI!E"+g5PmrA9#Nol90"2&klu^.ad2IUYSAk4Q/V`TH:3PQ9).r&6Xs$M_LULi2%>XNa9U)ImWd@@?_-%-6pn3sJ3fP_8<@5Bl0[Um*9]/1/"F(]K4kA":H:]'nZO2=q5<g;%eflsE=>Ua:ZVn6oD<q<6Z/3VMjcc*d5%\gBs#:HfS0k4?.^Z6,(&ZrIAXG:/Q#Y6sGt!Ntk`j!jLT%Th#bd'Fig5'I@YHlJ?_mT*`>pX3C/3+?hB'aL8J)OWm(;l-V.EW<uf%3d^(>EJ!LNh./!_5)^q4epl&Z^/TC%*-T!X3HU<U3sR[YJu*j:#!6_i42LU,Yu%NCY[;)G4,*j3lLqIB:C!G3Gp]#Y_)0cWc)93*%n[\JMdSJM6@eND5A`uc-qE#`QWbQGFO+4VD0@lE1Zd3U3[U3^NZ4D:lB#0r.Cf@@g=-hKjA")8VqZR[t#):%F:XdYhID^eKS#>!I%#8BNl[-^S2mDsd"oB;iSmanSZSLqfY=64cVQ"Aj)2$71?L2r%dK++k1(H<3"je#`ZlN[k@H_1b%7ZS.=R6?qiqL("\?8(#=]F3on%1tgi:0$g4u86"e=$6]/NB6V=@4e=!P\Pq4#9&?np7sp;.%oW;'[1bMVaXqna1J>RG0sj,D1VqSt2TU?W0o[dE;pKPUMZOn7";BNZ%i6@sU%^I;]QQqJIDI/_EI#([gBiPjQ4.i%J(rej7[[CWIXTOci@$$gc3)Z(f\>^]0LBZAPm&SdhMLOI>+>J;j+Xib:U7,_n0#2=)%5Rn9hk-TJV^7W;cA`/DD&@!71j/CpZ!l'JGN$XY1fj^UbZ\YN"p_S"W)9Am`MuAa8J6pHmH("C5SB7i9d).Js22ZN>YnDeo]m%!`%\.!\Nkl&IF`f$OGe_D3U>jRp+_rUa#eIsL9dDH?'gFeI,T(D[c2aCD4%pSr.lTu,'P+TW&>EHab^l``Mf-#+AOS3NZbqlHSN4YTp%?ca^Ih3>P\3.WI$n4XS=2T<t97\`[jQ\TH?J%&,CfT!c($Xq+u=jX9LlQ\G1R'rI/]hEG/OIa#gL`>WLV07!,(5d4/7N8cq5+P"s%h%N;D[4P6=f=,LNaiR)9QS\r5?Y(GD,4GfX`s!g,!>($/cK2=uhL#HT@1X)"a%gXBg=i3bX])+-\=LS">m\=Cc:,ZQj5g*JX=APu%U/ihl^@q=CB*?/]-,?@ZG6@4=BS6E14[+_T:Nq*H4nZ"A!u.CaC](5d-d3'+b:5<>q!!X!isNl1ke7e]dg9t1bF5["jKO&C"ZlQ/%^gV;S30gOVW7XO$>19!J5j?SU/6hmGk-]TGmhbK4bj2OQ%(dM0j65t5Md#VMKR2eIhdo87TB][S*hTFj\.W%KUR$I?G1`O9F&*P?%LPr9,CWPhY-^*t!Bosk$U@j?g2O/!WqS++$CcKl=3"2g'%Rmc^fa:[E[QBiR<Y#-'RC*$&GVRH@=U?@TZX?MR;i84^]$WBubp[LX%H*Wi@%os<T<ID$7N&rCa`oqSXdn+_`b8(j/0$bO>A.VUZCaYi:8-<tJKYup-GmUesmaZ$'Nt(sMgaJ?!'`.&>Hp2V5!U'[_Cp7N<%b3-fN=uZ]C0QqGR)\#pm\HMa4)+=(0V:DeBDsjcG\alY56r355[XhP9bOsrA^U5C&Vh7)mk@\t'='i%UgoGW>U"s]k[p58Z>*g%/%Y#\XG%-_'<E\6;[,3&j=0Jg45Qg8,5K^t;LeKj;bK8nKl>ZokQI;H/O"E77c`1*`MY)?KcG&qO;H:_pfd"rNZC*s*K2.MhBWLa7\%A<.#3`_0b:kAq?b=KN+\F:(pHZA$IlHC'<13nPd"3Lrh#.KBn&;SkER^tOU`Y?jm#iZsj(;9]"n%c4O2GT95m1(0skFRk+dk1s`F%'Yq]uO,%j<M*jSIB$]]Z$@I8d/-bDDC31jPNG:9o[*+(nNI7#dOVt.e<o0/&3I-V2?laNPp&<+\i+;ZX(4ufqSIi(jBWqs`]S`%d%!=`AbY?VPUCn)*BDJ67KcIJAV_7KJJ*m5IgKa-;&hV`3'!l0p+fK'f$*AHXdNmD`Tl]Ac;r-IsCcq(RQN`d-K,ID6&4W-X)S%>2i%!bRD!,fL<OY78Wd&N&rc&4Q1H<USHU>+cRNZBMesXb.Dal&"Y",">b=.5M/>TXQhi4jIK*eeZP_qoGu\1`$4"jnphMCL_-C,B\:_%Uk7p%QfaV36MY,Y/X?G2)kf4l0Y=%dk0V6Tn$6)^=>hg8J/IVs.bNr2$hc%j^R`21"ja8Ln;$?Qgu*4QJfjAZ0FoV]VrnqhGjoC.%q<ka^U\`%N%F!-F>gu"8OH'/o'E-q+5O2jmNfU!3HV'M*G+S;?U)3TL13>0[I8loHF2D?p2)<%ihm^qneCS@CqnKign`3-F6NJ]O%[Nu,mf>&;32P]"0(!L7!/V2kd2mRli<:CmJk<ne4,3o[Jl!FTsDh/7%$<b+t.bN89>:V2U#SXiPZJG^!XC-W;RnQdbXoT7gB>mcC%G&Ds>G'VYu$9#a(gV<-";,f6k?SHuams7gH7[RT,\,@q5$9%1>C[J'.,>>>bZYiaH&LNmirjkqB7THu]lUD$s@=jIe[MgXJ#SV#E%Z,KSV<YSa[.bG$^lgh+r'l<LZo#0.=$9#a(UY0!1.bNAe?T0Ie#SV$186lN:Ch/sDerC*Gfs=co.bG"?CiI\MMPso-Z8pdJE/Y-I%p4h@&;8GBJN-9HtK*jL\)b7.jTn87bBC]ZV'i;_9Qsb_UX;;Uf1oFBBONX>Lc#Tp<B%71p`<b7,\1>--\p/3j'I^DMG8&HI0uatJ%m.)_#DIVqF'\Af19l(g`,gk#ihb@pH/N,_J@Yo:B>Be2"m4\BT@e24'LUi/'=rh"/(Q6*F(P8Zmk`L%TBDH`b>OS4E3U]:q/m^ZI%WSQHUL+ZdP>AT`;jTGtX(gDs(4:@mA(WR:EpVtNJZ,Nk75`Z8`G]AP6;$>_c?+`/*f`(8YoB>2QZ,L8I(IJulN\)Sr@U0CJ]Ju6+%=ODiL`J\5aNP2+k?A.VM>HFE5])]EeEG2F>eCk[D]K!@Paa6Gm+eUQuG\K#26J,b6a3^`j6l.M:/TuCTYj)sFn`&21XVPu4/m]N%%m.)]f/nRIlMCj"9eS4tc@L(Op@_j[O/iF`=.CRmI(Gi8X]7%G=Dfe#/%c9gi.(7bb6=O<J!n^s4"Ljf>]/[6$fh5LF/XsD<$+@>*%G-Hs$dW=F</rieP&F3O&7bQl'\[smlR<mjrPk(iC7ZUD)j5flBPTAf&=2HBOE8h3sH/0<KldJV[Ki'`fYKoo?YCKJ._MK)+lc(>+%H=!3Ig"PTFNPTmg]W,0BlYMkUY[4Ce98GAkV6'jcXO7d&0)c4D]Lq8-3S)jaL3F)0aUIFHHM4!lelfWYrsJ(.\<jRGX><3H)4q,G%*iq/%@?:`k='0+Y%&1.<SXl99[5ulAP<nhR=D'PFMdq!u=fqs4Ci*9e[Tlm%EEZhB(OKN;Z<1`q952(AB81NJlfF23cFWf'+(:_b%[FdOFc3s#A/WFmb,?7TTIt2[MJ&BbsYg1OU>cV>)fd%3;i87q5=3aWbKQZGOP5YsWbSk'FlLeYX=\K7="lPHGc3EUr&$X=fl0S!=%*S-YAjM/Sn)sdHFA"D;5,L*Xq$`pZefD:Q4cDu1]cEY['IcXb;c4&rRPhWMsX>>cNOJqj0@%CGKLACa__E'?\1U8.Sg$5r.ojOC/%db-(,EuD&8)l\!>@D,cU[d$QD_n1r-Jr4YVgRF*QD4SZ&>eKFh=S6;<).K-QHYKaF@a60Tb@@*2!nP%bG-+m0Fe#:?O*,%A=NM`^%'<Eug^d`5p?5M1\.:BcTdOJ@3I=CbE@%@bt/cPh:]_^l6``Qk0L$:?%&$1e6B(Z`Wq\uUm;nupMrW_]4lJj/6g9JrI5I5adpPN'c%'E,4KXKu'Dja+2WHp%5nYg,`;rq`nFX?JG1pc>Y)L1`oU*UCrE'0Pg"_E&XXjRm#R*M7D\'%Y`D0Bj"Oc:fo2m_5e0lcbI9Q?MhV%=D%`^@QdiVGmT+cc:B9$@\$<3SqV..eu32IB0Eb:CLjTkZQ<AX26%Oh37i[r[RN.G54U25Ant@%k2\DXR]TH3Q>aiM!7u&]:>tm(%R]TH3F70fL'%^rZC:8Kto)cF6gUAl?"kRRMC7_3QP.5+><&7^CCV_l4URJa&0X$.F[RN.7fj=iafc&DB8=5Z^c.4m]fMYlTY1X_+%WkMDV79hX0^77\N)kEY6%'FlT*-_qGSD]j<NAh;uHNdZ\I\^0)a#608+g0KZ+5#[pOA4a8f5/]Ko*FdGE6Zt4As[-n\7UM7@pBVt%Cd"\Nf(]lfAntAP%K7YH.-;oiZdl;$lp=(^gV.I=@D@`(B23[-XlGO>J[sBBXch@;>]43j)S]5;V@?jU9po;+[:OL^aF,Y.?,a3_%G2Y'U-aTjeS(V?h.FRUu!92]n2oM\^X$M<qP:,Pe95()CBoSNdF_QgY(t@l4GpM#4)jG$3o-2nM]R&Y6=`=mdF?X-1Ve?tPpO6"M%1EcOn_=lG0QI8QD@]^W/E7pQGY'"2]3e#QECd&38&pDaTb&ln@ZpeQTPB2Z)e3Q.6]r%p:6V\t[lPpbC%aZ1j-R*DF6LaO+"[KFi%lrFT_9-V&M-tF\J7(_EXnROm.>Jg=T7Ni.Tk2c>d"[cPC![qS,(@3"Ac17)1!Tt-cQ6m`?anKjj+k@%>Ad;mnr2UL:S/a%>'=1H(%[$"00/r`D-kSPYQH't6`_E339hS\jQBuu)U6X8'f&4P)/6S[U,OienQT/Lm/7p5/kf90(qg?),Vg&i.WJ"uW[^,0ADRFedd>?B'b%JMZ]F;3,#.OTE2E!n(m:,7Gb!k3"*fO!f)uNSr?q!'8iq=lg[L:=7ILcF\$tRCT[Yh+)Y\%VM[Xd+f:YndahO0NQB3_q?J"g0BXu%H&&_IamToc]aDuMbl4p:E-@,!?KICOkNHS3mp_,t3'/E*B3j0JUEOl$B5A+r(c!Jto*I3`aLj3VnU,cLOQXiLZ-6.Pc$P@dB>"'c%QOMl,NmAgdS1fmm@;IoiCQ5nAhH^@#\a5lrq3QH'[)#TkL3.Xm;Ek%@QdW?^QZ0;:F_WL"OO,;kI.(Xnk]S\Pq8>%]R#*g(4\I>t%pL^d;a]RbYbuCQPiLTNhb>iJsQIgbrN1SgY4`_C?d=QML>fUC\bLP]64V;fij'B]P&l18A^@e/#Fj"plpV$Z-hJ&:bc$S>EVq/.Y%$%CcG3iF'iba,:1B#N9sLOLNc>->eAZ;7m0%*VX%!P)t$W66u8[$[^o<X)46@-@+V&\H)"_1Rd"/7=m.[I"P*ikX)7,;hX1GHi/=%(hqRj"IOmeX>$I'RAR@sVu,%e%LIT0Zf+KnH6.,5Bspc-G5bNF5Vk'nDG=1cVAP=13hk7NV]5R1%?bj9k&>IQcHP8@GM=7g]0bX6%Edo;lWOX@Rc(!ZQTLPiP1$s<#D+Q;uOd\Y?Y43NUGH2Q>RWkSOJ(Oc^S3nh$`/C&4h.e=aauep!,[;DR;JG^^fUT03$f7up>)CnK%keso@+jCMhVj%(-$p\.`.!6"SFCuQT>RXYRa"i<Ahe-A)US4g]1cDX^kd_%N?$3ANSCor!A)1BAO*rOm?L,KXVR?sNm4l"lmT7^)%dHSfOn]Gc'THem@ZM2>.6CQL><?RCc<E"=u41No6$3L]MT!NR*4R33ubRX>:X\Wi^;9ZlUW3rbF8$5f+4LJ)'YJ6"Yqj?F=*nGFr%;^]4lOJB=C$8tEr1<gk^U4OI&3m#M7Sb:sd[5cKn(h9s#'o^e^lm/K_:N$5(o>3,]0e*V4a:8]nE/=MmOKJ7-(K8-\VFe@W?ptN)%n:th2m*']Ao3'F5X5FM@ZhAP1I<14_jD%p:fkHE\rK,XkT;a_B`p<8E&P'o;mJA+Z26mm+kD/C(g$,fn%,1-o]g9LaZ;YDR+MP3C%mqjdi-`YMd*CEK]]Y[]TcoecBd&uiG#Q6[+;hq6e2ZCGQPQ]""VPZXCAA(F,HXDr2)BH>9c?J,rJA8N3Gg<ZH3>:u*\ULrI,ba2^%j1pCfqR5+fiC3^/;a'GU9ADoqk!T$sG-XS"3dK%5eEC/q3^70\GtDq<7a;EDpM@<7V/0#n?hpC"XtGd@@.,lJAm8_idhBG9DO0nF%75!&9%m5a"^uItu*B)'N?qRS8]8,$Nr;N#^lIJ.>rO-r=#QEYHHoDWlqg6c8Y_cpE_cGYL6jC[H5;XjmL_P_t9ZQnVNC*O>HmI9X%Sd3K=@dUH9/(Weu[\mJ"'N;.uP=a&Q;sl/pF`r+=Ho#tcJ+k]4]gtX2YqhI<mS3C/=Gd.UZK/2hlE]19lJHUM,.6RiI4oa!TqcPR%IrP=Tp)b@2JkW??IRZZ/pq8<p^OmCi.c1pCC"0a+:2eQHiSs4h6b!tT^4bg$].6i6UM6EFf"2ad-Ja]$0228[rVOu9GR3/QL$-7B%:O$Yk?465jNud3>2EDR:UQ:4?_WRci7[E/q^-$Z]*QYSVn6V]7UqDoIjGkcZ:8DX`XT!8hbE;%,Yh(@1Q`ec-m/>]1Q[<Yko2s[@%*V=EE9(hh(Vu,N-ge@0DH+3WEcWMg4F5?V?/0+)g4R(M=bH6@s5Q382O&B%46MTrRRu@.V1;Sgb89#`%Fsh?D"3d5J]!n>bS]nbP%I53B:9B(YI,T\g'WJ^s[Qh%\#<9[+AP;AnP-AJHYq\;:*hgMeX(%gP3!J9'j6o!Sos"M$R'r5(p-V0fj\SukC24/3n-Q4\=N*+p4%g;O'Ih,=-X(ee9&I&E,Tq/WX1]^ZZrYpe-6O*QEGFpg%p9iSbGAaAQ/H#Vs`$L_.S#\6Y;,5Ig@n*0IS4Hp>P<d9YNO2`5n7<+td%f,c<2;l-UXk<!lNX\TG\):),\&$pp@hEQLQgs,2E,-g,pme8oW5MZE0C-'qucP7\$/@p.QT'b=`Y/F5to?*\c+.YsemFt\@m<f9D%kV&+n_9GX;o5Z4XaM[Sp<&uQW?cZS`J%1?(HM[]mZ(8OSQg0FfnI)WTr.TZ6-@&6sBD?5Ap6p?LrTp>Wfn0YkKZ1EEV8@G[T$9BD%Hb&(N5t:_?]p-t\cXS#[590Ip3_&5ZhI<824%(juE;-$=$c(t][hkiI[OttT(C#HWGS70p7t^SGa,.992KS8&(XB^#E6!0KP.)ue%$>9>69CA]S&r="3((,!!qWHP/=NeId&K@VA$D$+u2',D"4.5N4A"URrOCQ_?T6uG%Xi+`J[t\L6oL$>68\_*LpSBl[f.uIWrk@G6%I>2`QGUCfD%_&6#i%6R0*/jJVkNsF\lY$)l(^B\Tgi.utW[H9=(V3KfrZ&a3*hN(dT8JV*.4A5g8!dm+VeOTT8C0H>*hGL6`7k#<%?#9N<VNK$5r6<C/cjnPg/[dFTK3TrkoG&=^5uJ\]/gg?=MMGW6,<U`Vhd4!aI(NRm;sWu&ak<+Rq+`r/DX:DF58W34@0(LG1RId(%'<1d(Rc*?(iGs=#]C,5\mXTL?hlH4$Kh1IbN@+;YQbPHJmRl?uCP]Fn(6T#ikP\X>diO\s@H$I[E&K]0KX!WS3jlFRC[.QK37rD"%O?1O<Z\.T6%H<"Qkji:'%hfECd8Oic%X3a.A:;,*\TgNZ9_a1XPm$YN`FaL^.Q3c#M8Is!adlPGT*2H?YN`rq_q)=G(XAi>:"n>h%eF2s<LEB@af5j"0ILdp!ht;DSe`Q9n]Y6qlLprp.)41F=oNOraR(gS)8aK4`oA.>RgZ9kT42.1hr;L;3.%e$n416glSGW&hEj:B*%X90$`HOmjkr4c5Zk>Jsp^$`a'*rt=5[^-jn;a9gW".tFJMcrIo7M':G?*mpY2_XS0Zjss^d\e`sJCAkKnL](IW)VO^FruD$6$4RL%omCh1d$[mA6'fh)qi<[-[.[ioW2U89WnTg>HA`R9l,n;>N\8T1LEac@'h@+`jR`"_m&eSm](].qpR\:>Xo.hs*B:1u2:7j:IQH.O%C\qoR"GFCjDb"a-,18,uYFr?JV@lJ=4&<6aO\1c#JV[jXfAj\mY5'329MR+dkP^U#pn/CTl->.9i:^a]nn=E2i>+7m(R*Y!c1PAF%3LmeC[@\@d]gdp>Rn'bs;%=mI&s&sdib`M3b]!<VT5Qjq*X\I-aTpHAG>^.HD\iKJ?g-NkYcqJ!grXpQGOJACind"KEY9T02!U*t%&Y2+hKP9FU.X_Hf1W8FjiEZS]-ro?f5q5>6;W;g_='<1IUlc,?G1a*R%,\@"'-jZ>,JK@Vg!'4CS[^c(jMea%K25_TA?n1BJ7m/K%I8?u2s8&1o;84b_6khQ>T>'B7s5I"a.UQrS@o/L%:L?l%,/Dec='l1qA>,k]kXO4*X>SKiRf.DJoQ'4WIJlXP[2<PA@;\JRH@1dO%)d'RQBKu?flIXA;:ZTSkF[^!\c6d8eqOq+XncR`rkZVs2/VR:=aY@`2j@pV:YP/`LMr'W0Xm[(fr/J&(Lf!fNFT7Pi:C$j8\aTKo%&@u^JaPFqg`u%O=]1L:,6?7C2LPECSK2Krce0?J*F,grLI6bPnNt4J2ms"Oi]_LfTG]fS=F9&?(,<PVLN\ru48g%hMq^qZ+l,eT0%k2[1Ag@GJ7\KC;-&EIRXhtp18,I-tsj+SApDsb:6M`_&JT#qtT7lOk3NT^1Vp:bSqYpm\p.$JIh+5Mq#o%f^5b0!rWdm@[mLD%pi%eoUAlFWOA$jo2TFD(F+uWi$\)qqeXa_Ypnbc5k(%NfGoQa*/BuPX\b6+4`NE2H!r3R51i06eRJtr(ht-FhGdP0&kr]]iR5ONIBlE%A*<4^IQ<C8r?[u3.m&)XWShRJ&?B7)%3_-%Cd3cu\(28'm4s$UfXjNA#H?f_c1_N\G_Wl1g^KI;hRS`>ML&c3[:$$gP"&n6re]cF%QA4C5&7PBd5NS*)ioPU2BGhkuhgM&C2a4oF;g`sXm5C$nD->N,7%PW$SI$HdpiHB`mHn0-9p)<_;s90g@3d(h03Cu%&@q=+Z^Jp@%(C=m9':I+/G9a;MbI+L@HY%PBd```qIQtCGp[:Opi:>jSmCR]<Ju<e[p<PK/Zo3D+mXXc%k4\KEa6qmTk1/j;L=0J;UU@9R4_3'(%Xe'MT1-p*>DATQlbYuSggu![=QDHaJYD8EZrW19`dhZ43cRJA^hN6E5."g+7!K@TsB?d2u<fV->/=X3H8^UJBStGQ6+[)@Z.&Rff%4C<%ZK/e<^cQ8%o@5r]`-%15IUZGGGItA,5g@&lZG#ZraUU5/jF9%@Ji@MBtlN+S9)T'\E?bCk>JW2Qrf>L)L[3rsu&ND\JIu@q!%FXr^um<?LKHk5r<%9h>pndJ7<f+o@f0gJCsq\,A<5JGpg^Os1#;H`g+>XcV%RDRYOD^eQi^A*EO],8atcZXY5^@cVToM:?+q<i#T%+:?/q,aQA@;q(7F6q.ilce\p>5;:"/*qXT\f\"mC\3.jrhWuF*Y->UsH^oi32FK3[nH6rX5Q5)<YP=M&2m^8iYG"Nu3O+S?.Y4^c%p]fHo\eV@6M]m6S]HbniV,_>V=q.T9Mo)N$$e^0AG9i$Y4tlAFqufcU*]j*JP0#qZU@5epKpGkY;LIo&(%H5V-b"jA+Sg6<OF43s%&QpbR5inN6:sOJYV:X;l([/@bmb5SAE@of"*(oJ6Br[Z;\7kj'.f&RT5-fV2JrJ;R;DlG%$LQ0m1GT$DI@qF_fDN\2qbmFb-b"s)%g"S5Y@*a\5=6(`n_jkE2$]1ZYkQd.<ElDIM`3_WiP!8a>mVJbF:_D.]j^>U*r='NP@"]HsR\@!BK1l:+(kaHT^a6PE7#oULG4o<#%5[+#\3G'n!IPmZ;^".6`St[#oU-`M%'LaKBHnClW^#2>!JUA'e2V1R(E.0bZn5W&M9q&:YSs6GW8[l4Chq1sd%DGlSGU5taoNB:?%qpLA_TC\rUK+(D,[X/toK<L]VYFX4?@d9g"1.bA^HiYmTOEnMS-P@[>\W[S_DcVGb>0+;=#Z&KO$Yq9a=9Vb-jSd>MdGKA%#"'-r%"?JlP58XW^4Er=db@gq;^Pa2Ako3esd2c4*4sB$;]8=O*R3LZCG`9=2@O[/>*1:>'YR*u@F-SmIgO^su20W/ujiH1@kTTcujj*j_%>M8@OT[gpBX5R`X-[&M"@D,.4W%G%:h/eAF71ZuakijTKlI*6/b.*e'B:0baXPHhD6kC[K=n/_"?T5RiKX98qLh/rAciakheu8N#%Nc_X@3`=&ddBpTtH$jYTcd:H<n!oD;-lu\2nORY!_.9Y7c1o#:Oik659<B.]Y%uAFEUT-89"^<M6"WXnR7#W15%rP3D\\m6\a][5%l([^-\+mRf:#ro&^-0Q)/16QbXE=E]JZD>Opj.;gqB[qT8`"R+<t+pq@l5r[)*WKK'&`!pj_eIA:c`o^?:TBq>`uj1oN;,6)+Ls=%1Lt'gOf1SUag&cs)VIf^BJpdGG+mBqM,JcqkX-RS$QKF"*B,IRs3AJ_l0J5MC[(e?1rAf2F!^HC'!p?V!tt'8/Q>@hNam/`&"K#D%*8C#,47]FFcX9u68=pJK:83N!#6UbA9@pMekqq)=`='M/mOk$Q.>3Dt8Fi@MlUZ=Z-_r[\;Pp#fWCRl?;ola2m1^NK=^Sg78;ent%cat\4SXSjWdd^pT.Qt@5qaK9d=Sq]\ElTL[4"Jd:FU@RTl-rX>kb(jIFpYII(T.r;SBRo!7?09J?%Vad-84q4A'q:/bI(?:6:'Wa%+U.3&/C^XF]7dPYj%`=0J!ZZd,fcu6mj.K\[%L@rjP$h2-f0I!\cgDX/Y2l-'OWq5`D6Ic?(&[Z]W>]#.:((qVFFj3H.K=iXLlD`%h!t:F=9r06,Sli'9MDHLX$95FSc+tRg7npA0a)$J8[#X$QUfB?`sLW3=i]]4E#/)C=;b)QUjVbl&">aYSB?lqgAP8#qsXu_#4G0l%P@8UJd7bC(I&,K:6>(DJVlfY%/=5Cks(^%?BG=3U:.OlgUR[sf-9Sp:]I,@\Q3GNeG#'5#H4&3R$lXP*eXC4p4Su]Zam=5bNU>J%%1Aa"W#Hr4?MmSP6a`)t3V2m4hjTk;`[ItT=4Ce>!\+g_=H)c=E[(Q&dQ&_]NfjBQ7)V.TY@jsgN^L/N39=[1C!11rtl>9+i;B(%Z%ZbI>U?,T(l9P#QsWMQs;j)/0uF_=Z#)_dO=R_8VSB.>q9oO?'E3gS4?^+!!'baD)Kq8sIn.PaA3ln=_U$grM,Z'9\gml!iCo4uWN%q<->@Odo>:AH#DRNiBkr@H^qKQnm.393QS*f<LI.;E;9AWEMkC/2U%g.^j7EV]PBp)_olUh+CRVUC/M8rTl2\<,`W9R@0Rk-_.hm%VUD^`ab8.teQk/EDGQ#4rfZF5EMYa>T_opM\Wlqp8GTeY.T<_k;L]''5CW;B@]JX8qWH:kWH9[Kmo_VLIg[\iQR<d.4q!i6<FX-4%N$+?;T:1Momkje)1\HnD>MI'Z6,gK?l)f&C>j]M-WVon=H/:lWhfn3U!,KhDLr2?_AW%k=PZ238T:K4EOfH['K*;8Fj?Ic:n,`T>%?WdFS]O0ZGh+iY:Kj3!)#a`!+qbC/!bHjh%_l9ZUkDdZ&;l3`ZrC:IL&Z;B![CE4@UbG$JVG-Z!bu?C/56b"CL[@<ma/N<L79(T2%@]$7"9[su8"&%?tB_MHQ_UnRN0U=KQj:sdW,<<`f^)9jl>,sUtR&.mj)_fh![P^uP?i&`G&Q9Rh.6T%3/#fW3'UjG"WF2VYYpWS]%*e+O[^;2ntJikH.18Xjg8;ciug[/F9mER[cM^9`JE/CiLOr!BSkRqD*,V<%7$VQHWPI+H5lI7*!r^g9EC.4U/q^6*_@#\q7A,df+%QHutYM6VPn((7aKR`*iC8W0Dm;5f>VJ!(S*`hH1drKFTjQUdAZq^6*_?sRFYA,df+<a#;N1%nDk@^.f)6uqR%BsD>Og8F#7S/1G]%kRqD*,V9eOU.L=BPI+G>-7#3#q^6*_pm`iu1%nDk@Z_+p9oT%7Zrgf18OeoV`jAjtMDd3_:XW\e/]R&1^IX:%Du8W0A,df+f&b:*%`km>/,&S(&5g.u96J]n12Ckt'\nh&R6Ht&F4iilrB_4h82X6pY*[-G@%-Cc'A\33oVj`6CV5e@DfW=h^2*%VP[MX@@^<i,ARUpuT%ZU<hkP=hu-:0't:DiQ*pK"H_s\6D7h*-;GSkA8/fkRDW*5tO<6NCPgX&XRkA`He2N-?gp1V'G95T-N6G^Sdk>9om\J!JKY[8Kc8`%]KQU`RqbL:^;%aN2X6!n%ZoZA&BmmsKA`_!MY;"#,h5'SOGSQZgEuba9dLOXEs!lC+1*qIKBj1q9BKL=lf3/^Z_-QAe\K-0dE14`%TN34^k`(Ghf'/`o71'(1h[l+!iR@N4*(j/bP_oWO&mgi+_e-7KNRB9`4'_)s+fDlo;HJ_O;a6;_hR8nu4?$@/D_^rCCMH-aO9q9m%iH.V,W4>#Y?GKd($dG1pJ6<"b/e8'1Ki_gS-N*.J#L_eS.#PMD2;]os-V?kip?"d6<I1(W<GqN',Z)p)3+!B-o(eL@,#4/kVs>/:%>kdj\2:iLK5EUPH;Is&]R#c&*I25/UaWls0[@%SEPYZf3"(JCBdt>&QTk8GQ1tB9UVRZX+ejZ`]!cmB8k>n>1a:@gThErMl]1nD6%Xs=XX`R!mZ.3HDb.!^0=5'ag<G`1WbI7H0bZZn@$oqJUeoT*+%.C=;s74d#Og+F_7,8,>'2f)/Y=ZO7].BP]p(.d:6>WW@1NTsc2%p=Ru+dM^eL2ndG35PbH7lX_Bm<;_6,?--&,\rfU<_kC$ZQ/($,Sb:b.[G:ZE%6"?k"4t83((T42>9c^W[qkC2:(*iZCsX4u2_l?L%@PrXYQ9qU\3GPr\!dH(Q\;cflj(>!4hWuX%ceLTBbm:pK$R.X>Ln!SG!,5(WkAb(3]n6WYoNjr+YK7akoXI(ImGECPEhA[WU)4_=%ro-:oo5VMj5*s5diWNT@*IH#u:Ceg\MB<LW_+mk@0n?;so0sLaXgXah(&aI8%q)bF;n'+2-!i-1r7o+%Q0^g(Aqo?enU@8.>BlGV%U+DVi),K50hgNUp?:Cm9EqUc/^,CVTrb-lL3PknXH`:5SG5(r1X`1\;Lu\uHNqA^9o3>@W';#+1Ff#%=fP8Zgq7"i-a2Cul[0\ZM%cgFS4#?#m6Vc%o`7c+`J08@N'Sr^(2G&Gt4O8LaR6$AGa3.Vo+r"/l(77-E%0!qNZXQg$g4W+4@GQ#ilFID-(j\>),0pX-"[d*`g%EF%@Qb]+injY%f\;n]5mdW+S1T05165sm/hVaQ>0,>UMMS&9X:W*9;1?,05U#%iREr+5T@9aiQ&B0U(]q@=DZ6$+lK.=4nJIVL?I%O6@dh;ECGhk+3Nb"jn@/nVJ_DVE=W3HE2]:^42(5g@HofkS="/RS1sTJ+7l@Zt7)jcWu"VJ*$OEh&sOT7")s)AAI#<,<PMe6PE#c%N2]jsUGsglrMlNN*-9Og%5Z0">:gpP,9D8(c.kdM=9tL.$\G_Y^sPV0hV41broSP^Eq[&Vj2ssV$F9_Wa]uL:.Y'?UobS5=F.6Ko%qB/QN@L`'%S6+S")0hfF:qc!QboYd;\b,p;p?=Nu"6RAXQpo,T-:ccA8C^>-+Dc7s#$03<Yt8027t%Mq%cLs*N67'b>XD,W<iCr\%Kllo)/-]k6,90(m[pRHGOO^`*iuF$1_0_#e<?bY]BL!T"=*j>>0g?)."UMUpC^oqX"L)-`HP&2(glRKYo(,WuETm'B4p_QD_<Q&r%;hNcH=lF0Nf]&+3h\4%Dm:-M9)f#]'lT@F&mYO1,d)btf3E4U8JRBbt)MjZ=hK1]>^Y:-G?^K8J:WV4(^3g=a:gr<$]CSYo3XIh%%AYo.pp(KjJmd\_YUH'G>HLX>&aF/uGk49gW-Ld",Y4@9Ap>Aq5#L!#^edED->'Ek_O[A?oiU3N?<V11cIha5)k?R?>T-kZa^6(An%NuPX^/9`ld/I;7u%n8UJ]HXVpFgqV$P]B!Trp@X)=ErK5XT$!V`6!13G.[K8ZF2!MB?*P3SP7Q/r<5F[L3'[1/9AI6.:)-5WN?jc%\WQ0lh\2)NCF=(Xpi:S9Pp;E)qR9PQUD$W4pfc8t7Z;%%K(Uu>hE>enJJ/bBq6_^"GFlB;VbX)TDS(XuRE@<F:a3q5=G.L/h^j73%RU/??a)!=O^[/C0Cd&q4$t5!r%_e'2FP"@H?p]L!67OYOYJlQBlPo*IbrDg646b]*$"ZPWhPjT`p1m(1iib:BeU'"7BWO/kdsa[W%>_MFRrm+`4>f1=Z*'.\'l#%cTIbiQ'nb-AmXQN;#l31@6GIM$20HOXN+Jp\MIr5O`TI_G=f3$j>O=5&YOJr35'9gc@!t58u`a>]6%N&LHgI%oY3U%>Sg8A>p<>03DYIK*POE=Y>^dludL!qJ(pD`ZjW7m0F*^/osNW=NT"RJhPtlC<M.Omhj[;q?!p>=_3MD'Iq;0$[2^%q"iP)/e/sG4Y.Z;&tX*UE7X[=0Xi*prIJ"LdgFP#hu6kFKLf'VFtU#(V26!"RgIq@ht6&XPJ](<3(Q1KE/0)$W@%_OjrqKlF<Gb%%iC6Sk^610/M93tepW*=P%^-9'ra"Tm5!=.M!X0\ubEMPQjh\$a9-cScpb\N6U':GbMb>+</jBPpU$Y]KIT;KZ66@'frQV2Xn@d:&%6A"5CiP3>&T[YW:4Hg\gf?0/kQHlSMRg$brC(eD/Je=T>^snTiRkAFmP_4@'#0Xj!.NP/t#@[6I>B#^b'Bc\gkdl\5o\"6]%^0=A%KY7U!Cr*ej80,QSkO<KNndpari-0PX[n`$m&8er[Q]EHehX?bhjN?SR@`[n9K*IGiluX91qQK,l?EX'f<+)=:?60?Br[I3KA\YOS%>\G=OCNS`3,0sH*:/=UlSQ[2:$":o1(bnI3EBSMcGIV^H\eKT::3#=jisO$p#Qk?&H*Kq6%,/dHka,BkUgtT):sc2dC.?n%@>NJ-%XH&_cgXs/nSC`[.,LgHa+=oo6nqDo)/W8DKE\?O@5!P(6iq9LYM(8,b?qroBWFgI4@7Ll'fK*UU>hIsqQh!02B'JOX?I6Yc!1/G6%P#'bc3';2A$>2#K/^X#O&l%?&&D)tX*6q%aRu@J\2c/jr#JJD)W9j(#j_1W[]A!(+;I^f[218,b*HmE^bOa*E/q;<5f$OJe+[U!o%&WT=IDKt\k(JuOuTEF'D(@1XqBeC2$)Coesn@%Ra>sHDhXa@G,%V`^%(If2#_%\JsCH(h'qbm%YTRH"hjdNrRZ=8kA`6DQ]WnP\i%c7^h2/87*4q8F:sG`tT'$AbH?Fe`b#>76:)n2onLiu/bC48EY=M6iO=fPP=iUp6sg,RJ?H1a@$7"k7.uL:J6KrhRfo7Hp\HDGjaZ%X<n3AhSGUs_Vn3,/;Z):OZWHZp\N2L83rj\>AoF079V0+?QWPMc2AV%#$DQ!Mg^=[9sY/XqPmG?dCd59O]0qX;^MD4-%/JEJs'5&%$iIH^<T4DO%7'G-l%SKFLHR+Sd[O^OQL#7H]6GA[;E(*"%DBo6k@S][(kM$t1Pfd-HS>qJ6DbAL\HDcoG4@_5K0M62A@amEW6E0M%KAR<,l/$-Ob%dZ-+`(56QMN;"'r$-=@+J,7.@=*sN:-5la'R/8U^EP<i_;X+*T9d)K/WL'pWdj@>W5Q:O;Ns7p/G0>5hY7EI&r.T%Yh^d#@\HEf<f,!AT5Gn&rV?gqT^]kA.Eht^Q1HI&b'jC&J"6\OEk#79_&uSFA+2$i=,Vg3>'>P^(]AuJ-Sb^f&]9K?^NVj5+-m6U%QQ-3qV'c8/Q3(YK?+dd8(ULF!%G;)!\,24aD/l!RE:T_o'<<bE4=7*k2=""#/XcQq]*(2LbNClGc,Z?t*B*5J\4Z&:hr$M8\h<5$%FuFSqAQ'!t>aeNQ@=IaZ8#%]qR*qGo*XeiNEd:^H-V%<\lsp:&;oNm;!cD!ja\S'%(,sEh??G!`c@\;d3TY8Jk_'TiNljC?HU2bj%P,[,RIeJ!?]/Vcg+_VqX&M+.3],rVbpLG0?CPBF"d(E.)rF2YrQ;i-ioui1<Nli],f&c]@VLnOL"TENLIX"G<"]I^^p8Q_!qh@cZ%%P>_#L8ijB/8Hs-9]_M^A'.ad33('DD95a'$kZr"2)kD*1Y$hQYWsQ6nSneGaJ?uWn6^rEqYY;?9UR,hed3PZ1ih1<\:^&3,`%X)%,!P2ZSp?BH"_?%'+Ofj%?XrJB2]YPZ,Ekfhao_!CAl5P9jZ:Uo,EE?WG$p>(=so-E!1@@%G7/d==hriEPoh-4roCSAb/eFV9X8(V%CQ$>;q)L\eI@A(0-C^p0S<`Yl)WFB>2tQMe3cb<]fp'3&Fm@GF;.$S%DLPb@!K7:@G:MBt'8I/Clr7.ZWl!Is091Jk7/Rc->+KcC%55W[iUarbtnFY`D7rPa7i*@"Gj&@iq'Kqt0Z[CiOWN,)nh^n=A_@(97<jD[hfjCLQ&M>@^oI,"p-a3"61u7NXff)?I2@NCZ=BniF%EUo:d?cW(T,!;/UMXW?d15oK"/1&gZW`m`jb:lpPG[u+U&NT:^p6(__.Mb&5_r]9"eaMj#Nk;$Ulp+Ib5%@LY#o/sX8jNJ*IUgk1%fq%Z)YtR[iRJ=[1=Ie25EsM[q)&=I:87'[c-GuQY<'\R_-,[S+Q]T5`\&kj6,=2X,?%4U\Nq;0's#:l3ZD#3is,W@PJRSqpr5Zp`%OE:)d3<%rK=>UdaL]-7D=HNG*q=p#7@Gs@]J`#l;-c6";J'E8<#0F)%O"i\5]udKl?6C9^O-<uqUROVGr_YF%aCJZDqN$hKiI+jb%[XXeUMl^o8+9*T(<el5#UL[Jc:%8)YEAB)NqY1Qu;)55rUYoba1`7(28hCh81`=m&ckGj.q72\b`aVJg)Sn;&GZ^hFTA=8>ZuUn.%po)@`74[@PW%1@nRuY3%BD<_WQ?N[>9Gh-rQZ/%&^=`LsIH1qPUbHqW,*H(`01bU[??.T8&XVN3WT@c"MS8Q`n+)D<N;W8S00&bM%kJH/D5UpKC"TF;Fg\8r7%O$bT-1CZ=(D17)-k4C<E:RiLfdME"qMGc=p8H?moBa<WG6b+c-a.dL+7JIC>sY(`)#"oM`U"p^pncpH%S6MKbbNFlimUZ`59cbdpUZoqH@0aoqpFd$AWgDc&ei-@bdj2$SEtI9f"+'eE!75r*cZt51?^\o6/_K=X07/bWWWW.Hk=9)FnaLT'%;<46OXG-,s\_+5BK3Z]d1>L[qZ@q5p4g5+He2QKF8@#kFq5];1&DiQHf(/B5n*2jS4%H_T6b/iHi"oQRWHWU98gAQ?)=MR2)<@?c%';rPk]M><?&>[FcLVsG1Bqtt=8_fta_7?)^mHKX?+3q1JK22Gj64tN.N(O9G$C)V[#:M"b_\n>sX\J>b.Op7_``<bc[=8$o6VLPO%hBL3j.Wk[)]&%;UZ6m--H\-R!\o>iW@$U;1O8p.tOYga9+PE%\!f#*9(Ya&d]:*cHAV)jiG3AWijP7BH]c2t1;&-Li>WFSbj#A7B%?YpMds/5nJ%/W_P3VVVos7(CIJ,.Fil<jJBJ,djM]-Yh4d/NtCiJuP`'&h`>$i*#Os6`kl*a8AFoLWGR9)W]-VuQ5CIel!9PQ*],%?iT6Vs7U<;l_e+gl;7JHhu</\C<kR@pL!s4hu;I#IfJdos7G&1I*/)[^NBIQs3CR'Qh@o]If@barV"!UqD1>43WJ]shp+7]qHs3s%+9)$O^\e#Nhu3NBJ+JGFqY[NcqO<!7m6CXD?[Vk)TDdGMT?mM+c[U+=PC@pDIK&K'X2O_`B8+,"PWo-Cq>]@Mj8%#N3<)c]p?&ja%mnYB5ErPa(c<pRko8!A3OT+ckqu#nIs0)H,qY[g8_12&@Ik&LkRrb^X]r*M>kPb4s)qmE]1@s[IT?<U07bR0=g.l#OKN?Qq[FRR>%]mdGVq5*J@5Gm8E]`%7g[$n_1^@tE=q1s4/qsqT#If&beI/4ZZp$B\*HqJC'g:jmPomA$gfftO&^Qc"ofpc0cQW[u"4NdIeT'LIB%lV$ZPHlf\F8Tg$=AY7k^F1tPdIk#Mgaa(Su<*s!Y4V)t4<8./GFnk+p^%8q+ca1pkc7=<GH*ttpe1W]*o2[Ak.958P-q!I1WkS5S%g3JOgbNIJ)Q1KdDoBYl<FC&CWXmb(G[GB-7oY%m-[`4ZF[=\:)&*<\dB,;WCZW#26T)F'.HZdj0X>+'`<G2<:qg)QC6[4$kLNL#`%oeCZ[hB1V+:OdN4oe/MB3?I]f*BMcXr&)MFkpYaK3M$+1%!9cFfCQfK-'`mR552B,M74Q)X<X97:&4_@l=[Bh9-:":[,'ma_V=0Z%>2<PS<ZdCe-%.4Z^]%80B/arpcBmsVg+H`9lK12\\ukg?mb6P>9MiZP3fe=g?9cu<G5q4qV4AWA\p(?m<mGL4dcRm3;RHAMm[@M_%rg)e$/RJF%b-O=YDnXiC]:`f;T/AjRnc$bHlIu7#F.^cZ-LK<cLL#4kr9F.e-ZBnVV("uTI^SPHGI281q2(?]Br:H4k9\Q%O]77A%>!>#jhFP#[7r.AZmE;L5$1c8HHm_3*J6>8iB2aj*ib&,HX/VHMYI;?=re4\!i"t\F4]YH]SZLn"p0$5A:ncG%'qaAc3\N\K7_:>)%,Z`3K[?5XFr]^A-qtJSOK^[KifAM+J<R-`7%qf\Ofg'I)%!qU]&a^Yng*P-=CR:>jDuO!GGOJu%XWQmi8?(_=o16&,CY`bG,EI)9%FSPRBbLs's0!4c`A"oNPe:YbVn[W)eJ!P+U[s<n[gQ&s"7oUIsK^]iQKNi3<b$$f=@oq.-@U$5hRE$=KC9n+]%uI!^[6NI:oB(HW%UV9Y]AXo*VOu]N+)L!%Zh##XpEbAlOr5r/0k<RdI\T;45++3fC]\1X$Qcb:<X2B*N>0aF]h<W8C0Q4ombKC&IR>6Wl*S0IjoA*9Q%\*(i"Jc7[=WL$^`d8RugV>.+iI.]&Q>jM!k\nc9O?G>ZN2V.hEFg&FKk3AIBW&842@E]/_C2Ke^]fM=aA%cLqhO,[$B3H1#XrVqR%g0JZu'D>OToQtauRl5G9c?Qe;GE4?ChoK0MX]qm'VI5I+4hGN\o<N'M(4>pcc$H_?FmA-"&$P3<hosiF$^n'@Dk-Dl3EDQg=WArq%Xn'tKITK>,4K!)M\LL,?%aOic5q@ka4U\f0A@Jp+JRe/u32e99jXbgNf(t/_?*H<7R6iC*,:M%%fN/T_,c43u]XIEjn*ZJ\[+QKY%b-Uqc47sNY[SljCF/AgSWPZU:qV7iLLS]1gk>F`H]mJSEb^RL0?i'OA4d^Z\DJ!fK_6JbRoL7/fJf@#9,t.(,c$LmC?X/KBgO8C/%e,4qj;#@3"74,XQ/T2-$/1Jt6)_H`_&Vn&G(QW!HGIqS0,W'\ZRs80AbEaSuk/s"L9:"-l\hl)OO30GK(Rk&Iq`NJm)"G.X)&AN6%8g4"jB&8]4=i/n)E`bCDM%$NSH.fl%bji5?T%`9D9"a>7Brbh6I&Y/XIehnYic;erGuGZ[>Bd0^Fm^.QG4tE-N/&a*0mNS*X5lGo%I,A`;jSGUQ7U]@?iSia<[)0'ecO2#IdQ'<G8]SSl*(.oTde!pb^MocFA?(T/e?3V>QOd-kZ"?3.Su$!^G)ji!mmu#qoMpa$g>aR/%;+$+^::eX^93F\-9;^-0/!et[`6MNViQ*(Deq^d']GdfkZo.L36X+9^/_DJ1/-Tl#dqc%VXW`=T<sc>^2-XkRG`Tb4?HYCD:s`Cn%I6R,>-%>[JI:)I#iHa6Qr<k1I"%VN6&O+L*/9K0W2Jn*m>F7R/e>5r/48WB:VJQsF=Sh;_EjM#hC9=bC/!gaJB7$A.2YQY'<o,@8%##g4mS\[\X99Uh</^&c#m6&ABTB<jmPe'n>BZS3'oLYRL([Kq\+eHp?R,#A=$%h!G.H`>p.j2l*H\B;1*OakPNdr!5lWH`%BZE`Z%HdG7PoCf=5BRLpL;RE44G&ZorL[kB?D:qiT5<3;\_7@V)=ZL\*dI@b631n68DYF\MZeQku<55BXqmaqKY<6c3C\(+>6PM[0H.6FT%5s$-:%nHB\bf^5Aq=pt\`?E.>EV\'54VeG2lZ$A1P[eO#o:"$0nI<P,gGP:+_0ouS@3(k4SN`Mpa)bC:ijnp9>0VNNA&IZcJ9b*F%[%f<IC_V5nNIjr45$7Dt?-Z)Eh(uff_)=B^>Z$I6Id:ia=@of6^&:!hF2=QXBu-l\3bALQd?H5$>0SK`$W2+=36<?b`iS\cC%ttG%:%q-FToYa-9ZqWNLL)9]MO)cC4n^*FTT*GK"DuauKs>LAMmiSoU[N5>ooWuI8<1<fJp-e6$LY.5+rA:$A',@pVhA$;2B'5&7mg9i%I9;!(`?!CJE?;mMolp/)*eDe'XB09,[N0@HNST!d<_eZbSRp'/@hCEmft6k%m5"F%*dRdq&"3=)T8+<3X,=-Olh5t7VS0i#Zp*);%[!OKMr3VW,9R?0:/=Vt:*d@ET%mB)o/j9'-hUegGf=ih06?ultf%n7-&?XO9#DA.er40G=57=c6G\GX-PO4O1L1WTeG1@YkD:RUX%Z`4TBFL\hf>$^_TP^g/6&)A`iqk]/@H*psnD#_hbqn[hVq]@_\S\Nj&RI[?2\-a[3ma6<i?<sh<cEe$qE&3P<>8:buB3$qP/G9Vh%l-NEiKV"$?*E$5[#VB\=jp6\ST/iW;Pat0TXJ8;"So73#l9&XO=9mBOHB+ldQkT`'PF].;?ZtlE-Y-S4X'6?bm)ihZ@M/)c=uKT@%4g5Pr.=!nLe8V\<[V2.XFX0WpE@(6\K!TeK/g\M>nhQ@b^OgH\Eo]Q'>X#(,B;Tc`g31-D^H7(/n&X1KoAeYUV>RnHHkDEFp?gg?%oAAO&c,,Ljl,=H*o!^tIg8o`]_4Sj0/Df:$H^U&WXQo;TrB21P&\+R*#PpfD*`:Joq0\_)V:1#shp>]h%7>ja75>D4Ld!o*a!;7.%9+L\-iOd,jFR=lt7l;no.qMkMWEY%4dRX$*dQUq,*>WgS=m&!3jP9(+JV"Q@q!=AK^"O1T](Y#iQWujgSA0kec>i=;QV"^s.-DAc%-6.@uY=rJ'@d,Z-Yr[cEh:7Se3T;XI?f,\II#AMp:_X;hrF4+)dL2E=_WNnc:H<J]n<d\H^/]pj9Zo$`'%Mt8RoZ1e``E"I=_@<X%:SssIZu==>T)QEDKNh^SkE6mef#KK(@JEKc6<r5.]&V]t![2kQKq4m$k"kC)"Ik!N'SBBVh)e)UQ/51(Zcu3)0/]r?\s\/fH9!nW%.+7C2\&0tq<COffC(@W@Y,1o"S?H+t*EjAqYpn<#q$lGeH<(EUo6A%'5)+9_g3/fra4TpB>@1'N/#!S-Z=rRu%$&q$*c^?h`28>l%@"Ml+XSR6)Oe_K_q:>)cY&*JeSlCGGcrZ*#Fi9oHW1b)Q/ictZpK`'9_80f-)rK:CU1J4YC"H]*Xd*J6I(YIiR'EF)rA\km8P_8A%Ios2qs"g(+9f`eH]$FIFfQ*C^:^i8t8@K_D"E;otEBS]3Rj3X3$<MQt2[b)a'eJ,6BSGW7Eg^ikO-dM2Iti/J`7AY[CYKj,&J#pq%Yd'pM9U[KH*NG6hlB\X;&lFt=9;LeZlaG<\`0QX+BXe/m%t!^cd^)q1`_:C'0U*u6/@37Qk8Lo:F!$O9UfsI6;pP5dI'7^8c]N;/%8o#]+[*Pm4<!_)S[,];q/&?_HH[dN6>HqJ"c`rArcRga>h;u=BhcC69.Ym#.6PcJO^rcKB5'LA";^4,C?E7P6*7d,VD?P#n]+81a%=hc'%a2uhSKPG1QAI$uP"/=,)bl"qeWtkr1%]pf4?mlM:pIgIF<X!o0:%rBYpQpg8.$gns3<"I&?oUBg(JF7F.Do4s3k1/a9[<7P%_<]"i`]YW]C.d'VZ^:Rcp@Q<nbn=<BNHO]PhD`2sS3FRf>mlGYC:uNR<hu^9lL3;OA%A[S[iX,iBY9<m-F\,%%sd8rYT1)2Z/#*2%ePgTaBNQ9&#N>X'S!8S:!Zpd?Hof6grZ`D1:0fU0OUpaf)q,\\'EQ_[*.+=.=itNa91u0'nap^9Tsa6'_kTo<6IF*IpfrjC]PluK%Tqoip/SJ^k)(&r+;Js`P3PsW8o?5a6bNen*5eJqD?s^k_G:[sY\hVl+3l^Q`SQgOb3m6Ukq`"1oWVZ-o1\fbp*7$]MIViGKj';7-%b[IcP)!KemLAr\UX8A!biaU)^W3NK4BrOQAC-NdZNb+fYb:N8,*>L]H@HWdI1_DgDXn8-f0<@A#UmQ%//(1Z-dUq:eo1(FF'LdS^%7-cm93+eHt[uB[Q2VHK-K._Hsf<rqSib&4<(@ODbW]4JZL.iIP_FDW@e'ZC/"0/aM/"enP3g>YSJ_&'JEbm#T74I<PRQ6;pXl2t<%OG!:uT>^MIi`/V1;#2n.,+gn=Ca\h=V)r/OWt?;Abh_6"mELPjW\#!g.u#/R.5-@Biq&m<-2$mk8"&AC*#d"P>@\p+.rT(qS9Q(Z%%[9Xr8TF%54\jg7p!o+6e)jTIr(u;/($b>'C?XG_nXbHD\?2\5WRJ1mAPR(D.=#r?]s_u8HPi9$T4QSs:,HN4lXNAY.%<Q]?52'F%&\@H#3PRKN2,9AmMtg7Ek]Z8`FNb2$2;+DPLm6^HWR'afk;[]MDu'O;K9sr'p?&24i2j%@/fBldH/#Xk(:N?eb[)msWe]#m@lb;a%.b]U,Zh5?+Lp&@F/'PptB_a=.M!^DQ>k7YnYoUbub<fss?dmc">OKbY2R8kEXGp#8;LD'!bWA[^\;2Eo3Kj.Y7ka;2k9&!IP*8DY%"s4(d5WM?_TjTp226ruij/>Ma^;.,nSp_XJFm3&l8mjZL^H"A)h1^kF9OMp5NpZt`UNL/7+(6k#F&4-aoJOQ0pJb2gpCFFua6pGq%'Q#9RW0$HYo8%fP`TZ'6ZO]cN]G^NDY\>[T))DMoRBfH)Vh6o*XM[NhZ_%rh,Dm"#YE+F%a*F(bRq_Gn)5`8'/Wg\ESNrU,NGZYD%cM\).'$N\,RR:X4"kZ7(g_^\&=So=kU^bX2b[W1(ZslcT&o-hB@A*[G2>7PM.C*Nu-ljBQV8j\0"`nKLBAjB;CEiDWH(WudK>:2P%[H%4*YiX#<Xa_&[Ts`<8!:RJ0"n6Ncc!-HTn)<CR]7X!4U_1&mrOj,$Rrek!%0/hXe;ZZ,Qh.SG?:PC@h`oT,S:M\'j^u3Q0!:j>%Yr*S'a7'nkNts/)7A)%=@GX0<h2CJaEN:"LN4$^sPK6$TO\'3)d$sLr0bA]e3Y2:cOXLiR&#A2>.(+<eEmE>n0e5(p]hh=sbDD`m%_mDt-ci3b=i<[9<j)\JERH))7;:!Wj!b8gHXTIEW/;f-&:=sQek7XQ4Ur^MimMLT$'O`O6U%OuF&Y<rFH2:H$8+N'5S:1o#<FU[3%OH2S2TP*g*TDO`_7dJ^OT4Mmc]n.YB`5tE58$oUn>,C<s:5ZL@gcAq6n^V_0>DCTl4s%<LbIOI".NM]bgu`-`P:4)_+^jC4`=^8V%4'rBMj7%bQ?"h`X/YFiE7*5/"`;$Znh@1&KRU%b,p685&1!SU7h8]0<hmnoS7I*)N_JtN/gH0Za]l]aIWOJP%^o!YsN!6kW'_1o!%*nMtm]8)^;+ZbXQ\ZEuq_?b!+kbNoh!uM<;:k<a?,Ca`"91^[GqgbJW/E>*%,a#,0qP)LoA#eSJXkpR\Cj_XF&u"QAD59u?]r>,4%&s*ENrIcY21#!CEiPJVgrjJ:t&0Zh[SIA#E>8>@Y"O_SnI9"&9dN\U[^i'p^Km3t#"rSq6D?#ikKjr/AHf>>"0QXP5!3%>e`mgm<%oU/1g$-H9gb%a82Yij,2$rLUh+m.,<LGH#M3!+i"/gFb@Ug\GJH[(]W.&_DYV9O<ih]':f\B/kqfnN?R"(kZ?V%Hke*GS'P;oDU*%S\QcIk.DDT&W`"<:ea"5A6dL.=NqD2(MIAS"0oXcM%XQ%Eb<t`4bflj+>gFli`X/VlLLW;M4eao=X?ZCrJH0^2ON@J_I+!cW<DX/%@F@Bn$]VPD2V)`-7V'e;0]3+IDfd4RF_KFDg^i*5,9.ZaHG"i2;?B#`/VEb:ScNaq$"\JkAYAQB9!dE[O5:9#d6lq:+MF$GD$;i"%JU5,<'S?7?Do[uCgjuTFpX)\:H+7Ib_,`*[f+'Z?B<if=^)teAo'7I@^9m>D](nli;aq9$Nfa/7krnFgT;FJFgnDj=[K.!n7!q:b%Z9j?8@mgQu>2k]AZPGkuA'A&q<Ms$R*1:qU6T/Kt>o%bMXd4BE%b`\tYoo>t]'99W"d75X30R=Pj#^eY:GsCHaTa!h,FQ(Vg;>:R%i.HtT@d"O2MNC+BIaTQX&)]&:MG9`(6h:ra%T&4ZZ`n-OKD&E(VDr"O_RM@JpD1SNN(Qs'/i]*N#C#j_ru>(JoLm>F>(Q_XYmT2F%4![I,*cKPZ982oDWn(K4C05;<^_-!u$&#D3I41C3kP-X\@f*a#(RBispU!mC(Eo]aoGoOd53mC3MCT`3\nL0-Oog<&U'P_/hH[Q3%B/:8\-=BftcdG&?\)E:TjaFFG)6g&XBJ._"I*N&p,<*dOG]fYhTLh3I\JAsH!G)f*H!&ph\cNd%.(.UNcSRj:/#A'LOEG*.UuZ4.%DCC8!.&87]pg!FNg]0tdZ=]h][F=7$UYGg>[JRPrA$Lde0b'>4CtSX=*uC\3AgiGcH^J'i9BKlK2mV1TKFq3#Xi]hC<1Cs1fcPBo%3CMVk.>N;)<Fd$1Cpbb?397QO_!0f'COL5ddA#E0(*t>2=Y<>Vi,YQC"0T$KLSgu]\3h&*fLFXt3Gi1TfC7Tna2aC8V-NVsgUE3K%P:"ep]H0%%Y7*^6R3%S*Nm4rSX.OaUTElTc8_nitZr=Y8hdbtTL#EuaHm#eF)0\$VU&4dMAH6,:Q-Is5%X$HCbMbZ`b:4\r.p6`P%aF%UQI\Ju^c?9=CPZ#,5&&cQb9]&Vu:'sh)-LF:V<Y5p@m.HRM4fm&Lhq:,q/>BA!4[h-PC[e/`laKBQQ#;loN`>@,P38hIP6bue%4<M$0]&M8.9N"si@oM2MUq9h$'e"M*Y"30I2=J]29[Ek39Y2`a_aPHKlrCgMW_Z?_"%eERjDa]rOem=k?WSFP-"`F0pc7^]B`37N%&m[6IAi!3NVh@MUn>".oaS/F[WiJC=-s]+`4o,`:(*r^`!i>FaZQFd>8CqUQCF%@3K2AdOM.3FskI8B`!Y=VWqKpeolM4#F3c]NJ%1$UPSCW8o0TmMlXg]Xol%oWsN/\e!2c<UZ]I&XN9!_I.1C;1UF--V2]0-C:r9WHFfb3/IIRqZH#jdZ)oO4s\JanoT^RZDkg/;nOR%TE:rXNkImR)^LPVo%DYPW3_@Wf,UcNmZJ7HMM8b(/gUatSYHpq[;Db\"!Ks&^7B%HjD_p4PtRkpF(pan<VCs3\?:1SKW!lM+.DQk%Yc5pCLMc^.\!c$6Y)@I/:Et)RKAnd%Zjj@@?T]JX'B6c=+L9@'R*_Reo26RJ0;&!g0F/1<PEK33-Ad1C;HPe:3kF+qXgfo*?Yl%C%s5kgM;HaO_:_b-^okR`NYWobl^_%>3C1O$aTIG;/:F+kQbpbS0;O9hZA8l*)6g;il;(1BB?)ljUPtgbn)[(cRjb)[*oHH,k%YrE8%.h9Y-2:TAarIUm[Nt=K+:lVJlOC`pm]\5%Z>QS>SX9@PT9s$k$!`ZVUgJb'WD1PSPfgnW`aJg4LgL$LHeGCShaH%uc<*E\5"kf&@%J[8]IG`10_Pq6`=@4/LrDca&lD:aZn%NIP2R)UaRJR`"Mq!Mod=]-_WE>O0brc$7,OV`iS^Ud%G)A9:0g0rO,8et#AXXIuL8fMKr%Uq:5YD$7q;As(U*;pIdoV[QgPj1<@IoV)a^e5H6cE?)@@qB]2bBq3k4-6L,?OYWHQo3-gQoFlnW^JW'1jge::3jXb8Z>g^OMO[%I%ITot&MDZlV\CRe7a[E_)&R.a(G*N0OW@HZdYpe'td\^*^(74RU@@6_n_D'MAH&@':Eh8U.?L0\!fuZcY3U\^ZF\8seV"0bZkaccY%1r*@j\KJDKE)C36.IAGhg"A!9;h4eLroGD&:j((LY%COC9#+i6.!aKMkR%en'7O9=f?74ch7FGsSXI8<8r]XJG*$+\q%7JJP#tgg%a5kS`O7:]'7a7P98<.[ih95/d2`nPQ/\;i1ZX2d>*QH79E8X!f3QS@dBgo\1%HU54Es:aJQ%<E"UoLVZ,>t0Df>_tM2!EJ0!^n16%X`r**.JTSq,VYn1T,lsb$%Ya<CMO%Gh.n!PUI`M>'Y*IhM/QgABM4.(*?M@)77De[;sIRHc;)nla"5QdqXtum";-QoJp*iAAG?d>%DrQ\4FRCE\QBI^"]Sob[erRWOSjf".".G4?:g0AZ$$PlBCsonbEZM>G^[JDP=;"7051F>@N@:PK#&p_*qkmm;;39143Nao4XR=B=%)5u8*cb7N1DoEo;nuQBnl92V)I4e8=hK(U$.cZ:7=&i5NHSIKPLEo9u&e:XIEoHK$qM<A%\CMts>LYS1TGISSV-SOh1@eac"YNW<%(qZRp'3i5(h=8a,"LuL`R+!hgcn]M)O[N&-e.Ghrhg;gVrl0)irp;I;#9r*^lB%FHT_;'eF\7)^J;-eGLO^hY^uc&ZBEU%sbea/@%#[hcugTSdS'Pe;1.8m!iM^YP5g(fE5ZtBd`C5[]2+USfL;$]RJOpBB?m1EdA:?fHM;\`bU\f@J,4.mfgRIh*Aik/`,/0QZ/N^?i9%p&3'j'N['U1Jr]sq/pjBNN2/j8!P2deGV`'D)bN!HD56?CDT2?AH?@-2J2^A!#5HB`MY,NBHU8r?HHtfL4AMg0rFSP7CW7X-f']f%cRA5#TI4<9DG\]`OrT.]Jm4u9mYt.i++BC\lIJ'1GBib[,Y]n+CZoV`[ja,sHbOm_cihhEbnnr(?W:GFIocbFKLkQgQLF&ek.tO5%:Ztc$A"C6TSJMrQn%NfCBc$heL[+1t.\##8M^+S7mMA+#(AC.OcR9@To0$O<XZia8IroNtK#rlRWYf4TH!r2]/d1f8,CZZ+655al%5`<u%6=p!(:ujB]rFC@g'/H/?mi.X*Ohb4dRU#We2,0K]]$<`>0YFs48;l'LCdd&u]H1?/!J0ora$NL8)0!Nb$h/7RKuO#i_+">/%p?3E\D8;15d$,ts"uIc6-]VeYb1U0P$p/;9N[>o$C0AIEbMcB_"gPCEoSI6,QVr'4VA+BKe3-/J%MR#u:&!hd:&l.@o?`<u+PSC^%RE!5F"2#H;>R1/j>p`(N.rKjHA')j)9D60/.^U[6P&:4kZu%$&['2JTZ$MNfX\LL%(=sSNZi%_@-mSt27LogIMGTV8T==P%bq@=8%ERB!.!$"6GmlaoY3?p`s:Tob&$t8jr5ce$WEorD7%V\0V\sH6(8;b8aGJ'YGI'l>jh4YVH7XG3GS;aW@pVq@40sgiND8^TX(9f6/%)u<8\,>kF(Dfc<'OL5J0B?JLZ?Kmd'Pg,E#PH\D"`IeUBd"OeeIcmugp`/O>T_piPV#\Is`++r:m8u+EPc!/8Zk46A8IMF]+2-QR%depsX"$b/qe99f+bIS\3-jBd&,C2fCP2;=cVQnODC^1`cQ'ACE3k,S'bMfNhbWqj/6_'K1#+&m"gB*,;#MfA-G!!rc7)TSUQ*9FK%N%6:FWo'"p;]pc:W<bnILjg$J9_Sl/6PYI'J.Q-dITD#abbrD$";\UH[rR?lMgZmFZcSZb.q&7iRc@ME@6f`[n.U(ZA^YY8Gnf*q%DYT0P&&f?Z@3:;7SAHe@?4p5[=:X9b:^#;qR3lU:OM9ZG3d&isJI9HFL.F<&h-IKVGth'8S;aC[K//ZJL\DJcmaRk**OWXMS8fF7%,(b#M)LrobVsK?$?q6D`H3htI!Y-DENa%,ufILL$F`RoZZRB^9Op'T3Q>%I9,ac@_Il/F"+Q[o(_?k1he?3Jkc?D*jn`Ema+dSNR%WkT8(+?E$pLo2VIqEkj`mn^J0JOY3Y]e$k%Jt4]O(r,$$Z7Gnmom3@[+U"duJl6dAZ-fns@FKCb$ZRgdSKif&MYJUCK`VBB>%8C]%R%bX"]8)FAp;q+^Jj!]*fdV@'nWSM(chT3$klSJkKrc8V@DQ:.%e._'\u]$#X9\pG3J\?1;H3LH8;OtEre#iX'6@"eC(Q/<2tkcA%+!ra;FHp#j_n:f^'qYUe%7+m!88jSLM't5)^*OBP:q0_1&EKoEC,'/)B_Y#`?);aap>ALDQm6iekH>lAGXi)R==J_L"R&7/MQlib%+^g(l>Cb+=amKO`i3"&QqN[aJh4ZQ#Nm<TH&HX]`-S^Xl$5#r'QrKh5QQeQ5ND-m@b%+$\1oEXa*i1&>7&s&fm"c1JBMs#]YR&5@%?t4n6=N@MR>#OZTrU^u-D-.n-A'#Ha"CSRdX]$[ap.2AT2Q&N]MV]>HD`K5QnfB=(laB$!0$9G`\.@YJ";?Jnjh$F;Cu"\jgU`oF%Q0eW6,rpE[_g2l'*K$l]d6#LZn@cNT<NZD6nU#tBfl$`)W`3tMI@Ei2$KHljJ(C`?l^hr<e)P+Hj-7i)S;"eZOt%2@hkHS[[J28t%H6`kL7u5+pdeLO`KYJ)uMe^Q";HTicW[Un9dTS5X#\aJR4>brZE\gTOLBXb_B%,qcbuLhZDUkD!1R%IQUr8XI=gDtpma?!ac/Jl^%_5`%<<t\I_$^R<X8Y_JMNS=PZ+>$1c_@^4=&p'@<9!lP12^;.\1/qY\*3?RSY_Tc`9S<\l:4<\4oXLWW-16FbU5Dm5V3g^#7A0)]%0TXH(I<aRIZmo+hrVO:$i<9]>3OD3,'K)]"/u)XdU#UP1[j/\c!EP>km&n!``)hZtYpN/KY;?_K[,O,QTEV+q8$cp>Ai*S*a`.)`%d)o()W\mVN*k(rD))cSj:rOf^Aql_T^SL;_0X">M.uIPR\]DLqg/hZQ;*a!m])%h,lg"8__q\O6i&U9mJ$J7$?irSIV!Kc!$qRJK%[@k*+OgZ05Y>K-,ou/[8g/q5*N]&#,1OTRN1mULJFcLGYOF`?m4`&)8&0j#9Z$eQJn;jf2c7\`a6G&$EVu9<4'H$B;gD"i>j?Qn'%reg7l25elmqB!%=G4j_=EX@A23h$a>B;G#2]$[PSY"h<)\6Ad`p$/UBP:2[FI=m1u7q)cYq!rtMHNNnfU)LCJ]]pT7n?<gUYNo/d%fP&sZW7`=5&n3:`Ob0``pUF9bRW"3Ac8kHSl;gB#Co$sTe^+h^k))E;V)tHmTt?Wt`@p9sZhlY;7Rf`m>2*oV6%0&BO2_`&>o!8m%\'1@q>'2_dlEs$#5,d0)r5NMgH$#i@h+S9HZJ$i_)fGTAFU;pm_VD^35D%QQ851-m_sEuEfYm$s3?qON];[4c.Z`+MkcQm;PnKl`%d1"E::$Pol/<NM/f2TcN\t)jBH=MT9gTcNC:kp[YiUP`]hkkIehep'_GB(D;k+,9Mh.7B1"RjM=?hNP0]Yi<Df.?lnA'9c'YJk'f%b,J]E9jZC8iHJ-8JnT;;cq=!jW<RNlQbI&+V7YXP_QrD?8jj#.3*I_L9_@:AZ?W\Pq<<[CE(Pi`cCLQH2T"N@Ml'u`hfR=R2rLT8%r@+G2KDcBJ:2#E1C.?#9Q+NU[k$V!3>0q5N9r%P`^PsK"G9IS*ma-@aeX*5DnESIT6),J4Ok7bS*7,*^=,IbgOYFe]cVBtTkVrc`%ceD?6E?c/WD0NtE5Ka:7oB+V<kD?(NSVF9LR_)4=,2]OI$nc^H3`Hi@,A<i:T**PXJ#1r/:-E#l9(:n76RR`AS;_o@(_?5a0Uj#`%K&%QUgK_Y#?1'kePVEf48D5P!35I?E2sL"hD\"]T(V#>Og<t+DT*1B,P-_K%/MCXpG@mid*q?[t[<M?%re_%XS(mKF<UWB`oTF-B%`b\u+:I9?L],hGBStDtO4S(SH!6b>2UKEqYM%MldJ(g-r/Jcfm^lH@Z&!H/2DEu,b,I+DG440(eCI(=CJW"KX3SbR^d63^Nq,MC:%\])*c)L.6:<US>!d^X+!caIbY7+<\]d7CaQ-`q$<jR)0jWH8M#QoHCX>QVuLU=D\K9m8DYUE/M\&OJO#`&!Qd$F53/MZ._TU;\&p%PPs9;d=r0VhG/#[S?M=9amGZW\$N+bj,Ql;LZC.;-?($MQgiLk/MZiFN@i)DrTYJ5'8ZjNX5u`j#W1"2W<>__CLq9rPj&+uc&n_4%iHfdq!6BN[Us2:_Pe*]+]o]?%PN(iHRXJ<ncEe=^`)3MJeC4B+gefp1)SPd@JZiQ.rG$gG=*]c>),$MO!l(\Y8t]og"?oFtA$D:1%<r<a(;CuEi]XjTt3/X_W+GXlBH`;aZ!Pn3dK5\%SSUNl`Jk6mZ0O,qiM*8FEcTj:#OYDt8:,+GAOr<N9I.99qlgW.)QjKE>))M*u%TF>ZGn]ddIR_U_#R<IGd"Kh-(6S#;8^eV\_!pGQ^^Iel%n;H@#Ck'PQOsY:%GlP?n;*RejdXbl;O0l+s&]_F;Y=m'BLj#Yn:$jF\%_9HMEUDD@)791eH-"^NPlm_JU;S&@X>`ZP"g+U]b2E>["!kpU[MXn<@/rV1[CW5[L9PZqO[LIVc21(]>X9Wmg<AQh0*AY_n_H3K!%nt;.,M67J6l/i.cRU3#K%p;dO1S[6/dA^31G60?G%m9:Ho#_G]A'(/rN6G5^eHh8ccY)d*qWWS#.0P,0FIH'.T>uRM'@-\d/,a2A%fcq"Mg+7^9*eagFqRFltg:7QZ[#2,6kOR[8$mPbHriY$B+Y7@b3#./Ks08XEM<61A3Z%V@lXIm7de6mto$%Fj+j<63e96sV!Ji5Q%0i<0Ig'a7_3di79gss#?LK"`Ul?'K$/0ooYe--q\:f1;WBu&c@rI"$#;_P0l;HVUW6cpC:#$^7C`.qqQJ4*S@QU\G*liOX1"99\$%Xr!c.\'mE57\m.iZD=C7:JPKCY;iBt8H=0V=`LJ(UF<u^qBHlBkk94c-+63VE%@_*XVe\0Zr2_<Rqt,Y0G%3V1oB'Sfup-j`4eR7%.d3jq,Go*WI(("l*l:F)ZW=Q7$ct]mZmOh6K!0^J$/UlL(:#?h`Q_7H1Z`Ek[?>-#f;"YQ3a09prXAh'kabJ*ie1?lY(h)L*E9X;%&Y0GG[9Q)dg.]lDU)mNBD64Bm\=XYVHK6ubYE>aYnVW#32D,61Js6t*2IX')Tr\qB"6sKk.eTWdO]1O&+j0>K2kQek:NmT^,HgCr%l.7HIb+`%W#qjc@h2Qk>O@i&"?!0DtmI`g=@["1.GUq6*Q%1n1"!)]qJKih,R0n\--B=hA]FZ6cmSH,.3r!A0V+u:e6TbJO;3LuJ%8V$fsmH<([^rIbILpo$O"n9puaBNEWiY)?U,c$rPJga#1=c5[L1#C)(Tq9-%CE'W[Eg6nEU:\8ZcJd<9SeD8KomY@p?0dq(0J"_N%5lt*/iY<aMi.p&a#4oVKELIgt8m<Gp<N@Q=)V4EmSSc$ZqgE^NQ8BI^^8#)uIU(U>1u6Qonp]/(XU#,0cM\9XRe4i*:IjekU"0l*%T[5OKGUqJs1W2d"X"\@CAS7>WI7O9]Zq\6<)@:Q:aT71Q_J-D+$1=&Slk[B$>0fQoB$KdNbS#:RiK#H#rtanM&/NMr91:#`!2al,%$V1DaY2W.*(NY?]\$J0ab=?sOL+?;`<2)9U16FDfDq1)Jf&s!8p;rZX!fj:\>g>t[:QV4g?J%a&Lr+h5moE>c),"*YN^Oac]j6CK%5_p.?Cc)XNYJuXK@J"/22IeQ=a96uu'@:A7:XoYKOJ[J:a'e8b$F"43eR6e]\;g@LdGh9l0rALT-'c":?U+L@B#q3,Vo'cppE39b%04p=M$AJ:"!]!K&\Fc_*/?-594dId4'=I%5k[eX1U1d!Mi)1IJ_6U1;Q!"C5)'oSM'g_'b]C+%Y0rr/m1QGL5RN*-R\CnWI^F:dX%M$P]?hL`0hB7^i+r9k[Ejl@6!Z3"I!d):I9^W3*GS^S$'5T<U48=PKO,i$NC7W/JL$ae^L6^VWGJgQ9@B3Hp=PGTno*R3OV)@sUd%j70:G"[bF0R46hU\^S:"$ud:lZ2E5a15U0:raP[h`^n?&PgOa[m8=<dlsJb/W1mt5[LNYj7G#-.?(ge5,4$%d4p1AK3knMoF3Xs*%JoOk-^!7$/s&uR%dDm1#G@f*F"-nrX016(_TY&+BAHJ!DX]gCBR'J!J\Ti:A]nppLAIUKOQjnS?iFb%'NN^FJ,H5JhpL:;5;@Uin%`0-t*HWb?3lN:#q'9])u3cDSP83LYbE^qKqY%m1gd#2W2dKnLAJD&gcL35!9YsL,GZ>=,ploXerdMV*_'&F<qMp^MrCY9UECBT#+%0F:u?4Te7GH$%X?e7#g^1:7??h(fIKP&&]<p'PQ1:G@Vp\hjCs2Fd$]<#7[k2BN1-='*[hbeL+L&@X(>,?$+J:Fb_E$Ro8^+T[QI%d7oa!`lJ\_MX1mk',4,Mfft`gCsh$':#\]u/ej4AC*a]O@Sn&'0>DrC>'m*b$?/LWQ^BD'<TY!I6/c=lX0pEd\U*KE-IQkh-%#1D%C<=<';Q\Xh:r58Y>bbuJ5-kBq`7,00bpca5joAI`A>f91%u`!+b;<*b@(-`&cqM/M=ISI(:le^rL-=.;eTRm7:CYf2'I.$R(LLI2%a;Dbos261SU%Yo9J]ojdX)+2(Q`a3i1:A]YBKlTqDq?@1GK2P9I+uATP=jZd8NF=RQU/>YZ0gtB"gB_E$Xom-Mol\BALABk3V%j/%a:dOOW/i)-]o?"dl<5.l5YE4[?f$]-(J]r<V4_qOKaSS*AIi6T,N!5A@k8<f=`FticD;MT3UeBK#!,,[G!sV).aUbf'Ifp4J6CH[%5g+AmRq)5f70$@NZ*p9[a7f)?R_QNbm@Y])<Wpk1#JuSF<'Hj>ng,OP!T,tXqX1DeO\jF32cYj[?"Cq%bHaJe>LY(V+Pis_Bm\VH%"Kd,7[5SQrf)Y#W%<fl(\#<&TQ;2IY[Zr?=HFNrcQ#UMuSr"4oKs\VIr`kN2#7eCaUhWSL^#,ZHKW:,)mf@$e=;NR^*6@fFhtLuA%MZZ3r>\@-JN.KL4cQK]0DP`<Hm`?9XTd4X4:U-fsP9u=*:ue8&6Io"&P"O&qZ^r!`.W[F&.k$NXWf[=T@)elb3@23,r>GV8:!IKB%CLO9b<E[:`2&%P:kR9G:>`Nf63b#,O4L"&ci#G*l\,b\-D(,VMb>YQrD)b'^7\uSDHq$3',PPO5BL1n;'JDb_7u'R7d[(J>ig'JG%]H1AGal346#U:.4e8S-nlP_g_1Y6Qq*Zo,Q]Zo`a%_N@2@UgFH5h;u/3s[O$mW>Fd4j%'Hj3(1e"cgsW(@%&b.c$5Hag9YF(&68n%eMD,84]^E?EW)!1'>8]pPagIn&f&6n7`8;C^S"k@_aHAK)3$_Fn18n#dO]5$CPfKhX8I.O<@BjU^"i1S19VEg,;.hM0FOCPKjiVh%HL794kOg^TZ<Yh\\u?\dX[P)<cq%HT\F(Vbf2jiH6?Io40%?W_SgZG%Kp!F'WDo:s_Md'/#jo#0KtgR"4pE7Ei]AT(GZGI#n=f9P%U5mdMorc[-c<he>"0IS'94U)"bZ`s_e-t(X@<:7F0.\26jPA6Y2#?6!PE15X9=N\L@;;MPUgAo3Vg6PUe@c%fiOBm`oQV8HCO<hX%pE1lFU@,./&g42j]$r(Y\@4U&*&G37eVAe9-lP<WLfha&<phkEY#aPb-l]3^kMNi)!%b*=UIp]PTj6O;%bg+X!P1:riB()8nqTgg%]2I<YD,kL/SJ8VcGr;U]3<,T9Db"n/dQ.Wh+'!#UUQ?!c41.u:-6@Jg)QS6)C5KBtOB$%8m&6O#nM33;K#=7.Q+j-H)Eo9I,uH4i%-s`Yr_[@$7`W"<VP3CcseTSsp8dETj4:/kQ)KT)dYsrrjgfjIu@=tlmfpgh`n82jN+kVZ<_qI3Sl9sa5J<HiMCINpA.AU`61/lj+%@/c*g<89f<H6DR/'*U"0%?Wu;bi/]"RV:4G,C!sZ2YpQ!Sq_1+Z)[Q#RsQI;4Mt*(G:g4pBe)EToo90fr"la5Hu@`^5TDeH=qlD6%acB*W_E=[Fn$SJ9rtS`jPul*9'RUVgVM&$t#io;h.LJEX=M*0&7>A8-)/^@d[*lS*Xl;59fZL@1"S$(uZr;!6,8D=2aMZ'c"qOcl%0bpOs`(tEB3joVam^K-h][_Ts;F.e'9hFqiZ_63_mKkt-/d+e/WJ7Vj&PM(L0Mg8bZ76R];%tB20ddq"-p$oZf0!.$6A4cIe-q-X%PbdA=(geC@[%j0m'bE@YYFeLO&Th`1fkT]UDVoFDB13hWpf5M^'e#B=\!.OVLEab&fT3mSA-HR#1sP.SV8fG$G]TnEAn9"hGDj4.%\SR,WjDGT6JkL*YAYCMTmC[gSDW#JJ02<Kb(bO.(LC8V%OiB:Q9%SOQlrr<m1]:@</f+p0i?PjDb@);bLr4np,E6u:4[iflRTg;a%"B\P#4JtVPlIQA?S-3JbmRg^aLX7Q:Ps/mJ;XAZYmMS#h>ajsTem3dfb1*>NQl(et;]B/FX<DJCWli.HoDpCoeO#8POK_mnbMm!q%L$2g87Zda%Xb8HH8Pn(3Hu4Q<ZM\dNoG.VpksFq.cX749Ekng)crh@W9&CRD..(fSM+H*S-u\n[J]`GdjsC26W0*?qp^n+[pgI(,%efh*6n$Ia#:thY39p/a4\k6p!<VI40WC.c47Su3i:a9p1f'Ok1g0XRbN#;tU"q!Z]Tg0I%:*$l3OX-,,?]719"Q/DNM%qd`FKMM8%5r>T@\TGnN;>P7PKf$[O!>uM=l7JJp"es!,]_1^9/ONG.i6jcljO/)00#i':2S)>Ar6QVo8%HHl^11^8k-ZfVTVlKq*`9hGap9`1%-]5#Es$BOReUH"ek7F,IeW0RHAI@Kn!-JTZdA&s4n"Bl,mZ%CC`&aQL-ZJKO*J&r[]+H$0V^("X.gVE)r.F)\eolafpCuL=!B:D5%,`=\3CFD:m85&BKhEHVD%ZB_R_2l$*U1NCtEKQcN\E[BKcM<O\;(U#'71"?]#7s`tk$_iGY`5#`K5oK)#bgpWQ:#>rPp#:p($9ND%Mp3\#js-[81XO9%]W9d!A@K:k5jVo9Ak0]c;bA2="`f=Jp(HeP:>*nmX]Y^[A?e(Ob#Ek%m+l9.i<%^]#10?o9>W'ts!QBJ`E&`d%^P%!/MCH7t3JV/o58L^8"]7=7=1PkQh3spMa>u#EU*9/jFm]Q%=1kKg#DtLalPhA?jU2>L39!ki1RJ@'YBB`K"T)TL8+cbVa<\BU%@*P8Y9\2F;BJf".g)FG(A%D,FMJ*S"rB2`2T3I%m!ZLZT'IpLV5:6-W'Ln-U_NJ.\iZTtHS'?2TT]ITA'K4EM7k=?BB_;E.2:!P*%p8`8:0-@j\`tJstBe%r8@//kK4B\N9YKe!Y28dR8<KV&)1iIKVY6LjCRbQiPB-:DUH)A)D8ANZdiY[1N344%)9;r_tem-;an(&86%pL6K_'V5F'X/j6p]!1,jJ\8<J5!WGkW5n-V79R[;4hR+a8:`q$\%"Y'UA7%]MEI%aUGR4%QE^C_;CZ6.?9[#cf1rt5$*'m?.'IJ?%mQjCC6)h=,IPbW;7%-ei%o.O(`e'Kk&1ZC>hk=(E/*9PgB"Sc(MuIKc?Snms-(qk0`iDLeH3qS1Ng]sm?dH5,:Ea18OJ`KJIOg6;%X_JG"E3dZAMeUC"'.s%\l-(L@,KQ5!V&D^c-lqq*Y8fCn`=uQn`)*)cg+Iol/LEJhUU@W`3A*cLEWFEKVE<lfF"d?35?1fAIAt#o%RmsR_d8oe.=._56H/7%5M.oHPEr0li=Xa`A>gCp[FGAs$\T#:?@15Bl`1J$`VK=K9)bP321&$V7;`g`"r)]W+V2&/s)R5HS0&>fL%E<sj<7'CfYAt=.418tcp@4Fa#X8Eg&TL1<M4au7k8Nf)lobOkH6!%r-bLLcO_/d4@Om&os`J5?Cd\i_qRh4//NrLR)cfn:EPSQ)T%P%\u`(=Wg>&UaB,c-#3-1k!jJ6(o#sP\H<YNc+*aJ^t8+P4EI(%J,nLb?GDY0Unf+FD_QPS[Sh9H(9CTj+&,0m`JBYn%L.51)4;U%@B,mefX=5>F.&%n]l6WB0p9]s+GSk%Z/L'M'3;#*W@)Z5;4eFIN;G%9G@Riq248$fbCr\$>WVAgl.U0p;q\he_(C!Ah*S*Z`,E6=%e'kOOX`de8@>oD'd8bFH<fhdY%s)..N0i0B)E4kaWsTQ_4%Qq$>j73ecpE6Kd%-/^daOf+jbNTSp@Y10IHh/=WaVKpPH<m$_*A@(%7$IT;.XD2YeUt>ScVrd;[6mchdjQBS^\`@InRghB.[g!1U=<Yjln1Wp-+Rl8gq5nhcEqI^A-\=kYuY&Llrg-69"TU]b`<chAW5dH%SGHS9'<5u=Z8I:_R2DkhCP=qQA;M1(FY9MCp(X44#B%62]EQh]9["s[nC;K3\H0J#eZXOcj1T'k,M72J/GIVZYali%VdI!5;UQ26%0U`XF$LV/9K2[FC*O#'g1b0ZsrD(7Dnnnu.[o>?2B]&A1k^4]c)f`@O\9usc=#m/rr@Jm3"GMAAM+!M&S;oE36sB4<Rr&;+m-.Y=%5OSZeEWCk_JO47ASDrgGI-br];(^jWOi>p(R`]u5>b6['HS@pup15Z9D+7<Bjr!h\-<GUqkpKi5Fbk]RYN:YE)URfK1%O[r&H=OY%:>aH*4A(?-@$-e@h#6%'h\,mfONfXJrF;1BKnRdc\5X5PZb1R2T2>Z3r*[u*qLu</5/3[uFO5tS-abYqc4X5>DK]k*GZYP-PMdA$%o*ekL-JL-k*WXa6k/LS$&^e0&Sl]_/F[0VGk0S:$/9E*@mUAk^"UXGrq;&[EYTn2j?e8nEEEiCIm+@dphpCX/BB?#aP5Jm:.YKO'%U9o7^YM?%&``EO2ig?(p$g4B\H@F[i]sb3&mat46q!PUOVY#[Fn[Osl4)<&H@d\hi(>Ui:Ta4_a7TKkSnWnU)jnYc5bg"Zgo1g++%/"C*d@6qH"HXF-?%ZP8+p8nGYF/TkRn/0h';i?l3M73&8a.U=bM&B31%667BqPmWi\+iosb\p\4oioE9%=7;<O0^ukeueij/r&NQ%UGW6uMAC7]+g%A-MKhmTL1!.$1=uHhQ?R(3TKP6kX`gL+h3_loS?!E=)ELC8CA_=Q(EUq.at;dis+dOe%Y[u93T5+Ck]nPK/i8Z0%4miJ<>_?M'cMXHO">37=#`7p)5[j[*r6I:p8:80;Mo4"g9\*uM48u$_ac<.=@q4LtEQO$oC"\ec4'Df!*g<>oD2qpI[Mdn?.RuSk%DaB<H"VQ'g,H%#Z9P5]#E/dG/#go#N.U'MBRrO0<2BT.6%T9j5/"<CF;h_YC+GCDFB&RG9e%DOBbgC#VB;)@:enYd^6l/g"4BlL;%pcAB-9%P[Q^mOhHq\aH4_cDbN;D-GSM(ilt9I8^_W8!Vror<oZ>i3-0T@0=5qmk7Ll,3R^jA3_pjF6L.HBB9j@SFCK#O?17;r_*!%ij16'_H7,?PW`u;U_uL72@D*<pds&IHO!ZB.(8CVOi9O#Pm*mE-M<1gV!ht4^d^B,;TBZT[oR8$Tm9N7DS(7$j"B1JBJ8>d9s:SY%dDN5HFY[B3#[i-VQ&MJkGtupg1R=O-WW6.Zmb`]M:n\"SA<*XE"STFe8'NVS4YauCDPdRb.n:si$6?SB)1e9t1eocp-oriP<,H(2%#SMs!_pUIX?PJLOnUQimA5:]?9d_AeZgL'E@_],!]If`J)KT?fI[>(jEQ"]i0'QD-^8JYtr+R<hoc?(*/neKZRk^XM>hRjo]Kk!T%FN;4h@P[$RZSF%61a/s!S1Q5Ws,'c4YZFirAsddoo#(:?bg$d4O_iV[CG'qEf#[i]pJY7Z;,RbC,[8MV)_J#ieEZG"8:Rfq\Lb=L%U+@*:%Mt.r[sRu6('Zmm!u-G=1oY;fW:W5<G+CqA]3X%80Q`_YNgC"o49H?]3fON-p2tj8b#Yf01("Ob(dX94aYm-J>WZLQ%\h"R%BC$g<$kiq5VH(tZ[J/$ug'%dh4ZVl5mVq*.<a_o.iSTed'p)c0+&==!]chf;D(iL#S03V?(;*pL8YHr)Pt0\VaHE<*Z<5qVqu%E3%M%H_f1S\W;J58kT<"4g!Y9)6n@'rrG45A^famc2P<`(Ot*VXMB@`4CJ_;UL(Do8bHPnc-0C\f%e.4[OFZ78#?aldXSq:<GA2"d>S%+O.;dFK,n'd3=D:#WhUUr3\QS,mm?q&3S/[(3^<.`NO@O`dXCYicc01C=mE_jf2-*[YJY!)u,7/k[UZDM5GEqY(\JC-%mHa+gG%u%1ZK/&NL)'f%XTh\8dThscAhJIoZYuf#uJfB`l640X0dgQ(@#'Vk?'E$MX=HlWP1gCSi^S0?s[tM!S.&(]][Y;nI!oeD6dBUlNMVh%1'fp0qUGsQE(EYR"l,FL1BEVCIM.&tq%aj0''3@6!\7kP7#*Rp%dDh;i&c].^n6aA3A"[./SH$\&$snPd-8Z#792E0g24?V@b*3M%PG,^?E#i8;jGsEmN`fI27eLSA0$I?\$A@qOm=nm%b$3TK<VfmlE=Rk?9e))i_nL,\9?Kc.i@rWOQlH/=)a<8QIiss81TDL*6bJ>`%ef>sE=Tehup6T$7W:LR8$-EUkk0[<gV!ho,[o;[]/bZ7cY7mb")(5pUa5ZRU]>ip9l,jgBJ@m*:>(@2;2>Ah7Ki@sQ"K*02kIRq^%NIXS*h_67k3=tFu`dY>:!.Ns?fEP>@7RGKHJ+Vl\7Z&n0G95t0h7Zr*nAt/EZXmk>d:c"e`8mqViq`4%Q$OH:fl<q1<>DZGOm=Un%RKqZ\6__K`V"h<?nNc-k,@2mlh]ZWG8lqafDl(fF3U!oH,@#..aXp\e^A10[&;P93&V`)q%CGN1#gg4/1^&8m)nnYAe&$`9Y+]ld%E1.S@?T/\L/]O88h1Vgk)"39`'g5jRZ@Ha-ePRN8joMU/:\TZ'fdMkr(Ul$%`Cfqp&)6n!GOc>_X0ii=nB^k$]m8)u*DGFRbmu]5%Lab67M]Z]K/diP;ifsS1:R<sde6AQ-f[=CH-kO?<G]>n%;RPBfO#+VkT-?$Yc-V"!$nE1uMGqnBW3/V'r!X(4+U0_jQF.V+a<$Wt%EY[0T?-%4>U[9mLs&\ao>b^NuEiMAFCQbf)DY*ar0HW+#.I$-]pCSngV/9!/[X$lL\3$G@P$J'Z2/IC^cUXa2MoNru4/i33&\$/A%<ar?jI<aiBWBFjr7FNH-Lm4Ct)#)j4i$0/BITXIHiA%:LkGd``ln-0oMA)hZEJi0<DDVf?"-FhA:$/@bPmO'[?V9[2&htu8T0%;V%60PG])lp_DIJPb-nMVY0@17T2->J#"8DkNY<Mr-^G2X78L\'b/"H73N;`@N1i-sH3)5RJGJD>#0/W`-FTPPnf?uF-sO",'F4:C1h%rBsd3-J]2'hoe2qom`r,]43%?qZLR92RZ(u<1?7@j:kSVQI4Q6^A<VH24#@Y=B74]G1@@cY@#E-T7#'?n+"F6Y!>>/ltR'\E?SQ5%7"0Nk=Y]jiRR]n7+Y<t2`.1iWm..iWn_IXmW+bbmi?3mHkd\\*=DllH@^iq$?,?YY(5G^W6T9b?j`h>jMrMiVn'CZE-?c<>f%aFE%[MBj6GSXUBLpVFTXO<RTego!2VAR&L/]Q"pR#S'>SD%G.@_`NhR<pEEUh:O;3:!/ZPrumOAabl?-LA?@548u53=2^7;PY3?YB0Yn%PRU2+?&'tV)=KuhUdB_!HIAR)S$o4#B>tfeghfbHh1u4IOa@:^(!EI_SLghLqE]e^rB7'B,c%N>Vd"7-(,Oj;d?(*hqfD_)+a"L&%d\'nX>K[r&#e_!PgaqXud:C[R\Yb6/cRm-di0!B\V*]=bpaps+Wj_ftG<@6OdZj6JYF`'hWI6@!&O11p\K?)mq6gr6l\$A3i3Q.D%S:8;Sl*iS&D,U6:7nC+q9^`HhWB47dAZU^/a9i]1h&"sY2lW$2Hc7/<=b1B"[AY6E"M31$Fp+8^lEaZq4BmB5JY41K0-M6/S_D^-%hul6&c*F+@WNIS#/_%7fhS+ls,g&XLc7<u<V,]1/"'BWkl$_<NUjcC0HX`#f[f24kmk*7P5msI3!BU?K@t]V0m8u<-rTbi[>-,P]%?#XX0=RKNIloS_,W(:S[gHnDl8A$:^0:/IJb>*VkQB[NnCVN&N.MCThUmNnRWltCV#=5)q#\D6tdd&Y_$O`^nPQI5D9d,Y9!-Kt1%MS)L+=Jr3@%&-c;'[qJH(l\%9ar7HL^ZV2gd,6CXPtnTXJc.=o<Tr`eZH1V.A.Y)6\p<ZnP/45&[!!fGR"Spk<h'Am'])L&esL_g%4eDnc>;0og^H%aF=Y/s;a`KGcH$R>T2N?RUp$)T,l=H!p&Br"Ip909U-SS(gfFX?'J7P#XC'_G'Pqlr0,*0OK(^2d58f@+al!Nu'%%3JY#5QkY&\Q_1%il!,.l)l"ti^(JT)@I(j,0Wj4&h-8%YqnmBOT5UCE"A]%r\Dcd,[7H.f+nD>0gZX/:HlNo3:I0R\(dnc(qK/S%m`;L3qph752D9qc996IQ6b1G*qC"nPQEdLd73S3MCQ+(A6rFBSS,l03AtY<IMGu!&hJIF_FIOiAYoGJK.>A)U2_iO!\dl41!]GWH%KIW6'>5e&.]G-?69+osk>%H\"f%<c`GJLHM*g8Y]X^N$"-<#`GSo7^;#,FBrAd/>AS+Xp9*e<$FOBMFO3u1s$qVh(g[-%(:MBO>+%D-[5f>sZ#[[rug?>=a0r(P1&2X:gb:UR2[iYDm3!1VtYJ@5Cc)7W<>OR%K4Ca\)C&m/gu>L&tdUST2dNONZbeCCuXAUoOY<6knaL%.e<r_l,;A+?l6di-^0*GW;[OZZtK*/O9gK6G"[><2>[SX=#?\o2VBP9mEpiN3/fu^'TF;Mg1FJ-L3Aif1m:*DCIlmC8Jr(-Mht3Q%2B!pjmK<&fpS::IZeNI4h5Lh0C:;?hZ";j7!.<:0B`V,chOu[@9HA6dHoNO0l'@+fd_#MbelCUi3\=r^_Xs-K3Re6rW5o?U:p`;1%SeOu0hBZTB+lbt-]:giB?c/0"n]Ktaq_Fb`P29HTD3A"s2ODWtm/hY).V#?US^C&9>BmC>^@3]m4c?`WIVjZ7lR`[s(@5r0fW(E,%^-jA5Zl/gM7!\]&L-36o"F?kS`"#i,DeOiDJc[d%;5DM`TbJ33_]%]08q^^/rOWZd,rgpNBbj7u?OU#K+D:t*.]*=#Lj;@'3NST:%o&A$[K82gOKrI0Oo;44;/g8IFP0rYd,ZSI9+];R=kGYG:0!*)?kgu':ZdWZ.DX5Vr4>j_s`nUW$Kmee@M_?u-@u^;Gs6[m\$<>6[%,#Xh#C'S[D.g7N/8q[*2,W1<8(Pb"6TY>>kBlmc$+V%T.f6CV'693"f>?puQq^^$"WAo"qN7Oh"k#VeQh.5neTgc]7cQ<@1^3h'-%hT*m:m]jm`Z<#fEIQ1:mcBq.i9b.tPd$@@;Z^]ED<W5\g2sBrr$I"T+Fag:/\_(ZeJ07IKN.RD3^g+Ma8"4q['./n^/\c\;]KZu=%:eW)\YKi;']L=[;fLDWhAZ6kB4YD%E@l=BCTR8O<69Wa-g?EA9O'[Ga7Bc,<&2Ze=4>`+^IKdhJ0A)m9e[D?H2r38aNf/eQKKVVT%^3K/hFbE7LS>1hI=,Uqkq0a>*,tB#3AOL[9GJ^==n_80R:Zk;/W\Z^^8<q,TRiadM$=@rBq0<i*OF"W8jIn:Lilua(giL#59?ctX%;ES!\Q_ufsAhaq.F917E*[\3%Xe0(+S(l\&N)0-!8%r(7"MqKZ4.;Ig&>fd*?&/M[XhKg)`L@C,)]^17j:8%T9Sq?`I0gEB)kll<%3L*CB?#otuQOf,9K;eJ4/7e&)HZRiNa)ii^Sk&/QM]=@$U/L:\g+G[$VKJ^;0\'CVbod;J+Zr`#g#r%7h(W-rZHQ4oX'q!KkU)6a%4b>G%#qOBMD3\DPrPWWCTB,6LI7+`8'oG'9Vjl1Ve=]9EY^-?a"l(Pi]QS&#..p'BB9)9BnRSY#<*U5P\"\KQ:/Rd1:3K&F,AO;(%?26:n>db^TOIg2H1`JD3$5:sh4?:o<((`&hH@T::R,]Dbr7B<$$8JH<"aa9+]0hF7KkL=!pIl',!1I\f8ZS>cN!LEp)4mQAe"U5.%NJQ1N%0_PU7_KOB2HIP#ro.tum^pfO;tMuA=XVV0\QjMUOfLFa5\E]K6O*#2DBn4$8bQ4e)BZf\TS.)$3-Pm<lVSEnEV`3VS<E:q%=lW',lX%iV!h_MZZPV[KEujaRAoUH^0cA,3'^kHle3,=NMAU0>F52YV8U+L/]3<QZr[2*1.+'q\h26AD*jI/O>o+SL(:t`DD[3+C%,*7i]rkV>.=A^gDgBUuJ*j]rHSBWW+`asf<1R^lpR1T`!6^+$n_TW@u49W_R9%.-U38"&U2fSE=_F'@PYour8ddcC7b8X@9Y:5E@%7OW>r$;/gfcfGC#[upd-c4>4g$?LDZN<igA#YEA3UI68u.JBjj&L5P*072R<1tCD=l;,m0F6LXb(Ag?>)7*68Q)^6og&CQRSTA'a%h2N8kX$B6,S$=C]I!:1&G`O6sckdFFq-f\Na$m0R#7mCag`o/:6o9IFNTgpA:8YCkC^O7+cn2-*P:2'84Zrjn%L#X&Z9FH,U*Y#\%.:bO4E*tpDfn<!fbj0hcC%qa(/Imp97-65GU>2B?15'UFW!HulIskhQdK73l8qQE[8qI$b;>q;./l3MIG2P'g`qP<V+)QV`MK?U]%J28Z6hJKhKhSYFj2fkZo1(V:)<<79mbfLlu%V%oip(/+`SS.09.mi%9W"[16X51@F@]8`43c5)KD:)c$[:mlOXrLp^H^F]3/\^A_%OZF+O3]1C),1Z^We%)m]&m6,VD^WNa%VMI?-\mR!Ql_lX1n5>UbM@D^/9%")]sD?>pc\(D1nt1C,denHCYt8L>Q-A2L0I2q9V"YE%j4T'#RVlsRHG>.e/<s9]O<e"T6[OZ_<6/U`0^4Y`*Xq[o-bEMJ_pXat]#CW=Z#)1)09g,Oio/Q5B!Q=\o.0/e4maMXM]u_#JF_;$%k5qY4hl+s#B3%+@iL)*Z2D4(,Xn$BH&AilS=^lW.o=:V"B9Xd@M!M/EpCaXJN'YY6qI;[Kphgi=d2G,nZJjJECXcHRO!5!Gr=(@6%L#R7\;lM1NK]'eh"]!2(hpD^g>ZRZ*R=-43W7MB+6Yk;B>#u/lhYa`NO@FIpJj/6qRLs(CqR%u%R?<kYDJt33o>YU7`b8\<&e_Kq%DDH7dhkNbj6t8\?<ks"LUlZJcmD9K(oIsN!_Xg<i4&:U$Z0eUZY'^g=,,\&ZYN9T9!1H<VOr9&W>S6h\p%uF9V:FAqW]gM87Z@G=%Zr#(d2FL'9n)!'h`a,iFSr(LH+9r+[NRdCRbu`X<i83Z2Ant;WNU.3napM,'^^$lkpH[an99qa_;.KujFh=,1Da[?A=CIAT28F^]%bY!gGQ`3;eQPPEHPuM9Qa=+//oJr[b&hV!lDc21Hs-YOmf#;K@^9O5cHT3%\NTg%Pa@.a%Vtgb1K,1,mg\-!<83Gc;125+:^L,$9%:+]L;YAR:r!Uh1^%hBpuX/!;V1;*4Ze!#GteXU7#C=Zu^1IpOFg6@m5I-Q#q[aCBGL0F(:+.s?f#'Jk&Tp5XkNU.QcN.?_CWf'kK%^3Z"Ak#:4e1(/A<pIXHn`[G)oJDl*kYlnOD8@#2*eI)-B+t7gHOtQP/JHC:[T8tC/V#+@8iU+2V(=DF#oM8XWU9B6Fi#X!m$s#*8%4XHb0(DL\"E`7WJWU7NrCY@$M[qAdL+!cHa"DtfomHCM/"l-Ol6^L3!0WZj5M(h-s]8SFZhUg0ANr.EJmO7&nE(<3WB[>-2BGf2W%,*,C^M[VKkPmpt)Q7]T+'0`H['b+V#(-*G[U3k?58SM]gXY:u!/i+Y].anI"'<Q55-VRGW<Nl#f^f8O,1Q(7U<#Dh(QrnD>N>*F>%PJ%UcD[u71>$o@J0Fqh-&@<<3<4HWb0X]?C<f!u9go+V%g*F.caS"@iiS-\A\Nn*r2/cEljPq]@e(ZJk,iVNlAL8p'o9D]71T(*f%>$dsG9^4X4gX/KFi@)-X4Qd4._q>`&@:,:;r&:1"7-V0EJ^b/>mtf&?E!:*5L"@>Z_$ug_l4gFh+HB^bJEcd^]FPgggoupsV-2W/%9GcNI*DPZ@/Yi20)8$BqLs;!=?dS&YL6+ucHr._[Jlkl]?O3:\>WJo*lOH/'XnAUIAlE<cRWbp1Thogqej&>K$:GJqNFTF?)4i:5%)fD3:bcc_g>?A>nU%S<M9-]_2,=D2u8JIl/Du]7SYQ"I'qlg%jpOE)-2uiO)5Q&]Sq<:tqqN&De]ANUc5Q'Yf0>IJ'Vn`+ahu(7(%rVW/Bs8MKepmXMIp:m,Iq>>Gdq!C<DnaHMIgX#ohJ,]C2MK6FO5Q7]jrT/P(X&&a[`H:;\~>%AI9_PrivateDataEnd